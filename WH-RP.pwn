/*
				Créditos al creador del GameMode: NaHu.
				Editores del GameMode: Arthur Wesker, Aruzat, Frankitoh.
				Encargado del PCU y demás cosas: Patrick Kelley.

*/
// Includes
#include <a_samp>
#include <a_zones>
#include <utils>
#include <streamer>
#include <a_mysql>
#include <seifader>
#include <progress2>
#include <mSelection>
#include <Mapas>
#include <Mapas2>
#include <Mapas3>
#include <Mapas4>
#include <Speedcap>
#include <AirBreak>
#include <dialogs2>
#include <Dini>
#include <bcrypt>

#define SQL_HOST "localhost"
#define SQL_USER "root"
#define SQL_PASS ""
#define SQL_DB "sigloxxi"

#define             COLOR_PIEL                  0xFFCC99FF
#define COLOR_PURPLE 0x800080AA
#define COLOR_PINK 0xFF66FFAA
#define COLOR_VIOLET 0x9955DEEE

//--------------------------------------------------
#define Funcion%0(%1) forward %0(%1); public %0(%1)

#define Holding(%0) \
        ((newkeys & (%0)) == (%0))
        
#define VERSION         0.0.1

#define GATES_CLOSED  	0
#define GATES_CLOSING  	1
#define GATES_OPEN    	2
#define GATES_OPENING   3

#define TITULO_BYC      	  50
#define DESCRIPCION_BYC       51
#define HECHOS_BYC		      52
#define VER_BYC               53
#define IMPRIMIR_BYC          54
#define ORDENADOR_PD          55
#define BUSCAR_NOMBRE         56
#define ACCESORIOS_MENU       57
#define EDITAR_CHALECO        58
#define EDITAR_GORRO          59
#define EDITAR_GAFAS          60
#define EDITAR_MANDIBULA      61
#define EDITAR_PERSONALIZADO  62
#define EDITAR_HUESO          63

#define BCRYPT_COST           12 //Bcrypt

#define CAMBIOSKIN2           65

#define AVISARPD              125

#define CABEZA          1
#define TORSO           2
#define ENTREPIERNA     3
#define BRAZODERECHO    4
#define BRAZOIZQUIERDO  5
#define PIERNADERECHA   6
#define PIERNAIZQUIERDA 7

//--------------------------------------------------
#define TIEMPO_AFK 300000 // 5 minutos en milisegundos.

new ApagandoFuego[MAX_PLAYERS];
new Float:Posiciones[MAX_PLAYERS][6];
new TAFK[MAX_PLAYERS];
//--------------------------------------------------
new Text3D:compra, Text3D:venta;
new Cajas1[MAX_VEHICLES], Cajas2[MAX_VEHICLES], Cajas3[MAX_VEHICLES], Cajas4[MAX_VEHICLES], Cajas5[MAX_VEHICLES], Cajas6[MAX_VEHICLES];
new ComproCajas[MAX_PLAYERS];
new CargasTotal, CargasTotalVendidas;
new Disparos[MAX_PLAYERS];

new PuertaAero[2];
new Peaje[7];
new Cerrados;

enum _vehDat
{
        _vehModel,
        Float:_attPos
}

new attInfo[212][_vehDat] =
{
        {400, 0.85},
        {401, 0.8},
        {402, 0.79},
        {403, 2.15},
        {404, -1.0},
        {405, 0.73},
        {406, -1.0},
        {407, -1.0},
        {408, -1.0},
        {409, 0.8},
        {410, 0.899999},
        {411, 0.699999},
        {412, 0.699999},
        {413, 1.149999},
        {414, 2.4},
        {415, 0.61},
        {416, -1.0},
        {417, -1.0},
        {418, 1.1},
        {419, 0.699999},
        {420, -1.0},
        {421, 0.699999},
        {422, -1.0},
        {423, -1.0},
        {424, -1.0},
        {425, -1.0},
        {426, 0.85},
        {427, -1.0},
        {428, 1.6},
        {429, -1.0},
        {430, -1.0},
        {431, -1.0},
        {432, -1.0},
        {433, -1.0},
        {434, 0.8},
        {435, -1.0},
        {436, 0.8},
        {437, -1.0},
        {438, -1.0},
        {439, -1.0},
        {440, 1.269999},
        {441, -1.0},
        {442, 0.92},
        {443, -1.0},
        {444, -1.0},
        {445, 0.86},
        {446, -1.0},
        {447, -1.0},
        {448, -1.0},
        {449, -1.0},
        {450, -1.0},
        {451, 0.569999},
        {452, -1.0},
        {453, -1.0},
        {454, -1.0},
        {455, -1.0},
        {456, -1.0},
        {457, -1.0},
        {458, 0.759999},
        {459, -1.0},
        {460, -1.0},
        {461, -1.0},
        {462, -1.0},
        {463, -1.0},
        {464, -1.0},
        {465, -1.0},
        {466, 0.86},
        {467, 0.86},
        {468, -1.0},
        {469, -1.0},
        {470, 1.1},
        {471, -1.0},
        {472, -1.0},
        {473, -1.0},
        {474, 0.839999},
        {475, 0.699999},
        {476, -1.0},
        {477, 0.699999},
        {478, -1.0},
        {479, 1.0},
        {480, -1.0},
        {481, -1.0},
        {482, 1.0},
        {483, 1.049999},
        {484, -1.0},
        {485, -1.0},
        {486, -1.0},
        {487, -1.0},
        {488, -1.0},
        {489, 1.1},
        {490, -1.0},
        {491, 0.699999},
        {492, 0.87},
        {493, -1.0},
        {494, 0.74},
        {495, 1.039999},
        {496, 0.839999},
        {497, -1.0},
        {498, -1.0},
        {499, -1.0},
        {500, 1.0},
        {501, -1.0},
        {502, -1.0},
        {503, -1.0},
        {504, 0.899999},
        {505, -1.0},
        {506, -1.0},
        {507, 0.81},
        {508, -1.0},
        {509, -1.0},
        {510, -1.0},
        {511, -1.0},
        {512, -1.0},
        {513, -1.0},
        {514, 1.549999},
        {515, 1.47},
        {516, 0.86},
        {517, 0.86},
        {518, 0.699999},
        {519, -1.0},
        {520, -1.0},
        {521, -1.0},
        {522, -1.0},
        {523, -1.0},
        {524, -1.0},
        {525, -1.0},
        {526, 0.68},
        {527, 0.85},
        {528, 1.1},
        {529, 0.92},
        {530, -1.0},
        {531, -1.0},
        {532, -1.0},
        {533, -1.0},
        {534, 0.649999},
        {535, -1.0},
        {536, -1.0},
        {537, -1.0},
        {538, -1.0},
        {539, -1.0},
        {540, 0.73},
        {541, 0.639999},
        {542, 0.85},
        {543, -1.0},
        {544, -1.0},
        {545, 0.769999},
        {546, 0.85},
        {547, 0.899999},
        {548, -1.0},
        {549, 0.709999},
        {550, 0.74},
        {551, 0.899999},
        {552, -1.0},
        {553, -1.0},
        {554, -1.0},
        {555, -1.0},
        {556, -1.0},
        {557, -1.0},
        {558, 0.87},
        {559, 0.759999},
        {560, 0.87},
        {561, 0.87},
        {562, 0.8},
        {563, -1.0},
        {564, -1.0},
        {565, 0.699999},
        {566, 0.85},
        {567, -1.0},
        {568, -1.0},
        {569, -1.0},
        {570, -1.0},
        {571, -1.0},
        {572, -1.0},
        {573, -1.0},
        {574, -1.0},
        {575, -1.0},
        {576, 0.899999},
        {577, -1.0},
        {578, -1.0},
        {579, 1.24},
        {580, 1.059999},
        {581, -1.0},
        {582, -1.0},
        {583, -1.0},
        {584, -1.0},
        {585, 1.0},
        {586, -1.0},
        {587, 0.73},
        {588, -1.0},
        {589, 1.1},
        {590, -1.0},
        {591, -1.0},
        {592, -1.0},
        {593, -1.0},
        {594, -1.0},
        {595, -1.0},
        {596, -1.0},
        {597, -1.0},
        {598, -1.0},
        {599, -1.0},
        {600, -1.0},
        {601, -1.0},
        {602, 0.709999},
        {603, 0.68},
        {604, -1.0},
        {605, -1.0},
        {606, -1.0},
        {607, -1.0},
        {608, -1.0},
        {609, -1.0},
        {610, -1.0},
        {611, -1.0}
};

enum _vehicleInfo
{
        attachObject,
        bool:useAttach
}

new vehicleInfo[MAX_VEHICLES][_vehicleInfo];

new CuentaCapo[MAX_VEHICLES], CuentaBaul[MAX_VEHICLES];
//--------------------------------------------------

#define MAX_DUDAS   100
enum dInfo
{
	dEstado,
	dPlayer,
	dTexto[254],
}
new Duda[MAX_DUDAS][dInfo], activasdudas, EnvieDuda[MAX_PLAYERS];

#define MAX_REPORTES   100
enum rInfo
{
	rEstado,
	rPlayer,
	rTexto[254],
}
new Reporte[MAX_REPORTES][rInfo], activosreportes, EnvieReporte[MAX_PLAYERS];
//--------------------------------------------------

#define MAX_INFORMES 51

enum iInfo
{
	iPaciente,
	iEstado,
	Float:iX,
	Float:iY,
	Float:iZ,
	iTimer,
	iMedico,
	iZona[128],
}
new Informes[MAX_INFORMES][iInfo];

//--------------------------------------------------

#define MAX_BUSCADOS 31

enum bInfo
{
	bCreado,
	bOficial[MAX_PLAYER_NAME],
	bTitulo[30],
	bDescripcion[50],
	bHechos[258],
	bTimer,
	bEliminando,
}
new Buscados[MAX_BUSCADOS][bInfo];
//---------------------------------------------------
new Timer_Telefono[MAX_PLAYERS];

new Viendo_ByC[MAX_PLAYERS];
new Crear[MAX_PLAYERS];
new EditandoFuego[MAX_PLAYERS];
new EditandoObjeto[MAX_PLAYERS];
//--------------------------------------------------
new LSPrisonWallsObject;
new LSPrisonGatesObject[4];
new EasternGatesStatus = GATES_CLOSED;
new SouthernGatesStatus = GATES_CLOSED;

new BalasActual[MAX_PLAYERS];
new Float:ChalecoActual[MAX_PLAYERS];

new Transmitir;

new CantidadLlenar[MAX_PLAYERS];
new PrecioLlenar[MAX_PLAYERS];

new DrogaOferta[MAX_PLAYERS];
new PrecioOferta[MAX_PLAYERS];
new Camello[MAX_PLAYERS];

static Hour, Minute, Second;

//----------- COLORES ----------------//

#define RojoIntenso         0xe70000FF
#define Rojo                0xFF6347AA
#define RojoOscuro          0x5b0000FF
#define Azul                0x1229FAFF
#define Amarillo            0xfce80cFF
#define AmarilloClaro       0xfdfe8bFF
#define Ocre                0xa8961FFA
#define Verde               0x1eb032FF
#define VerdeClaro          0x88dd88FF
#define VerdeOscuro         0x036611FF
#define Naranja             0xff9c00FF
#define NaranjaOscuro       0xb57c01FF
#define Fucsia              0xE800E877
#define Violeta             0x694cabFF
#define Gris                0xb0b0b0FF
#define GrisOscuro          0x666666FF
#define Blanco              0xFFFFFFFF
#define Invisible           0xFFFFFF00
#define Negro               0x000000FF
#define Marron              0x562C2CD2
#define AzulOscuro          0x004d9bFF
#define Azulito             0x77c7ffFF
#define Rosa                0xfcc1fdFF
#define COLOR_OOCA          0x7bb7b7FF // chat OOC
#define COLOR_OOCB          0x4c9e9eFF // chat OOC
#define COLOR_OOCC          0x2e8787FF // chat OOC
#define COLOR_OOCD          0x187373FF // chat OOC
#define COLOR_OOCE          0x0a5555FF // chat OOC
#define Chat1               0xE6E6E6E6
#define Chat2               0xC8C8C8C8
#define Chat3               0xAAAAAAFF
#define Chat4               0x8C8C8C8C
#define Chat5               0x6E6E6E6E
#define Celeste             0x33CCAAFF
#define Aguamarina          0x00fcffFF
#define AguamarinaOscuro    0x02b1afFF

#define COLOR_ROJO          0x9D4147E6
#define COLOR_ACCION        0xC2A2DAFF
#define COLOR_GREY          0xAFAFAFAA
#define COLOR_YELLOW        0xFCE80CAA
#define COLOR_DEP           0xFF8282FF
#define COLOR_PIEL          0xFFCC99FF
#define COLOR_GREEN         0x9EC73DAA
#define COLOR_VERDE         0x00CB002A
#define COLOR_GREENDO       0x99CC33AA
#define COLOR_GREEN2 		0x33AA33AA
#define COLOR_GREEN3        0x99FF33FF
#define COLOR_RADIO         0x9B9BFFFF

#define NOEXISTE (-1) //NOEXISTE

#define ADMIN_SPEC_TYPE_NONE	0 //Sistema RECON
#define ADMIN_SPEC_TYPE_PLAYER 	1
#define ADMIN_SPEC_TYPE_VEHICLE 2

#define MAX_SLOTS_INV 10
#define MAX_SLOTS_CT  6

#define MAX_DROP_ITEM 1000 //Máximo de objetos caídos en el suelo

#define MAX_CAR_DATA 105 //Máximo de coches de concesionario

#define MAX_VEHPUBLICO 119 //Vehículos de jobs y facciones

#define MAX_COPOBJS 300 //Máximo objetos de tráfico

#define MAX_HOUSES 1000 //Número máximo de casas

#define MAX_NEGS 200 //Número máximo de negocios

#define MIN_CAR_HEALTH 350 //Daños máximos que puede soportar un vehículo

#define MAX_FACCS 30 //Máximas facciones

#define MAX_PLANTACIONES 400 //Máximas plantaciones

#define MAX_LUGARESPINTAR 29 //Misiones de pintar

#define MAX_PING 600 //Máximo ping permitido

#define MAX_SALUDOS 7 //Comando /saludo

#define MAX_FUEGOS 1000

#define MAX_OBJETOS 3000

new Traficar[MAX_PLAYERS];
new Caja1[MAX_PLAYERS], Caja2[MAX_PLAYERS], PrecioT[MAX_PLAYERS], AhoraPuedeT[MAX_PLAYERS];

new AdminOculto[MAX_PLAYERS];
new ActivoAdmin[MAX_PLAYERS];
new ActivoPrivados[MAX_PLAYERS];
new ActivoFamilia[MAX_PLAYERS];
new Mascara[MAX_PLAYERS];
new autorizarswat;
new AhoraMorirTimer[MAX_PLAYERS];
new PuedeMorir[MAX_PLAYERS], ForzoMuerte[MAX_PLAYERS];
new PlayerText:Pantallazo[MAX_PLAYERS];
new Traficante[2];
new pickupnego[MAX_NEGS];
new virtualworldres[MAX_VEHICLES];
new resengine[MAX_VEHICLES],reslights[MAX_VEHICLES],resalarm[MAX_VEHICLES],resdoors[MAX_VEHICLES],resbonnet[MAX_VEHICLES],resboot[MAX_VEHICLES],resobjective[MAX_VEHICLES];
new Float:respawnx[MAX_VEHICLES], Float:respawny[MAX_VEHICLES], Float:respawnz[MAX_VEHICLES], Float:respawnrot[MAX_VEHICLES];
new MotorFeo[MAX_VEHICLES];
new SinSonido[MAX_VEHICLES];
new LuzSS[3][MAX_VEHICLES];
new Sirena[MAX_VEHICLES];
new Bombilla[MAX_VEHICLES];

new Text3D:veicolo_callsign_testo[MAX_VEHICLES];
new veicolo_callsign_status[MAX_VEHICLES];


//-------------------- ANIMACIONES ------------------------------------------------------------//
#define SPECIAL_ACTION_PISSING      68

//News
new gPlayerUsingLoopingAnim[MAX_PLAYERS];
new animation[200];
new ofertasaludo[MAX_PLAYERS];
new ofertacachear[MAX_PLAYERS];
new ofertabanco[MAX_PLAYERS];
new saludoid;
new idsaludado;

//Funciones
IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key)) return 1;
	return 0;
}

OnePlayAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
	ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp, 1);
	gPlayerUsingLoopingAnim[playerid] = 0;
	animation[playerid]++;
}

LoopingAnim(playerid,animlib[],animname[], Float:Speed, looping, lockx, locky, lockz, lp)
{
    gPlayerUsingLoopingAnim[playerid] = 1;
    ApplyAnimation(playerid, animlib, animname, Speed, looping, lockx, locky, lockz, lp, 1);
    animation[playerid]++;
}

StopLoopingAnim(playerid)
{
	if(gPlayerUsingLoopingAnim[playerid] != 0)
	{
		gPlayerUsingLoopingAnim[playerid] = 0;
	    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
    }
}

animstrtok(const string[], &index) //Ni puta idea
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}
/*--------------------------------------------------------*/
stock GetPlayerNameRPAnim(playerid) //Utilizar como *format(Nombre, sizeof(Nombre),"%s", GetPlayerNameRP(playerid));*
{
    new Name[MAX_PLAYER_NAME];
    if(IsPlayerConnected(playerid))
    {
        GetPlayerName(playerid, Name, sizeof(Name));
    }
    for(new name = 0; name < MAX_PLAYER_NAME; name++) if(Name[name] == '_') Name[name] = ' ';
    return Name;
}

//Comandos
Anims_OnPlayerCommandText(playerid, cmdtext[])
{
    new cmd[128];
    new tmp[128];
    new string[180];
    new animid;
    new dancestyle;
    new idx;
    cmd = animstrtok(cmdtext, idx);
    //----------COMANDOS ANIMACIONES----------//
	if(strcmp(cmd,"/animaciones",true)==0)
	{
		SendClientMessage(playerid,0x1eb032FF,"/rendirse /bebido /movil /cmovil /bomba /apuntar [1-3] /reir /tumbarse [1-5] /cubrirse /vomitar /comiendo /herido");
		SendClientMessage(playerid,0x1eb032FF,"/saludar [1-7] /trato /crack [1-8] /fumando [1-5] /sentarse [1-9] /gro /fucku /hablando /taichi /caer /muerto /cruzarbrazos [1-6]");
		SendClientMessage(playerid,0x1eb032FF,"/spray /medico /golpeado /cansado /saltovital /tortazo /rodar /cacheado /bate [1-2] /boxing /gritando /facepalm");
		SendClientMessage(playerid,0x1eb032FF,"/animar /esposado /pis /lanzar /basket [1-7] /caminar [1-11] /rascarse /apoyarse [1-2] /correr [1-6] /strip [1-7] /bailar /trafico [1-4]");
		SendClientMessage(playerid,0x1eb032FF,"/rifle /mecanico [1-2] /carga /bailoteo /consola /picado /barandilla [1-2] /llorar /bofetada /billar [1-3] /beso [1-2] /dedo");
		SendClientMessage(playerid,0x1eb032FF,"/azote [1-6] /masturb /chupete [1-12] /gangsta [1-16] /esquivard /esquivari /coche [1-7] /estilohablar [0-5]");
		SendClientMessage(playerid,0x1eb032FF,"/pescar /asustado /inquieto /patada /stopanim");
        return 1;
	}

	// Saludos
    if(strcmp(cmd,"/saludar",true)==0)
	{
        tmp = animstrtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Gris, "USO: /saludar [1-7]");
			return 1;
		}
		animid = strval(tmp);
    	switch(animid)
    	{
        	case 1: LoopingAnim(playerid,"GANGS","prtial_hndshk_biz_01",4.1,0,1,1,1,1);
        	case 2: LoopingAnim(playerid,"GANGS","hndshkcb",4.1,0,1,1,1,1);
        	case 3: LoopingAnim(playerid,"GANGS","hndshkea",4.1,0,1,1,1,1);
        	case 4: LoopingAnim(playerid,"GANGS","hndshkfa",4.1,0,1,1,1,1);
        	case 5: LoopingAnim(playerid,"GANGS","hndshkba",4.1,0,1,1,1,1);
        	case 6: LoopingAnim(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 1, 1);
        	case 7: LoopingAnim(playerid,"PED","endchat_03",4.1,0,1,1,1,1);
			default: SendClientMessage(playerid, Gris, "USO: /saludar [1-7]");
    	}
    	return 1;
    }
	if(strcmp(cmd,"/saludo",true)==0)
	{
		tmp = animstrtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Gris, "USO: /saludo [IdJugador/ParteDelNombre] [1-7]");
			return 1;
		}
		idsaludado = strval(tmp);
		tmp = animstrtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Gris, "USO: /saludo [IdJugador/ParteDelNombre] [1-7]");
			return 1;
		}
		new animid2 = strval(tmp);
		switch(animid2)
		{
			case 1:
			{
				ofertasaludo[idsaludado] = playerid;
				format(string,128,"Enviaste una petición de saludo a %s",GetPlayerNameRPAnim(idsaludado));
				SendClientMessage(playerid,AmarilloClaro,string);
				format(string,128,"%s te envió una petición de saludo, utiliza /aceptar saludo",GetPlayerNameRPAnim(playerid));
				SendClientMessage(idsaludado,AmarilloClaro,string);
				saludoid = 1;
			}
			case 2:
			{
				ofertasaludo[idsaludado] = playerid;
				format(string,128,"Enviaste una petición de saludo a %s",GetPlayerNameRPAnim(idsaludado));
				SendClientMessage(playerid,AmarilloClaro,string);
				format(string,128,"%s te envió una petición de saludo, utiliza /aceptar saludo",GetPlayerNameRPAnim(playerid));
				SendClientMessage(idsaludado,AmarilloClaro,string);
				saludoid = 2;
			}
			case 3:
			{
				ofertasaludo[idsaludado] = playerid;
				format(string,128,"Enviaste una petición de saludo a %s",GetPlayerNameRPAnim(idsaludado));
				SendClientMessage(playerid,AmarilloClaro,string);
				format(string,128,"%s te envió una petición de saludo, utiliza /aceptar saludo",GetPlayerNameRPAnim(playerid));
				SendClientMessage(idsaludado,AmarilloClaro,string);
				saludoid = 3;
			}
			case 4:
			{
				ofertasaludo[idsaludado] = playerid;
				format(string,128,"Enviaste una petición de saludo a %s",GetPlayerNameRPAnim(idsaludado));
				SendClientMessage(playerid,AmarilloClaro,string);
				format(string,128,"%s te envió una petición de saludo, utiliza /aceptar saludo",GetPlayerNameRPAnim(playerid));
				SendClientMessage(idsaludado,AmarilloClaro,string);
				saludoid = 4;
			}
			case 5:
			{
				ofertasaludo[idsaludado] = playerid;
				format(string,128,"Enviaste una petición de saludo a %s",GetPlayerNameRPAnim(idsaludado));
				SendClientMessage(playerid,AmarilloClaro,string);
				format(string,128,"%s te envió una petición de saludo, utiliza /aceptar saludo",GetPlayerNameRPAnim(playerid));
				SendClientMessage(idsaludado,AmarilloClaro,string);
				saludoid = 5;
			}
			case 6:
			{
				ofertasaludo[idsaludado] = playerid;
				format(string,128,"Enviaste una petición de saludo a %s",GetPlayerNameRPAnim(idsaludado));
				SendClientMessage(playerid,AmarilloClaro,string);
				format(string,128,"%s te envió una petición de saludo, utiliza /aceptar saludo",GetPlayerNameRPAnim(playerid));
				SendClientMessage(idsaludado,AmarilloClaro,string);
				saludoid = 6;
			}
			case 7:
			{
				ofertasaludo[idsaludado] = playerid;
				format(string,128,"Enviaste una petición de saludo a %s",GetPlayerNameRPAnim(idsaludado));
				SendClientMessage(playerid,AmarilloClaro,string);
				format(string,128,"%s te envió una petición de saludo, utiliza /aceptar saludo",GetPlayerNameRPAnim(playerid));
				SendClientMessage(idsaludado,AmarilloClaro,string);
				saludoid = 7;
			}
			default: SendClientMessage(playerid, Gris, "USO: /saludo [IdJugador/ParteDelNombre] [1-7]");
		}
		return 1;
	}


	// Carga
 	if(strcmp(cmd, "/carga", true) == 0) {
		LoopingAnim(playerid,"CARRY","crry_prtial",4.1,0,1,1,1,1);
        return 1;
    }
	// Esquivar izquierda
	if(strcmp(cmd, "/esquivari", true) == 0) {
		LoopingAnim(playerid,"ped","Crouch_Roll_L",4.1,0,1,1,1,1);
        return 1;
    }
	// Esquivar derecha
	if(strcmp(cmd, "/esquivard", true) == 0) {
		LoopingAnim(playerid,"ped","Crouch_Roll_R",4.1,0,1,1,1,1);
        return 1;
    }
    // Llorar
 	if(strcmp(cmd, "/llorar", true) == 0) {
		LoopingAnim(playerid,"GRAVEYARD","mrnF_loop",4.1,1,1,1,1,1);
        return 1;
    }
    // patada
 	if(strcmp(cmd, "/patada", true) == 0) {
		LoopingAnim(playerid,"POLICE", "Door_Kick", 4.1, 0, 1, 1, 1, 1);
        return 1;
    }
    // Inquieto
 	if(strcmp(cmd, "/inquieto", true) == 0) {
		LoopingAnim(playerid,"ped", "XPRESSscratch", 4.1, 0, 1, 1, 1, 1);
        return 1;
    }
    // Asustado
 	if(strcmp(cmd, "/asustado", true) == 0) {
		LoopingAnim(playerid,"ped", "handscower", 4.1, 0, 1, 1, 1, 1);
        return 1;
    }
    // Llorar
 	if(strcmp(cmd, "/pescar", true) == 0) {
		LoopingAnim(playerid,"SAMP", "FishingIdle", 4.1, 0, 1, 1, 1, 1);
        return 1;
    }
    // Masturb
 	if(strcmp(cmd, "/masturb", true) == 0) {
		LoopingAnim(playerid,"PAULNMAC","wank_loop",4.1,1,1,1,1,1);
        return 1;
    }
    // Bofetada
 	if(strcmp(cmd, "/bofetada", true) == 0) {
		LoopingAnim(playerid,"MISC","bitchslap",4.1,1,0,0,1,1);
        return 1;
    }
    // Facepalm
 	if(strcmp(cmd, "/facepalm", true) == 0) {
		LoopingAnim(playerid,"MISC","plyr_shkhead",4.1,0,0,0,0,0);
        return 1;
    }
    // Barandilla
    if(!strcmp(cmd, "/barandilla", true))
	{
		tmp = animstrtok(cmdtext, idx);
		animid = strval(tmp);
		if(!strlen(tmp)||animid < 1 || animid > 2)
		{
			SendClientMessage(playerid, Gris, "USO: /barandilla [1-2]");
			return 1;
		}
		switch(animid)
		{
			case 1: LoopingAnim(playerid,"WEAPONS","SHP_Tray_Pose",4.1,1,1,1,1,1);
			case 2: LoopingAnim(playerid,"BD_FIRE","BD_Panic_Loop",4.1,1,1,1,1,1);
		}
  		return 1;
	}
    /*// Picado
 	if(strcmp(cmd, "/picado", true) == 0) {
		LoopingAnim(playerid,"DAM_JUMP","DAM_Launch",4.1,0,1,1,1,1);
        return 1;
    }*/

	// Rendirse
 	if(strcmp(cmd, "/rendirse", true) == 0) {
		LoopingAnim(playerid, "ROB_BANK","SHP_HandsUp_Scr", 4.0, 0, 1, 1, 1, 1);
        return 1;
    }

	// Rifle
 	if(strcmp(cmd, "/rifle", true) == 0) {
		LoopingAnim(playerid,"BUDDY","buddy_reload",4.1,0,1,1,1,1);
        return 1;
    }

    // Movil
 	if(strcmp(cmd, "/movil", true) == 0) {
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
        return 1;
    }

    // Colgar movil
 	if(strcmp(cmd, "/cmovil", true) == 0) {
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
        return 1;
    }

    // Bebido
    if(strcmp(cmd, "/bebido", true) == 0) {
		LoopingAnim(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1);
		return 1;
    }

	// Bomba
    if (strcmp("/bomba", cmdtext, true) == 0) {
		ClearAnimations(playerid);
		LoopingAnim(playerid, "BOMBER","BOM_Plant_Loop",4.0,1,0,0,1,1);
		return 1;
    }
	// Reir
    if (strcmp("/reir", cmdtext, true) == 0) {
          LoopingAnim(playerid, "RAPPING", "Laugh_01", 4.0, 1, 1, 1, 1, 1);
		  return 1;
	}
    // Brazos
    if(!strcmp(cmd, "/cruzarbrazos", true))
	{
	tmp = animstrtok(cmdtext, idx);
	animid = strval(tmp);
	if(!strlen(tmp)||animid < 1 || animid > 6)
		{
		SendClientMessage(playerid, Gris, "USO: /cruzarbrazos [1-6]");
		return 1;
	}
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"CASINO","cards_in",4.1,0,1,1,1,1);
		case 2: LoopingAnim(playerid,"COP_AMBIENT","Coplook_shake",4.1,0,1,1,1,1);
		case 3: LoopingAnim(playerid,"COP_AMBIENT","Coplook_think",4.1,0,1,1,1,1);
		case 4: LoopingAnim(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,1,1,1,1);
		case 5: LoopingAnim(playerid,"DEALER","DEALER_IDLE",4.1,0,1,1,1,1);
		case 6: LoopingAnim(playerid,"GRAVEYARD","prst_loopa",4.1,0,1,1,1,1);
	}

	return 1;
}
	// Esconderse
    if (strcmp("/cubrirse", cmdtext, true) == 0) {
          LoopingAnim(playerid, "ped", "cower", 4.0, 0, 1, 1, 1, 1);
		  return 1;
	}
	// Vomitar
    if (strcmp("/vomitar", cmdtext, true) == 0) {
	      LoopingAnim(playerid, "FOOD", "EAT_Vomit_P", 4.0, 0, 1, 1, 1, 1);
		  return 1;
	}
	// Comiendo
    if (strcmp("/comiendo", cmdtext, true) == 0) {
	      LoopingAnim(playerid, "FOOD", "EAT_Burger", 4.0, 0, 1, 1, 1, 1);
		  return 1;
	}
	// Trato
    if (strcmp("/trato", cmdtext, true) == 0) {
          LoopingAnim(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 1, 1, 1, 1);
		  return 1;
	}
	// Crack
	if(strcmp(cmd, "/crack", true) == 0)
    {
        if (!strlen(cmdtext[7])) { SendClientMessage(playerid, Gris, "USO: /crack [1-8]"); return 1; }
    	switch (cmdtext[7])
    	{
        	case '1': LoopingAnim(playerid,"CRACK","crckdeth1",4.1,0,1,1,1,1);
        	case '2': LoopingAnim(playerid,"CRACK","crckdeth2",4.1,1,0,0,1,1);
        	case '3': LoopingAnim(playerid,"CRACK","crckdeth3",4.1,0,1,1,1,1);
			case '4': LoopingAnim(playerid,"CRACK","crckdeth4",4.1,0,1,1,1,1);
			case '5': LoopingAnim(playerid,"CRACK","crckidle1",4.1,1,1,1,1,1);
			case '6': LoopingAnim(playerid,"CRACK","crckidle2",4.1,1,0,0,1,1);
			case '7': LoopingAnim(playerid,"CRACK","crckidle3",4.1,0,1,1,1,1);
			case '8': LoopingAnim(playerid,"CRACK","crckidle4",4.1,1,0,0,1,1);
        	default: SendClientMessage(playerid, Gris, "USO: /crack [1-8]");
    	}
    	return 1;
    }
	// Fumar
	if(strcmp(cmd, "/fumando", true) == 0)
    {
        if (!strlen(cmdtext[9])) { SendClientMessage(playerid, Gris, "USO: /fumando [1-5]"); return 1; }
    	switch (cmdtext[9])
    	{
        	case '1': LoopingAnim(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 1, 1, 1);
        	case '2': LoopingAnim(playerid,"SMOKING","M_smkstnd_loop", 4.0, 1, 0, 1, 1, 1);
        	case '3': LoopingAnim(playerid,"SMOKING","M_smk_out", 4.0, 0, 0, 1, 1, 1);
			case '4': LoopingAnim(playerid,"SMOKING","M_smk_in",4.0,0,1,1,1,1);
			case '5': LoopingAnim(playerid,"GANGS","smkcig_prtl",4.1,1,1,1,1,1);
        	default: SendClientMessage(playerid, Gris, "USO: /fumando [1-5]");
    	}
    	return 1;
    }
    // Sentarse
	if(strcmp(cmd, "/sentarse", true) == 0)
    {
        if (!strlen(cmdtext[10])) { SendClientMessage(playerid, Gris, "USO: /sentarse [1-9]"); return 1; }
    	switch (cmdtext[10])
    	{
        	case '1': LoopingAnim(playerid,"Attractors","Stepsit_in",4.1,0,0,0,1,1);
        	case '2': LoopingAnim(playerid,"Attractors","Stepsit_out",4.1,0,1,1,1,1);
        	case '3': LoopingAnim(playerid,"FOOD","FF_Sit_Eat3",4.1,0,0,0,1,1);
        	case '4': LoopingAnim(playerid,"FOOD","FF_Sit_In",4.1,0,0,0,1,1);
        	case '5': LoopingAnim(playerid,"FOOD","FF_Sit_In_L",4.1,0,0,0,1,1);
        	case '6': LoopingAnim(playerid,"FOOD","FF_Sit_In_R",4.1,0,0,0,1,1);
        	case '7': LoopingAnim(playerid,"PED","SEAT_down",4.1,0,0,0,1,1);
        	case '8': LoopingAnim(playerid,"INT_HOUSE","LOU_In",4.1,0,0,0,1,1);
        	case '9': LoopingAnim(playerid,"MISC","SEAT_LR",4.1,0,1,1,1,1);
        	default: SendClientMessage(playerid, Gris, "USO: /sentarse [1-9]");
    	}
    	return 1;
    }

    // Gro
    if (strcmp("/gro", cmdtext, true) == 0) {
          LoopingAnim(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 1, 1, 1);
		  return 1;
    }
    // Hablando
    if(strcmp(cmd, "/hablando", true) == 0) {
		 LoopingAnim(playerid,"PED","IDLE_CHAT",4.0,1,0,0,1,1);
         return 1;
    }
    // Fucku
    if(strcmp(cmd, "/fucku", true) == 0) {
		 LoopingAnim(playerid,"PED","fucku",4.0,0,0,0,1,1);
         return 1;
    }
    // TaiChi
    if(strcmp(cmd, "/taichi", true) == 0) {
		 LoopingAnim(playerid,"PARK","Tai_Chi_Loop",4.0,1,1,1,1,1);
         return 1;
    }
    // Caer
    if(strcmp(cmd, "/caer", true) == 0) {
		 LoopingAnim(playerid,"PED","KO_skid_front",4.1,0,1,1,1,1);
         return 1;
    }

    // Haciendose el muerto
    if(strcmp(cmd, "/muerto", true) == 0) {
		 LoopingAnim(playerid, "PED","FLOOR_hit_f", 4.0,0,1,1,1,1);
         return 1;
    }

    // Herido
    if(strcmp(cmd, "/herido", true) == 0) {
		 LoopingAnim(playerid, "SWEET", "Sweet_injuredloop", 4.0, 1, 0, 1, 1, 1);
         return 1;
    }

    // Gangster nigga!
    if(!strcmp(cmd, "/gangsta", true))
	{
	tmp = animstrtok(cmdtext, idx);
	animid = strval(tmp);
	if(!strlen(tmp)||animid < 1 || animid > 16)
		{
		SendClientMessage(playerid, Gris, "USO: /gangsta [1-16]");
		return 1;
	}
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"RAPPING","RAP_A_Loop",4.0,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"RAPPING","RAP_C_Loop",4.0,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"GHANDS","gsign2",4.1,0,1,1,1,1);
		case 4: LoopingAnim(playerid,"GHANDS","gsign2LH",4.1,0,1,1,1,1);
		case 5: LoopingAnim(playerid,"GHANDS","gsign3",4.1,0,1,1,1,1);
		case 6: LoopingAnim(playerid,"GHANDS","gsign3LH",4.1,0,1,1,1,1);
		case 7: LoopingAnim(playerid,"GHANDS","gsign4",4.1,0,1,1,1,1);
		case 8: LoopingAnim(playerid,"GHANDS","gsign4LH",4.1,0,1,1,1,1);
		case 9: LoopingAnim(playerid,"GHANDS","gsign5",4.1,0,1,1,1,1);
		case 10: LoopingAnim(playerid,"GHANDS","gsign5LH",4.1,0,1,1,1,1);
		case 11: LoopingAnim(playerid,"benchpress","gym_bp_celebrate",4.1,0,1,1,1,1);
		case 12: LoopingAnim(playerid,"LOWRIDER","prtial_gngtlkG",4.1,0,1,1,1,1);
		case 13: LoopingAnim(playerid,"RIOT","RIOT_ANGRY",4.1,0,1,1,1,1);
		case 14: LoopingAnim(playerid,"RIOT","RIOT_challenge",4.1,0,1,1,1,1);
		case 15: LoopingAnim(playerid,"RAPPING","RAP_B_Loop",4.1,1,1,1,1,1);
		case 16: LoopingAnim(playerid,"SCRATCHING","scdrulp",4.1,1,0,0,1,1);
	}

	return 1;
}
// Chupete
    if(!strcmp(cmd, "/chupete", true))
	{
	tmp = animstrtok(cmdtext, idx);
	animid = strval(tmp);
	if(!strlen(tmp)||animid < 1 || animid > 12)
		{
		SendClientMessage(playerid, Gris, "USO: /chupete [1-12]");
		return 1;
	}
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_START_P",4.1,0,1,1,1,1);
		case 2: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_END_P",4.1,0,1,1,1,1);
		case 4: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_START_W",4.1,0,1,1,1,1);
		case 5: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_W",4.1,1,1,1,1,1);
		case 6: LoopingAnim(playerid,"BLOWJOBZ","BJ_COUCH_END_W",4.1,0,1,1,1,1);
		case 7: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_START_P",4.1,0,1,1,1,1);
		case 8: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_LOOP_P",4.1,1,1,1,1,1);
		case 9: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_END_P",4.1,0,1,1,1,1);
		case 10: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_START_W",4.1,0,1,1,1,1);
		case 11: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_LOOP_W",4.1,1,1,1,1,1);
		case 12: LoopingAnim(playerid,"BLOWJOBZ","BJ_STAND_END_W",4.1,0,1,1,1,1);
	}

	return 1;
}

    // Spray
    if(strcmp(cmd, "/spray", true) == 0) {
		 LoopingAnim(playerid,"SPRAYCAN","spraycan_full",4.0,1,1,1,1,1);
         return 1;
    }

    // Medico
    if(strcmp(cmd, "/medico", true) == 0) {
		 LoopingAnim(playerid,"MEDIC","CPR",4.0,0,0,0,0,0);
         return 1;
    }

    // KO
    if(strcmp(cmd, "/golpeado", true) == 0) {
		 LoopingAnim(playerid,"PED","KO_shot_face",4.0,0,1,1,1,1);
         return 1;
    }

	// Salto de vital importancia.
    if(strcmp(cmd, "/saltovital", true) == 0) {
		 LoopingAnim(playerid,"PED","EV_dive",4.0,0,1,1,1,1);
         return 1;
    }

    // Cansado
    if(strcmp(cmd, "/cansado", true) == 0) {
		 LoopingAnim(playerid,"PED","IDLE_tired",4.0,1,0,1,1,1);
         return 1;
    }

    // Tortazo
    if(strcmp(cmd, "/tortazo", true) == 0) {
		 OnePlayAnim(playerid,"PED","BIKE_elbowL",4.0,0,0,0,0,0);
         return 1;
    }

    // Rodar
    if(strcmp(cmd, "/rodar", true) == 0) {
		 LoopingAnim(playerid,"PED","BIKE_fallR",4.0,0,1,1,1,1);
         return 1;
    }

    // Cacheado
    if(strcmp(cmd, "/cacheado", true) == 0) {
		 LoopingAnim(playerid,"POLICE","crm_drgbst_01",4.0,0,1,1,1,1);
         return 1;
    }

    // Bate
    if(!strcmp(cmd, "/bate", true))
	{
	tmp = animstrtok(cmdtext, idx);
	animid = strval(tmp);
	if(!strlen(tmp)||animid < 1 || animid > 2)
		{
		SendClientMessage(playerid, Gris, "USO: /bate [1-2]");
		return 1;
	}
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"CRACK","Bbalbat_Idle_01",4.1,0,1,1,1,1);
		case 2: LoopingAnim(playerid,"CRACK","Bbalbat_Idle_02",4.1,0,1,1,1,1);
	}

	return 1;
}

    // Boxing
    if(strcmp(cmd, "/boxing", true) == 0) {
		 LoopingAnim(playerid,"GYMNASIUM","GYMshadowbox",4.0,1,1,1,1,1);
         return 1;
    }

    // Animar
    if(strcmp(cmd, "/animar", true) == 0) {
		 LoopingAnim(playerid,"RIOT","RIOT_CHANT",4.0,1,1,1,1,1);
         return 1;
    }

    // Dedo
    if(strcmp(cmd, "/dedo", true) == 0) {
		 OnePlayAnim(playerid,"RIOT","RIOT_FUKU",4.0,0,0,0,0,0);
         return 1;
    }

    // Gritando
    if(strcmp(cmd, "/gritando", true) == 0) {
		 LoopingAnim(playerid,"RIOT","RIOT_shout",4.0,1,1,1,1,1);
         return 1;
    }

    // Esposado
    if(strcmp(cmd, "/esposado", true) == 0) {
		 LoopingAnim(playerid,"SWORD","sword_block",50.0,0,1,1,1,1);
         return 1;
    }

    // Lanzar
    if(strcmp(cmd, "/lanzar", true) == 0) {
		 LoopingAnim(playerid,"GRENADE","WEAPON_throwu",4.0,0,1,1,1,0);
         return 1;
    }

	// Mear
    if(strcmp(cmd, "/pis", true) == 0) {
		 SetPlayerSpecialAction(playerid, SPECIAL_ACTION_PISSING);
         return 1;
    }

    // Basket-ball
    if(strcmp(cmd, "/basket", true) == 0)
    {
        if (!strlen(cmdtext[8])) { SendClientMessage(playerid, Gris, "USO: /basket [1-7]"); return 1; }
    	switch (cmdtext[8])
    	{
        	case '4': LoopingAnim(playerid,"BSKTBALL","BBALL_def_loop",4.1,1,1,1,1,1);
        	case '5': LoopingAnim(playerid,"BSKTBALL","BBALL_Dnk",4.1,0,1,1,1,1);
        	case '6': LoopingAnim(playerid,"BSKTBALL","BBALL_idle",4.1,1,1,1,1,1);
        	case '7': LoopingAnim(playerid,"BSKTBALL","BBALL_idle2",4.1,1,1,1,1,1);
        	case '2': LoopingAnim(playerid,"BSKTBALL","BBALL_idleloop",4.1,1,1,1,1,1);
        	case '3': OnePlayAnim(playerid,"BSKTBALL","BBALL_Jump_Shot",4.1,0,0,0,0,0);
        	case '1': LoopingAnim(playerid,"BSKTBALL","BBALL_run",4.1,1,1,0,1,1);
        	default: SendClientMessage(playerid, Gris, "USO: /basket [1-7]");
    	}
    	return 1;
    }

    // Caminar (Estilos)
    if(!strcmp(cmd, "/caminar", true))
	{
	tmp = animstrtok(cmdtext, idx);
	animid = strval(tmp);
	if(!strlen(tmp)||animid < 1 || animid > 11)
		{
		SendClientMessage(playerid, Gris, "USO: /caminar [1-11]");
		return 1;
	}
	switch(animid)
	{
		case 4: LoopingAnim(playerid,"FAT","FatWalk",4.1,1,1,1,1,1);
		case 1: LoopingAnim(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
		case 5: LoopingAnim(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
		case 6: LoopingAnim(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
		case 7: LoopingAnim(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
		case 8: LoopingAnim(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
		case 9: LoopingAnim(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
		case 10: LoopingAnim(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
		case 11: LoopingAnim(playerid,"POOL","POOL_Walk",4.1,1,1,1,1,1);
	}

	return 1;
}
// Azotes
    if(!strcmp(cmd, "/azote", true))
	{
	tmp = animstrtok(cmdtext, idx);
	animid = strval(tmp);
	if(!strlen(tmp)||animid < 1 || animid > 6)
		{
		SendClientMessage(playerid, Gris, "USO: /azote [1-6]");
		return 1;
	}
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"SNM","SPANKINGP",4.1,1,0,0,1,1);
		case 2: LoopingAnim(playerid,"SNM","SPANKEDW",4.1,1,0,0,1,1);
		case 3: LoopingAnim(playerid,"SNM","SPANKING_ENDP",4.1,0,0,0,1,1);
		case 4: LoopingAnim(playerid,"SNM","SPANKEDP",4.1,1,0,0,1,1);
		case 5: LoopingAnim(playerid,"SNM","SPANKINGW",4.1,1,0,0,1,1);
		case 6: LoopingAnim(playerid,"SNM","SPANKING_ENDW",4.1,0,0,0,1,1);
	}

	return 1;
}
// Trafico
    if(!strcmp(cmd, "/trafico", true))
	{
	tmp = animstrtok(cmdtext, idx);
	animid = strval(tmp);
	if(!strlen(tmp)||animid < 1 || animid > 4)
		{
		SendClientMessage(playerid, Gris, "USO: /trafico [1-4]");
		return 1;
	}
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"POLICE","CopTraf_Away",4.1,1,0,0,1,1);
		case 2: LoopingAnim(playerid,"POLICE","CopTraf_Come",4.1,1,0,0,1,1);
		case 3: LoopingAnim(playerid,"POLICE","CopTraf_Left",4.1,1,0,0,1,1);
		case 4: LoopingAnim(playerid,"POLICE","CopTraf_Stop",4.1,1,0,0,1,1);
	}

	return 1;
}


    // Apuntar
    if(strcmp(cmd, "/apuntar", true) == 0)
    {
        if (!strlen(cmdtext[9])) { SendClientMessage(playerid, Gris, "USO: /apuntar [1-3]"); return 1; }
    	switch (cmdtext[9])
    	{
        	case '1': LoopingAnim(playerid,"SHOP","ROB_Loop_Threat",4.1,1,0,0,1,1);
        	case '2': LoopingAnim(playerid,"ped", "ARRESTgun", 4.0,0,1,1,1,1);
        	case '3': LoopingAnim(playerid,"SHOP","SHP_Gun_Aim",4.1,1,0,0,1,1);
        	default: SendClientMessage(playerid, Gris, "USO: /apuntar [1-3]");
    	}
    	return 1;
    }

    // Apoyarse
    if(strcmp(cmd, "/apoyarse", true) == 0)
    {
        if (!strlen(cmdtext[10])) { SendClientMessage(playerid, Gris, "USO: /apoyarse [1-2]"); return 1; }
    	switch (cmdtext[10])
    	{
        	case '1': LoopingAnim(playerid,"GANGS","leanIDLE",4.0,1,0,1,1,1);
        	case '2': LoopingAnim(playerid,"MISC","Plyrlean_loop",4.0,1,1,1,1,1);
        	default: SendClientMessage(playerid, Gris, "USO: /apoyarse [1-2]");
    	}
    	return 1;
    }

    // Beso
    if(strcmp(cmd, "/beso", true) == 0)
    {
        if (!strlen(cmdtext[6])) { SendClientMessage(playerid, Gris, "USO: /beso [1-2]"); return 1; }
    	switch (cmdtext[6])
    	{
        	case '1': LoopingAnim(playerid,"KISSING","Grlfrd_Kiss_03",4.1,0,0,0,1,1);
        	case '2': LoopingAnim(playerid,"KISSING","Playa_Kiss_03",4.1,0,0,0,1,1);
        	default: SendClientMessage(playerid, Gris, "USO: /beso [1-2]");
    	}
    	return 1;
    }
    // Billar
    if(strcmp(cmd, "/billar", true) == 0)
    {
        if (!strlen(cmdtext[8])) { SendClientMessage(playerid, Gris, "USO: /billar [1-3]"); return 1; }
    	switch (cmdtext[8])
    	{
        	case '1': LoopingAnim(playerid,"POOL","POOL_Idle_Stance",4.1,0,1,1,1,1);
        	case '2': LoopingAnim(playerid,"POOL","POOL_Med_Start",4.1,0,1,1,1,1);
        	case '3': LoopingAnim(playerid,"POOL","POOL_Med_Shot",4.1,0,1,1,1,1);
        	default: SendClientMessage(playerid, Gris, "USO: /billar [1-3]");
    	}
    	return 1;
    }

    // Correr (Estilos)
    if(!strcmp(cmd, "/correr", true))
	{
	tmp = animstrtok(cmdtext, idx);
	animid = strval(tmp);
	if(!strlen(tmp)||animid < 1 || animid > 6)
		{
		SendClientMessage(playerid, Gris, "USO: /correr [1-6]");
		return 1;
	}
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"PED","run_civi",4.1,1,1,1,1,1);
		case 2: LoopingAnim(playerid,"PED","run_gang1",4.1,1,1,1,1,1);
		case 3: LoopingAnim(playerid,"PED","run_old",4.1,1,1,1,1,1);
		case 4: LoopingAnim(playerid,"PED","run_fat",4.1,1,1,1,1,1);
		case 5: LoopingAnim(playerid,"PED","woman_run",4.1,1,1,1,1,1);
		case 6: LoopingAnim(playerid,"PED","WOMAN_runsexy",4.1,1,1,1,1,1);
	}

	return 1;
}

	// Stop
    if(strcmp(cmd, "/stopanim", true) == 0) {
		 ClearAnimations(playerid);
         OnePlayAnim(playerid, "CARRY", "crry_prtial", 1.0, 0, 0, 0, 0, 0);
         return 1;
    }

	// Cuyons
    if(strcmp(cmd, "/rascarse", true) == 0) {
		 LoopingAnim(playerid,"MISC","Scratchballs_01",4.1,1,1,1,1,1);
         return 1;
    }

    // Strip
    if(strcmp(cmd, "/strip", true) == 0)
    {
        if (!strlen(cmdtext[7])) { SendClientMessage(playerid, Gris, "USO: /strip [1-7]"); return 1; }
    	switch (cmdtext[7])
    	{
        	case '1', 'A': LoopingAnim(playerid,"STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1 );
        	case '2', 'B': LoopingAnim(playerid,"STRIP", "strip_B", 4.1, 1, 1, 1, 1, 1 );
        	case '3', 'C': LoopingAnim(playerid,"STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1 );
        	case '4', 'D': LoopingAnim(playerid,"STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1 );
        	case '5', 'E': LoopingAnim(playerid,"STRIP", "strip_E", 4.1, 1, 1, 1, 1, 1 );
        	case '6', 'F': LoopingAnim(playerid,"STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1 );
        	case '7', 'G': LoopingAnim(playerid,"STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1 );
        	default: SendClientMessage(playerid, Gris, "USO: /strip [1-7]");
    	}
    	return 1;
    }

    // Tumbarse (Estilos)
    if(!strcmp(cmd, "/tumbarse", true))
	{
	tmp = animstrtok(cmdtext, idx);
	animid = strval(tmp);
	if(!strlen(tmp)||animid < 1 || animid > 5)
		{
		SendClientMessage(playerid, Gris, "USO: /tumbarse [1-5]");
		return 1;
	}
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"BEACH","bather",4.1,0,1,1,1,1);
		case 2: LoopingAnim(playerid,"BEACH","Lay_Bac_Loop",4.1,0,1,1,1,1);
		case 3: LoopingAnim(playerid,"BEACH","BD_Fire3",4.1,0,1,1,1,1);
		case 4: LoopingAnim(playerid,"BEACH","ParkSit_W_loop",4.1,0,1,1,1,1);
	    case 5: LoopingAnim(playerid,"BEACH","SitnWait_loop_W",4.1,0,1,1,1,1);
	}

	return 1;
}

    // Coche
    if(!strcmp(cmd, "/coche", true))
	{
	tmp = animstrtok(cmdtext, idx);
	animid = strval(tmp);
	if(!strlen(tmp)||animid < 1 || animid > 7)
		{
		SendClientMessage(playerid, Gris, "USO: /coche [1-7]");
		return 1;
	}
	switch(animid)
	{
		case 1: OnePlayAnim(playerid,"CAR","Sit_relaxed",4.1,0,0,0,1,0);
		case 2: OnePlayAnim(playerid,"LOWRIDER","lrgirl_hair",4.1,0,0,0,1,0);
		case 3: OnePlayAnim(playerid,"GHETTO_DB","GDB_Car2_PLY",4.1,1,0,0,1,0);
		case 4: LoopingAnim(playerid,"GHETTO_DB","GDB_Car_RYD",4.1,0,0,0,1,0);
	    case 5: OnePlayAnim(playerid,"LOWRIDER","lrgirl_l0_loop",4.1,0,1,1,1,1);
	    case 6: OnePlayAnim(playerid,"LOWRIDER","lrgirl_l0_to_l1",4.1,0,0,0,1,1);
	    case 7: OnePlayAnim(playerid,"LOWRIDER","lrgirl_l2_loop",4.1,1,0,0,1,1);
	}

	return 1;
}
// Mecanico
    if(!strcmp(cmd, "/mecanico", true))
	{
	tmp = animstrtok(cmdtext, idx);
	animid = strval(tmp);
	if(!strlen(tmp)||animid < 1 || animid > 2)
		{
		SendClientMessage(playerid, Gris, "USO: /mecanico [1-2]");
		return 1;
	}
	switch(animid)
	{
		case 1: LoopingAnim(playerid,"CAR","Fixn_Car_Loop",4.1,1,0,0,1,1);
	    case 2: LoopingAnim(playerid,"CAR","Fixn_Car_Out",4.1,0,0,0,1,1);
	}

	return 1;
}

    // Bailoteo
    if(!strcmp(cmd, "/bailoteo", true))
	{
	tmp = animstrtok(cmdtext, idx);
	animid = strval(tmp);
	if(!strlen(tmp)||animid < 1 || animid > 10)
	{
		SendClientMessage(playerid, Gris, "USO: /bailoteo [1-10]");
		return 1;
	}
	switch(animid)
	{
        case 1: LoopingAnim(playerid,"DANCING","DAN_Down_A",4.1,1,0,0,1,1);
        case 2: LoopingAnim(playerid,"DANCING","DAN_Left_A",4.1,1,0,0,1,1);
		case 3: LoopingAnim(playerid,"DANCING","DAN_Loop_A",4.1,1,0,0,1,1);
		case 4: LoopingAnim(playerid,"DANCING","DAN_Right_A",4.1,1,0,0,1,1);
		case 5: LoopingAnim(playerid,"DANCING","DAN_Up_A",4.1,1,0,0,1,1);
		case 6: LoopingAnim(playerid,"DANCING","dnce_M_a",4.1,1,0,0,1,1);
		case 7: LoopingAnim(playerid,"DANCING","dnce_M_b",4.1,1,0,0,1,1);
		case 8: LoopingAnim(playerid,"DANCING","dnce_M_c",4.1,1,0,0,1,1);
		case 9: LoopingAnim(playerid,"DANCING","dnce_M_d",4.1,1,0,0,1,1);
		case 10: LoopingAnim(playerid,"DANCING","dnce_M_e",4.1,1,0,0,1,1);
	}
	return 1;
}
    // Consola
    if(!strcmp(cmd, "/consola", true))
	{
	tmp = animstrtok(cmdtext, idx);
	animid = strval(tmp);
	if(!strlen(tmp)||animid < 1 || animid > 3)
		{
		SendClientMessage(playerid, Gris, "USO: /consola [1-3]");
		return 1;
	}
	switch(animid)
	{
        case 1: LoopingAnim(playerid,"CRIB","PED_Console_Loop",4.1,1,1,1,1,1);
        case 2: LoopingAnim(playerid,"CRIB","PED_Console_Loose",4.1,0,1,1,1,1);
		case 3: LoopingAnim(playerid,"CRIB","PED_Console_Win",4.1,0,1,1,1,1);
	}

	return 1;
}





	// Bailar
 	if(strcmp(cmd, "/bailar", true) == 0)
 	{
      		tmp = animstrtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, Gris, "USO: /bailar [1-4]");
				return 1;
			}

			dancestyle = strval(tmp);
			if(dancestyle < 1 || dancestyle > 4) {
			    SendClientMessage(playerid, Gris, "USO: /bailar [1-4]");
			    return 1;
			}

			if(dancestyle == 1) {
			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
			} else if(dancestyle == 2) {
			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
			} else if(dancestyle == 3) {
			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
			} else if(dancestyle == 4) {
			    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
			}
 	  		return 1;
	}
	return 0;
}

Anims_OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    if(IsKeyJustDown(KEY_SPRINT,newkeys,oldkeys)) //Animaciones
	{
	    StopLoopingAnim(playerid);
        animation[playerid] = 0;
		return 1;
    }
	return 1;
}

stock CargarAnims(playerid)
{
	PreloadAnimLib(playerid,"CARRY");
	PreloadAnimLib(playerid,"CRACK");
	PreloadAnimLib(playerid,"BD_FIRE");
	PreloadAnimLib(playerid,"ON_LOOKERS");
	PreloadAnimLib(playerid,"BEACH");
	PreloadAnimLib(playerid,"GHANDS");
	PreloadAnimLib(playerid,"MEDIC");
	PreloadAnimLib(playerid,"SHOP");
	PreloadAnimLib(playerid,"PARK");
	PreloadAnimLib(playerid,"KISSING");
	PreloadAnimLib(playerid,"SWEET");
	PreloadAnimLib(playerid,"BOMBER");
	PreloadAnimLib(playerid,"SWAT");
	PreloadAnimLib(playerid,"WUZI");
	PreloadAnimLib(playerid,"PED");
	PreloadAnimLib(playerid,"ped");
	PreloadAnimLib(playerid,"SCRATCHING");
	PreloadAnimLib(playerid,"FAT");
	PreloadAnimLib(playerid,"POLICE");
	PreloadAnimLib(playerid,"Attractors");
	PreloadAnimLib(playerid,"FOOD");
	PreloadAnimLib(playerid,"CRIB");
	PreloadAnimLib(playerid,"INT_HOUSE");
	PreloadAnimLib(playerid,"MISC");
	PreloadAnimLib(playerid,"GYMNASIUM");
	PreloadAnimLib(playerid,"COP_AMBIENT");
	PreloadAnimLib(playerid,"DEALER");
	PreloadAnimLib(playerid,"GRAVEYARD");
	PreloadAnimLib(playerid,"DANCING");
	PreloadAnimLib(playerid,"RAPPING");
	PreloadAnimLib(playerid,"GANGS");
	PreloadAnimLib(playerid,"FIGHT_D");
	PreloadAnimLib(playerid,"SMOKING");
	PreloadAnimLib(playerid,"SNM");
	PreloadAnimLib(playerid,"benchpress");
	return 1;
}

PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0, 1);
}

Anims_OnPlayerDeath(playerid)
{
    if(gPlayerUsingLoopingAnim[playerid]) //Anims
	{
        gPlayerUsingLoopingAnim[playerid] = 0;
	}
	return 1;
}

Anims_OnDialogResponse(playerid, dialogid, response, listitem)
{
	if(dialogid == 9999)
	{
	    if(!response)return 1;
	    if(listitem == 0) //Carga
	    {
	        LoopingAnim(playerid,"CARRY","crry_prtial",4.1,0,1,1,1,1);
	    }
	    if(listitem == 1) //Llorar
	    {
            LoopingAnim(playerid,"GRAVEYARD","mrnF_loop",4.1,1,1,1,1,1);
	    }
	    if(listitem == 2) //Masturb
	    {
            LoopingAnim(playerid,"PAULNMAC","wank_loop",4.1,1,1,1,1,1);
	    }
	    if(listitem == 3) //Bofetada
	    {
            LoopingAnim(playerid,"MISC","bitchslap",4.1,1,0,0,1,1);
	    }
	    if(listitem == 4) //Facepalm
	    {
            LoopingAnim(playerid,"MISC","plyr_shkhead",4.1,0,0,0,0,0);
	    }
	    if(listitem == 5) //Barandilla
	    {
            LoopingAnim(playerid,"BD_FIRE","BD_Panic_Loop",4.1,1,1,1,1,1);
	    }
	    if(listitem == 6) //Sentarse
	    {
            LoopingAnim(playerid,"PED","SEAT_down",4.1,0,0,0,1,1);
	    }
	}
	return 1;
}
//---------------------------------------------------------------------------------------------//

stock PlaySoundForPlayersInRange(soundid, Float:range, Float:x, Float:y, Float:z)
{
	for(new i=0; i<MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i) && IsPlayerInRangeOfPoint(i,range,x,y,z))
	    {
		    PlayerPlaySound(i, soundid, x, y, z);
	    }
	}
}

stock GetPlayerZona(playerid)
{
	new zona[128];
	GetPlayer2DZone(playerid, zona, 128);
	return zona;
}

stock GetVehicleZona(vehicleid)
{
	new zona[128];
	GetCar3DZone(vehicleid, zona, 128);
	return zona;
}

stock IsValidVehicle(vehicleid)
{
    if(vehicleid != INVALID_VEHICLE_ID) return 1;
    else return 0;
}

//------------ ACCESORIOS -------------//
#define GORRO 						4 // 0
#define GAFAS 						5 // 1
#define MANDIBULA 					6 // 2
#define CHALECO 					7 // 3
#define HUECO_PERSONALIZADO 		8 // 4
//
#define tCOLUMNA    1
#define tCABEZA     2
#define tLENTES     2
#define tMANDIBULA  18
#define tCINTURON   -1
//

enum oInfo
{
	IDObjeto,
	NombreObjeto[40],
	ModeloObjeto,
	IDArma,
	Guardable,
	Arrojadizo,
	Capacidad,
	Conector[40],
}

new ObjetoInfo[178][oInfo] ={
{0, "Vacío", 0, 0, 0, 0, 0, "lo"},
{1, "Puño americano", 331, 1, 1, 0, 1, "lo"}, //ARMAS
{2, "Palo de golf", 333, 2, 0, 0, 1, "lo"},
{3, "Porra", 334, 3, 1, 0, 1, "la"},
{4, "Navaja", 335, 4, 1, 0, 1, "la"},
{5, "Bate", 336, 5, 0, 0, 1, "lo"},
{6, "Pala", 337, 6, 0, 0, 1, "la"},
{7, "Palo de billar", 338, 7, 0, 0, 1, "lo"},
{8, "Katana", 339, 8, 0, 0, 1, "la"},
{9, "Motosierra", 341, 9, 0, 0, 1, "la"},
{10, "Dildo rosa", 321, 10, 1, 0, 1, "lo"},
{11, "Dildo blanco", 322, 11, 1, 0, 1, "lo"},
{12, "Vibrador blanco", 323, 12, 1, 0, 1, "lo"},
{13, "Vibrador plateado", 324, 13, 1, 0, 1, "lo"},
{14, "Flores", 325, 14, 0, 0, 1, "lo"},
{15, "Palanca", 326, 15, 0, 0, 1, "la"},
{16, "Granada", 342, 16, 1, 1, 1, "la"},
{17, "Granada lacrimógena", 343, 17, 1, 1, 1, "la"},
{18, "Cóctel molotov", 344, 18, 1, 1, 1, "lo"},
{19, "Pistola", 346, 22, 1, 0, 17, "la"},
{20, "Pistola + silenciador", 347, 23, 1, 0, 17, "la"},
{21, "Desert Eagle", 348, 24, 1, 0, 7, "lo"},
{22, "Escopeta", 349, 25, 0, 0, 8, "la"},
{23, "Sawnoff", 350, 26, 1, 0, 2, "la"},
{24, "Escopeta de combate", 351, 27, 0, 0, 7, "la"},
{25, "Uzi", 352, 28, 1, 0, 35, "la"},
{26, "MP5", 353, 29, 0, 0, 30, "la"},
{27, "AK-47", 355, 30, 0, 0, 30, "la"},
{28, "M4", 356, 31, 0, 0, 50, "la"},
{29, "Tec-9", 372, 32, 1, 0, 35, "la"},
{30, "Rifle de caza", 357, 33, 0, 0, 10, "lo"},
{31, "Francotirador", 358, 34, 0, 0, 10, "lo"},
{32, "Bomba C4", 363, 39, 1, 1, 1, "la"},
{33, "Detonador", 364, 40, 1, 0, 1, "lo"},
{34, "Spray", 365, 41, 1, 0, 500, "lo"},
{35, "Extintor", 366, 42, 0, 0, 1000, "lo"},
{36, "Cámara fotográfica", 367, 43, 1, 0, 36, "la"},
{37, "Paracaidas", 371, 46, 0, 1, 1, "lo"},
{38, "Táser", 347, 23, 1, 0, 1, "lo"},
{39, "Cargador Pistola", 19995, 0, 1, 0, 17, "lo"}, //Cargadores
{40, "Cargador Deagle", 19995, 0, 1, 0, 7, "lo"},
{41, "Cargador Uzi", 19995, 0, 1, 0, 35, "lo"},
{42, "Cargador MP5", 19995, 0, 1, 0, 30, "lo"},
{43, "Cargador Tec-9", 19995, 0, 1, 0, 35, "lo"},
{44, "Cargador AK-47", 19995, 0, 1, 0, 30, "lo"},
{45, "Cargador M4", 19995, 0, 1, 0, 50, "lo"},
{46, "Cargador Rifle", 19995, 0, 1, 0, 10, "lo"},
{47, "Balas Pistola", 2040, 0, 1, 1, 100, "lo"}, //Pistola //Balas
{48, "Balas Desert Eagle", 2040, 0, 1, 1, 100, "lo"}, //Desert Eagle
{49, "Balas MP5", 2040, 0, 1, 1, 100, "lo"}, //SMG
{50, "Cartuchos escopeta", 19995, 0, 1, 1, 8, "lo"}, //Escopeta
{51, "Balas AK-47", 3013, 0, 1, 1, 70, "las"}, //Ak 47
{52, "Balas M4", 3013, 0, 1, 1, 70, "las"}, //M4
{53, "Balas rifle", 3013, 0, 1, 1, 70, "las"}, //Rifle
{54, "Carga extintor", 1210, 0, 0, 0, 5, "lo"},
{55, "Bolsa de doritos", 2663, 0, 1, 1, 5, "lo"},
{56, "Bolsa de patatas", 2663, 0, 1, 1, 5, "lo"},
{57, "Bolsa de nachos", 2663, 0, 1, 1, 5, "lo"},
{58, "Lata de sprunk", 2601, 0, 1, 1, 7, "la"},
{59, "Lata de fanta", 2601, 0, 1, 1, 7, "la"},
{60, "Botella de agua", 1484, 0, 1, 1, 7, "la"},
{61, "Botella de cerveza", 1543, 0, 1, 1, 7, "la"},
{62, "Copa de vino", 1667, 0, 1, 1, 7, "la"},
{63, "Vaso de whisky", 1666, 0, 1, 1, 7, "lo"},
{64, "Vaso de ron", 1666, 0, 1, 1, 7, "lo"},
{65, "Hamburguesa", 2768, 0, 1, 1, 5, "la"},
{66, "Burrito", 2769, 0, 1, 1, 5, "lo"},
{67, "Pizza", 2814, 0, 1, 1, 8, "la"},
{68, "Teléfono", 330, 0, 1, 0, 1, "lo"},
{69, "Encendedor", 327, 0, 1, 0, 30, "lo"},
{70, "Cigarros", 19896, 0, 1, 1, 20, "lo"},
{71, "Botella de ron", 1544, 0, 1, 0, 12, "la"},
{72, "Botella de whisky", 1520, 0, 1, 0, 12, "la"},
{73, "Botella de vino", 1517, 0, 1, 0, 12, "la"},
{74, "Destornillador", 18644, 0, 1, 0, 1, "lo"},
{75, "Fardo de marihuana", 1578, 0, 1, 1, 70, "lo"},
{76, "Fardo de cocaína", 1575, 0, 1, 1, 70, "lo"},
{77, "Fardo de crack", 1575, 0, 1, 1, 70, "lo"},
{78, "Fardo de heroína", 1577, 0, 1, 1, 70, "lo"},
{79, "Fardo de LSD", 1580, 0, 1, 1, 70, "lo"},
{80, "Bolsita de marihuana", 327, 0, 1, 1, 5, "la"},
{81, "Bolsita de cocaína", 327, 0, 1, 1, 5, "la"},
{82, "Bolsita de crack", 327, 0, 1, 1, 5, "la"},
{83, "Bolsita de heroína", 327, 0, 1, 1, 5, "la"},
{84, "Tripi de LSD", 327, 0, 1, 1, 5, "la"},
{85, "Semilla marihuana", 327, 0, 1, 1, 1, "la"},
{86, "Planta marihuana", 2244, 0, 1, 1, 1, "la"},
{87, "Reloj Rolex dorado", 19039, 0, 1, 0, 1, "lo"},
{88, "Reloj Rolex plateado", 19040, 0, 1, 0, 1, "lo"},
{89, "Reloj Rolex de cuero", 19041, 0, 1, 0, 1, "lo"},
{90, "Reloj Omega dorado", 19042, 0, 1, 0, 1, "lo"},
{91, "Reloj Omega plateado", 19043, 0, 1, 0, 1, "lo"},
{92, "Reloj Casio digital", 19044, 0, 1, 0, 1, "lo"},
{93, "Reloj Casio digital", 19045, 0, 1, 0, 1, "lo"},
{94, "Reloj Casio digital", 19046, 0, 1, 0, 1, "lo"},
{95, "Reloj Casio digital", 19047, 0, 1, 0, 1, "lo"},
{96, "Reloj Casio digital", 19048, 0, 1, 0, 1, "lo"},
{97, "Reloj Casio digital", 19049, 0, 1, 0, 1, "lo"},
{98, "Reloj Casio digital", 19050, 0, 1, 0, 1, "lo"},
{99, "Reloj Casio digital", 19051, 0, 1, 0, 1, "lo"},
{100, "Reloj Casio digital", 19052, 0, 1, 0, 1, "lo"},
{101, "Reloj Casio digital", 19053, 0, 1, 0, 1, "lo"},
{102, "Caja Navaja", 3052, 0, 2, 1, 10, "la"},
{103, "Caja Pistola", 3052, 0, 2, 1, 7, "la"},
{104, "Caja Cargador Pisdtola", 3052, 0, 2, 1, 7, "la"},
{105, "Caja Munición Pistola", 3052, 0, 2, 1, 4, "la"},
{106, "Caja Desert Eagle", 3052, 0, 2, 1, 5, "la"},
{107, "Caja Cargador Deagle", 3052, 0, 2, 1, 5, "la"},
{108, "Caja Munición Deagle", 3052, 0, 2, 1, 2, "la"},
{109, "Caja Tec-9", 3052, 0, 2, 1, 5, "la"},
{110, "Caja Cargador Tec-9", 3052, 0, 2, 1, 5, "la"},
{111, "Caja Uzi", 3052, 0, 2, 1, 5, "la"},
{112, "Caja Cargador Uzi", 3052, 0, 2, 1, 5, "la"},
{113, "Caja MP5", 3052, 0, 2, 1, 5, "la"},
{114, "Caja Cargador MP5", 3052, 0, 2, 1, 5, "la"},
{115, "Caja Munición SMG", 3052, 0, 2, 1, 3, "la"},
{116, "Caja Escopeta", 3052, 0, 2, 1, 3, "la"},
{117, "Caja Escopeta Recortada", 3052, 0, 2, 1, 4, "la"},
{118, "Caja Cargador escopeta", 3052, 0, 2, 1, 2, "la"},
{119, "Caja AK-47", 3052, 0, 2, 1, 3, "la"},
{120, "Caja Cargador AK-47", 3052, 0, 2, 1, 3, "la"},
{121, "Caja Munición AK-47", 3052, 0, 2, 1, 2, "la"},
{122, "Caja Rifle", 3052, 0, 2, 1, 3, "la"},
{123, "Caja Cargador Rifle", 3052, 0, 2, 1, 3, "la"},
{124, "Caja Munición Rifle", 3052, 0, 2, 1, 2, "la"},
{125, "Lata de combustible", 1650, 0, 0, 0, 20, "la"},
{126, "Chaleco liviano", 1242, 0, 0, 0, 100, "la"},
{127, "Paquete cerveza", 19572, 0, 2, 1, 9, "la"},
{128, "Cámara fotográfica profesional", 367, 43, 1, 0, 500, "la"},
//-- ACCESORIOS --//
{129, "Chaleco Swat", 19142, 0, 0, 0, 100, "lo"},
{130, "Casco Swat", 19141, 0, 0, 0, 1, "lo"},
{131, "Pañuelo negro", 18912, 0, 1, 0, 1, "lo"},
{132, "Pañuelo blanco", 18919, 0, 1, 0, 1, "lo"},
{133, "Jockey negro", 18941, 0, 1, 0, 1, "lo"},
{134, "Jockey gris", 18942, 0, 1, 0, 1, "lo"},
{135, "Jockey verde", 18943, 0, 1, 0, 1, "lo"},
{136, "Sombrero de paja", 18946, 0, 1, 0, 1, "lo"},
{137, "Sombrero bombin negro", 18947, 0, 1, 0, 1, "lo"},
{138, "Sombrero bombin azul", 18948, 0, 1, 0, 1, "lo"},
{139, "Sombrero bombin verde", 18949, 0, 1, 0, 1, "lo"},
{140, "Sombrero bombin rojo", 18950, 0, 1, 0, 1, "lo"},
{141, "Sombrero bombin amarillo", 18951, 0, 1, 0, 1, "lo"},
{142, "Gorro negro", 18953, 0, 1, 0, 1, "lo"},
{143, "Gorro gris", 18954, 0, 1, 0, 1, "lo"},
{144, "Gorra camionero", 18961, 0, 1, 0, 1, "lo"},
{145, "Sombrero vaquero", 18962, 0, 1, 0, 1, "lo"},
{146, "Gorro largo negro", 18964, 0, 1, 0, 1, "lo"},
{147, "Sombrero leopardo", 18970, 0, 1, 0, 1, "lo"},
{148, "Casco motocicleta azul", 18976, 0, 0, 0, 1, "lo"},
{149, "Casco motocicleta rojo", 18977, 0, 0, 0, 1, "lo"},
{150, "Casco motocicleta blanco", 18978, 0, 0, 0, 1, "lo"},
{151, "Casco motocicleta rosado", 18979, 0, 0, 0, 1, "lo"},
{152, "Máscara de oxígeno", 19472, 0, 1, 0, 1, "la"},
{153, "Gafas negras", 19033, 0, 1, 0, 1, "la"},
{154, "Gafas aviador rosadas", 19027, 0, 1, 0, 1, "la"},
{155, "Gafas aviador blancas", 19022, 0, 1, 0, 1, "la"},
{156, "Gafas aviador anaranjadas", 19027, 0, 1, 0, 1, "la"},
{157, "Gafas de lectura", 19030, 0, 1, 0, 1, "la"},
{158, "Máscara hockey blanca", 19036, 0, 1, 0, 1, "la"},
{159, "Máscara hockey roja", 19037, 0, 1, 0, 1, "la"},
{160, "Casco calavera negro", 19115, 0, 0, 0, 1, "lo"},
{161, "Casco motoquero negro", 19116, 0, 0, 0, 1, "lo"},
{162, "Casco motoquero camuflado", 19106, 0, 0, 0, 1, "lo"},
{163, "Casco motoquero policial", 19200, 0, 0, 0, 1, "lo"},
{164, "Chaleco pesado", 19515, 0, 0, 0, 100, "lo"},
{165, "Casco bombero amarillo", 19330, 0, 0, 0, 1, "lo"},
{166, "Casco bombero rojo", 19331, 0, 0, 0, 1, "lo"},
{167, "Sombrero sheriff", 19099, 0, 1, 0, 1, "lo"},
{168, "Gorro policia 1", 19161, 0, 1, 0, 1, "lo"},
{169, "Gorro policia 2", 19162, 0, 1, 0, 1, "lo"},
{170, "Gorro policia 3", 18636, 0, 1, 0, 1, "lo"},
{171, "Lentes policia 1", 19138, 0, 1, 0, 1, "lo"},
{172, "Lentes policia 2", 19139, 0, 1, 0, 1, "lo"},
{173, "Lentes policia 3", 19140, 0, 1, 0, 1, "lo"},
//-- Fin accesorios --//
{174, "Pistola", 346, 22, 1, 0, 17, "la"},
{175, "Desert Eagle", 348, 24, 1, 0, 7, "lo"},
{176, "Maletín cuero", 1210, 0, 0, 0, 100000, "lo"},
{177, "Productos", 1271, 0, 0, 0, 10, "los"}
};

/*



*/

enum toyInfo
{
	tObjetoID,
	tObjetoNombre[64],
	tModeloID,
	tBone,
	tIndex,
}
new ToyInfo[][toyInfo] ={
{129, "Chaleco Swat", 19142, tCOLUMNA, CHALECO},
{130, "Casco Swat", 19141, tCABEZA, GORRO},
{131, "Pañuelo negro", 18912, tCABEZA, MANDIBULA},
{132, "Pañuelo blanco", 18919, tCABEZA, MANDIBULA},
{133, "Jockey negro", 19141, tCABEZA, GORRO},
{134, "Jockey gris", 18942, tCABEZA, GORRO},
{135, "Jockey verde", 19143, tCABEZA, GORRO},
{136, "Sombrero de paja", 18946, tCABEZA, GORRO},
{137, "Sombrero bombin negro", 18947, tCABEZA, GORRO},
{138, "Sombrero bombin azul", 18948, tCABEZA, GORRO},
{139, "Sombrero bombin verde", 18949, tCABEZA, GORRO},
{140, "Sombrero bombin rojo", 18950, tCABEZA, GORRO},
{141, "Sombrero bombin amarillo", 18951, tCABEZA, GORRO},
{142, "Gorro negro", 18953, tCABEZA, GORRO},
{143, "Gorro gris", 18954, tCABEZA, GORRO},
{144, "Gorra camionero", 18961, tCABEZA, GORRO},
{145, "Sombrero vaquero", 18962, tCABEZA, GORRO},
{146, "Gorro largo negro", 18964, tCABEZA, GORRO},
{147, "Sombrero leopardo", 18970, tCABEZA, GORRO},
{148, "Casco motocicleta azul", 18976, tCABEZA, GORRO},
{149, "Casco motocicleta rojo", 18977, tCABEZA, GORRO},
{150, "Casco motocicleta blanco", 18978, tCABEZA, GORRO},
{151, "Casco motocicleta rosado", 18979, tCABEZA, GORRO}, 
{152, "Máscara de oxígeno", 19472, tCABEZA, MANDIBULA},
{153, "Gafas negras", 19033, tCABEZA, GAFAS},
{154, "Gafas aviador rosadas", 19027, tCABEZA, GAFAS},
{155, "Gafas aviador blancas", 19022, tCABEZA, GAFAS},
{156, "Gafas aviador anaranjadas", 19027, tCABEZA, GAFAS},
{157, "Gafas de lectura", 19030, tCABEZA, GAFAS},
{158, "Máscara hockey blanca", 19036, tCABEZA, MANDIBULA},
{159, "Máscara hockey roja", 19037, tCABEZA, MANDIBULA},
{160, "Casco calavera negro", 19115, tCABEZA, GORRO},
{161, "Casco motoquero negro", 19116, tCABEZA, GORRO},
{162, "Casco motoquero camuflado", 19106, tCABEZA, GORRO},
{163, "Casco motoquero policial", 19200, tCABEZA, GORRO},
{164, "Chaleco pesado", 19515, tCOLUMNA, CHALECO},
{165, "Casco bombero amarillo", 19330, tCABEZA, GORRO},
{166, "Casco bombero rojo", 19331, tCABEZA, GORRO},
{167, "Sombrero sheriff", 19099, tCABEZA, GORRO},
{168, "Gorra policia 1", 19161, tCABEZA, GORRO},
{169, "Gorra policia 2", 19162, tCABEZA, GORRO},
{170, "Gorra policia 3", 18636, tCABEZA, GORRO},
{171, "Lentes policia 1", 19138, tCABEZA, GAFAS},
{172, "Lentes policia 2", 19139, tCABEZA, GAFAS},
{173, "Lentes policia 3", 19140, tCABEZA, GAFAS}
};


//-------------------------------------//

enum saludo //Comando /saludo
{
	animliba[24],
	animnamea[64],
}
new animsaludo[MAX_SALUDOS][saludo]=
{
	{	"GANGS", "prtial_hndshk_biz_01"},
	{	"GANGS", "hndshkcb"},
	{	"GANGS", "hndshkea"},
	{	"GANGS", "hndshkfa"},
	{	"GANGS", "hndshkba"},
	{	"ON_LOOKERS", "wave_loop"},
	{	"PED", "endchat_03"}
}; // nº animación para saludo coordinado

new	Float:barbell_pos[][] = //Sistema fuerza /Entrenar
{
	{ 774.42907715,1.88309872,1000.48834229,0.00000000,270.00000000,87.99966431 }, // Los Santos Gym's BarBell
	{ 765.85528564,-48.86857224,1000.64093018,0.00000000,89.49993896,0.00000000 }, // San Fierro Gym's BarBell.
	{ 765.34039307,-59.18271637,1000.63793945,0.00000000,89.49993896,181.25012207 } // Las Venturas Gym's BarBell
};

new Float:PressBancaPlayerPos[][] = //Sistema fuerza /Entrenar
{
	{ 773.0491,1.4285,1000.7209, 269.2024 }, // Los Santos Gym's bench.
	{ 766.3170,-47.3574,1000.5859, 179.2983 }, // San Fierro Gym's bench.
	{ 764.9001,-60.5580,1000.6563, 1.9500 } // Las Venturas Gym's bench
};

enum PintarInfo //Misión graffitis
{
	Float:GraffitiX,
	Float:GraffitiY,
	Float:GraffitiZ,
	Float:GraffitiRotZ,
	GraffitiObjeto,
	Texto,
}

new LugaresPintar[MAX_LUGARESPINTAR][PintarInfo] = {
{2452.8999000,-1758.4000000,15.0000000,90.0000000,17969}, // (2)
{2473.1001000,-1902.2800000,14.6000000,270.0000000,17969}, // (3)
{2519.0500000,-1956.7000000,14.8000000,180.0000000,17969}, // (4)
{2238.6001000,-1687.4900000,15.2000000,90.0000000,17969}, // (5)
{2743.6899000,-1947.7800000,14.6000000,270.0000000,17969}, // (6)
{2756.3501000,-2027.5100000,14.6000000,180.0000000,17969}, // (7)
{2688.8000000,-2065.2700000,15.1000000,270.0000000,17969}, // (8)
{2351.0000000,-2024.0900000,14.5000000,180.0000000,17969}, // (9)
{2365.8000000,-1910.0000000,14.5000000,0.0000000,17969}, // (10)
{2101.6001000,-1868.4600000,14.6000000,270.0000000,17969}, // (11)
{1992.8000000,-1568.9900000,14.6000000,315.0000000,17969}, // (12)
{1929.0200000,-2017.7000000,14.5000000,180.0000000,17969}, // (13)
{1860.0000000,-2095.5000000,14.2000000,90.0000000,17969}, // (14)
{2112.7000000,-1942.9698000,13.8500000,90.0000000,17969}, // (15)
{2457.3999000,-2065.2700000,14.6000000,270.0000000,17969}, // (16)
{2812.3999000,-1534.2000000,12.4000000,90.0000000,17969}, // (17)
{2668.1499000,-1586.1899000,16.2000000,180.0000000,17969}, // (18)
{2536.8000000,-1476.8500000,25.2000000,270.0000000,17969}, // (19)
{2397.1001000,-1468.2600000,24.6000000,90.0000000,17969}, // (21)
{2335.0701000,-1319.5900000,25.2000000,180.0000000,17969}, // (22)
{2184.5000000,-1338.1500000,25.0000000,90.0000000,17969}, // (23)
{2019.4800000,-1293.3000000,24.6000000,180.0000000,17969}, // (24)
{2009.7000000,-1089.9100000,25.3000000,70.0000000,17969}, // (25)
{2235.1001000,-1001.9100000,60.4000000,325.0000000,17969}, // (26)
{2684.0000000,-1114.3199000,70.2000000,270.0000000,17969}, // (27)
{2057.6299000,-1770.9000000,14.3000000,0.0000000,17969}, // (28)
{2420.9500000,-1391.0000000,25.2000000,0.0000000,17969}, // (29)
{2458.8899000,-1707.3300000,14.6600000,90.0000000,17969}, // (30)
{1813.5000000,-1425.6000000,14.6000000,0.0000000,17969} // (31)
};

new PreciosContactoArmas[23] =
{
700, //Katana x3

7400, //Pistola x7
1000, //Cargador Pistola x7
1800, //Balas .45 ACP x4 (400 balas)

9500, //Desert Eagle x5
1400, //Cargador Deagle Eagle x5
1500, //Balas .50 AE x2 (200 balas)

9000, //Tec-9 x5
1300, //Cargador Tec-9 x5
9200, //Uzi x5
1300, //Cargador Uzi x5
12000, //MP5 x5
1500, //Cargador MP5 x5
1700, //Balas SMG x3 (300 balas)

7800, //Escopeta x3
8400, //Escopeta recortada x4
1700, //Cartuchos 12GA x2 (100 balas)

16000, //AK-47 x3
2200, //Cargador AK-47 x3
2600, //Balas AK-47 x2 (140 balas)

12000, //Rifle x3
1700, //Cargador rifle x3
2500 //Balas rifle x2 (140 balas)
};

new Float:PuntosDeposito[] =
{
	1599.5999800, -1843.3000500,
	1659.5000000, -1843.3000500,
	1660.5000000, -1803.0000000,
	1634.6999500, -1803.0000000,
	1595.1999500, -1787.0000000,
	1595.3000500, -1819.9000200,
	1599.5000000, -1819.9000200
};

enum JobInfo
{
	Float:Jx,
	Float:Jy,
	Float:Jz,
	JobNombre[50],
	JobPay,
	JobPuntos,
}

new Jobs[11][JobInfo] = {
{378.6762,-114.3769,1001.4922, "Pizzero", 250, 0}, //300$
{2494.0740,-1464.3805,24.0252, "Barrendero", 280, 0}, //400$
{2359.7793,-2314.7292,13.5469, "Camionero", 350, 0}, //300$
{-382.5518,-1426.3771,26.2122, "Cosechador", 460, 1}, //550$
{-420.8934,-1750.6937,6.8467, "Fumigador aéreo", 650, 1}, //700$
{1008.8746,-1296.4167,13.5469, "Taxista", 30, 1},
{0.000000,0.000000000,-100.00, "Mecánico", 0, 0}, //Taller Willowfield
{2123.2236,-1185.7349,24.0278, "Ladrón", 0, 0},
{2956.0686,-1523.8318,2.3078, "Pescador", 1200, 1}, //220$-1100$
{0.000000,0.000000000,-100.00, "Mecánico", 0, 0}, //Taller unity
{0.000000,0.000000000,-100.00, "Traficante", 0, 0}
};

new Float:Mostradores[31][3] = {
{-22.1840,-138.3363,1003.5469}, //Mostrador 24/7 1
{-23.4186,-55.2088,1003.5469}, //Mostrador 24/7 2
{681.4297,-453.3886,-25.6172}, //Barra bar 1
{-225.2983,1404.2106,27.7734}, //Barra bar 2
{498.3913,-75.4957,998.7578}, //Barra bar 3
{453.4103,-107.5514,999.4292}, //Barra restaurante 1
{2258.0786,1622.2975,1637.5493}, //Barra restaurante 2
{450.4141,-84.0793,999.5547}, //Barra restaurante 3
{447.6464,-62.7804,999.3400}, //Barra restaurante 4
{-783.9854,500.2360,1371.7422}, //Barra restaurante 5
{375.7310,-119.3098,1001.4995}, //Comida rápida 1
{379.0211,-187.8832,1000.6328}, //Comida rápida 2
{378.1023,-67.8428,1001.5151}, //Comida rápida 3
{369.6903,-6.6289,1001.8589}, //Comida rápida 4
{499.6445,-20.7924,1000.6797}, //Barra discoteca
{1207.3638,-28.6835,1000.9531}, //Barra puticlub 1
{969.2510,-44.8382,1001.1172}, //Barra puticlub 2
{1214.2813,-13.1513,1000.9219}, //Barra puticlub 3
{-2653.5898,1407.5006,906.2734}, //Barra puticlub 4
{290.1703,-109.3636,1001.5156}, //Ammu nation 1
{295.5641,-80.5888,1001.5156}, //Ammu nation 2
{-1753.8821,790.4277,167.6844}, //Tienda deportiva
{-2326.7366,927.7168,59.7178}, //Ferretería
{1005.5494,52.8569,55.3221}, //Tienda electrónica
{683.7972,-661.1636,-46.2927}, //Estanco y licorería
{206.4069,-100.7421,1005.2578}, //Tienda ropa 1
{162.8261,-83.6720,1001.8047}, //Tienda ropa 2
{204.4586,-159.5702,1000.5234}, //Tienda ropa 3
{206.6214,-8.0639,1001.2109}, //Tienda ropa 4
{203.9312,-43.5412,1001.8047}, //Tienda ropa 5
{207.0655,-129.3970,1003.5078} //Tienda ropa 6
};

new Float:ChecksBarrendero[63][3] = {
{1964.38, -1764.67, 13.0885},
{1823.9, -1592.18, 13.0617},
{2029.52, -1343.93, 23.5257},
{2073.47, -1107.66, 24.2636},
{1658.03, -1158.95, 23.4583},
{1217.41, -1140.59, 23.2998},
{1004.9, -955.393, 41.4368},
{940.333, -1186.51, 19.0471},
{1058.04, -1452.01, 13.07},
{856.354, -1591.43, 13.0918},
{639.971, -1502.19, 14.4376},
{486.394, -1350.07, 16.9588},
{322.191, -1566.6, 32.8108},
{552.577, -1671.29, 18.2101},
{816.962, -1644.78, 13.0901},
{1270.54, -1574.12, 13.0882},
{1304.64, -1855.4, 13.0881},
{1432.32, -1669.32, 13.0882},
{1526.74, -1670.45, 13.0875},
{1777.65, -1734.26, 13.0879},
{1732.65, -1852.48, 13.1194},
{1964.43, -1767.62, 13.0877},
{2155.64, -1754.3, 13.0947},
{2215.28, -1834.55, 13.9008},
{2297.19, -2069.65, 13.0798},
{2717.11, -2024.72, 13.0256},
{2518.57, -1829.48, 13.0777},
{2645.51, -1681.29, 10.4814},
{2611.04, -1441.45, 32.2996},
{2373.57, -1279.51, 23.5383},
{2246.77, -1137.94, 25.7358},
{2103.84, -1218.74, 23.5088},
{1823.86, -1258.62, 13.1781},
{1452.58, -1331.79, 13.0882},
{1420.97, -1395.09, 13.088},
{1303.77, -1278.29, 13.0882},
{1195.85, -1367.73, 13.0275},
{1147.5, -1627.83, 13.4866},
{1237.95, -1855.09, 13.0882},
{1391.41, -1797.25, 13.0882},
{1649.77, -1594.83, 13.0967},
{1746.96, -1704.31, 13.0882},
{1964.01, -1766.7, 13.0877},
{1818.84, -1781.28, 13.0882},
{1686.8, -1826.84, 13.0877},
{1447.06, -1870.17, 13.0956},
{1079.21, -1849.85, 13.0949},
{920.402, -1687.3, 13.0886},
{919.322, -1344.71, 12.9831},
{1087.42, -1283.57, 13.1337},
{1245.23, -1150.1, 23.282},
{1263.48, -952.624, 40.97},
{1548.01, -966.395, 36.9975},
{2198.8, -1117.81, 24.9207},
{1966.87, -1186.96, 25.5139},
{1845.4, -1387.62, 13.0962},
{1693.89, -1438.55, 13.0881},
{1680.25, -1544.35, 13.0866},
{1686.6, -1693.36, 13.0866},
{1924.87, -1754.71, 13.0863},
{2037.46, -1615.29, 13.0874},
{2014.07, -1810.13, 13.0882},
{1824.48, -1907.55, 13.0729}
};

new Float:ChecksCosechador[18][3] = {
{-322.4297,-1475.6787,14.2840},
{-258.2964,-1485.2852,6.5286},
{-234.9556,-1522.3761,8.0218},
{-296.3396,-1543.0264,10.2185},
{-182.4065,-1409.5905,4.0504},
{-185.1138,-1358.1989,5.3088},
{-231.4681,-1332.0410,10.8363},
{-287.8214,-1342.2283,8.4548},
{-292.0815,-1391.9467,12.1514},
{-253.6083,-1375.1813,11.2880},
{-384.9917,-1365.8877,24.4146},
{-452.0677,-1385.6948,25.3850},
{-543.4974,-1409.8652,14.7486},
{-565.0435,-1334.7450,23.2383},
{-492.0044,-1314.4167,30.6119},
{-399.2313,-1296.9722,31.2470},
{-417.7039,-1334.4792,27.0369},
{-481.5393,-1343.8591,28.5447}
};

new Float:ChecksFumigador[14][3] = {
{-560.5481,-1398.6001,46.7124},
{-565.9540,-1330.2577,51.9021},
{-429.5224,-1286.1316,52.0331},
{-328.6955,-1321.0922,41.6528},
{-244.8168,-1357.9639,31.2759},
{-233.6895,-1449.9918,27.9477},
{-291.9164,-1514.7799,30.2744},
{-396.5044,-1595.7528,45.7363},
{-411.6466,-1626.2190,49.3483},
{-403.2556,-1489.7595,41.2128},
{-385.8501,-1555.2289,40.1053},
{-465.9271,-1636.8960,27.9015},
{-488.2023,-1731.0664,49.7307},
{-465.2697,-1816.8821,26.0843}
};

new Float:ChecksPescador[14][3] = {
{3000.3999000,-1300.5000000,0.0000000},
{2991.3000000,-1215.0000000,0.0000000},
{3085.7000000,-1230.6000000,0.0000000},
{3036.8000000,-1136.5000000,0.0000000},
{3165.3999000,-1130.0000000,0.0000000},
{3228.0000000,-1230.0000000,0.0000000},
{3123.0000000,-1319.8000000,0.0000000},
{3151.0000000,-1231.1000000,0.0000000},
{3103.2000000,-1160.7000000,0.0000000},
{3096.8000000,-1075.4000000,0.0000000},
{3251.8000000,-1126.7000000,0.0000000},
{3314.6001000,-1186.5000000,0.0000000},
{3207.8999000,-1307.8000000,0.0000000},
{3057.7000000,-1358.3000000,0.0000000}
};

new Float:ChecksPracticoCoche[25][3] = {
{2083.8384,-1909.9130,13.0878},
{2064.1917,-1750.0286,13.0916},
{1806.7062,-1730.0574,13.0952},
{1532.0228,-1719.6244,13.0885},
{1469.6788,-1590.0376,13.0883},
{1327.1499,-1570.3623,13.0696},
{1359.5898,-1420.1453,13.0885},
{1275.1090,-1392.8582,12.8965},
{1193.8380,-1452.7954,13.0884},
{1170.4027,-1569.7462,13.0187},
{1147.9176,-1695.4690,13.4866},
{1173.0892,-1829.7229,13.1053},
{1315.5731,-1854.8386,13.0883},
{1500.7313,-1874.6880,13.0884},
{1691.8389,-1833.0457,13.0876},
{1805.4043,-1834.7416,13.0898},
{1824.0209,-1768.3755,13.0875},
{2066.3369,-1754.5487,13.0989},
{2187.1626,-1746.5713,13.0838},
{2213.2336,-1755.7191,13.0602},
{2216.1309,-1877.9962,13.0873},
{2097.3159,-1891.9930,13.0653},
{2070.7659,-1930.3083,13.1709},
{2056.5637,-1912.8885,13.2516},
{2056.5637,-1912.8885,13.2516}
};

new Float:ChecksPracticoAvion[20][3] = {
{1990.5405,-2493.9075,13.9999}, // CHECKPOINT NORMAL
{1626.7603,-2493.7266,35.0753},
{1382.7904,-2495.9976,70.4945},
{1136.2195,-2250.9355,126.3928},
{1086.2787,-1989.6184,156.3511},
{1081.8361,-1656.4224,141.6575},
{1209.8287,-1189.9451,139.0757},
{1337.7214,-717.1565,167.4657},
{1679.4834,-579.6104,178.6736},
{2135.8313,-698.1968,230.3436},
{2310.5337,-1147.2543,206.4147},
{2081.8853,-1489.0309,162.9519},
{1531.5393,-1678.0157,129.7650},
{890.2695,-1796.2018,128.2029},
{650.6389,-2122.5435,117.1550},
{955.8991,-2429.2781,69.4324},
{1360.0757,-2490.7454,39.1671},
{1896.0840,-2494.7896,14.0299}, //CHECKPOINT NORMAL
{1991.5916,-2286.5642,14.0084}, //CHECKPOINT NORMAL
{1991.5916,-2286.5642,14.0084} //CHECKPOINT NORMAL
};

new Float:ChecksPracticoBarco[22][3] = {
{2955.8306,-1566.0105,0.0000},
{2952.9165,-1731.8145,0.0000},
{2933.9338,-1878.5146,0.0000},
{2967.1619,-1997.9015,0.0000},
{2915.7917,-2200.9465,0.0000},
{2687.1826,-2288.4944,0.0000},
{2589.1243,-2259.1838,0.0000}, //-Inicio zig zag
{2537.5554,-2310.5278,0.0000},
{2432.0896,-2283.2939,0.0000},
{2411.4243,-2407.7388,0.0000},
{2293.3662,-2466.7073,0.0000}, //Último zig zag
{2334.9001,-2512.5293,0.0000},
{2322.9963,-2728.0398,0.0000},
{2515.9067,-2749.3672,0.0000},
{2793.8657,-2633.9517,0.0000},
{2903.1611,-2467.6028,0.0000},
{2971.9250,-2207.9082,0.0000},
{2974.5806,-1991.9218,0.0000},
{2933.9338,-1878.5146,0.0000},
{2955.8306,-1566.0105,0.0000},
{0.00000,0.0000,0.0000},
{0.00000,0.0000,0.0000}
};

enum AutoInfo
{
	Float:AutoX,
	Float:AutoY,
	Float:AutoZ,
	AutoNombre[50],
}

new AutoEscuelas[6][AutoInfo] = {
{-2032.9701,-117.4753,1035.1719,"Permiso de conducción"},
{2017.1357,-2274.4543,13.5969,"Permiso de aviación"},
{2943.1257,-1552.9116,2.0250,"Permiso de navegación"},
{267.6152,107.5762,1008.8203,"Permiso de armas"},
{358.4051,187.1362,1008.3828,"Permiso de pesca"},
{358.4051,183.5721,1008.3828,"Permiso de caza"}
};

new VehicleName[212][] = {
	"Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel",
    "Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus", "Voodoo",
    "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam", "Esperanto",
    "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Ford Crown Victoria",
    "Lenco Bearcat OSO", "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks",
    "Hotknife", "Trailer 1", "Previon", "Coach", "Cabbie", "Stallion", "Rumpo",
    "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
   	"Pizzaboy", "Tram", "Trailer 2", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed",
    "Yankee", "Caddy", "Solair", "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio",
    "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic", "Sanchez", "Sparrow",
    "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350",
    "Walton", "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage",
    "Dozer", "Maverick", "News Chopper", "Rancher", "Chevrolet Suburban", "Virgo", "Greenwood",
    "Jetmax", "Hotring", "Sandking", "Blista Compact", "LSPD BMW", "Boxvillde",
    "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger",
    "Rancher", "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle",
    "Cropduster", "Stunt", "Tanker", "Roadtrain", "Nebula", "Majestic", "Buccaneer",
    "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
   	"Fortune", "Cadrona", "Lenco Bearcat LE", "Willard", "Forklift", "Tractor", "Combine",
    "Feltzer", "Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent",
    "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder", "Primo", "Cargobob",
    "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster",
    "Monster", "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger",
    "Flash", "Tahoma", "Savanna", "Bandito", "Freight Flat", "Streak Carriage", "Kart",
    "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30", "Huntley",
    "Stafford", "BF-400", "News Van", "Tug", "Trailer 3", "Emperor", "Wayfarer", "Euros",
    "Hotdog", "Club", "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch",
    "Ford Crown Victoria", "FCV Slicktop", "Dodge Charger", "Chevrolet Tahoe", "Picador",
	"Cadillac Gage", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage Trailer 1", "Luggage Trailer 2",
   	"Boxville", "Boxville", "Stairs Trailer", "Utility Trailer 2"
};

#define GetVehicleName(%0) VehicleName[GetVehicleModel(%0)-400]

new Float:RandLogin[5][9] = //Vistas al loguear
{
{1419.3607, -1630.4677, 54.4267, 1491.6999, -1684.9000, 14.1900, 1405.0000, -1621.0000, 49.0000}, //Ayuntamiento
{515.0692, -1557.2420, 42.1758, 541.9000, -1468.1999, 14.3999, 511.0000, -1548.0000, 23.0000}, //Little Italy
{2107.2641, -1870.8756, 31.2371, 2084.3000, -1813.6999, 13.0000, 2104.0000, -1877.0000, 15.0000}, //Pizzeria
{1809.6683, -1814.1533, 51.6329, 1827.0000, -1863.8000, 13.0000, 1732.2802,-1879.2351,13.5623}, //Unity
{133.2111, -1973.0588, 50.5363, 226.8999, -1939.4000, 41.2000, 154.0000, -1952.0000, 11.0000} //Playa
};

new GunNames[47][] = //Nombre de armas
{ 
"Puños",
"Puño americano",
"Palo de golf",
"Porra",
"Cuchillo",
"Bate",
"Pala",
"Palo de billar",
"Katana",
"Motosierra",//
"Dildo rosa",
"Dildo blanco",
"Vibrador blanco",
"Vibrador plateado",
"Ramo de flores",
"Bastón",
"Granada",
"Granada de gas",
"Cóctel molotov",
"",
"",
"",
"Pistola",//
"Pistola silenciada",
"Desert Eagle",
"Escopeta",
"Escopeta recortada",
"Escopeta de combate",
"Uzi",
"MP5",
"AK-47",
"M16",
"Tec-9",//
"Rifle",
"Rifle francotirador",
"Bazoka",
"Bazoka térmico",
"Lanzallamas",
"Minigun",
"C4",
"Detonador",
"Spray",
"Extintor",//
"Cámara",
"Gafas nocturnas",
"Gafas térmicas",
"Paracaidas"
};

enum CajeroInfo //Puntos de cajeros
{
	Float:cX,
	Float:cY,
	Float:cZ,
}

new Cajeros[8][CajeroInfo] = {
{1776.28784, -1867.30005, 13.21350},
{1928.56470, -1770.75854, 13.17990},
{1154.89526, -1428.33105, 15.42200},
{1012.91772, -928.88678, 41.94710},
{1465.03186, -1749.92493, 15.05050},
{1796.74963, -1583.58313, 13.07850},
{2938.0820, -1803.4373, 1191.0657},
{2927.8625, -1785.6993, 1191.0657}
};

enum plantaInfo
{
	plSQLID,
	plTipo,
	Float:plX,
	Float:plY,
	Float:plZ,
	plPlantador[36],
	plEstado,
	plObjeto,
	plVW,
	plInt,
}
new PlantaInfo[MAX_PLANTACIONES][plantaInfo];

#define MAX_HERIDAS 51 // 50 heridas como máximo (50 balas)

enum zInfo //Información jugador
{
	pHerido,     // 0 sin heridas - 1 con heridas - 2 está muerto.
	pHerida[MAX_HERIDAS],  // 9 heridas
	pCalibre[MAX_HERIDAS], // 9 calibres
	pBody[MAX_HERIDAS],    // 9 bodys
	pGolpeado,   // 0 no golpeado - 5 golpeado leve - 10 golpeado alto
	pCortado     // 0 no cortado - 3 cortado - 6 acuchillado - 10 mutilado(?
}
new HeridasInfo[MAX_PLAYERS][zInfo];

enum pInfo //Información jugador
{
	pContra[128], //Contraseña
	pSQLID,
	pNombre[41], //Nombre RP del jugador
	pCuentaForo[40], //cuenta del foro
	pAdmin, //Nivel admin
	pAdminNombre[16], //Nick del admin
	pBloqueado, //Si está ban
	pPrimerLogueo, //Primera vez que entra
	pPrimerLugarSpawn, //Dónde eligió spawnear al registrarse en PCU
	pPrimeraMejora, //Mejora elegida al registrarse en PCU
	pEdad, //Edad del jugador IC
	pRaza, //Raza del jugador IC
	pSexo, //Género del jugador IC
	pNivel, //Nivel del jugador
	pExp, //Experiencia del jugador
	Float:pVida, //Vida del jugador
	Float:pChaleco, //Armadura del jugador
	pTelefono, //Teléfono del jugador
	pTrabajo, //Trabajo del jugador
	pContrato, //Horas de permanencia de trabajo
	pEsperaTrabajar, //Tiempo de espera para volver a trabajar
	Float:pPosX, //Posición X
	Float:pPosY, //Posición Y
	Float:pPosZ, //Posición Z
	pDineroBanco, //Dinero en banco
	pDineroMano, //Dinero en cartera
	pEncarcelado, //Encarcelado
	pTiempoCarcel, //Tiempo de prisión
	pAdvertencias, //Advertencias del jugador
	pSpecID, //Sistema RECON
	pSpecType, //Sistema RECON
	pSkin, //Skin del jugador
	pUniformePD,
	pMascaraID,
	pFaccion, //Facción del jugador
	pRango, //Rango del jugador de una facción
	pLider, //Liderazgo de una facción
	pPuntosRol, //Puntos de rol
	pPuntosRolNo, //Puntos de rol negativos
	pPremium,
	pHabPistola, //Habilidad Pistola
	pHabSD, //Habilidad Silenciada
	pHabDEagle, //Habilidad Desert Eagle
	pHabEscopeta, //Habilidad escopeta
	pHabSawnoff, //Habilidad escopeta recortada
	pHabEscopetaCom, //Habilidad escopeta de combate
	pHabUzi, //Habilidad Tec-9 y Uzi
	pHabMP5, //Habilidad MP5
	pHabAK47, //Habilidad AK47
	pHabM4, //Habilidad M4
	pHabFranco, //Habilidad francotirador
	pInterior, //Interior del jugador al desconectarse
	pVirtualWorld, //VW del jugador al desconectarse
	pBol[MAX_SLOTS_INV], //Slot de cada bolsillo
	pBolCant[MAX_SLOTS_INV], //Cantidad de cada bolsillo
	pManoIzq, //Objeto en mano izquierda
	pManoIzqCant, //Cantidad objeto mano izquierda
	pManoDer, //Objeto en mano derecha
	pManoDerCant, //Cantidad objeto en mano derecha
	pMuerto, //Sistema de muerte (en crack)
	pEspalda, //Arma en la espalda
	pEspaldaCant, //Munición en la espalda
	pCint[MAX_SLOTS_CT], //Slot de cada cinturón
	pCintCant[MAX_SLOTS_CT], //Cantidad de cada cinturón
	pServicioPD, //Servicio LSPD
	pServicioFD, //Servicio LSFD
	pServicioMD, //Servicio para informes y reanimar
	pLlaveCoche[5], //Llaves de vehiculos propios
	pLlaveCochePrestado[5], //Llaves de vehiculos prestados
	pMinPayDay, //Minutos conectados en relacción al payday
	pLicConduccion, //Licencia conducción
	pPuntosConduccion,
	pLicNavegacion, //Licencia navegación
	pLicAviacion, //Licencia aviación
	pLicArmas, //Licencia armas
	pLicPesca, //Licencia pesca
	pLicCaza, //Licencia caza
	pCasa, //Casa del jugador
	pCasaAlq, //Casa alquilada del jugador
	pNegocio, //Negocio del jugador
	pTaller, //Taller en el que trabaja (mecánico)
	pHabMec, //Habilidad de mecánico
	pHabLad, //Habilidad de ladrón
	pTiempoRobo, //Tiempo que tiene que pasar para volver a robar
	pAdiccion[5], //Adiccion a las drogas
	pDrConsumida[5], //Drogas consumidad
	pFuerza, //Fuerza del jugador
	pCansancioEntrenar, //Cansancio despues de entrenar
	pMinutosJugador, //Tiempo total jugado
    pCheckpoint, // Checkpoint informes
	pToy[5],
	Float:pToyX[5],
	Float:pToyY[5],
	Float:pToyZ[5],
	Float:pToyrX[5],
	Float:pToyrY[5],
	Float:pToyrZ[5],
	Float:pToytX[5],
	Float:pToytY[5],
	Float:pToytZ[5],
	pEspecialBone,
	pProductos,
};
new JugadorInfo[MAX_PLAYERS][pInfo];

//-------------------------------------------------------------

enum cInfo //Información coches
{
	cSQLID, //ID en base de datos
	cID, //ID en SAMP
	cLlave, //Llave del vehículo
	cModelo, //Modelo del vehículo
	Float:cPosX, //Posición X
	Float:cPosY, //Posición Y
	Float:cPosZ, //Posición Z
	Float:cZAngle, //Ángulo
	cColor1, //Color 1
	cColor2, //Color 2
	cComprado, //Si tiene propietario
	cDueno[MAX_PLAYER_NAME], //Nombre del propietario
	cNombreModelo[MAX_PLAYER_NAME], //Nombre del modelo
	cValor, //Coste del vehículo
	cCerrado, //Si está cerrado
	cGas, //Combustible
	cEnDeposito, //Si está en el depósito
	cMaletero[10], //Slot de cada maletero
	cMaleteroCant[10], //Cantidad de cada maletero
	cMaxMaletero, //Número de slots que el maletero podrá tener
	cPanels, //Daño superficies
	cDoors, //Daño puertas
	cLights, //Daño luces
	cTires, //Ruedas pinchadas
	Float:cDamage, //Daño del vehículo
	cVirtualWorld, //VW del vehículo
	cInterior, //Interior del vehículo
	cGuantera[2], //Slot de cada maletero
	cGuanteraCant[2], //Cantidad de cada maletero
	cCapoRoto,
	cBaulRoto,
	cRadioStatus,
	cRadioURL[128],
};
new CocheInfo[MAX_VEHICLES][cInfo];

enum hInfo //Información casas
{
	hSQLID, //ID en base de datos
	Float:hEntradaX, //Pos x de entrada
	Float:hEntradaY, //Pos y de entrada
	Float:hEntradaZ, //Pos z de entrada
	Float:hSalidaX, //Pos x de salida
	Float:hSalidaY, //Pos y de salida
	Float:hSalidaZ, //Pos z de salida
	hBarrio[90], //Nombre del barrio
	hVirtualWorld, //VW de la casa
	hInterior, //Int de la casa
	hVirtualWorld2, //VW de salida
	hInterior2, //Int de salida
	hValor, //Precio de la casa
	hComprada, //Si está comprada
	hDueno[60], //Nombre del dueño
	hCerrada, //Si está cerrada
	Text3D:hPickup, //3DText
	hAlquilable, //Si está alquilable
	hPAlquiler, //Precio de alquiler
	hInquilinos, //Personas residentes en la casa
	hArmario[10], //Slot de cada armario
	hArmarioCant[10], //Cantidad de cada slot
	hDineroGuardado, //Dinero guardado en la casa
};
new CasaInfo[MAX_HOUSES][hInfo];

enum nInfo //Información negocios
{
	nSQLID, //ID en base de datos
	Float:nEntradaX, //Pos x de entrada
	Float:nEntradaY, //Pos y de entrada
	Float:nEntradaZ, //Pos z de entrada
	Float:nSalidaX, //Pos x de salida
	Float:nSalidaY, //Pos y de salida
	Float:nSalidaZ, //Pos z de salida
	nNombre[120], //Nombre del negocio
	nTipo, //Tipo de negocio
	nVirtualWorld, //VW del negocio
	nInterior, //Int del negocio
	nVirtualWorld2, //VW de salida
	nInterior2, //Int de salida
	nValor, //Precio del negocio
	nComprado, //Si está comprado
	nDueno[60], //Nombre del dueño
	nCerrado, //Si está cerrado
	//Text3D:nPickup, //3DTextLabel
	nDineroGuardado, //Dinero guardado en el negocio
	nProd, //Productos del negocio
	nMaxAlmacen, //Máximo slots de almacén
	nAlmacen[25], //Slot de cada almacén
	nAlmacenCant[25], //Cantidad de cada slot
	Float:nTallerEX, //Pos x de entrada taller
	Float:nTallerEY, //Pos y de entrada taller
	Float:nTallerEZ, //Pos z de entrada taller
	Float:nTallerERotZ, //Rot entrada taller
	Float:nTallerSX, //Pos x de salida taller
	Float:nTallerSY, //Pos y de salida taller
	Float:nTallerSZ, //Pos z de salida taller
	Float:nTallerSRotZ, //Rot entrada taller
};
new NegocioInfo[MAX_NEGS][nInfo];

enum fInfo //Sistema facciones
{
    fID,
    fNombre[60],
    fRango1[32],
    fRango2[32],
    fRango3[32],
    fRango4[32],
    fRango5[32],
    fRango6[32],
    fRango7[32],
    fRango8[32],
    fRango9[32],
    fRango10[32],
    fRango11[32],
    fRango12[32],
    fLider[32],
    fTipo,
	fColor[9],
	fPuntosExpansion,
	fTiempoArmas,
	fTiempoDrogas
};
new FamiliaInfo[MAX_FACCS][fInfo];

enum dData //Sistema objetos caídos
{
    DropID,
    DropCantidad,
    Float:DropPosX,
    Float:DropPosY,
    Float:DropPosZ,
    DropVWorld,
    DropInterior,
    Persona[60],
};
new DropInfo[MAX_DROP_ITEM][dData];

enum ConceInfo //Concesionarios
{
	Float:cX,
	Float:cY,
	Float:cZ,
	Float:ctX,
	Float:ctY,
	Float:ctZ,
	cNombre[128],
}
new Concesionarios[7][ConceInfo] = { 
	{2131.8350,-1150.7211,24.1265, 2126.2341,-1132.8004,25.2141, "Coutt and Schutz"}, // Listo
	{1083.2563,-1226.5657,15.8203, 1092.5422,-1237.6737,18.0718, "Terrain Cars"}, // Listo
	{1097.6643,-1370.0303,13.9844, 1088.4171,-1379.3995,13.4515, "Gentlemen Cars"}, // Listo
	{521.2985,-1293.2179,17.2422, 528.9742,-1286.6652,17.3518, "Grotti Motors"}, // Listo
	{332.0264,-1350.4872,14.5078, 340.3351,-1356.1328,14.2517, "Motorsport"}, // Listo
	{1952.8345,-2179.1643,13.5469, 1936.2897,-2307.1697,13.5469, "Flying Stars Planes"}, // Listo
	{732.8066,-1476.6700,5.4688, 728.8990,-1503.9154,0.0934, "Seaside Boats"} // Listo
};

enum datos_del_coche
{
	dcVIP,
	dcNombre[30],
	dcIDModel,
	dcPrecio,
	dcConcesionario, // Concesionario
	dcNivel,
}
new datacar[MAX_CAR_DATA][datos_del_coche] = {
/* TARTANAS GAMA CHUNGA */ // PRECIOS LS-RP.ES

{0, "Glendale", 466, 25000, 1,1},
{0, "Oceanic", 467, 22000, 1,1},
{0, "Clover", 542, 20000, 1,1},
{0, "Tampa", 549, 15000, 1,1},
{0, "Walton", 478, 10000, 1,1},
{0, "Sadler", 543, 12000, 1,1},
{0, "Esperanto", 419, 20000, 1,1},
{0, "Buccaneer", 518, 25000, 1,1},
{0, "Blista", 496, 40000, 1,1},
{0, "Perennial", 404, 18000, 1,1},
{0, "Regina", 479, 20000, 1,1},

/* LOWRIDERS / OTROS */ // PRECIOS LS-RP.ES

{0, "Voodoo", 412, 40000, 1,3},
{0, "Remington", 534, 50000, 1,3},
{0, "Tahoma", 566, 20000, 1,2},
{0, "Majestic", 517, 30000, 1,2},
{0, "Tornado", 576, 30000, 1,3},
{0, "Broadway", 575, 20000, 1,3},
{0, "Savanna", 567, 45000, 1,3},
{0, "Slamvan", 535, 45000, 1,3},
{0, "Blade", 536, 40000, 1,3},
{0, "Stallion", 439, 30000, 1,2},
{1, "Phoenix", 603, 300000, 1,4},
{0, "Hermes", 474, 20000, 1,4},
{0, "Sabre", 475, 30000, 1,3},

/* FRAGONETAS Y CURROS */ // PRECIOS LS-RP.ES

{0, "Tractor", 531, 45000, 2,1},
{0, "Benson", 499, 35000, 2,1},
{0, "Moonbeam", 418, 20000, 2,1},
{0, "Bobcat", 422, 20000, 2,1},
{0, "Pony", 413, 30000, 2,2},
{0, "Rumpo", 440, 25000, 2,2},
{0, "Picador", 600, 15000, 2,3},
{0, "Burrito", 482, 50000, 2,3},
{0, "Yosemite", 554, 20000, 2,3},
{0, "Camper", 483, 50000, 2,4},
{1, "Quad", 471, 30000, 2,12},

/* 4x4 */ // PRECIOS LS-RP.ES

{0, "Rancher", 489, 80000, 2,2},
{0, "Landstalker", 400, 50000, 2,3},
{0, "Huntley", 579, 150000, 2,5},
{0, "Towtruck", 525, 35000, 2,2},
{0, "Mesa", 500, 30000, 2,3},


/* BERLINAS */ // PRECIOS LS-RP.ES

{0, "Greenwood", 492, 30000, 3,1},
{0, "Virgo", 491, 18000, 3,1},
{0, "Willard", 529, 20000, 3,1},
{0, "Manana", 410, 15000, 3,1},
{0, "Bravura", 401, 12000, 3,1},
{0, "Previon", 436, 15000, 3,1},
{0, "Primo", 547, 20000, 3,2},
{0, "Emperor", 585, 20000, 3,2},
{0, "Nebula", 516, 20000, 3,2},
{0, "Sunrise", 550, 30000, 3,2},
{0, "Intruder", 546, 15000, 3,2},
{0, "Vincent", 540, 30000, 3,2},
{0, "Fortune", 526, 20000, 3,2},
{0, "Cadrona", 527, 20000, 3,2},
{0, "Ford Crown Victoria", 426, 32000, 3,3},
{0, "Merit", 551, 50000, 3,3},
{0, "Sentinel", 405, 50000, 3,5},
{0, "Washington", 421, 50000, 3,5},
{0, "Admiral", 445, 30000, 3,5},
{0, "Elegant", 507, 50000, 3,5},

/* STREET RACERS */ // PRECIOS LS-RP.ES

{0, "Flash", 565, 50000, 4,3},
{0, "Club", 589, 35000, 4,3},
{0, "Stratum", 561, 90000, 4,3},
{0, "Alpha", 602, 50000, 4,3},
{0, "Uranus", 558, 100000, 4,3},
{0, "Euros", 587, 100000, 4,4},
{0, "Jester", 559, 100000, 4,5},
{1, "ZR-350", 477, 300000, 4,5},
{0, "Buffalo", 402, 400000, 4,6},
{0, "Elegy", 562, 110000, 4,6},
{0, "Sultan", 560, 100000, 4,6},
{0, "Super GT", 506, 400000, 4,8},
{1, "Infernus", 411, 1500000, 4,8},

/* COSTE ELEVADO */ // PRECIOS LS-RP.ES

{0, "Journey", 508, 60000, 5,5},
{0, "Hustler", 545, 50000, 5,5},
{0, "Windsor", 555, 50000, 5,5},
{0, "Feltzer", 533, 20000, 5,5},
{0, "Stafford", 580, 150000, 5,8},
{0, "Stretch", 409, 180000, 5,8},

/* MOTOS */ // PRECIOS LS-RP.ES

{0, "Freeway", 463, 20000, 5,3},
{0, "Wayfarer", 586, 25000, 5,3},
{1, "Sanchez", 468, 80000, 5,4},
{0, "BF-400", 581, 50000, 5,5},
{1, "FCR-900", 521, 150000, 5,7},

/* SUPERCARS */ // PRECIOS LS-RP.ES

{0, "Comet", 480, 200000, 5,8},
{1, "Banshee", 429, 700000, 5,8},
{1, "Bullet", 541, 1000000, 5,8},
{1, "Cheetah", 415, 800000, 5,10},
{1, "Turismo", 451, 2000000, 5,10},

/* AERONAVES */ // PRECIOS LS-RP.ES

{1, "Maverick", 487, 1400000, 6,10},
{1, "Dodo", 593, 900000, 6,10},
{1, "Shamal", 519, 1500000, 6,10},
{1, "Skimmer", 460, 970000, 6,10},
{1, "Beagle", 511, 2000000, 6,10},

/* BARCOS */ // PRECIOS LS-RP.ES

{1, "Reefer", 453, 300000, 7,1},
{1, "Tropic", 454, 1500000, 7,8},
{1, "Squalo", 446, 1500000, 7,5},
{1, "Speeder", 452, 1500000, 7,5},
{1, "Jetmax", 493, 1500000, 7,8},
{1, "Marquis", 484, 1000000, 7,8},

{1, "Faggio", 462, 7000, 5,4},
{1, "PizzaBoy", 448, 5000, 5,4},
{1, "BMX", 481, 1000, 5,4},
{1, "Bike", 509, 500, 5,4},
{1, "Mountain Bike", 510, 2000, 5,4}
};

enum TiempoInfo //Tiempo aleatorio
{
	TiempoID
};

new TiempoAleatorioID[][TiempoID] =
{
{0},{1},{2},{3},
{4},{5},{6},{7},
{10},{11},{17},
{18},{12},{13},{14},
{15}
};

enum cpInfo //Objetos trafico
{
	cpType,
	cpCreated,
    Float:cpX,
    Float:cpY,
    Float:cpZ,
    cpObject,
};
new ObjectsInfo[MAX_COPOBJS][cpInfo];

//----------------------------------------//

enum fuegoInfo //Objetos fuego
{
	fuCreado,
	fuVida,
    Float:fuX,
    Float:fuY,
    Float:fuZ,
    fuObjeto,
    fuTipo,
};
new FuegoInfo[MAX_FUEGOS][fuegoInfo];
//-------------------------------------// mapas

enum objetoInfo //Objetos fuego
{
	obCreado,
    Float:obX,
    Float:obY,
    Float:obZ,
    Float:obrX,
    Float:obrY,
    Float:obrZ,
    obObjeto,
};
new ObjectInfo[MAX_OBJETOS][objetoInfo];


enum objetoInfo2 //Objetos fuego
{
	obModelo,
    obNombre[128],
};
new Objetos[][objetoInfo2] = {
{643,  "Mesa con sillas azul"},
{1281, "Mesa con sillas umbrella"},
{1594, "Mesa con sillas ajedrez"},
{1810, "Silla plegable gris"},
{2121, "Silla plegable roja"},
{1433, "Mesa pequeña madera"},
{1516, "Mesa pequeña madera 2"},
{1708, "Sillón personal 1"},
{1709, "Sillón personal 2"},
{1728, "Sillón grande 1"},
{1481, "Asadora común pequeña"},
{1518, "Televisor pequeño"},
{1412, "Reja rompible mediana"},
{1411, "Reja rompible alambrada"},
{1421, "Cajas pequeñas"},
{922,  "Fila de cajas"},
{1271, "Caja mediana"},
{939,  "Estanteria cajas 1"},
{942,  "Estanteria cajas 2"},
{2567, "Estanteria cajas 3"},
{941,  "Mesa trabajo personal"},
{936,  "Mueble trabajo personal"},
{1347, "Basurero viejo pequeño"},
{1365, "Basurero viejo grande"},
{1216, "Tarro gasolina 1"},
{1222, "Tarro gasolina 2"},
{1225, "Tarro explotable 3"},
{3864, "Farola grande construcción"},
{3578, "Barrera amarilla"},
{1340, "Puesto de Hotdogs"},
{946,  "Aro de basketball"},
{3497, "Aro pared basket"},
{3860, "Puesto feria 1"},
{3861, "Puesto feria 2"},
{1570, "Puesto feria 3"},
{1571, "Puesto feria 4"}
};

//---------------------------------------//

//News
//--------- Msyql ---------//
new ConectadoBaseDatos;
//--------- Sistema de logueo ---------//
new JugadorLogueado[MAX_PLAYERS];
new JugadorRegistrado[MAX_PLAYERS];
new IntentosLogueo[MAX_PLAYERS];
//--------- Sistema de spawn ---------//
new PrimerSpawn[MAX_PLAYERS];
//--------- Sistema de chat ---------//
new ChatNormal = 1;
//--------- Sistema admin duty ---------//
new AdminDuty[MAX_PLAYERS];
//--------- Sistema godmode ---------//
new GodMode[MAX_PLAYERS];
//--------- Comando /gotomark ---------//
new Float:MarkX[MAX_PLAYERS], Float:MarkY[MAX_PLAYERS], Float:MarkZ[MAX_PLAYERS], Float:MarkA[MAX_PLAYERS], MarkI[MAX_PLAYERS], MarkVW[MAX_PLAYERS];
//--------- Sistema de vuelo ---------//
new Volando[MAX_PLAYERS];
//--------- Sistema de recon ---------//
new Float:RecPos[MAX_PLAYERS][4], IntRec[MAX_PLAYERS], VwRec[MAX_PLAYERS];
//--------- Chat OOC /b ---------//
new ChatOOC[MAX_PLAYERS];
//--------- Comando /yo ---------//
new YoTexto[MAX_PLAYERS][60];
new Text3D:Yo3DText[MAX_PLAYERS];
new Yo[MAX_PLAYERS];
new Text3D:Heridas[MAX_PLAYERS];
new RecibioHeadShot[MAX_PLAYERS];
new RecibioDisparo[MAX_PLAYERS];
//--------- Puertas LSPD ---------//
new lspdpuerta1, lspdpuerta2, lspdpuerta3, lspdpuerta4, lspdpuerta5, lspdpuerta6, lspdpuerta7;
new lspdpuertaint1, lspdpuertaint2;
new Celda1, Celda2, Celda3;
new lspddeposito;
new puertaprision, puertaprision2;
new puertaceldaprision1;
new puertaceldaprision2;
new puertaceldaprision3;
new puertaceldaprision4;
new puertaceldaprision5;
new puertaceldaprision6;
new puertaceldaprision7;
new puertaceldaprision8;
new puertaceldaprision9;
new puertaceldaprision10;
new puertaceldaprision11;
new puertaceldaprision12;
new puertaceldaprision13;
new puertaceldaprision14;
new puertaceldaprision15;
new puertapatioprision;
//--------- Puertas LSN ---------//
new PuertaEstudio1, PuertaEstudio2;
new LSNpuerta1, LSNpuerta2;
//--------- Comando reclutar ---------//
new reclutarfaccion[MAX_PLAYERS];
new reclutarlider[MAX_PLAYERS];
//--------- Sistema arrancado vehiculos ---------//
new EncendiendoMotor[MAX_PLAYERS];
//--------- Name OFF ---------//
new PlayerNameOff[MAX_PLAYERS];
//--------- Sistema de muerte ---------//
new Float:MuertoX[MAX_PLAYERS], Float:MuertoY[MAX_PLAYERS], Float:MuertoZ[MAX_PLAYERS];
new MuertoInt[MAX_PLAYERS], MuertoVW[MAX_PLAYERS];
new MuertoTimer[MAX_PLAYERS];
new MuertoFlashTimer[MAX_PLAYERS];
new Muerte[MAX_PLAYERS];
//--------- Táser ---------//
new Taseado[MAX_PLAYERS];
new TaserRecarga[MAX_PLAYERS];
new BalasDeGoma[MAX_PLAYERS];
new BaleadoGoma[MAX_PLAYERS];
//--------- Objetos caídos ---------//
new DropObject[MAX_DROP_ITEM];
//--------- Sistema de vehículos ---------// <--importante de cojones
new CodigoLlave;
new TotalVeh;
//--------- Sistema esposas ---------//
new Esposado[MAX_PLAYERS];
//--------- Sistema esposas ---------//
new SolicitaRefuerzos[MAX_PLAYERS];
new SolicitaTodos[MAX_PLAYERS];
new NoRefAuto[MAX_PLAYERS];
//--------- Máscara antigas ---------//
new MascaraGas[MAX_PLAYERS];
//--------- Timer de ceder ---------//
new CederTiempo[MAX_PLAYERS];
//--------- Timer de recargar ---------//
new RecargarTiempo[MAX_PLAYERS];
//--------- Sistema de multas ---------//
new MultaPrecio[MAX_PLAYERS];
new Multador[MAX_PLAYERS];
//--------- Sistema de multas ---------//
new LlenandoDeposito[MAX_PLAYERS];
//--------- VenderVeh ---------//
new VenderVeh[MAX_PLAYERS];
//--------- VenderVehA ---------//
new VenderVehAPrecio[MAX_PLAYERS];
new VenderVehAVendedor[MAX_PLAYERS];
new VenderVehALlave[MAX_PLAYERS];
//--------- Sistema de depósito/desguace ---------//
new VehExplotado[MAX_VEHICLES];
//--------- Localizarveh ---------//
new LocalizarVeh[MAX_PLAYERS];
//--------- Capó y maletero ---------//
new VehCapo[MAX_VEHICLES];
new VehMaletero[MAX_VEHICLES];
new VehMaleteroPlayer[MAX_PLAYERS];
//--------- Velocímetro ---------//
new PlayerText:vvel[MAX_PLAYERS],PlayerText:fuel[MAX_PLAYERS],velocidad[MAX_PLAYERS];
new PlayerText:WebUrl[MAX_PLAYERS];
//--------- Sistema autoescuela ---------//
new EnAutoEscuela[MAX_PLAYERS];
new CheckPointAutoEscuela[MAX_PLAYERS];
new MaxVelAutoEscuela[MAX_PLAYERS];
new MaxTiempoAutoEscuelaTimer[MAX_PLAYERS];
//--------- Directo LSN ---------//
new DirectoLSNCoche[MAX_VEHICLES];
new DirectoLSNEstudio;
//--------- Sistema casas ---------//
new TotalCasas;
//--------- Sistema negocios ---------//
new TotalNegs;
new Contratador[MAX_PLAYERS];
new Contrato[MAX_PLAYERS];
//--------- Sistema trabajos ---------//
new OfertaTrabajo[MAX_PLAYERS];
new Trabajando[MAX_PLAYERS];
new Tarifa[MAX_PLAYERS];
new TimerDejarTrabajar[MAX_PLAYERS];
new PizzaRepartida[MAX_PLAYERS];
new SolicitaPizza[MAX_PLAYERS];
new CalleBarrida[MAX_PLAYERS];
new Cosechado[MAX_PLAYERS];
new Fumigado[MAX_PLAYERS];
new TaxiConductor[MAX_PLAYERS];
new TaxiPasajero[MAX_PLAYERS];
new TaxiCoste[MAX_PLAYERS];
new SolicitaTaxi[MAX_PLAYERS];
new ReparacionTipo[MAX_PLAYERS];
new ReparacionMeca[MAX_PLAYERS];
new ReparacionPrecio[MAX_PLAYERS];
new RepintadoColor1[MAX_PLAYERS];
new RepintadoColor2[MAX_PLAYERS];
new RepintadoMeca[MAX_PLAYERS];
new RepintadoPrecio[MAX_PLAYERS];
new PuertaForzada[MAX_PLAYERS];
new Robando[MAX_PLAYERS];
new RoboTimer[MAX_PLAYERS];
new Puenteando[MAX_PLAYERS];
new PuenteTimer[MAX_PLAYERS];
new PuenteHecho[MAX_PLAYERS];
new PescaRecogida[MAX_PLAYERS];
new DineroPesca[MAX_PLAYERS];
//--------- Menú de tiendas y locales ---------//
new Menu:restaurantes;
new Menu:bares;
new Menu:comidasrapidas;
new Menu:discoteca;
new Menu:puticlub;
new Menu:ammunation;
new Menu:menu247;
new Menu:tiendadeportes;
new Menu:ferreteria;
new Menu:tiendaropa;
new Menu:electronica;
new Menu:estanco;
new Menu:licoreria;
//--------- Sistema teléfono ---------//
new EnLlamada[MAX_PLAYERS];
new ToqueLlamada[MAX_PLAYERS];
new PersonaEnLlamada[MAX_PLAYERS];
new ToqueLlamadaTimer[MAX_PLAYERS];
new CostoLlamadaTimer[MAX_PLAYERS];
new CosteTotalLlamada[MAX_PLAYERS];
//--------- Sistema agenda ---------//
new AgendaNumero[MAX_PLAYERS][16];
new AgendaContacto[MAX_PLAYERS][16][41];
new MirandoContactoAgenda[MAX_PLAYERS];
//--------- Sistema facciones ---------//
new TotalFaccs;
//--------- Sistema idiomas ---------//
new Idioma[MAX_PLAYERS];
//--------- Comando /oldcar ---------//
new oldcarid[MAX_PLAYERS];
//--------- Comando /pagar ---------//
new PagarTimer[MAX_PLAYERS];
//--------- Tiempo automático ---------//
new DefaultWeather;
//--------- Comando /editarnego ---------//
new EditNegoPos[MAX_PLAYERS];
//--------- Sistema plantaciones ---------//
new TotalPlantaciones;
new CodigoPlantacion;
//--------- Comando /preparar ---------//
new PreparandoDroga[MAX_PLAYERS];
//--------- Selección skin tiendas de ropa ---------//
new ropa = mS_INVALID_LISTID;

new ropahombre = mS_INVALID_LISTID;
new ropamujer = mS_INVALID_LISTID;

new primerropahombre = mS_INVALID_LISTID;
new primerropamujer = mS_INVALID_LISTID;

new ropaservicio = mS_INVALID_LISTID;
new uniformespd = mS_INVALID_LISTID;
new uniformesfd = mS_INVALID_LISTID;
new catalogocoches1 = mS_INVALID_LISTID;
new catalogocoches2 = mS_INVALID_LISTID;
new catalogocoches3 = mS_INVALID_LISTID;
new catalogocoches4 = mS_INVALID_LISTID;
new catalogocoches5 = mS_INVALID_LISTID;
new catalogocoches6 = mS_INVALID_LISTID;
new catalogocoches7 = mS_INVALID_LISTID;
//--------- Depósito LSPD ---------//
new AreaDepositoLSPD;
//--------- Sistema de misiones de pandillas ---------//
new MisionEncargada[MAX_PLAYERS];
new RealizandoMision[MAX_PLAYERS];
new MuroAPintar[MAX_PLAYERS];
//--------- ATM Transferir ---------//
new TransferirPlayer[MAX_PLAYERS];
//--------- Comando /Entrenar ---------//
new HaciendoPressBanca[MAX_PLAYERS];
new RepeticionesPressBanca[MAX_PLAYERS];
new ProgresoPressBanca[MAX_PLAYERS];
new PressBancaBarraObjeto[3];
//--------- Sistema matrículas ---------//
new MatriculasActivadas[MAX_PLAYERS];
new PlayerText3D:MatriculasCoches[MAX_PLAYERS][MAX_VEHICLES];
//--------- Anticheat ---------//
new DineroAC[MAX_PLAYERS];
new PingKick[MAX_PLAYERS];
new ArmaSpawnAC[MAX_PLAYERS];
new TimerBlockIP[MAX_PLAYERS];
new AFKTimer[MAX_PLAYERS];
new ChalecoAC[MAX_PLAYERS];
new VehicleHack[MAX_PLAYERS];
//--------- Sistema de anuncios ---------//
new anunciotiempo;
//--------- Comando /autoreparar ---------//
new SiendoReparado[MAX_PLAYERS];
//--------- Comando /cinturon ---------//
new CinturonPuesto[MAX_PLAYERS];
//--------- Comando /PrestarLlave ---------//
new PrestadorCoche[MAX_PLAYERS];
new LlavePrestada[MAX_PLAYERS];
//--------- /Sirena ---------//
new SirenaCoche[MAX_VEHICLES];
new LucesSirena[MAX_VEHICLES];
//funcioes
//------------------------------
Funcion CerrarPeaje0()
{
    MoveDynamicObject(Peaje[0], 50.51134, -1534.63757, 4.72510, 0.025, 0.00000, -90, 82.1201);
}

Funcion CerrarPeaje1()
{
    MoveDynamicObject(Peaje[1], 51.38313, -1528.17712, 4.72510, 0.025, 0.00000, 90, 81.00000);
}

Funcion CerrarPeaje2()
{
    MoveDynamicObject(Peaje[2], 2879.31592, -800.00293, 10.55326, 0.025, 0.00000, -90.00000, 0.00000);
}

Funcion CerrarPeaje3()
{
    MoveDynamicObject(Peaje[3], 2839.97876, -799.64868, 10.63055, 0.025, 0.00000, 90.00000, 0.00000);
}

Funcion CerrarPeaje4()
{
    MoveDynamicObject(Peaje[4], 2889.98730, -799.98901, 10.63055, 0.025, 0.00000, 90.00000, 0.00000);
}

Funcion CerrarPeaje5()
{
    MoveDynamicObject(Peaje[5], 1712.20898, 404.11877, 30.36735, 0.025, 0.00000, -90.00000, -18.24000);
}

Funcion CerrarPeaje6()
{
    MoveDynamicObject(Peaje[6], 1686.43152, 415.80704, 30.42270, 0.025,  0.00000, 90.00000, -18.84000);
}
//-------------------------------
forward AutoRol(playerid, string[]);
public AutoRol(playerid, string[])
{
	new mensaje[128];
	if(IsPlayerConnected(playerid))
    {
        format(mensaje, sizeof(mensaje), "> %s %s", NombreJugadorProxy(playerid), string);
 		SendClientMessage(playerid, COLOR_ACCION, mensaje);
 		format(mensaje, sizeof(mensaje), "* %s",string);
		SetPlayerChatBubble(playerid,mensaje,COLOR_ACCION,20.0,5000);
  	}
  	return 1;
}

forward EliminarInforme(playerid);
public EliminarInforme(playerid)
{
    for(new i; i < MAX_INFORMES; i++)
	{
		if(Informes[i][iPaciente] == playerid && Informes[i][iEstado] != 2)
		{
  			KillTimer(Informes[i][iTimer]);
			Informes[i][iEstado] = 0;
		}
	}
	return 1;
}


forward EliminarBusqueda(id);
public EliminarBusqueda(id)
{
    KillTimer(Buscados[id][bTimer]);
	Buscados[id][bCreado] = 0;
	Buscados[id][bEliminando] = 0;
	return 1;
}

forward EliminarInforme2(playerid);
public EliminarInforme2(playerid)
{
    for(new i; i < MAX_INFORMES; i++)
	{
		if(Informes[i][iPaciente] == playerid && Informes[i][iEstado] == 2)
		{
  			KillTimer(Informes[i][iTimer]);
			Informes[i][iEstado] = 0;
		}
	}
	return 1;
}

forward SpawnBug(playerid);
public SpawnBug(playerid)
{
    new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	if(pos[0] >= 1920 && pos[0] <= 1970 && pos[1] >= 1325 && pos[1] <= 1375)
	{
	    JugadorInfo[playerid][pMuerto] = 0;
	    TogglePlayerControllable(playerid, 1);
	    SetPlayerPos(playerid, 1089.3743,-1490.7974,22.7622);
	}
	return 1;
}

stock EspaciosMaletero(i) //TESTEAR
{
    new espacios;
    switch(i)
    {
        case 400: { espacios = 10; }
        case 401: { espacios = 5; }
        case 402: { espacios = 5; }
        case 403: { espacios = 10; }
        case 404: { espacios = 5; }
        case 405: { espacios = 5; }
        case 406: { espacios = 7; }
        case 407: { espacios = 10; }
        case 408: { espacios = 7; }
        case 409: { espacios = 5; }
        case 410: { espacios = 4; }
        case 411: { espacios = 3; }
        case 412: { espacios = 5; }
        case 413: { espacios = 10; }
        case 414: { espacios = 10; }
        case 415: { espacios = 3; }
        case 416: { espacios = 10; }
        case 417: { espacios = 7; }
        case 418: { espacios = 6; }
        case 419: { espacios = 5; }
        case 420: { espacios = 5; }
        case 421: { espacios = 5; }
        case 422: { espacios = 6; }
        case 423: { espacios = 7; }
        case 424: { espacios = 2; }
        case 425: { espacios = 2; }
        case 426: { espacios = 10; }
        case 427: { espacios = 10; }
        case 428: { espacios = 7; }
        case 429: { espacios = 4; }
        case 430: { espacios = 7; }
        case 431: { espacios = 7; }
        case 432: { espacios = 10; }
        case 433: { espacios = 10; }
        case 434: { espacios = 2; }
        case 435: { espacios = 7; }
        case 436: { espacios = 4; }
        case 437: { espacios = 7; }
        case 438: { espacios = 5; }
        case 439: { espacios = 4; }
        case 440: { espacios = 10; }
        case 442: { espacios = 1; }
        case 443: { espacios = 2; }
        case 444: { espacios = 10; }
        case 445: { espacios = 5; }
        case 446: { espacios = 1; }
        case 447: { espacios = 2; }
        case 448: { espacios = 1; }
        case 449: { espacios = 7; }
        case 450: { espacios = 7; }
        case 451: { espacios = 3; }
        case 452: { espacios = 4; }
        case 453: { espacios = 7; }
        case 454: { espacios = 7; }
        case 455: { espacios = 10; }
        case 456: { espacios = 10; }
        case 457: { espacios = 2; }
        case 458: { espacios = 5; }
        case 459: { espacios = 10; }
        case 460: { espacios = 2; }
        case 461: { espacios = 1; }
        case 462: { espacios = 1; }
        case 463: { espacios = 1; }
        case 466: { espacios = 4; }
        case 467: { espacios = 5; }
        case 468: { espacios = 1; }
        case 469: { espacios = 4; }
        case 470: { espacios = 10; }
        case 471: { espacios = 2; }
        case 472: { espacios = 4; }
        case 473: { espacios = 3; }
        case 474: { espacios = 4; }
        case 475: { espacios = 4; }
        case 476: { espacios = 4; }
        case 477: { espacios = 4; }
        case 478: { espacios = 7; }
        case 479: { espacios = 6; }
        case 480: { espacios = 4; }
        case 482: { espacios = 10; }
        case 483: { espacios = 6; }
        case 484: { espacios = 7; }
        case 485: { espacios = 2; }
        case 486: { espacios = 2; }
        case 487: { espacios = 7; }
        case 488: { espacios = 7; }
        case 489: { espacios = 10; }
        case 490: { espacios = 10; }
        case 491: { espacios = 4; }
        case 492: { espacios = 6; }
        case 493: { espacios = 7; }
        case 494: { espacios = 3; }
        case 495: { espacios = 10; }
        case 496: { espacios = 3; }
        case 497: { espacios = 7; }
        case 498: { espacios = 10; }
        case 499: { espacios = 10; }
        case 500: { espacios = 4; }
        case 502: { espacios = 2; }
        case 503: { espacios = 2; }
        case 504: { espacios = 2; }
        case 505: { espacios = 10; }
        case 506: { espacios = 3; }
        case 507: { espacios = 5; }
        case 508: { espacios = 7; }
        case 511: { espacios = 4; }
        case 512: { espacios = 4; }
        case 513: { espacios = 4; }
        case 514: { espacios = 2; }
        case 515: { espacios = 2; }
        case 516: { espacios = 5; }
        case 517: { espacios = 5; }
        case 518: { espacios = 4; }
        case 519: { espacios = 7; }
        case 520: { espacios = 2; }
        case 521: { espacios = 2; }
        case 522: { espacios = 2; }
        case 523: { espacios = 1; }
        case 524: { espacios = 10; }
        case 525: { espacios = 4; }
        case 526: { espacios = 5; }
        case 527: { espacios = 5; }
        case 528: { espacios = 10; }
        case 529: { espacios = 4; }
        case 530: { espacios = 1; }
        case 531: { espacios = 1; }
        case 532: { espacios = 1; }
        case 533: { espacios = 4; }
        case 534: { espacios = 6; }
        case 535: { espacios = 6; }
        case 536: { espacios = 5; }
        case 537: { espacios = 7; }
        case 538: { espacios = 7; }
        case 540: { espacios = 4; }
        case 541: { espacios = 4; }
        case 542: { espacios = 4; }
        case 543: { espacios = 6; }
        case 544: { espacios = 10; }
        case 545: { espacios = 3; }
        case 546: { espacios = 4; }
        case 547: { espacios = 5; }
        case 548: { espacios = 7; }
        case 549: { espacios = 6; }
        case 550: { espacios = 5; }
        case 551: { espacios = 5; }
        case 552: { espacios = 10; }
        case 553: { espacios = 7; }
        case 554: { espacios = 10; }
        case 555: { espacios = 4; }
        case 556: { espacios = 2; }
        case 557: { espacios = 2; }
        case 558: { espacios = 4; }
        case 559: { espacios = 3; }
        case 560: { espacios = 5; }
        case 561: { espacios = 7; }
        case 562: { espacios = 4; }
        case 563: { espacios = 7; }
        case 565: { espacios = 3; }
        case 566: { espacios = 4; }
        case 567: { espacios = 4; }
        case 568: { espacios = 1; }
        case 569: { espacios = 7; }
        case 570: { espacios = 7; }
        case 571: { espacios = 1; }
        case 572: { espacios = 1; }
        case 573: { espacios = 10; }
        case 574: { espacios = 2; }
        case 575: { espacios = 3; }
        case 576: { espacios = 6; }
        case 577: { espacios = 7; }
        case 578: { espacios = 2; }
        case 579: { espacios = 10; }
        case 580: { espacios = 5; }
        case 581: { espacios = 2; }
        case 582: { espacios = 10; }
        case 583: { espacios = 1; }
        case 585: { espacios = 4; }
        case 586: { espacios = 4; }
        case 587: { espacios = 3; }
        case 588: { espacios = 7; }
        case 589: { espacios = 3; }
        case 592: { espacios = 7; }
        case 593: { espacios = 4; }
        case 595: { espacios = 7; }
        case 596: { espacios = 10; }
        case 597: { espacios = 10; }
        case 598: { espacios = 10; }
        case 599: { espacios = 10; }
        case 600: { espacios = 7; }
        case 601: { espacios = 10; }
        case 602: { espacios = 4; }
        case 603: { espacios = 4; }
        case 609: { espacios = 10; }
    }
    return espacios;
}

forward AsignarTiempoCompraMafias(faccionid, tipo);
public AsignarTiempoCompraMafias(faccionid, tipo)
{
	if(tipo == 1) //Armas
	{
	    FamiliaInfo[faccionid][fTiempoArmas] = 48;
	    SaveFacc(faccionid);
	}
	if(tipo == 2) //Drogas
	{
	    FamiliaInfo[faccionid][fTiempoDrogas] = 48;
	    SaveFacc(faccionid);
	}
	return 1;
}

stock IsPlayerInWater(playerid) //Si está en el agua
{
	new anim = GetPlayerAnimationIndex(playerid);
 	if (((anim >=  1538) && (anim <= 1542)) || (anim == 1544) || (anim == 1250) || (anim == 1062)) return 1;
  	return 0;
}

stock IsPlayerAiming(playerid) //Si está apuntando
{
	new anim = GetPlayerAnimationIndex(playerid);
	if (((anim >= 1160) && (anim <= 1163)) || (anim == 1167) || (anim == 1365) || (anim == 1643) || (anim == 1453) || (anim == 220)) return 1;
 	return 0;
}


forward LoginKick(playerid);
public LoginKick(playerid)
{
	if(JugadorLogueado[playerid] == 0)
	{
		Expulsar(playerid);
	}
	return 1;
}

//-----ANTICHEAT-----//
forward SobeitCheck(playerid);
public SobeitCheck(playerid)
{
	new Float:x, Float:y, Float:z;
    GetPlayerCameraFrontVector(playerid, x, y, z);
    #pragma unused x
    #pragma unused y
    if(z < -0.68)
	{
 		new string[128];
 		format(string, sizeof(string), "[Siglo-XXI]: El jugador '%s' ha sido sorprendido con SobeitMod. Entrada rechazada.", NombreJugador(playerid));
 		SendAdminMessage(Rojo, string);
	    printf(string);
	    JugadorInfo[playerid][pAdvertencias]++;
	    SendClientMessage(playerid, Rojo, "Tu cliente está configurado con el SobeitMod. Tienes una advertencia en tu cuenta. Estás expulsado.");
		Expulsar(playerid);
    }
    return 1;
}

stock GivePlayerMoneyAC(playerid, money)
{
    DineroAC[playerid] += money;
	GivePlayerMoney(playerid, money);
}

stock ResetPlayerMoneyAC(playerid)
{
    DineroAC[playerid] = 0;
	ResetPlayerMoney(playerid);
}
//-----FIN ANTICHEAT-----//

forward TimerEntrenar(playerid, entrenamiento);
public TimerEntrenar(playerid, entrenamiento)
{
	if(entrenamiento == 1) //PressBanca
	{
	    if(HaciendoPressBanca[playerid] == 1)
	    {
			new string[128];
			if(RepeticionesPressBanca[playerid]/20 <= 30)
			{
				format(string, sizeof(string), "Terminas de hacer ejercicio en la plataforma. Realizaste %d repeticiones.", RepeticionesPressBanca[playerid]/20);
			}
			else{format(string, sizeof(string), "Terminas de hacer ejercicio en la plataforma. Realizaste 30 repeticiones."); RepeticionesPressBanca[playerid] = 600;}
			SendClientMessage(playerid, COLOR_PIEL, string);
			TogglePlayerControllable(playerid, 1);
			ApplyAnimation(playerid, "benchpress", "gym_bp_getoff", 1, 0, 0, 0, 0, 0, 1);
			PressBancaBarraObjeto[0] = CreateDynamicObject(2913, barbell_pos[ 0 ][ 0 ], barbell_pos[ 0 ][ 1 ], barbell_pos[ 0 ][ 2 ], barbell_pos[ 0 ][ 3 ], barbell_pos[ 0 ][ 4 ], barbell_pos[ 0 ][ 5 ] );
			PressBancaBarraObjeto[1] = CreateDynamicObject(2913, barbell_pos[ 1 ][ 0 ], barbell_pos[ 1 ][ 1 ], barbell_pos[ 1 ][ 2 ], barbell_pos[ 1 ][ 3 ], barbell_pos[ 1 ][ 4 ], barbell_pos[ 1 ][ 5 ] );
			PressBancaBarraObjeto[2] = CreateDynamicObject(2913, barbell_pos[ 2 ][ 0 ], barbell_pos[ 2 ][ 1 ], barbell_pos[ 2 ][ 2 ], barbell_pos[ 2 ][ 3 ], barbell_pos[ 2 ][ 4 ], barbell_pos[ 2 ][ 5 ] );
			RemovePlayerAttachedObject(playerid, 5);
			JugadorInfo[playerid][pFuerza] += 1;
			RepeticionesPressBanca[playerid] = 0;
			HaciendoPressBanca[playerid] = 0;
			JugadorInfo[playerid][pCansancioEntrenar] += 180;
			return 1;
		}
	}
	return 1;
}

stock MostrarATM(playerid, parte)
{
	new string[128], dialog[250];
	if(parte == 1) //Menú principal
	{
	    format(string, sizeof(string), "\nRetirar dinero");
		strcat(dialog, string);
		format(string, sizeof(string), "\nIngresar dinero");
		strcat(dialog, string);
		format(string, sizeof(string), "\nTransferir dinero");
		strcat(dialog, string);
		format(string, sizeof(string), "\nBalance");
		strcat(dialog, string);
		ShowPlayerDialog(playerid, 24, DIALOG_STYLE_LIST, "Cajero automático", dialog, "Seleccionar", "Salir");
	}
	if(parte == 2) //Retirar dinero
	{
	    format(string, sizeof(string), "Cantidad de dinero en cuenta bancaria: %d$", JugadorInfo[playerid][pDineroBanco]);
	    strcat(dialog, string);
	    format(string, sizeof(string), "\nEscribe la cantidad que deseas retirar.", JugadorInfo[playerid][pDineroBanco]);
	    strcat(dialog, string);
		ShowPlayerDialog(playerid, 25, DIALOG_STYLE_INPUT, "Cajero automático", dialog, "Aceptar", "Salir");
	}
	if(parte == 3) //Ingresar dinero
	{
	    format(string, sizeof(string), "Cantidad de dinero en cuenta bancaria: %d$", JugadorInfo[playerid][pDineroBanco]);
	    strcat(dialog, string);
	    format(string, sizeof(string), "\nEscribe la cantidad que deseas ingresar.", JugadorInfo[playerid][pDineroBanco]);
	    strcat(dialog, string);
		ShowPlayerDialog(playerid, 26, DIALOG_STYLE_INPUT, "Cajero automático", dialog, "Aceptar", "Salir");
	}
	if(parte == 4) //Transferir dinero (ID)
	{
		ShowPlayerDialog(playerid, 27, DIALOG_STYLE_INPUT, "Cajero automático", "Escribe el número de la cuenta bancaria (ID).", "Aceptar", "Salir");
	}
	if(parte == 5) //Transferir dinero (Cantidad)
	{
	    format(string, sizeof(string), "Cantidad de dinero en cuenta bancaria: %d$", JugadorInfo[playerid][pDineroBanco]);
	    strcat(dialog, string);
	    format(string, sizeof(string), "\nEscribe la cantidad que deseas transferir.", JugadorInfo[playerid][pDineroBanco]);
	    strcat(dialog, string);
		ShowPlayerDialog(playerid, 28, DIALOG_STYLE_INPUT, "Cajero automático", dialog, "Aceptar", "Salir");
	}
	if(parte == 6) //Balance
	{
	    format(string, sizeof(string), "Cantidad de dinero en cuenta bancaria: %d$", JugadorInfo[playerid][pDineroBanco]);
		ShowPlayerDialog(playerid, 29, DIALOG_STYLE_MSGBOX, "Cajero automático", string, "Aceptar", "Salir");
		LoopingAnim(playerid,"ped","ATM",4.1,0,1,1,1,1);
	}
	return 1;
}

forward PintarGraffiti(playerid);
public PintarGraffiti(playerid)
{
	if(MuroAPintar[playerid] != NOEXISTE)
	{
		new pintarid = MuroAPintar[playerid];
		MuroAPintar[playerid] = NOEXISTE;

		if(IsValidObject(LugaresPintar[pintarid][Texto])) DestroyObject(LugaresPintar[pintarid][Texto]);

		new nombrefacc[64], color[15], string[128];

		LugaresPintar[pintarid][Texto] = CreateObject(19482, LugaresPintar[pintarid][GraffitiX], LugaresPintar[pintarid][GraffitiY], LugaresPintar[pintarid][GraffitiZ], 180.0, 180.0, LugaresPintar[pintarid][GraffitiRotZ]);

	    format(nombrefacc, sizeof(nombrefacc), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fNombre]);
	    format(color, sizeof(color), "0xFF%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fColor]);
		SetObjectMaterialText(LugaresPintar[pintarid][Texto], nombrefacc, 0, OBJECT_MATERIAL_SIZE_256x128, "Kristen ITC", 28, 0, HexToInt(color), 0x00000000, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);

	    TogglePlayerControllable(playerid, 1);
	    
	    format(string, sizeof(string), "%s ha pintado un graffiti en el muro.", NombreJugadorProxy(playerid));
	    ProxDetector(15.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	    
	    new puntos = 1+random(4);
	    FamiliaInfo[JugadorInfo[playerid][pFaccion]][fPuntosExpansion] += puntos;
	    format(string, sizeof(string), "Tu facción gana %d puntos de expansión por esta acción.", puntos);
	    SendClientMessage(playerid, Amarillo, string);
    }
    return 1;
}

forward DarMisionPandilla(playerid, tipo);
public DarMisionPandilla(playerid, tipo)
{
	return 1;
}

stock ObjetoDroga(id)
{
	switch(id)
	{
	    case 1: return 80;
	    case 2: return 81;
	    case 3: return 82;
	    case 4: return 83;
	    case 5: return 84;
	    case 6: return 75;
	    case 7: return 79;
	    case 8: return 78;
	    case 9: return 77;
	    case 10: return 76;
	}
	return 0;
}

stock ProductosDroga(id)
{
	switch(id)
	{
		case 1: return 5;
	    case 2: return 9;
	    case 3: return 9;
	    case 4: return 9;
	    case 5: return 9;
	    case 6: return 30;
	    case 7: return 50;
	    case 8: return 50;
	    case 9: return 50;
	    case 10: return 50;
	}
	return 0;
}

stock GetPlayerCajaArmamento(playerid, mano)
{
    if(mano == 1) //Mano derecha
	{
		switch(JugadorInfo[playerid][pManoDer])
		{
		    case 102: return 4; //Katana
		    case 103: return 19; //Pistola
		    case 104: return 39; //Cargador Pistola
		    case 105: return 47; //Balas .45 ACP
		    case 106: return 21; //Desert Eagle
		    case 107: return 40; //Cargador Deagle Eagle
		    case 108: return 48; //Balas .50 AE
		    case 109: return 29; //Tec-9
		    case 110: return 43; //Cargador Tec-9
		    case 111: return 25; //Uzi
		    case 112: return 41; //Cargador Uzi
		    case 113: return 26; //MP5
		    case 114: return 42; //Cargador MP5
		    case 115: return 49; //Balas SMG
		    case 116: return 22; //Escopeta
		    case 117: return 23; //Escopeta recortada
		    case 118: return 50; //Cartuchos 12GA
		    case 119: return 27; //AK-47
		    case 120: return 44; //Cargador AK-47
		    case 121: return 51; //Balas AK-47
		    case 122: return 30; //Rifle
		    case 123: return 46; //Cargador rifle
		    case 124: return 53; //Balas rifle
		    case 127: return 61;
		}
	}
	if(mano == 2) //Mano izquierda
	{
		switch(JugadorInfo[playerid][pManoIzq])
		{
		    case 102: return 4; //Katana
		    case 103: return 19; //Pistola
		    case 104: return 39; //Cargador Pistola
		    case 105: return 47; //Balas .45 ACP
		    case 106: return 21; //Desert Eagle
		    case 107: return 40; //Cargador Deagle Eagle
		    case 108: return 48; //Balas .50 AE
		    case 109: return 29; //Tec-9
		    case 110: return 43; //Cargador Tec-9
		    case 111: return 25; //Uzi
		    case 112: return 41; //Cargador Uzi
		    case 113: return 26; //MP5
		    case 114: return 42; //Cargador MP5
		    case 115: return 49; //Balas SMG
		    case 116: return 22; //Escopeta
		    case 117: return 23; //Escopeta recortada
		    case 118: return 50; //Cartuchos 12GA
		    case 119: return 27; //AK-47
		    case 120: return 44; //Cargador AK-47
		    case 121: return 51; //Balas AK-47
		    case 122: return 30; //Rifle
		    case 123: return 46; //Cargador rifle
		    case 124: return 53; //Balas rifle
		    case 127: return 61;
		}
	}
	return 0;
}

stock SetVehicleMatricula(carid)
{
	if(!GetVehicleModel(carid)) return 1;
	new matricula[24];
	if(carid <= MAX_VEHPUBLICO && !CocheLSPD(carid)) //Vehículo scripteado
	{
	    format(matricula, sizeof(matricula), "SA-%d", 990-carid);
		SetVehicleNumberPlate(carid, matricula);
	}
	else if(carid > MAX_VEHPUBLICO && !CocheLSPD(carid))
	{
	    format(matricula, sizeof(matricula), "SA-%d", CocheInfo[carid][cLlave]);
		SetVehicleNumberPlate(carid, matricula);
	}
	else if(CocheLSPD(carid))
	{
	    format(matricula, sizeof(matricula), "SA-%d", carid);
		SetVehicleNumberPlate(carid, matricula);
	}
	return 1;
}

stock GetPlayerCargadorCalibre(playerid, mano)
{
	if(mano == 1) //Mano derecha
	{
		if(JugadorInfo[playerid][pManoDer] == 39) return 1; //Pistola (.45 ACP)
		if(JugadorInfo[playerid][pManoDer] == 40) return 2; //D.Eagle (.50 AE)
		if(JugadorInfo[playerid][pManoDer] == 41) return 3; //Uzi (9mm)
		if(JugadorInfo[playerid][pManoDer] == 42) return 3; //MP5 (9mm)
		if(JugadorInfo[playerid][pManoDer] == 43) return 3; //Tec9 (9mm)
		if(JugadorInfo[playerid][pManoDer] == 44) return 5; //Ak47
		if(JugadorInfo[playerid][pManoDer] == 45) return 6; //M4
		if(JugadorInfo[playerid][pManoDer] == 46) return 7; //Rifle
	}
	if(mano == 2) //Mano izquierda
	{
		if(JugadorInfo[playerid][pManoIzq] == 39) return 1; //Pistola (.45 ACP)
		if(JugadorInfo[playerid][pManoIzq] == 40) return 2; //D.Eagle (.50 AE)
		if(JugadorInfo[playerid][pManoIzq] == 41) return 3; //Uzi (9mm)
		if(JugadorInfo[playerid][pManoIzq] == 42) return 3; //MP5 (9mm)
		if(JugadorInfo[playerid][pManoIzq] == 43) return 3; //Tec9 (9mm)
		if(JugadorInfo[playerid][pManoIzq] == 44) return 5; //Ak47
		if(JugadorInfo[playerid][pManoIzq] == 45) return 6; //M4
		if(JugadorInfo[playerid][pManoIzq] == 46) return 7; //Rifle
	}
	return 0;
}

stock GetPlayerMunicionCalibre(playerid, mano)
{
	if(mano == 1) //Mano derecha
	{
		if(JugadorInfo[playerid][pManoDer] == 47) return 1; //Pistola (.45 ACP)
		if(JugadorInfo[playerid][pManoDer] == 48) return 2; //D.Eagle (.50 AE)
		if(JugadorInfo[playerid][pManoDer] == 49) return 3; //Uzi MP5 Tec9 (9mm)
		if(JugadorInfo[playerid][pManoDer] == 50) return 4; //Escopetas (12GA)
		if(JugadorInfo[playerid][pManoDer] == 51) return 5; //Ak47
		if(JugadorInfo[playerid][pManoDer] == 52) return 6; //M4
		if(JugadorInfo[playerid][pManoDer] == 53) return 7; //Rifle
	}
	if(mano == 2) //Mano izquierda
	{
		if(JugadorInfo[playerid][pManoIzq] == 47) return 1; //Pistola (.45 ACP)
		if(JugadorInfo[playerid][pManoIzq] == 48) return 2; //D.Eagle (.50 AE)
		if(JugadorInfo[playerid][pManoIzq] == 49) return 3; //Uzi MP5 Tec9 (9mm)
		if(JugadorInfo[playerid][pManoIzq] == 50) return 4; //Escopetas (12GA)
		if(JugadorInfo[playerid][pManoIzq] == 51) return 5; //Ak47
		if(JugadorInfo[playerid][pManoIzq] == 52) return 6; //M4
		if(JugadorInfo[playerid][pManoIzq] == 53) return 7; //Rifle
	}
	return 0;
}

stock GetPlayerTelefono(playerid)
{
	switch(JugadorInfo[playerid][pManoDer])
	{
	    case 68: return 68;
	}
	switch(JugadorInfo[playerid][pManoIzq])
	{
	    case 68: return 68;
	}
	for(new x = 0; x<MAX_SLOTS_INV; x++)
	{
	    switch(JugadorInfo[playerid][pBol][x])
		{
		    case 68: return 68;
		}
	}
	return 0;
}

stock GetPlayerReloj(playerid)
{
	switch(JugadorInfo[playerid][pManoDer])
	{
	    case 87: return 87;
	    case 88: return 88;
	    case 89: return 89;
	    case 90: return 90;
	    case 91: return 91;
	    case 92: return 92;
	    case 93: return 93;
	    case 94: return 94;
		case 95: return 95;
	    case 96: return 96;
	    case 97: return 97;
	    case 98: return 98;
	    case 99: return 99;
	    case 100: return 100;
	    case 101: return 101;
	}
	switch(JugadorInfo[playerid][pManoIzq])
	{
	    case 87: return 87;
	    case 88: return 88;
	    case 89: return 89;
	    case 90: return 90;
	    case 91: return 91;
	    case 92: return 92;
	    case 93: return 93;
	    case 94: return 94;
		case 95: return 95;
	    case 96: return 96;
	    case 97: return 97;
	    case 98: return 98;
	    case 99: return 99;
	    case 100: return 100;
	    case 101: return 101;
	}
	for(new x = 0; x<MAX_SLOTS_INV; x++)
	{
	    switch(JugadorInfo[playerid][pBol][x])
		{
		    case 87: return 87;
		    case 88: return 88;
		    case 89: return 89;
		    case 90: return 90;
		    case 91: return 91;
		    case 92: return 92;
		    case 93: return 93;
		    case 94: return 94;
			case 95: return 95;
		    case 96: return 96;
		    case 97: return 97;
		    case 98: return 98;
		    case 99: return 99;
		    case 100: return 100;
		    case 101: return 101;
		}
	}
	return 0;
}

stock GetPlayerArma(playerid)
{
	switch(JugadorInfo[playerid][pManoDer])
	{
	    case 19: return 19;
	    case 20: return 20;
	    case 21: return 21;
	    case 22: return 22;
	    case 23: return 23;
	    case 24: return 24;
	    case 25: return 25;
	    case 26: return 26;
		case 27: return 27;
	    case 28: return 28;
	    case 29: return 29;
	    case 30: return 30;
	    case 31: return 31;
	}
	return 0;
}

stock IsValidSkin(SkinID) //Skins públicos (no facciones legales ni pandillas)
{
        if((SkinID >= 1) && (SkinID <= 70) || (SkinID >= 75) && (SkinID <= 85)||(SkinID == 268)||(SkinID == 72)||(SkinID == 73)||(SkinID >= 111 && SkinID <= 113)||(SkinID >= 117 && SkinID <= 148)||(SkinID >= 150 && SkinID <= 172)||(SkinID >= 176 && SkinID <= 264)||(SkinID >= 272 && SkinID <= 273)||(SkinID >= 289 && SkinID <= 299||(SkinID >= 87 && SkinID <= 91)||(SkinID >= 93 && SkinID <= 98)||(SkinID >= 100 && SkinID <= 101))) return true;
        else return false;
}

stock GetPlayerFardoDroga(playerid, mano)
{
	if(mano == 1) //Mano derecha
	{
		if(JugadorInfo[playerid][pManoDer] == 75) return 1;
		if(JugadorInfo[playerid][pManoDer] == 76) return 2;
		if(JugadorInfo[playerid][pManoDer] == 77) return 3;
		if(JugadorInfo[playerid][pManoDer] == 78) return 4;
		if(JugadorInfo[playerid][pManoDer] == 79) return 5;
	}
	if(mano == 2) //Mano izquierda
	{
		if(JugadorInfo[playerid][pManoIzq] == 75) return 1;
		if(JugadorInfo[playerid][pManoIzq] == 76) return 2;
		if(JugadorInfo[playerid][pManoIzq] == 77) return 3;
		if(JugadorInfo[playerid][pManoIzq] == 78) return 4;
		if(JugadorInfo[playerid][pManoIzq] == 79) return 5;
	}
	return 0;
}

stock GetPlayerBolsitaDroga(playerid, mano)
{
	if(mano == 1) //Mano derecha
	{
		if(JugadorInfo[playerid][pManoDer] == 80) return 1;
		if(JugadorInfo[playerid][pManoDer] == 81) return 2;
		if(JugadorInfo[playerid][pManoDer] == 82) return 3;
		if(JugadorInfo[playerid][pManoDer] == 83) return 4;
		if(JugadorInfo[playerid][pManoDer] == 84) return 5;
	}
	if(mano == 2) //Mano izquierda
	{
		if(JugadorInfo[playerid][pManoIzq] == 80) return 1;
		if(JugadorInfo[playerid][pManoIzq] == 81) return 2;
		if(JugadorInfo[playerid][pManoIzq] == 82) return 3;
		if(JugadorInfo[playerid][pManoIzq] == 83) return 4;
		if(JugadorInfo[playerid][pManoIzq] == 84) return 5;
	}
	return 0;
}

forward PrepararDroga(playerid, droga);
public PrepararDroga(playerid, droga)
{
    PreparandoDroga[playerid] = 0;
	new string[128];
	if(droga == 1) //Marihuana
	{
	    new gramos = (20 + random(11));
	    if(JugadorInfo[playerid][pManoDer] == 86){JugadorInfo[playerid][pManoDer] = 75; JugadorInfo[playerid][pManoDerCant] = gramos; PonerObjeto(playerid, 1, 75);}
	    else if(JugadorInfo[playerid][pManoIzq] == 86){JugadorInfo[playerid][pManoIzq] = 75; JugadorInfo[playerid][pManoIzqCant] = gramos; PonerObjeto(playerid, 2, 75);}
	    else{SendClientMessage(playerid, Rojo, "No tienes planta de marihuana en tus manos, así que no has podido preparar marihuana."); return 1;}
		format(string, sizeof(string), "Preparas %d gramos de marihuana a partir de tu planta", gramos);
		SendClientMessage(playerid, COLOR_GREEN2, string);
	}
	if(droga == 2) //Crack
	{
	    new gramos;
	    new gramosrand = random(6);
	    if(JugadorInfo[playerid][pManoDer] == 81){JugadorInfo[playerid][pManoDer] = 77; gramos = JugadorInfo[playerid][pManoDerCant] = JugadorInfo[playerid][pManoDerCant]*4 + gramosrand; PonerObjeto(playerid, 1, 78);}
	    else if(JugadorInfo[playerid][pManoIzq] == 81){JugadorInfo[playerid][pManoIzq] = 77; gramos = JugadorInfo[playerid][pManoIzqCant] = JugadorInfo[playerid][pManoIzqCant]*4 + gramosrand; PonerObjeto(playerid, 2, 78);}
	    else{SendClientMessage(playerid, Rojo, "No tienes bolsita de cocaína en tus manos, así que no has podido preparar crack."); return 1;}
		format(string, sizeof(string), "Preparaste %d gramos de crack", gramos);
		SendClientMessage(playerid, COLOR_GREEN2, string);
	}
	return 1;
}

stock GetPlayerPlantacion(playerid)
{
	new planta;
	for(new x=0; x<=CodigoPlantacion; x++)
	{
	    if(PlantaInfo[x][plEstado] > 0)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 4.0, PlantaInfo[x][plX], PlantaInfo[x][plY], PlantaInfo[x][plZ])){planta = x; break;}
	    }
	}
	return planta;
}

stock CrearPlantacion(playerid, Tipo, Float:X, Float:Y, Float:Z, VirtualWorld, Interior)
{
	new planta = CodigoPlantacion;
	if(Tipo == 1) //Marihuana
	{
	    PlantaInfo[planta][plSQLID] = CodigoPlantacion;
		PlantaInfo[planta][plObjeto] = CreateDynamicObject(19473, X, Y, Z - 0.9, 0, 0, 0, VirtualWorld, Interior);
		PlantaInfo[planta][plTipo] = 1;
		PlantaInfo[planta][plEstado] = 1;
		PlantaInfo[planta][plInt] = Interior;
		PlantaInfo[planta][plVW] = VirtualWorld;
		PlantaInfo[planta][plX] = X;
		PlantaInfo[planta][plY] = Y;
		PlantaInfo[planta][plZ] = Z;
		format(PlantaInfo[planta][plPlantador], 36, "%s", NombreJugador(playerid));
		
		new query[258];
	    format(query, sizeof(query), "INSERT INTO plantaciones (Plantador) VALUES ('%s')", NombreJugador(playerid));
		mysql_query(1, query);
		SavePlantacion(planta);
	}
	TotalPlantaciones ++;
	CodigoPlantacion ++;
	return 1;
}

stock EliminarPlantacion(planta)
{
    PlantaInfo[planta][plEstado] = 0;
    DestroyDynamicObject(PlantaInfo[planta][plObjeto]);
	SavePlantacion(planta);
	return 1;
}

SavePlantacion(idx)
{
	new query[258];
    format(query, sizeof(query), "UPDATE plantaciones SET Tipo=%d,X=%f,Y=%f,Z=%f,Plantador='%s',Estado=%d,Interior=%d,VirtualWorld=%d WHERE SQLID=%d",
	PlantaInfo[idx][plTipo],
	PlantaInfo[idx][plX],
	PlantaInfo[idx][plY],
	PlantaInfo[idx][plZ],
	PlantaInfo[idx][plPlantador],
	PlantaInfo[idx][plEstado],
	PlantaInfo[idx][plInt],
	PlantaInfo[idx][plVW],
	PlantaInfo[idx][plSQLID]);
	mysql_query(1, query);
}

LoadPlantacion()
{
    new Query[180], content[60];
	new ccount;
	new sql[80], row[512];
 	format(sql, sizeof(sql), "SELECT SQLID FROM plantaciones ORDER BY SQLID DESC");
	mysql_query(1, sql);
	mysql_store_result();
	mysql_fetch_row(row);
	ccount = strval(row);

	for(new x=0; x<=ccount; x++)
	{
	    mysql_format(1, Query, sizeof(Query), "SELECT * FROM `plantaciones` WHERE `SQLID` = %d", x);
		mysql_query(1, Query);
		mysql_store_result();
		if(cache_get_field_content_int(0, "Estado") != 0)
		{
			PlantaInfo[x][plSQLID] = cache_get_field_content_int(0, "SQLID");
			PlantaInfo[x][plTipo] = cache_get_field_content_int(0, "Tipo");
			PlantaInfo[x][plX] = cache_get_field_content_float(0, "X");
			PlantaInfo[x][plY] = cache_get_field_content_float(0, "Y");
			PlantaInfo[x][plZ] = cache_get_field_content_float(0, "Z");
			PlantaInfo[x][plEstado] = cache_get_field_content_int(0, "Estado");
			PlantaInfo[x][plInt] = cache_get_field_content_int(0, "Interior");
			PlantaInfo[x][plVW]  = cache_get_field_content_int(0, "VirtualWorld");
		 	cache_get_field_content(0, "Plantador", content);
		    format(PlantaInfo[x][plPlantador], 60, "%s", content);
		    
		    PlantaInfo[x][plObjeto] = CreateDynamicObject(19473, PlantaInfo[x][plX], PlantaInfo[x][plY], PlantaInfo[x][plZ] - 0.9, 0, 0, 0, PlantaInfo[x][plInt], PlantaInfo[x][plVW]);

            TotalPlantaciones++;
		}
		if(ccount >= CodigoPlantacion){CodigoPlantacion = ccount+1;}
	}
	mysql_free_result();
	printf("[MYSQL]: Plantaciones cargadas: %d - CodigoPlantacion: %d", TotalPlantaciones, CodigoPlantacion);
	printf(" ");
	return 1;
}

stock DarSobredosis(playerid)
{
	new drogasunidad;
	drogasunidad += (JugadorInfo[playerid][pDrConsumida][0]/19); //Marihuana
	drogasunidad += (JugadorInfo[playerid][pDrConsumida][1]/30); //Cocaína
	drogasunidad += (JugadorInfo[playerid][pDrConsumida][2]/20); //Crack
	drogasunidad += (JugadorInfo[playerid][pDrConsumida][3]/40); //Heroína
	drogasunidad += (JugadorInfo[playerid][pDrConsumida][4]/25); //LSD
	if(drogasunidad >= 6)
	{
		SendClientMessage(playerid, COLOR_ROJO, "Has sufrido una sobredosis por consumir demasiada droga en tan poco tiempo.");
		SetPlayerHealth(playerid,0.0);
		RemovePlayerColorFade(playerid);
		SetPlayerWeather(playerid, DefaultWeather);
		return 1;
	}
	if(drogasunidad >= 4)
	{
		new rand = random(2);
		if(rand == 0)
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Ten cuidado, espera a que se pasen los efectos antes de volver a consumir drogas o sufrirás una sobredosis.");
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_ROJO, "Has sufrido una sobredosis por consumir demasiada droga en tan poco tiempo.");
			SetPlayerHealth(playerid,0.0);
			RemovePlayerColorFade(playerid);
			SetPlayerWeather(playerid, DefaultWeather);
			return 1;
		}
	}
	if(drogasunidad == 2 || drogasunidad == 3)
	{
		SendClientMessage(playerid, COLOR_YELLOW, "Ten cuidado, espera a que se pasen los efectos antes de volver a consumir drogas o sufrirás una sobredosis.");
		return 1;
	}
	return 1;
}

forward DarEfectoLSD(playerid);
public DarEfectoLSD(playerid)
{
	SetPlayerTime(playerid, 21, 0);
	new rand = random(3);
	if(rand == 0) //Efecto 1
	{
	    FlashPlayerScreen(playerid, 0xfcc1fdAA, 1, 12);
		SetPlayerWeather(playerid, 23+random(18));
	}
	else if(rand == 1) //Efecto 2
	{
 		FlashPlayerScreen(playerid, 0x1229FAAA, 1, 12);
		SetPlayerWeather(playerid, 23+random(18));
	}
	else if(rand == 2) //Efecto 3
	{
 		FlashPlayerScreen(playerid, 0x036611AA, 1, 12);
		SetPlayerWeather(playerid, 23+random(18));
	}
	return 1;
}

stock GivePlayerDrunkLevel(playerid, cantidad)
{
	SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid)+cantidad);
	return 1;
}

forward TimerPagar(playerid);
public TimerPagar(playerid)
{
    PagarTimer[playerid] = 0;
	return 1;
}

stock valorabsoluto(int) //Retorna valor absoluto
{
    if (int < 0)
        return -int;
    else
        return int;
}

stock HexToInt(string[]) // By DracoBlue
{
    if (string[0]==0) return 0;
    new i;
    new cur=1;
    new res=0;
    for (i=strlen(string);i>0;i--) {
        if (string[i-1]<58) res=res+cur*(string[i-1]-48); else res=res+cur*(string[i-1]-65+10);
        cur=cur*16;
    }
    return res;
}

LoadFaccs()
{
	new Query[180], content[60];
	new ccount;
	new sql[80], row[512];
	format(sql, sizeof(sql), "SELECT ID FROM facciones ORDER BY ID DESC");
	mysql_query(1, sql);
	mysql_store_result();
	mysql_fetch_row(row);
	ccount = strval(row);

	for(new x=0; x<=ccount; x++)
	{
	    mysql_format(1, Query, sizeof(Query), "SELECT * FROM `facciones` WHERE `ID` = %d", x);
		mysql_query(1, Query);
		mysql_store_result();
		FamiliaInfo[x][fID] = cache_get_field_content_int(0, "ID");
		
	 	cache_get_field_content(0, "Nombre", content);
		format(FamiliaInfo[x][fNombre], 60, "%s", content);
		
		cache_get_field_content(0, "Rango1", content);
		format(FamiliaInfo[x][fRango1], 32, "%s", content);
		cache_get_field_content(0, "Rango2", content);
		format(FamiliaInfo[x][fRango2], 32, "%s", content);
		cache_get_field_content(0, "Rango3", content);
		format(FamiliaInfo[x][fRango3], 32, "%s", content);
		cache_get_field_content(0, "Rango4", content);
		format(FamiliaInfo[x][fRango4], 32, "%s", content);
		cache_get_field_content(0, "Rango5", content);
		format(FamiliaInfo[x][fRango5], 32, "%s", content);
		cache_get_field_content(0, "Rango6", content);
		format(FamiliaInfo[x][fRango6], 32, "%s", content);
		cache_get_field_content(0, "Rango7", content);
		format(FamiliaInfo[x][fRango7], 32, "%s", content);
		cache_get_field_content(0, "Rango8", content);
		format(FamiliaInfo[x][fRango8], 32, "%s", content);
		cache_get_field_content(0, "Rango9", content);
		format(FamiliaInfo[x][fRango9], 32, "%s", content);
		cache_get_field_content(0, "Rango10", content);
		format(FamiliaInfo[x][fRango10], 32, "%s", content);
		cache_get_field_content(0, "Rango11", content);
		format(FamiliaInfo[x][fRango11], 32, "%s", content);
		cache_get_field_content(0, "Rango12", content);
		format(FamiliaInfo[x][fRango12], 32, "%s", content);
		
		cache_get_field_content(0, "Lider", content);
		format(FamiliaInfo[x][fLider], 32, "%s", content);
		
		FamiliaInfo[x][fTipo] = cache_get_field_content_int(0, "Tipo");
		
		cache_get_field_content(0, "Color", content);
		format(FamiliaInfo[x][fColor], 9, "%s", content);
		
		FamiliaInfo[x][fPuntosExpansion] = cache_get_field_content_int(0, "PuntosExpansion");
		
		FamiliaInfo[x][fTiempoArmas] = cache_get_field_content_int(0, "TiempoArmas");
		
		FamiliaInfo[x][fTiempoDrogas] = cache_get_field_content_int(0, "TiempoDrogas");
		
	 	if(TotalFaccs < x) TotalFaccs = x;
	 	mysql_free_result();
	}
	printf("[MYSQL]: Facciones cargadas: %d (MAX: %d)", TotalFaccs, MAX_FACCS);
}

SaveFacc(FaccID)
{
	new Query[300];
	format(Query, sizeof(Query), "UPDATE facciones SET Rango1='%s', Rango2='%s', Rango3='%s', Rango4='%s', Rango5='%s', Rango6='%s', Rango7='%s', Rango8='%s', Rango9='%s', Rango10='%s', Rango11='%s', Rango12='%s' WHERE ID = %d",
	FamiliaInfo[FaccID][fRango1],
	FamiliaInfo[FaccID][fRango2],
	FamiliaInfo[FaccID][fRango3],
	FamiliaInfo[FaccID][fRango4],
	FamiliaInfo[FaccID][fRango5],
	FamiliaInfo[FaccID][fRango6],
	FamiliaInfo[FaccID][fRango7],
	FamiliaInfo[FaccID][fRango8],
	FamiliaInfo[FaccID][fRango9],
	FamiliaInfo[FaccID][fRango10],
	FamiliaInfo[FaccID][fRango11],
	FamiliaInfo[FaccID][fRango12],
	FamiliaInfo[FaccID][fID]);
	mysql_query(1, Query);
	
	format(Query, sizeof(Query), "UPDATE facciones SET Nombre='%s', Lider='%s', Tipo=%d, Color='%s', PuntosExpansion=%d, TiempoArmas=%d, TiempoDrogas=%d WHERE ID = %d",
	FamiliaInfo[FaccID][fNombre],
	FamiliaInfo[FaccID][fLider],
	FamiliaInfo[FaccID][fTipo],
	FamiliaInfo[FaccID][fColor],
	FamiliaInfo[FaccID][fPuntosExpansion],
	FamiliaInfo[FaccID][fTiempoArmas],
	FamiliaInfo[FaccID][fTiempoDrogas],
	FamiliaInfo[FaccID][fID]);
	mysql_query(1, Query);
	return 1;
}

stock CargarAgenda(playerid)
{
    new string[128];
    format(string, sizeof(string), "SELECT Nombre FROM agendas WHERE Nombre = '%s'", JugadorInfo[playerid][pNombre]);
    mysql_query(1, string);
	mysql_store_result();
	new existe;
	existe = mysql_num_rows();
	mysql_free_result();
	if(existe != 0)
	{
	    new Query[180], NombreUsuario[MAX_PLAYER_NAME], content[60];
		GetPlayerName(playerid, NombreUsuario, sizeof(NombreUsuario));
		mysql_format(1, Query, sizeof(Query), "SELECT * FROM `agendas` WHERE `Nombre` = '%s'", NombreUsuario);
		mysql_query(1, Query);
		mysql_store_result();
		
        AgendaNumero[playerid][0] = cache_get_field_content_int(0, "AgendaNumero0");
        cache_get_field_content(0, "AgendaContacto0", content);
		format(AgendaContacto[playerid][0], sizeof(content), "%s", content);
		AgendaNumero[playerid][1] = cache_get_field_content_int(0, "AgendaNumero1");
        cache_get_field_content(0, "AgendaContacto1", content);
		format(AgendaContacto[playerid][1], sizeof(content), "%s", content);
		AgendaNumero[playerid][2] = cache_get_field_content_int(0, "AgendaNumero2");
        cache_get_field_content(0, "AgendaContacto2", content);
		format(AgendaContacto[playerid][2], sizeof(content), "%s", content);
        AgendaNumero[playerid][3] = cache_get_field_content_int(0, "AgendaNumero3");
        cache_get_field_content(0, "AgendaContacto3", content);
		format(AgendaContacto[playerid][3], sizeof(content), "%s", content);
		AgendaNumero[playerid][4] = cache_get_field_content_int(0, "AgendaNumero4");
        cache_get_field_content(0, "AgendaContacto4", content);
		format(AgendaContacto[playerid][4], sizeof(content), "%s", content);
		AgendaNumero[playerid][5] = cache_get_field_content_int(0, "AgendaNumero5");
        cache_get_field_content(0, "AgendaContacto5", content);
		format(AgendaContacto[playerid][5], sizeof(content), "%s", content);
		AgendaNumero[playerid][6] = cache_get_field_content_int(0, "AgendaNumero6");
        cache_get_field_content(0, "AgendaContacto6", content);
		format(AgendaContacto[playerid][6], sizeof(content), "%s", content);
		AgendaNumero[playerid][7] = cache_get_field_content_int(0, "AgendaNumero7");
        cache_get_field_content(0, "AgendaContacto7", content);
		format(AgendaContacto[playerid][7], sizeof(content), "%s", content);
		AgendaNumero[playerid][8] = cache_get_field_content_int(0, "AgendaNumero8");
        cache_get_field_content(0, "AgendaContacto8", content);
		format(AgendaContacto[playerid][8], sizeof(content), "%s", content);
		AgendaNumero[playerid][9] = cache_get_field_content_int(0, "AgendaNumero9");
        cache_get_field_content(0, "AgendaContacto9", content);
		format(AgendaContacto[playerid][9], sizeof(content), "%s", content);
		AgendaNumero[playerid][10] = cache_get_field_content_int(0, "AgendaNumero10");
        cache_get_field_content(0, "AgendaContacto10", content);
		format(AgendaContacto[playerid][10], sizeof(content), "%s", content);
		AgendaNumero[playerid][11] = cache_get_field_content_int(0, "AgendaNumero11");
        cache_get_field_content(0, "AgendaContacto11", content);
		format(AgendaContacto[playerid][11], sizeof(content), "%s", content);
		AgendaNumero[playerid][12] = cache_get_field_content_int(0, "AgendaNumero12");
        cache_get_field_content(0, "AgendaContacto12", content);
		format(AgendaContacto[playerid][12], sizeof(content), "%s", content);
		AgendaNumero[playerid][13] = cache_get_field_content_int(0, "AgendaNumero13");
        cache_get_field_content(0, "AgendaContacto13", content);
		format(AgendaContacto[playerid][13], sizeof(content), "%s", content);
		AgendaNumero[playerid][14] = cache_get_field_content_int(0, "AgendaNumero14");
        cache_get_field_content(0, "AgendaContacto14", content);
		format(AgendaContacto[playerid][14], sizeof(content), "%s", content);
		AgendaNumero[playerid][15] = cache_get_field_content_int(0, "AgendaNumero15");
        cache_get_field_content(0, "AgendaContacto15", content);
		format(AgendaContacto[playerid][15], sizeof(content), "%s", content);
	    mysql_free_result();
	    return 1;
	}
	return 1;
}

stock GuardarAgenda(playerid)
{
    new string[128];
    format(string, sizeof(string), "SELECT Nombre FROM agendas WHERE Nombre = '%s'", JugadorInfo[playerid][pNombre]);
    mysql_query(1, string);
	mysql_store_result();
	new existe;
	existe = mysql_num_rows();
	mysql_free_result();
	if(existe != 0)
	{
	    new Query[180];

	    for(new x=0; x<16; x++)
	    {
            mysql_format(1, Query, sizeof(Query), "UPDATE agendas SET AgendaNumero%d = %d, AgendaContacto%d = '%s' WHERE Nombre = '%s'",
			x, AgendaNumero[playerid][x], x, AgendaContacto[playerid][x],
			JugadorInfo[playerid][pNombre]);
			mysql_query(1, Query);
	    }
	}
	return 1;
}

forward LlamadaCoste(playerid);
public LlamadaCoste(playerid)
{
    CosteTotalLlamada[playerid] += 1;
	return 1;
}

stock LlamarTelefono(playerid, numero)
{
	new EsLlamadaPD;
    if(numero == JugadorInfo[playerid][pTelefono]){SendClientMessage(playerid, Rojo, "No te puedes llamar a tí mismo."); return 1;}

	new string[128];
    if(numero == 777) //Taxis
    {
        if(JugadorInfo[playerid][pTrabajo] == 6 && Trabajando[playerid] > 0){SendClientMessage(playerid, Rojo, "No puedes pedir un taxi siendo uno y estando de servicio."); return 1;}
        SendClientMessage(playerid, COLOR_PIEL, "[Teléfono: 777] Gracias por elerginos como su medio de transporte.");
        new taxista;
		for(new i=0;i<MAX_PLAYERS;i++)
		{
			if(JugadorInfo[i][pTrabajo] == 6 && Trabajando[i] > 0)
			{
			    format(string, sizeof(string), "[CENTRAL] Un cliente solicita transporte. '/llevartaxi' para aceptar el pedido.", NombreJugador(playerid));
			    SendClientMessage(i, COLOR_PIEL, string);
				SendClientMessage(playerid, COLOR_PIEL, "[Teléfono: 777] Hemos llamado a nuestros taxistas. Espere un momento, no se mueva de allí.");
				SolicitaTaxi[playerid] = 1;
				taxista++;
			}
		}
		EsLlamadaPD = 0;
		if(taxista < 1){SendClientMessage(playerid, COLOR_PIEL, "[Teléfono: 777] En estos momentos no hay taxistas disponibles. Llame en otro momento.");}
        return 1;
    }

    if(numero == 911) //Llama a LSPD
    {
   		SendClientMessage(playerid, COLOR_GREEN2, "Llamas al 911. El teléfono da señal y descolgaron.");
        SendClientMessage(playerid, COLOR_PIEL, "[Teléfono: 911] Estamos pasando su llamada a un agente de servicio, espere, por favor (...)");
		EnLlamada[playerid] = 911;
		new Cops;
		for(new i=0;i<MAX_PLAYERS;i++)
		{
			if(JugadorInfo[i][pFaccion] == 1 && JugadorInfo[i][pServicioPD] > 0 && JugadorInfo[playerid][pTelefono] != 0) // Es PD, está de servicio y tiene teléfono.
			{
			    SendClientMessage(i, COLOR_RADIO, "Llamada entrante en centralita. (/contestar parar recibir en teléfono. )");
				Cops++;
			}
		}
		if(Cops < 1){DarNoPD(playerid); EnLlamada[playerid] = 0;}
		EsLlamadaPD = 1;
		return 1;
    }

    new tlfencontrado;
    for(new x=0; x<MAX_PLAYERS; x++)
    {
        if(IsPlayerConnected(x) && x != INVALID_PLAYER_ID)
        {
            if(JugadorInfo[x][pTelefono] == numero && PlayerTieneObjeto(x, 68))
            {
                if(EnLlamada[x] != 0 || PersonaEnLlamada[x] != NOEXISTE){tlfencontrado = -1; break;}
                tlfencontrado = 1;
                if(EsLlamadaPD == 0)
                {
                	format(string, sizeof(string), "El teléfono de %s suena.", NombreJugadorProxy(x));
    				ProxDetector(15.0, x, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
    				format(string, sizeof(string), "Recibes una llamada de %d. Usa /contestar para aceptar la llamada.", JugadorInfo[playerid][pTelefono]);
    				SendClientMessage(x, COLOR_GREEN2, string);
					Timer_Telefono[x] = SetTimerEx("SonarTelefono", 1000, true, "i", x);
				}
				PlayerPlaySound(playerid,1002,0.0,0.0,0.0);
    			format(string, sizeof(string), "Llamas al número %d. El teléfono da señal.", numero);
    			SendClientMessage(playerid, COLOR_GREEN2, string);
				ToqueLlamada[x] = 0;
				PersonaEnLlamada[playerid] = x;
				PersonaEnLlamada[x] = playerid;
				EnLlamada[playerid] = 1;
				ToqueLlamadaTimer[x] = SetTimerEx("DarToqueLlamada", 5000, true, "i", x);
                break;
            }
        }
    }
    if(tlfencontrado == -1){SendClientMessage(playerid, Rojo, "El número que ha marcado ya está en una llamada."); return 1;}
    if(tlfencontrado == 0){SendClientMessage(playerid, Rojo, "El número que ha marcado no existe o no está disponible."); return 1;}
    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
    return 1;
}

stock ColgarTelefono(playerid)
{
	new string[128];
	new oyente = PersonaEnLlamada[playerid];
    if(EnLlamada[playerid] == 1) //Está llamando a alguien
	{
	    EnLlamada[playerid] = 0;
	    SendClientMessage(playerid, Rojo, "Colgaste");
	    format(string, sizeof(string), "Llamada perdida de %d.", JugadorInfo[playerid][pTelefono]);
		SendClientMessage(oyente, Gris, string);
		KillTimer(ToqueLlamadaTimer[oyente]);
		ToqueLlamada[oyente] = 0;
		PersonaEnLlamada[oyente] = NOEXISTE;
	    PersonaEnLlamada[playerid] = NOEXISTE;
	    format(string, sizeof(string), "%s cuelga la llamada en su teléfono.", NombreJugadorProxy(playerid));
	 	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	    format(string, sizeof(string), "%s cuelga la llamada en su teléfono.", NombreJugadorProxy(oyente));
	 	ProxDetector(15.0, oyente, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	    SetPlayerSpecialAction(oyente,SPECIAL_ACTION_STOPUSECELLPHONE);
	    return 1;
	}
	if(EnLlamada[playerid] == 2 || EnLlamada[playerid] == 3) //Llamada normal
	{
	    SendClientMessage(playerid, Rojo, "Colgaste");
		SendClientMessage(oyente, Rojo, "Colgaron");
	    if(EnLlamada[playerid] == 3)
		{
			KillTimer(CostoLlamadaTimer[playerid]);
			format(string, sizeof(string), "~w~la llamada costo~n~~r~%d$", CosteTotalLlamada[playerid]);
			GameTextForPlayer(playerid, string, 1000, 1);
			JugadorInfo[playerid][pDineroBanco] -= CosteTotalLlamada[playerid];
			CosteTotalLlamada[oyente] = 0;
		}
	    if(EnLlamada[oyente] == 3)
		{
			KillTimer(CostoLlamadaTimer[oyente]);
			format(string, sizeof(string), "~w~la llamada costo~n~~r~%d$", CosteTotalLlamada[playerid]);
			GameTextForPlayer(playerid, string, 1000, 1);
			JugadorInfo[oyente][pDineroBanco] -= CosteTotalLlamada[oyente];
			CosteTotalLlamada[oyente] = 0;
		}
		EnLlamada[playerid] = 0;
	    EnLlamada[oyente] = 0;
	    PersonaEnLlamada[oyente] = NOEXISTE;
	    PersonaEnLlamada[playerid] = NOEXISTE;
	    format(string, sizeof(string), "%s cuelga la llamada en su teléfono.", NombreJugadorProxy(playerid));
	 	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	    format(string, sizeof(string), "%s cuelga la llamada en su teléfono.", NombreJugadorProxy(oyente));
	 	ProxDetector(15.0, oyente, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	    SetPlayerSpecialAction(oyente,SPECIAL_ACTION_STOPUSECELLPHONE);
		return 1;
	}
	if(EnLlamada[playerid] == 444) //Anuncios
	{
	    EnLlamada[playerid] = 0;
		SendClientMessage(playerid, Rojo, "Colgaste");
		format(string, sizeof(string), "%s cuelga la llamada en su teléfono.", NombreJugadorProxy(playerid));
	 	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	    format(string, sizeof(string), "%s cuelga la llamada en su teléfono.", NombreJugadorProxy(oyente));
	 	ProxDetector(15.0, oyente, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	    SetPlayerSpecialAction(oyente,SPECIAL_ACTION_STOPUSECELLPHONE);
	}
	if(EnLlamada[playerid] == 911) //Llamando a emergencias
	{
		EnLlamada[playerid] = 0;
		SendClientMessage(playerid, Rojo, "Colgaste");
		format(string, sizeof(string), "%s cuelga la llamada en su teléfono.", NombreJugadorProxy(playerid));
	 	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	    format(string, sizeof(string), "%s cuelga la llamada en su teléfono.", NombreJugadorProxy(oyente));
	 	ProxDetector(15.0, oyente, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	    SetPlayerSpecialAction(oyente,SPECIAL_ACTION_STOPUSECELLPHONE);
	}
	if(EnLlamada[playerid] == 912) //Llamada de emergencias
	{
	    SendClientMessage(playerid, Rojo, "Colgaste");
		SendClientMessage(oyente, Rojo, "Colgaron");
		EnLlamada[playerid] = 0;
	    EnLlamada[oyente] = 0;
	    PersonaEnLlamada[oyente] = NOEXISTE;
	    PersonaEnLlamada[playerid] = NOEXISTE;
	    format(string, sizeof(string), "%s cuelga la llamada en su teléfono.", NombreJugadorProxy(playerid));
	 	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	    format(string, sizeof(string), "%s cuelga la llamada en su teléfono.", NombreJugadorProxy(oyente));
	 	ProxDetector(15.0, oyente, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	    SetPlayerSpecialAction(oyente,SPECIAL_ACTION_STOPUSECELLPHONE);
	}
	return 1;
}

forward DarToqueLlamada(playerid);
public DarToqueLlamada(playerid)
{
	new string[128];
	if(!PlayerTieneObjeto(playerid, 68))
	{
		EnLlamada[PersonaEnLlamada[playerid]] = 0;
		ToqueLlamada[playerid] = 0;
		PersonaEnLlamada[PersonaEnLlamada[playerid]] = NOEXISTE;
		PersonaEnLlamada[playerid] = NOEXISTE;
		KillTimer(ToqueLlamadaTimer[playerid]);
		return 1;
	}
	if(ToqueLlamada[playerid] > 5)
	{
	    EnLlamada[PersonaEnLlamada[playerid]] = 0;
		ToqueLlamada[playerid] = 0;
		format(string, sizeof(string), "Llamada perdida de %d", JugadorInfo[PersonaEnLlamada[playerid]][pTelefono]);
		SendClientMessage(playerid, Gris, string);
		SendClientMessage(PersonaEnLlamada[playerid], Gris, "No contestan.");
		for(new i=0; i<MAX_PLAYERS; i++)
		{
		    if(PersonaEnLlamada[i] == playerid){PersonaEnLlamada[i] = NOEXISTE; break;}
		}
		PersonaEnLlamada[playerid] = NOEXISTE;
		KillTimer(ToqueLlamadaTimer[playerid]);
		return 1;
	}
	format(string, sizeof(string), "El teléfono de %s suena.", NombreJugadorProxy(playerid));
    ProxDetector(15.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	ToqueLlamada[playerid] ++;
	return 1;
}

stock SonarTelefono(playerid)
{
    new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	PlaySoundForPlayersInRange(20600, 10.0, pos[0], pos[1], pos[2])
	return 1;
}

forward EstaEnEstudio(playerid); public EstaEnEstudio(playerid){
    if(IsPlayerConnected(playerid)){
		if(IsPlayerInRangeOfPoint(playerid,2.0,1059.9418,54.6980,801.0403)) { return 1; }
		else if(IsPlayerInRangeOfPoint(playerid,2.0,1059.9359,48.3338,801.0403)) { return 1; }
		else if(IsPlayerInRangeOfPoint(playerid,2.0,1073.4929,48.7156,801.3030)) { return 1; }
		else if(IsPlayerInRangeOfPoint(playerid,2.0,1073.5010,54.7022,801.3030)) { return 1; }
	}
	return 0;
}

forward EnAscensorPD(playerid); public EnAscensorPD(playerid){
	if(IsPlayerConnected(playerid)){
		if(IsPlayerInRangeOfPoint(playerid,2.5,1567.1321,-1244.8341,8606.0859)) { return 1; }
        else if(IsPlayerInRangeOfPoint(playerid,2.5,1568.5116,-1690.9907,5.8906)) { return 1; }
        else if(IsPlayerInRangeOfPoint(playerid,2.5,-1592.7312,716.2551,-5.2422)) { return 1; }
        else if(IsPlayerInRangeOfPoint(playerid,2.5,1572.8242,-1675.4957,28.3955)) { return 1; }
	}
	return 0;
}

forward EnCasilleroPD(playerid); public EnCasilleroPD(playerid){
    if(IsPlayerConnected(playerid)){
		if(IsPlayerInRangeOfPoint(playerid,3.0,235.1822,43.5568,1043.1188)) { return 1; }
		else if(IsPlayerInRangeOfPoint(playerid,3.0,231.3733,43.8194,1043.0770)) { return 1; }
		else if(IsPlayerInRangeOfPoint(playerid,5.0,-366.2502,1637.1761,999.2909)) { return 1; }
		else if(IsPlayerInRangeOfPoint(playerid,2.0,1555.7594,-1266.4823,8606.0859)) { return 1; }
		else if(IsPlayerInRangeOfPoint(playerid,2.0,1555.8226,-1272.3448,8606.0859)) { return 1; }
		else if(IsPlayerInRangeOfPoint(playerid,2.0,1557.5179,-1272.2053,8606.0859)) { return 1; }
		else if(IsPlayerInRangeOfPoint(playerid,2.0,1555.7594,-1266.4823,8606.0859)) { return 1; }
		else if(IsPlayerInRangeOfPoint(playerid,2.0,1557.4032,-1264.9175,8606.0859)) { return 1; }
	}
	return 0;
}


stock EstaEnMostrador(playerid)
{
	new mostrador;
	for(new x=0; x<sizeof(Mostradores); x++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0, Mostradores[x][0], Mostradores[x][1], Mostradores[x][2])){mostrador = x; break;}
	}
	return mostrador;
}

forward PuentearF(playerid, coche);
public PuentearF(playerid, coche)
{
	new string[128];
	JugadorInfo[playerid][pTiempoRobo] = 30;
	TogglePlayerControllable(playerid, 1);
	new rand;
    rand = random(10);
    if(rand > 2+(JugadorInfo[playerid][pHabLad]/30))
	{
		format(string, sizeof(string), "%s no logró encender el motor del vehículo con su destornillador.", NombreJugadorProxy(playerid));
    	ProxDetector(15.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
    	Puenteando[playerid] = 0;
    	return 1;
    }
 	format(string, sizeof(string), "%s encendió el motor del vehículo con sus herramientas.", NombreJugadorProxy(playerid));
    ProxDetector(15.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
    new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(coche,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(coche,1,lights,alarm,doors,bonnet,boot,objective);
	Puenteando[playerid] = 0;
	return 1;
}

forward ForzarPuerta(playerid, tipo);
public ForzarPuerta(playerid, tipo)
{
    if(!GetPlayerFueraPuertaCasa(playerid) && !GetPlayerFueraPuertaNego(playerid)){SendClientMessage(playerid, Rojo, "No estás en la puerta de una casa o local."); return 1;}
	new string[128];
	TogglePlayerControllable(playerid, 1);
	if(tipo == 1) //Casa
	{
	    new casa = GetPlayerFueraPuertaCasa(playerid);
		new rand;
	    rand = random(10);
	    if(rand > 3+(JugadorInfo[playerid][pHabLad]/30))
		{
			format(string, sizeof(string), "%s no logró forzar la puerta con la palanca.", NombreJugadorProxy(playerid));
		    ProxDetector(15.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		    PuertaForzada[playerid] = 2;
		    PlayerPlaySound(playerid, 1009, 0.0, 0.0, 0.0);
			return 1;
		}
		format(string, sizeof(string), "%s ha logrado forzar la puerta de la casa con su palanca.", NombreJugadorProxy(playerid));
	    ProxDetector(15.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	    PuertaForzada[playerid] = 2;
	    SendClientMessage(playerid, Verde, "¡Has forzado la puerta!");
	    ProxDetector(30.0, playerid, "Se oye el ruido de una puerta resquebrajándose.", COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	    PlayerPlaySound(playerid, 1009, 0.0, 0.0, 0.0);
	    CasaInfo[casa][hCerrada] = 0;

	    for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID)
			{
				if(JugadorInfo[i][pFaccion] == 1 && JugadorInfo[i][pServicioPD] > 0)
				{
					format(string, sizeof(string), "[CENTRAL] Los vecinos de una casa (%s) reportan actos violentos en la vivienda.", CasaInfo[casa][hBarrio]);
					SendClientMessage(i, COLOR_RADIO, string);
				}
			}
		}
		return 1;
	}
	if(tipo == 2) //Negocio
	{
	    new nego = GetPlayerFueraPuertaNego(playerid);
	    new rand;
	    rand = random(10);
	    if(rand > 3+(JugadorInfo[playerid][pHabLad]/30))
		{
			format(string, sizeof(string), "%s no logró forzar la puerta con la palanca.", NombreJugadorProxy(playerid));
		    ProxDetector(15.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		    PuertaForzada[playerid] = 2;
		    PlayerPlaySound(playerid, 1009, 0.0, 0.0, 0.0);
			return 1;
		}
		format(string, sizeof(string), "%s ha logrado forzar la puerta del negocio con su palanca.", NombreJugadorProxy(playerid));
	    ProxDetector(15.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	    PuertaForzada[playerid] = 2;
        SendClientMessage(playerid, Verde, "¡Has forzado la puerta!");
	    ProxDetector(30.0, playerid, "Se oye el sonido de una puerta resquebrajándose.", COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	    PlayerPlaySound(playerid, 1009, 0.0, 0.0, 0.0);
	    NegocioInfo[nego][nCerrado] = 0;
	    UpdateNegocioLabel(nego);

	    for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID)
			{
				if(JugadorInfo[i][pFaccion] == 1 && JugadorInfo[i][pServicioPD] > 0)
				{
					format(string, sizeof(string), "[CENTRAL] La alarma de un negocio (%s) ha sido activada por bandalismo.", NegocioInfo[nego][nNombre], GetPlayerZona(playerid));
					SendClientMessage(i, COLOR_RADIO, string);
				}
			}
		}
		SendClientMessage(playerid, Naranja, "Se activó la alarma del negocio.");
		return 1;
	}
	return 1;
}

forward RobarF(playerid, tipo);
public RobarF(playerid, tipo)
{
	new string[128];
	TogglePlayerControllable(playerid, 1);
	if(tipo == 1) //Casa
	{
		new rand = random(100+JugadorInfo[playerid][pHabLad]*2);
		new dinero = 100+rand;
		GivePlayerMoneyAC(playerid, dinero);
		format(string, sizeof(string), "¡Has robado %d$ en efectivo de la casa!", dinero);
		SendClientMessage(playerid, Verde, string);
		Robando[playerid] = 0;
		JugadorInfo[playerid][pTiempoRobo] = 30;
		JugadorInfo[playerid][pHabLad] ++;
	}
	if(tipo == 2) //Negocio
	{
	    new rand = random(700+JugadorInfo[playerid][pHabLad]*2);
		new dinero = 250+rand;
		GivePlayerMoneyAC(playerid, dinero);
		format(string, sizeof(string), "%s terminó de forcejear la caja fuerte y cogió todo el dinero posible de ella.", NombreJugadorProxy(playerid));
	    ProxDetector(20.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		format(string, sizeof(string), "¡Has robado %d$ en efectivo del negocio!", dinero);
		SendClientMessage(playerid, Verde, string);
		Robando[playerid] = 0;
		JugadorInfo[playerid][pTiempoRobo] = 30;
		JugadorInfo[playerid][pHabLad] ++;
	}
	return 1;
}

stock NombreDroga(drogaid)
{
	new droga[128];
	switch(drogaid)
	{
	    case 1: { format(droga, 128, "Bolsita marihuana"); }
	    case 2: { format(droga, 128, "Bolsita cocaína"); }
	    case 3: { format(droga, 128, "Bolsita crack"); }
	    case 4: { format(droga, 128, "Bolsita heroina"); }
	    case 5: { format(droga, 128, "Bolsita LSD"); }
	    case 6: { format(droga, 128, "Fardo marihuana"); }
	    case 7: { format(droga, 128, "Fardo cocaína"); }
	    case 8: { format(droga, 128, "Fardo crack"); }
	    case 9: { format(droga, 128, "Fardo heroina"); }
	    case 10: { format(droga, 128, "Fardo LSD"); }
	}
	return droga;
}

stock Rango(playerid)
{
	new rango[128];
	if(IsPlayerConnected(playerid))
	{
	    switch(JugadorInfo[playerid][pRango])
 	    {
 	    	case 1:
	 	    {
	 	    	format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango1]);
	 	    }
	 	    case 2:
	 	    {
	 	    	format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango2]);
	 	    }
	 	    case 3:
	 	    {
	 	    	format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango3]);
	 	    }
	 	    case 4:
	 	    {
	 	    	format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango4]);
	 	    }
	 	    case 5:
	 	    {
	 	    	format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango5]);
	 	    }
	 	    case 6:
	 	    {
	 	    	format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango6]);
	 	    }
	 	    case 7:
	 	    {
	 	    	format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango7]);
	 	    }
	 	    case 8:
	 	    {
	 	    	format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango8]);
	 	    }
	 	    case 9:
	 	    {
	 	    	format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango9]);
	 	    }
	 	    case 10:
	 	    {
	 	    	format(rango, sizeof(rango), "%s", FamiliaInfo    [JugadorInfo[playerid][pFaccion]][fRango10]);
	 	    }
	 	    case 11:
	 	    {
	 	    	format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango11]);
	 	    }
	 	    case 12:
	 	    {
	 	    	format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango12]);
	 	    }
 	    }
	}
	return rango;
}

forward AlarmaCoche(coche);
public AlarmaCoche(coche)
{
    new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(coche,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(coche,engine,lights,0,doors,bonnet,boot,objective);
}

stock PlayerTieneObjeto(playerid, objetoid)
{
	for(new x = 0; x<MAX_SLOTS_INV; x++)
	{
	    if(JugadorInfo[playerid][pBol][x] == objetoid){return x+1;}
	}
	if(JugadorInfo[playerid][pManoDer] == objetoid){return 9;}
	if(JugadorInfo[playerid][pManoIzq] == objetoid){return 10;}
	return 0;
}

stock LinkVehicleToInteriorEx(vehicleid, interior)
{
    LinkVehicleToInterior(vehicleid, interior);
    CocheInfo[vehicleid][cInterior] = interior;
    return 1;
}

stock EncenderMotorF(playerid, car)
{
    new engine,lights,alarm,doors,bonnet,boot,objective,Float:cvida,string[128];
    GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
    if(engine == 1) //Si está encendido apagar
	{
		format(string, sizeof(string), "%s saca las llaves del contacto y apaga el motor del %s.", NombreJugadorProxy(playerid), GetVehicleName(car));
		ProxDetector(15.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	    GameTextForPlayer(playerid, "~r~motor apagado...", 2000, 1);
	    SetVehicleParamsEx(car,0,lights,alarm,doors,bonnet,boot,objective);
   		return 1;
    }
    else //Si está apagado encender
	{
	    GetVehicleHealth(car, cvida);
	    if(cvida < MIN_CAR_HEALTH){SendClientMessage(playerid, Rojo, "El motor del vehículo se encuentra demasiado dañado para encender."); return 1;}
		if(EncendiendoMotor[playerid] == 0)
		{
		    if(MotorFeo[car] != 1)
			{
		        if(car <= MAX_VEHPUBLICO)
			    {
			    	if(!PlayerEsFaccionVeh(playerid, car)){return 1;}
			    	if(CocheInfo[car][cGas] <= 0){SendClientMessage(playerid, COLOR_ROJO, "No hay gasolina"); return 1;}
			        SetTimerEx("EncenderMotor", 1000, false, "i", playerid);
			        EncendiendoMotor[playerid] = 1;
			        GameTextForPlayer(playerid, "~g~encendiendo motor...", 2000, 1);
		        }
		        else if(car > MAX_VEHPUBLICO)
		        {
		            if(!PlayerTieneLlaveVeh(playerid, car)){SendClientMessage(playerid, COLOR_ROJO, "No tienes las llaves"); return 1;}
		            if(CocheInfo[car][cGas] <= 0){SendClientMessage(playerid, COLOR_ROJO, "No hay gasolina"); return 1;}
			        SetTimerEx("EncenderMotor", 1000, false, "i", playerid);
			        EncendiendoMotor[playerid] = 1;
			        GameTextForPlayer(playerid, "~g~encendiendo motor...", 2000, 1);
		        }
			}
			else
			{
				SendClientMessage(playerid, Rojo, "El motor del vehículo se encuentra demasiado dañado para encender.");
			}
	    }
	}
	return 1;
}

forward RepintarMeca(playerid, color1, color2, coche); //Repintar
public RepintarMeca(playerid, color1, color2, coche)
{
    TogglePlayerControllable(playerid, 1);
	ChangeVehicleColor(coche, color1, color2);
	CocheInfo[coche][cColor1] = color1;
	CocheInfo[coche][cColor2] = color2;
	GameTextForPlayer(playerid, "~g~Vehiculo repintado", 3000, 3);
	return 1;
}

forward RepararMeca(playerid, tipo, coche); //Reparar
public RepararMeca(playerid, tipo, coche)
{
    TogglePlayerControllable(playerid, 1);
	if(tipo == 1) //Motor
	{
	    SiendoReparado[playerid] = 0;
		SetVehicleHealth(coche, 1000);
		GameTextForPlayer(playerid, "~g~Motor reparado", 3000, 3);
		MotorFeo[coche] = 0;
		return 1;
	}
	if(tipo == 2) //Carrocería
	{
	    SiendoReparado[playerid] = 0;
	    new Float:cvida;
	    GetVehicleHealth(coche, cvida);
	    new panels,doors,lights,tires,tires2;
		GetVehicleDamageStatus(coche,panels,doors,lights,tires);
		RepairVehicleEx(coche);
		SetVehicleHealth(coche, cvida);
		GetVehicleDamageStatus(coche,panels,doors,lights,tires2);
		if(tires != 0)
		{
			tires = encode_tires(1, 1, 1, 1);
		  	UpdateVehicleDamageStatus(coche, panels, doors, lights, tires);
		}
		GameTextForPlayer(playerid, "~g~Carroceria reparada", 3000, 3);
		return 1;
	}
	if(tipo == 3) //Ruedas
	{
	    SiendoReparado[playerid] = 0;
	    new panels,doors,lights,tires;
		GetVehicleDamageStatus(coche,panels,doors,lights,tires);
		tires = encode_tires(0, 0, 0, 0);
	  	UpdateVehicleDamageStatus(coche, panels, doors, lights, tires);
		GameTextForPlayer(playerid, "~g~Ruedas reparadas", 3000, 3);
	}
	if(tipo == 4) //Todo
	{
		new Float:vida;
	    GetVehicleHealth(coche, vida);
		RepairVehicleEx(coche);
		SetVehicleHealth(coche, vida);
		SiendoReparado[playerid] = 0;
	    SendClientMessage(playerid, COLOR_GREEN2, "La reparación de tu vehículo ha terminado. El costo total fue restado de tus bolsillos.");
	    GivePlayerMoney(playerid, -500);
	    MotorFeo[coche] = 0;
	}
	return 1;
}

stock GetPlayerTaller(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 30.0, 2527.2297,-2089.9980,13.5469) || IsPlayerInRangeOfPoint(playerid, 30.0, 1909.7643,-1869.6307,13.5647)) return 1;
	if(NegocioInfo[GetPlayerDentroNego(playerid)][nTipo] == 6) return GetPlayerDentroNego(playerid);
	return 0;
}

forward Pescar(playerid); //Job pescador
public Pescar(playerid)
{
    new string[128];
	TogglePlayerControllable(playerid, 1);
	if(Trabajando[playerid] == 1 && JugadorInfo[playerid][pTrabajo] == 9)
	{
	    if(PescaRecogida[playerid] < 11)
	  	{
 	    	new pescarand = random(80);
 	    	new valorpesca = pescarand+20;
 	    	format(string, sizeof(string), "Has pescado una red valorada en %d$.", valorpesca);
 	    	SendClientMessage(playerid, Verde, string);
 	    	DineroPesca[playerid] += valorpesca;
 	    	new rand = random(sizeof(ChecksPescador));
 	    	SetPlayerCheckpoint(playerid, ChecksPescador[rand][0], ChecksPescador[rand][1], ChecksPescador[rand][2], 5.0);
 	    	PescaRecogida[playerid] ++;
 	    	return 1;
 	    }
 	    if(PescaRecogida[playerid] == 11)
 	    {
 	        new pescarand = random(80);
 	    	new valorpesca = pescarand+20;
 	    	format(string, sizeof(string), "Has pescado una red valorada en %d$.", valorpesca);
 	    	SendClientMessage(playerid, Verde, string);
 	    	DineroPesca[playerid] += valorpesca;
 	    	SendClientMessage(playerid, Verde, "Ya has pescado suficiente. Vuelve al puerto para recibir tu paga.");
 	        SetPlayerCheckpoint(playerid, 2983.2764,-1526.3475,0.0000, 5.0);
 	        PescaRecogida[playerid] ++;
 	        return 1;
 	    }
	}
	return 1;
}

forward TimerDejarTrabajarF(playerid);
public TimerDejarTrabajarF(playerid)
{
	if(Trabajando[playerid] == 1) //Trabajando
	{
	    if(JugadorInfo[playerid][pTrabajo] == 1) //Pizzero
	    {
	        Trabajando[playerid] = 0;
	        PizzaRepartida[playerid] = 0;
	        SetPlayerSkin(playerid, JugadorInfo[playerid][pSkin]);
	        DisablePlayerCheckpoint(playerid);
	        SendClientMessage(playerid, COLOR_PIEL, "Después de un tiempo te aburres y dejas de entregar pizzas.");
	    }
	    if(JugadorInfo[playerid][pTrabajo] == 2) //Barrendero
	    {
	        Trabajando[playerid] = 0;
	        CalleBarrida[playerid] = 0;
	        SetPlayerSkin(playerid, JugadorInfo[playerid][pSkin]);
	        DisablePlayerCheckpoint(playerid);
	        SendClientMessage(playerid, COLOR_PIEL, "Después de un tiempo te aburres y dejas de barrer calles.");
	    }
	    if(JugadorInfo[playerid][pTrabajo] == 3) //Camionero
	    {
	        Trabajando[playerid] = 0;
	        SetPlayerSkin(playerid, JugadorInfo[playerid][pSkin]);
	        DisablePlayerCheckpoint(playerid);
	        SendClientMessage(playerid, COLOR_PIEL, "No subiste al Bobcat a tiempo, dejaste de trabajar.");
	    }
	    if(JugadorInfo[playerid][pTrabajo] == 4) //Cosechador
	    {
	        Trabajando[playerid] = 0;
	        Cosechado[playerid] = 0;
	        SetPlayerSkin(playerid, JugadorInfo[playerid][pSkin]);
	        DisablePlayerCheckpoint(playerid);
	        SendClientMessage(playerid, COLOR_PIEL, "Después de un tiempo te aburres y dejas de cosechar.");
	    }
	    if(JugadorInfo[playerid][pTrabajo] == 5) //Fumigador aéreo
	    {
	        Trabajando[playerid] = 0;
	        Fumigado[playerid] = 0;
	        SetPlayerSkin(playerid, JugadorInfo[playerid][pSkin]);
	        DisablePlayerRaceCheckpoint(playerid);
			DisablePlayerCheckpoint(playerid);
	        SendClientMessage(playerid, COLOR_PIEL, "Después de un tiempo te aburres y dejas de fumigar.");
	    }
	    if(JugadorInfo[playerid][pTrabajo] == 9) //Pescador
	    {
	        Trabajando[playerid] = 0;
	        PescaRecogida[playerid] = 0;
	        DisablePlayerCheckpoint(playerid);
	        SendClientMessage(playerid, COLOR_PIEL, "Después de un tiempo te aburres y dejas de pescar.");
	    }
	}
	return 1;
}

stock GetPlayerDentroNego(playerid) //Consigue la ID del negocio en el que está el jugador
{
	new casa, Float:Sx, Float:Sy, Float:Sz, Int=GetPlayerInterior(playerid), VW=GetPlayerVirtualWorld(playerid);
    for(new x=1; x <= TotalNegs; x++)
	{
	    Sx = NegocioInfo[x][nSalidaX], Sy = NegocioInfo[x][nSalidaY], Sz = NegocioInfo[x][nSalidaZ];
	    if(IsPlayerInRangeOfPoint(playerid, 50.0, Sx, Sy, Sz) && (Int == NegocioInfo[x][nInterior]) && (VW == NegocioInfo[x][nVirtualWorld]))
	    {
	        casa = x; break;
	    }
	}
	return casa;
}

stock GetPlayerDentroPuertaNego(playerid) //Consigue la ID del negocio en el que está el jugador puerta
{
	new casa, Float:Sx, Float:Sy, Float:Sz, Int=GetPlayerInterior(playerid), VW=GetPlayerVirtualWorld(playerid);
    for(new x=1; x <= TotalNegs; x++)
	{
	    Sx = NegocioInfo[x][nSalidaX], Sy = NegocioInfo[x][nSalidaY], Sz = NegocioInfo[x][nSalidaZ];
	    if(IsPlayerInRangeOfPoint(playerid, 2.5, Sx, Sy, Sz) && (Int == NegocioInfo[x][nInterior]) && (VW == NegocioInfo[x][nVirtualWorld]))
	    {
	        casa = x; break;
	    }
	}
	return casa;
}

stock GetPlayerFueraPuertaNego(playerid) //Consigue la ID del negocio más cercano al jugador
{
	new casa, Float:Ex, Float:Ey, Float:Ez;
    for(new x=1; x <= TotalNegs; x++)
	{
	    Ex = NegocioInfo[x][nEntradaX], Ey = NegocioInfo[x][nEntradaY], Ez = NegocioInfo[x][nEntradaZ];
	    if(IsPlayerInRangeOfPoint(playerid, 1.0, Ex, Ey, Ez))
	    {
	        casa = x; break;
	    }
	}
	return casa;
}

UpdateNegocioLabel(n) //Actualiza 3DTextLabels negocios
{
    DestroyDynamicPickup(pickupnego[n]);
	if(NegocioInfo[n][nComprado] != 2)
	{
		switch(NegocioInfo[n][nCerrado])
		{
		    case 0: // Abierto - Verde
		    {
	            pickupnego[n] = CreateDynamicPickup(1273, 23, NegocioInfo[n][nEntradaX], NegocioInfo[n][nEntradaY], NegocioInfo[n][nEntradaZ]);
			}
		    case 1: // Cerrado - Azul
		    {
		    	pickupnego[n] = CreateDynamicPickup(1272, 23, NegocioInfo[n][nEntradaX], NegocioInfo[n][nEntradaY], NegocioInfo[n][nEntradaZ]);
			}
		}
	}
	else
	{
	    pickupnego[n] = CreateDynamicPickup(19522, 23, NegocioInfo[n][nEntradaX], NegocioInfo[n][nEntradaY], NegocioInfo[n][nEntradaZ]);
	}
}

stock GetPlayerDentroCasa(playerid) //Consigue la ID de la casa en la que está el jugador
{
	new casa, Float:Sx, Float:Sy, Float:Sz, Int=GetPlayerInterior(playerid), VW=GetPlayerVirtualWorld(playerid);
    for(new x=1; x <= TotalCasas; x++)
	{
	    Sx = CasaInfo[x][hSalidaX], Sy = CasaInfo[x][hSalidaY], Sz = CasaInfo[x][hSalidaZ];
	    if(IsPlayerInRangeOfPoint(playerid, 50.0, Sx, Sy, Sz) && (Int == CasaInfo[x][hInterior]) && (VW == CasaInfo[x][hVirtualWorld]))
	    {
	        casa = x; break;
	    }
	}
	return casa;
}

stock GetPlayerDentroPuertaCasa(playerid) //Consigue la ID de la casa en la que está el jugador puerta
{
	new casa, Float:Sx, Float:Sy, Float:Sz, Int=GetPlayerInterior(playerid), VW=GetPlayerVirtualWorld(playerid);
    for(new x=1; x <= TotalCasas; x++)
	{
	    Sx = CasaInfo[x][hSalidaX], Sy = CasaInfo[x][hSalidaY], Sz = CasaInfo[x][hSalidaZ];
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, Sx, Sy, Sz) && (Int == CasaInfo[x][hInterior]) && (VW == CasaInfo[x][hVirtualWorld]))
	    {
	        casa = x; break;
	    }
	}
	return casa;
}

stock GetPlayerFueraPuertaCasaCheckPo(playerid) //Consigue la ID de la casa más cercana al jugador
{
	new casa, Float:Ex, Float:Ey, Float:Ez;
    for(new x=1; x <= TotalCasas; x++)
	{
	    Ex = CasaInfo[x][hEntradaX], Ey = CasaInfo[x][hEntradaY], Ez = CasaInfo[x][hEntradaZ];
	    if(IsPlayerInRangeOfPoint(playerid, 1.5, Ex, Ey, Ez))
	    {
	        casa = x; break;
	    }
	}
	return casa;
}

stock GetPlayerFueraPuertaCasa(playerid) //Consigue la ID de la casa más cercana al jugador
{
	new casa, Float:Ex, Float:Ey, Float:Ez;
    for(new x=1; x <= TotalCasas; x++)
	{
	    Ex = CasaInfo[x][hEntradaX], Ey = CasaInfo[x][hEntradaY], Ez = CasaInfo[x][hEntradaZ];
	    if(IsPlayerInRangeOfPoint(playerid, 1.0, Ex, Ey, Ez))
	    {
	        casa = x; break;
	    }
	}
	return casa;
}

forward NoticiasLSN(color, string[]);
public NoticiasLSN(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SendClientMessage(i, color, string);
		}
	}
}

forward MaxTiempoAutoEscuela(playerid);
public MaxTiempoAutoEscuela(playerid)
{
	new AE = EnAutoEscuela[playerid];
	if(AE == 1)
	{
		SendClientMessage(playerid, Rojo, "Tardas demasiado tiempo en completar el recorrido.");
		SetPlayerPos(playerid, 2045.6418,-1908.1290,13.5469);
		EnAutoEscuela[playerid] = 0;
		CheckPointAutoEscuela[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
		MaxTiempoAutoEscuelaTimer[playerid] = NOEXISTE;
	}
	if(AE == 2)
	{
		SendClientMessage(playerid, Rojo, "Tardas demasiado tiempo en completar el recorrido.");
		SetPlayerPos(playerid, AutoEscuelas[AE-1][AutoX], AutoEscuelas[AE-1][AutoY], AutoEscuelas[AE-1][AutoZ]);
		EnAutoEscuela[playerid] = 0;
		CheckPointAutoEscuela[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
		DisablePlayerRaceCheckpoint(playerid);
		MaxTiempoAutoEscuelaTimer[playerid] = NOEXISTE;
		SetVehicleToRespawn(58); //CocheAutoescuelaAvion
	}
	if(AE == 3)
	{
		SendClientMessage(playerid, Rojo, "Tardas demasiado tiempo en completar el recorrido.");
		SetPlayerPos(playerid, AutoEscuelas[AE-1][AutoX], AutoEscuelas[AE-1][AutoY], AutoEscuelas[AE-1][AutoZ]);
		EnAutoEscuela[playerid] = 0;
		CheckPointAutoEscuela[playerid] = 0;
		DisablePlayerRaceCheckpoint(playerid);
		MaxTiempoAutoEscuelaTimer[playerid] = NOEXISTE;
		SetVehicleToRespawn(59); //CocheAutoescuelaBarco
	}
	return 1;
}

SetCheckPointAutoescuela(playerid)
{
	if(EnAutoEscuela[playerid] == 1) //Coches
	{
	    new CP = CheckPointAutoEscuela[playerid];
	    SetPlayerCheckpoint(playerid, ChecksPracticoCoche[CP][0], ChecksPracticoCoche[CP][1], ChecksPracticoCoche[CP][2], 5.0);
	    CheckPointAutoEscuela[playerid] ++;
	}
	if(EnAutoEscuela[playerid] == 2) //Aviones
	{
	    new CP = CheckPointAutoEscuela[playerid];
	    if(CP == 0){DisablePlayerCheckpoint(playerid);}
	    if(CP == 17){DisablePlayerRaceCheckpoint(playerid);}
	    if(CP >= 17){SetPlayerCheckpoint(playerid, ChecksPracticoAvion[CP][0], ChecksPracticoAvion[CP][1], ChecksPracticoAvion[CP][2], 5.0);}
	    else{SetPlayerRaceCheckpoint(playerid,3,ChecksPracticoAvion[CP][0],ChecksPracticoAvion[CP][1],ChecksPracticoAvion[CP][2],ChecksPracticoAvion[CP+1][0],ChecksPracticoAvion[CP+1][1],ChecksPracticoAvion[CP+1][2],8.0);}
	    CheckPointAutoEscuela[playerid] ++;
	}
	if(EnAutoEscuela[playerid] == 3) //Barcos
	{
	    new CP = CheckPointAutoEscuela[playerid];
	    SetPlayerRaceCheckpoint(playerid, 0, ChecksPracticoBarco[CP][0], ChecksPracticoBarco[CP][1], ChecksPracticoBarco[CP][2], ChecksPracticoBarco[CP+1][0], ChecksPracticoBarco[CP+1][1], ChecksPracticoBarco[CP+1][2], 5.0);
	    CheckPointAutoEscuela[playerid] ++;
	}
}

forward TimerAutoescuela(playerid);
public TimerAutoescuela(playerid)
{
	if(EnAutoEscuela[playerid] == 1 && !CocheAutoescuelaCond(GetPlayerVehicleID(playerid))){SendClientMessage(playerid, Rojo, "Has tardado demasiado en subir a un vehículo de la autoescuela."); KillTimer(MaxTiempoAutoEscuelaTimer[playerid]); EnAutoEscuela[playerid] = 0; CheckPointAutoEscuela[playerid] = 0; DisablePlayerCheckpoint(playerid); return 1;}
	if(EnAutoEscuela[playerid] == 2 && !CocheAutoescuelaAvion(GetPlayerVehicleID(playerid))){SendClientMessage(playerid, Rojo, "Has tardado demasiado en subir a la avioneta."); KillTimer(MaxTiempoAutoEscuelaTimer[playerid]); EnAutoEscuela[playerid] = 0; CheckPointAutoEscuela[playerid] = 0; DisablePlayerCheckpoint(playerid); DisablePlayerRaceCheckpoint(playerid); return 1;}
	if(EnAutoEscuela[playerid] == 3 && !CocheAutoescuelaBarco(GetPlayerVehicleID(playerid))){SendClientMessage(playerid, Rojo, "Has tardado demasiado en subir a la lancha."); KillTimer(MaxTiempoAutoEscuelaTimer[playerid]); EnAutoEscuela[playerid] = 0; CheckPointAutoEscuela[playerid] = 0; DisablePlayerRaceCheckpoint(playerid); return 1;}
	return 1;
}

TemaAutoescuelaCond(playerid, tema)
{
	if(tema == 0)
	{
	    new Autoescuela[800];
		strcat(Autoescuela,"Bienvenido a la autoescuela. Aquí aprenderás cómo conducir sin poner en peligro tu vida o la de los que te rodean.\n");
		strcat(Autoescuela,"Este examen se compone de dos partes, una teórica y otra práctica. Para aprobarlo deberás superar las dos partes.\n");
		strcat(Autoescuela,"En caso de no poder superar alguna parte, se te descontará 100$ por la plaza. Si apruebas el examen deberás pagar 700$\n");
		strcat(Autoescuela,"para recibir tu carnet de conducir.\n");
		strcat(Autoescuela,"\n");
		strcat(Autoescuela,"Ahora recibirás una clase acerca de cómo conducir correctamente y qué hacer en casos de emergencia. Presta atención.\n");
		ShowPlayerDialog(playerid,7,DIALOG_STYLE_MSGBOX,"Examen de conducción",Autoescuela,"Siguiente","Salir");
	}
	if(tema == 1)
	{
	    new Autoescuela[800];
	 	strcat(Autoescuela,"A la hora de conducir, siempre hay que llevar el coche por el carril derecho. Conducir por el carril izquierdo sería\n");
		strcat(Autoescuela,"ir en contrasentido, una falta muy grave ya que puede provocar muchos accidentes. Existen carriles múltiples, significa\n");
		strcat(Autoescuela,"que dos o más carriles van en la misma dirección, uno al lado del otro.\n");
		ShowPlayerDialog(playerid,8,DIALOG_STYLE_MSGBOX,"Examen de conducción - Carriles",Autoescuela,"Siguiente","Anterior");
	}
	if(tema == 2)
	{
	    new Autoescuela[800];
	    strcat(Autoescuela,"Conducir bajo los efectos del alcohol u otras drogas es muy peligroso. Alquien que ha tomado drogas no es capaz de\n");
	    strcat(Autoescuela,"controlar su cuerpo completamente, por lo que su capacidad de reacción disminuye. Si has consumido drogas y tienes que\n");
	    strcat(Autoescuela,"desplazarte se aconseja llamar a un amigo o un taxi, o ir caminando.\n");
	    ShowPlayerDialog(playerid,9,DIALOG_STYLE_MSGBOX,"Examen de conducción - Drogas al volante",Autoescuela,"Siguiente","Anterior");
	}
	if(tema == 3)
	{
	    new Autoescuela[800];
		strcat(Autoescuela,"Las distracciones al volante son muy comunes. Cosas que te distraigan como hablar por móvil, mirar el GPS, o estar\n");
	    strcat(Autoescuela,"fumándose un cigarrillo puede provocar un accidente. Hablar por movil cuando se conduce es una falta grave.\n");
	    strcat(Autoescuela,"Para estar alerta de los peligros que puedan aparecer en la carretera hay que estar bien despierto y mirando siempre al\n");
	    strcat(Autoescuela,"frente. Beber refrescos con cafeina te ayudan a distraerte menos a la hora de conducir.\n");
	    ShowPlayerDialog(playerid,10,DIALOG_STYLE_MSGBOX,"Examen de conducción - Distracciones",Autoescuela,"Siguiente","Anterior");
	}
	if(tema == 4)
	{
	    new Autoescuela[800];
		strcat(Autoescuela,"A veces cuando conducimos podemos encontrarnos con accidentes que han ocurrido. Si vemos un accidente en el cual\n");
		strcat(Autoescuela,"no hay nadie socorriendo a las víctimas, es una obligación llamar a los servicios de emergencia o pedir ayuda.\n");
		strcat(Autoescuela,"Debemos comprobar sí está consciente o inconsciente. Si está inconsciente debemos quedarnos con él hasta que lleguen\n");
		strcat(Autoescuela,"los servicios de emergencia. Recuerda que no debes intentar socorrerle tú mismo, podrías herirle aun más o incluso\n");
		strcat(Autoescuela,"provocarle la muerte.\n");
		ShowPlayerDialog(playerid,11,DIALOG_STYLE_MSGBOX,"Examen de conducción - Emergencias",Autoescuela,"Siguiente","Anterior");
	}
	if(tema == 5)
	{
	    new Autoescuela[800];
		strcat(Autoescuela,"A la hora de estacionar nuestro vehículo debemos ser consciente de dónde aparcamos, ya que puede ser una zona\n");
		strcat(Autoescuela,"que dificulte el paso de otros vehículos o que no está hecha para esa acción, lo cual te puede costar una multa.\n");
		strcat(Autoescuela,"Para aparcar correctamente debemos fijarnos en que la zona está creada con ese fin, o que sea una zona donde\n");
		strcat(Autoescuela,"no moleste el paso de peatones o de otros vehículos. Podemos aparcar correctamente dejando el vehículo en un\n");
		strcat(Autoescuela,"parking, zona azul, o dejando una mitad del coche en la acera y la otra en la carretera siempre y cuando no\n");
		strcat(Autoescuela,"dificulte el paso de otros vehículos o peatones.\n");
		ShowPlayerDialog(playerid,12,DIALOG_STYLE_MSGBOX,"Examen de conducción - Aparcar correctamente",Autoescuela,"Siguiente","Anterior");
	}
	if(tema == 6)
	{
	    new Autoescuela[800];
		strcat(Autoescuela,"Para conducir en la ciudad, el máximo de velocidad permitido es de 70Km/h. Aunque lo aconsejable es ir a 50Km/h.\n");
		strcat(Autoescuela,"En carreteras el límite permitido es de 100Km/, y en autopistas 120Km/h, pero recuerda que a más velocidad se\n");
	    strcat(Autoescuela,"reduce el tiempo de reacción y aumenta la probabilidad de accidentes de conducción.\n");
	    strcat(Autoescuela,"Por último; cuando escuchemos sirenas de un vehículo de emergencias o lleve las luces de emergencia encendidas\n");
	    strcat(Autoescuela,"debemos cederle el paso, ya que posiblemente estén atentiendo a una llamada grave.\n");
		ShowPlayerDialog(playerid,13,DIALOG_STYLE_MSGBOX,"Examen de conducción - Velocidades y señales de emergencia",Autoescuela,"Siguiente","Anterior");
	}
	if(tema == 7)
	{
	    new Autoescuela[800];
		strcat(Autoescuela,"Hasta aquí la clase teórica, ahora se te harán diversas preguntas para comprobar que sabes lo necesario para\n");
		strcat(Autoescuela,"conducir correctamente. Piensa bien antes de responder, si fallas alguna pregunta perderás 100$ por la plaza.\n");
		strcat(Autoescuela," \n");
		strcat(Autoescuela,"Buena suerte.\n");
		ShowPlayerDialog(playerid,14,DIALOG_STYLE_MSGBOX,"Examen de conducción - Final",Autoescuela,"Comenzar","Anterior");
	}
}

PreguntaAutoescuelaCond(playerid, pregunta)
{
	if(pregunta == 0)
	{
	    new Autoescuela[800];
		strcat(Autoescuela,"Debemos dejar paso a un coche de emergencias si...\n");
		strcat(Autoescuela," \n");
		strcat(Autoescuela,"1: ...nos pita.\n");
		strcat(Autoescuela,"2: ...nos grita que nos apartemos.\n");
		strcat(Autoescuela,"3: Siempre.\n");
		strcat(Autoescuela,"4: ...lleva las sirenas encendidas.\n");
		ShowPlayerDialog(playerid, 15, DIALOG_STYLE_INPUT, "Pregunta 1", Autoescuela, "Aceptar", "Salir");
	}
	if(pregunta == 1)
	{
	    new Autoescuela[800];
		strcat(Autoescuela,"¿Cuál es la máxima velocidad permitida en ciudad?\n");
		strcat(Autoescuela," \n");
		strcat(Autoescuela,"1: 80Km/h\n");
		strcat(Autoescuela,"2: 70Km/h\n");
		strcat(Autoescuela,"3: 60Km/h\n");
		strcat(Autoescuela,"4: 65Km/h\n");
		ShowPlayerDialog(playerid, 16, DIALOG_STYLE_INPUT, "Pregunta 2", Autoescuela, "Aceptar", "Salir");
	}
	if(pregunta == 2)
	{
	    new Autoescuela[800];
		strcat(Autoescuela,"Si vemos que se produce un accidente ¿qué debemos hacer?\n");
		strcat(Autoescuela," \n");
		strcat(Autoescuela,"1: Tumbar a los heridos en el suelo y pedir ayuda.\n");
		strcat(Autoescuela,"2: Llamar a emergencias o pedir ayuda.\n");
		strcat(Autoescuela,"3: Llevar a los héridos al hospital.\n");
		strcat(Autoescuela,"4: Nada, Los servicios de emergencias ya están en camino.\n");
		ShowPlayerDialog(playerid, 17, DIALOG_STYLE_INPUT, "Pregunta 3", Autoescuela, "Aceptar", "Salir");
	}
	if(pregunta == 3)
	{
	    new Autoescuela[800];
		strcat(Autoescuela,"¿Cuál de estas acciones no está prohibida hacer mientras se conduce?\n");
		strcat(Autoescuela," \n");
		strcat(Autoescuela,"1: Utilizar cascos o auriculares.\n");
		strcat(Autoescuela,"2: Hablar por el móvil.\n");
		strcat(Autoescuela,"3: Escuchar la radio.\n");
		strcat(Autoescuela,"4: Las tres anteriores están prohibidas.\n");
		ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Pregunta 4", Autoescuela, "Aceptar", "Salir");
	}
	if(pregunta == 4)
	{
	    new Autoescuela[800];
		strcat(Autoescuela,"¿Cómo debe estacionarse un vehículo?\n");
		strcat(Autoescuela," \n");
		strcat(Autoescuela,"1: En zonas hechas para eso.\n");
		strcat(Autoescuela,"2: En zonas hechas para eso y si quiero en un lado del asfalto.\n");
		strcat(Autoescuela,"3: En zonas hechas para eso o dejando una mitad del vehículo en el asfalto y la otra en la acera.\n");
		strcat(Autoescuela,"4: Todas son correctas.\n");
		ShowPlayerDialog(playerid, 19, DIALOG_STYLE_INPUT, "Pregunta 5", Autoescuela, "Aceptar", "Salir");
	}
}

stock PlayerTieneLlaveVeh(playerid, vehicleid)
{
	if(vehicleid <= MAX_VEHPUBLICO){return 0;}
    new TieneLlave;
    for(new x = 0; x < 5; x++)
    {
		if(JugadorInfo[playerid][pLlaveCoche][x] == CocheInfo[vehicleid][cLlave] || JugadorInfo[playerid][pLlaveCochePrestado][x] == CocheInfo[vehicleid][cLlave]){
		TieneLlave = 1; break;}
	}
	if(TieneLlave != 0){return 1;}
	return 0;
}

stock PlayerEsFaccionVeh(playerid, vehicleid)
{
	if(vehicleid > MAX_VEHPUBLICO){return 0;}
	if(CocheLSPD(vehicleid) && JugadorInfo[playerid][pFaccion] == 1){return 1;}
	if(CocheLSTV(vehicleid) && JugadorInfo[playerid][pFaccion] == 4){return 1;}
    if(CocheLSFD(vehicleid) && JugadorInfo[playerid][pFaccion] == 2){return 1;}
	if(CocheAutoescuelaCond(vehicleid) && EnAutoEscuela[playerid] == 1){return 1;}
	if(CocheAutoescuelaAvion(vehicleid) && EnAutoEscuela[playerid] == 2){return 1;}
	if(CocheAutoescuelaBarco(vehicleid) && EnAutoEscuela[playerid] == 3){return 1;}
	if(SoloPizzas(vehicleid) && JugadorInfo[playerid][pTrabajo] == 1){return 1;}
	if(IsASweeper(vehicleid) && JugadorInfo[playerid][pTrabajo] == 2){return 1;}
	if(IsACombine(vehicleid) && JugadorInfo[playerid][pTrabajo] == 4){return 1;}
	if(IsACropduster(vehicleid) && JugadorInfo[playerid][pTrabajo] == 5){return 1;}
	if(IsATaxi(vehicleid) && JugadorInfo[playerid][pTrabajo] == 6){return 1;}
	if(IsABarcoPesca(vehicleid) && JugadorInfo[playerid][pTrabajo] == 9){return 1;}
	return 0;
}

stock ResetPlayerVars(playerid) //Resetea todas las variables del jugador
{
	JugadorRegistrado[playerid] = 0;
    JugadorLogueado[playerid] = 0;  //Sistema de logueo
    IntentosLogueo[playerid] = 0;
    PrimerSpawn[playerid] = 0; //Sistema de spawn
    AdminDuty[playerid] = 0; //Sistema admin duty
    GodMode[playerid] = 0; //Sistema godmode
    Volando[playerid] = 0; //Sistema vuelo
    ChatOOC[playerid] = 0; //Chat OOC /b
    Yo[playerid] = 0; //Comando /yo
	reclutarfaccion[playerid] = 0; //Comando /reclutar
    reclutarlider[playerid] = 0;
	MuertoTimer[playerid] = 0; //Sistema de muerte
	MuertoFlashTimer[playerid] = 0;
    Muerte[playerid] = 0;
    Taseado[playerid] = 0; //Sistema de táser
    Esposado[playerid] = 0; //Sistema de esposas
    SolicitaRefuerzos[playerid] = 0; //Sistema de refuerzos LSPD
    SolicitaTodos[playerid] = 0;
    CederTiempo[playerid] = 0; //Timer para ceder objetos
    RecargarTiempo[playerid] = 0; //Timer para recargar
    MultaPrecio[playerid] = 0; //Sistema de multas
    Multador[playerid] = NOEXISTE;
    LlenandoDeposito[playerid] = 0;
    VenderVeh[playerid] = 0; //Sistema de desguace
    VenderVehAPrecio[playerid] = 0; //Sistema venta de vehículos a otras personas
	VenderVehAVendedor[playerid] = NOEXISTE;
	VenderVehALlave[playerid] = 0;
	VehMaleteroPlayer[playerid] = 0; //Maletero
	EnAutoEscuela[playerid] = 0; //Autoescuela
	CheckPointAutoEscuela[playerid] = 0;
	MaxTiempoAutoEscuelaTimer[playerid] = NOEXISTE;
	MascaraGas[playerid] = 0; //Comando /mascara
	Trabajando[playerid] = 0; //Trabajo
	OfertaTrabajo[playerid] = NOEXISTE;
	Tarifa[playerid] = 0; //Trabajo
	PizzaRepartida[playerid] = 0; //Job pizzero
	SolicitaPizza[playerid] = 0;
	CalleBarrida[playerid] = 0; //Job barrendero
	Cosechado[playerid] = 0; //Job cosechador
	Fumigado[playerid] = 0; //Job fumigador
	TimerDejarTrabajar[playerid] = NOEXISTE;
	TaxiConductor[playerid] = NOEXISTE; //Job taxista
	TaxiPasajero[playerid] = NOEXISTE;
	TaxiCoste[playerid] = 0;
	SolicitaTaxi[playerid] = 0;
	ReparacionTipo[playerid] = 0; //Job mecánico
	ReparacionMeca[playerid] = NOEXISTE;
	ReparacionPrecio[playerid] = 0;
	RepintadoColor1[playerid] = 0;
	RepintadoColor2[playerid] = 0;
	RepintadoMeca[playerid] = NOEXISTE;
	RepintadoPrecio[playerid] = 0;
	PuertaForzada[playerid] = 0; //Job ladrón
	Robando[playerid] = 0;
	Puenteando[playerid] = 0;
	PescaRecogida[playerid] = 0; //Job pescador
	DineroPesca[playerid] = 0;
	Contratador[playerid] = NOEXISTE; //Talleres mecánicos
	Contrato[playerid] = 0;
	PuenteHecho[playerid] = 0;
    EnLlamada[playerid] = 0; //Sistema teléfono
    ToqueLlamada[playerid] = 0;
    PersonaEnLlamada[playerid] = NOEXISTE;
    CosteTotalLlamada[playerid] = 0;
    for(new x=0; x<16; x++) //Agenda
    {
        AgendaNumero[playerid][x] = 0;
    }
    LocalizarVeh[playerid] = 0; //Comando /Localizarveh
    MirandoContactoAgenda[playerid] = 0;
    Idioma[playerid] = 0; //Sistema idiomas
    oldcarid[playerid] = 0; //Comando /oldcar
    PagarTimer[playerid] = 0; //Comando /pagar
    EditNegoPos[playerid] = 0; //Comando /editarnego
    PreparandoDroga[playerid] = 0; //Comando /preparar
    MisionEncargada[playerid] = 0; //Sistema de misiones de pandillas
	RealizandoMision[playerid] = 0;
	MuroAPintar[playerid] = NOEXISTE;
	TransferirPlayer[playerid] = NOEXISTE; //ATM Transferir
	HaciendoPressBanca[playerid] = 0; //Comando /Entrenar
	RepeticionesPressBanca[playerid] = 0;
	MatriculasActivadas[playerid] = 0; //Sistema matrículas
	//SISTEMA ANTICHEAT
	DineroAC[playerid] = 0;
	PingKick[playerid] = 0;
    ArmaSpawnAC[playerid] = 0;
    TimerBlockIP[playerid] = NOEXISTE;
    ChalecoAC[playerid] = 0;
    VehicleHack[playerid] = 0;
    //CurrentVeh[playerid] = 0;
    //FIN SISTEMA ANTICHEAT
    SiendoReparado[playerid] = 0; //Autoreparar
    CinturonPuesto[playerid] = 0; //Cinturón
    PrestadorCoche[playerid] = NOEXISTE; // /PrestarLlave
    LlavePrestada[playerid] = NOEXISTE;
    for(new i = 0; pInfo:i < pInfo; i++) { JugadorInfo[playerid][pInfo:i] = 0; } // Reinicia todas las variables a 0
    for(new i = 0; zInfo:i < zInfo; i++) { HeridasInfo[playerid][zInfo:i] = 0; } // Reinicia todas las heridas a 0
    return 1;
}

#define flashtime 100

new Flash[MAX_VEHICLES];
new FlashTime[MAX_VEHICLES];
forward OnLightFlash(vehicleid);
public OnLightFlash(vehicleid)
{
	new panels, doors, lights, tires;
	GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
	switch(Flash[vehicleid])
	{
		case 0: UpdateVehicleDamageStatus(vehicleid, panels, doors, 2, tires);
		case 1: UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
		case 2: UpdateVehicleDamageStatus(vehicleid, panels, doors, 2, tires);
		case 3: UpdateVehicleDamageStatus(vehicleid, panels, doors, 4, tires);
		case 4: UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);
		case 5: UpdateVehicleDamageStatus(vehicleid, panels, doors, 4, tires);
	}
	if(Flash[vehicleid] >=5) Flash[vehicleid] = 0;
	else Flash[vehicleid] ++;
	return 1;
}

stock CreateCopObject(tipo, Float:x,Float:y,Float:z,Float:Angle, mundo, interior) //Crear objetos de trafico
{
	switch(tipo)
	{
		case 1:
		{
			for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z-0.7;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(2899, x, y, z-0.9, 0, 0, Angle-90, mundo, interior);
					return 1;
				}
			}
		}
		case 2:
		{
			for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z-0.5;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(1238, x, y, z-0.5, 0, 0, Angle-90, mundo, interior);
					return 1;
				}
			}
		}
		case 3:
		{
			for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z-0.289973;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(1423, x, y, z-0.289973, 0, 0, Angle, mundo, interior);
					return 1;
				}
			}
		}
		case 4:
		{
			for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z-0.5;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(1422, x, y, z-0.5, 0, 0, Angle, mundo, interior);
					return 1;
				}
			}
		}
		case 5:
  		{
  		    for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z-0.9;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(3091, x, y, z-0.9, 0, 0, Angle, mundo, interior);
					return 1;
				}
			}
  		}
  		case 6:
  		{
  			for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z-0.3;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(1997, x, y, z-1.0, 0, 0, Angle, mundo, interior);
					return 1;
				}
			}
		}
		case 7:
  		{
  			for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(19834, x, y, z, 0, 0, Angle, mundo, interior);
					return 1;
				}
			}
		}
		case 8:
  		{
  			for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(1428, x, y, z+0.51, 0, 0, Angle, mundo, interior);
					return 1;
				}
			}
		}
		case 9:
  		{
  			for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(1437, x, y, z+0.2, 0, 0, Angle, mundo, interior);
					return 1;
				}
			}
		}
		case 10: 
		{
  			for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z-0.40133;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(1459, x, y, z-0.40133, 0, 0, Angle, mundo, interior);
					return 1;
				}
			}
		}
		case 11:
		{
  			for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z-0.562463;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(1425, x, y, z-0.562463, 0, 0, Angle+180, mundo, interior);
					return 1;
				}
			}
		}
		case 12:
		{
  			for(new i = 0; i < sizeof(ObjectsInfo); i++)
			{
				if(ObjectsInfo[i][cpCreated] == 0)
				{
					ObjectsInfo[i][cpType]=tipo;
					ObjectsInfo[i][cpCreated]=1;
					ObjectsInfo[i][cpX]=x;
					ObjectsInfo[i][cpY]=y;
					ObjectsInfo[i][cpZ]=z-0.479455;
					ObjectsInfo[i][cpObject] = CreateDynamicObject(1424, x, y, z-0.479455, 0, 0, Angle, mundo, interior);
					return 1;
				}
			}
		}
	}
  	return 0;
}

stock DeleteAllObjects() //Quitar todos objetos de trafico
{
    for(new i = 0; i < sizeof(ObjectsInfo); i++)
  	{
  	    if(ObjectsInfo[i][cpCreated] == 1)
  	    {
			ObjectsInfo[i][cpType]=0;
  	        ObjectsInfo[i][cpCreated]=0;
            ObjectsInfo[i][cpX]=0.0;
            ObjectsInfo[i][cpY]=0.0;
            ObjectsInfo[i][cpZ]=0.0;
            DestroyDynamicObject(ObjectsInfo[i][cpObject]);
  	    }
	}
    return 0;
}

stock DeleteClosestObject(playerid) //Quitar objetos de trafico
{
    for(new i = 0; i < sizeof(ObjectsInfo); i++)
  	{
  	    if(IsPlayerInRangeOfPoint(playerid, 2.0, ObjectsInfo[i][cpX], ObjectsInfo[i][cpY], ObjectsInfo[i][cpZ]))
        {
  	        if(ObjectsInfo[i][cpCreated] == 1)
            {
				ObjectsInfo[i][cpType]=0;
                ObjectsInfo[i][cpCreated]=0;
                ObjectsInfo[i][cpX]=0.0;
                ObjectsInfo[i][cpY]=0.0;
                ObjectsInfo[i][cpZ]=0.0;
                DestroyDynamicObject(ObjectsInfo[i][cpObject]);
                return 1;
  	        }
  	    }
  	}
    return 0;
}


encode_tires(tire1, tire2, tire3, tire4) return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);

//----------------- SISTEMA DE DAÑO A LA CHAPA ---------------------//

stock UpdateVehicleDoorsDamageStatus(vehicleid, Bonnet, Boot, FrontLeft, FrontRight, RearLeft, RearRight)
{
	new Panels, Doors, Lights, Tires;
	GetVehicleDamageStatus(vehicleid, Panels, Doors, Lights, Tires);
	return UpdateVehicleDamageStatus(vehicleid, Panels, Bonnet | (Boot << 8) | (FrontLeft << 16) | (FrontRight << 24) | (RearLeft << 32) | (RearRight << 40), Lights, Tires);
}

stock GetVehicleDoorsDamageStatus(vehicleid, &Bonnet, &Boot, &FrontLeft, &FrontRight, &RearLeft, &RearRight)
{
	new Panels, Doors, Lights, Tires;
	GetVehicleDamageStatus(vehicleid, Panels, Doors, Lights, Tires);
	Bonnet = Doors & 7;
	Boot = Doors >> 8 & 7;
	FrontLeft = Doors >> 16 & 7;
	FrontRight = Doors >> 24 & 7;
	RearLeft = Doors >> 32 & 7;
	RearRight = Doors >> 40 & 7;
	return true;
}


stock DestruirCapo(vehicleid)
{
	new Bonnet, Boot, FrontLeft, FrontRight, RearLeft, RearRight;
	GetVehicleDoorsDamageStatus(vehicleid, Bonnet, Boot, FrontLeft, FrontRight, RearLeft, RearRight);
	UpdateVehicleDoorsDamageStatus(vehicleid, (1 << 1), Boot, FrontLeft, FrontRight, RearLeft, RearRight);
	CocheInfo[vehicleid][cCapoRoto] = 1;
}

stock DestruirBaul(vehicleid)
{
	new Bonnet, Boot, FrontLeft, FrontRight, RearLeft, RearRight;
	GetVehicleDoorsDamageStatus(vehicleid, Bonnet, Boot, FrontLeft, FrontRight, RearLeft, RearRight);
	UpdateVehicleDoorsDamageStatus(vehicleid, Bonnet, (1 << 1), FrontLeft, FrontRight, RearLeft, RearRight);
	CocheInfo[vehicleid][cBaulRoto] = 1;
}

forward RepararCapo(vehicleid);
public RepararCapo(vehicleid)
{
    new panels, doors, lights, tires;
	GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
	CocheInfo[vehicleid][cCapoRoto] = 0;
	UpdateVehicleDamageStatus(vehicleid, panels, 0, lights, tires);

    if(CocheInfo[vehicleid][cBaulRoto] == 1)
	{
        new Bonnet, Boot, FrontLeft, FrontRight, RearLeft, RearRight;
		GetVehicleDoorsDamageStatus(vehicleid, Bonnet, Boot, FrontLeft, FrontRight, RearLeft, RearRight);
		UpdateVehicleDoorsDamageStatus(vehicleid, Bonnet, (1 << 1), FrontLeft, FrontRight, RearLeft, RearRight);
	}
	return 1;
}

forward RepararBaul(vehicleid);
public RepararBaul(vehicleid)
{
    new panels, doors, lights, tires;
	GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
	CocheInfo[vehicleid][cBaulRoto] = 0;
	UpdateVehicleDamageStatus(vehicleid, panels, 0, lights, tires);
	
    if(CocheInfo[vehicleid][cCapoRoto] == 1)
	{
        new Bonnet, Boot, FrontLeft, FrontRight, RearLeft, RearRight;
		GetVehicleDoorsDamageStatus(vehicleid, Bonnet, Boot, FrontLeft, FrontRight, RearLeft, RearRight);
		UpdateVehicleDoorsDamageStatus(vehicleid, (1 << 1), Boot, FrontLeft, FrontRight, RearLeft, RearRight);
	}
	return 1;
}

forward RepairVehicleEx(vehicleid);
public RepairVehicleEx(vehicleid)
{
	new Float:vida;
	GetVehicleHealth(vehicleid, vida);
	CocheInfo[vehicleid][cBaulRoto] = 0;
	CocheInfo[vehicleid][cCapoRoto] = 0;
	CuentaCapo[vehicleid] = 0;
	CuentaBaul[vehicleid] = 0;
	RepairVehicle(vehicleid);
	SetVehicleHealth(vehicleid, vida);
	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid) // Daño chapa
{
    new panels2, doors2, lights2, tires2, pinchadas;
	GetVehicleDamageStatus(vehicleid,panels2,doors2,lights2,tires2);
	
	if(tires2 == 0) { pinchadas = 0; }
	else { pinchadas = 1; }
		  	
	new Bonnet, Boot, FrontLeft, FrontRight, RearLeft, RearRight;
	GetVehicleDoorsDamageStatus(vehicleid, Bonnet, Boot, FrontLeft, FrontRight, RearLeft, RearRight);

	new Float:vida;
	GetVehicleHealth(vehicleid, vida);
	
	if(CuentaCapo[vehicleid] != -1)
	{
		if(Bonnet == (1 << 1)) { CuentaCapo[vehicleid]++; }
	}
	
	if(CuentaBaul[vehicleid] != -1)
	{
		if(Boot == (1 << 1))   { CuentaBaul[vehicleid]++; }
	}
	
    new panels, doors, lights, tires;
	GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
	UpdateVehicleDamageStatus(vehicleid, 0, 0, lights, tires);

    if(LucesSirena[vehicleid] == 0) { RepairVehicle(vehicleid); }
	
	if(CuentaCapo[vehicleid] > 0)
	{
	    CuentaCapo[vehicleid] = -1;
		DestruirCapo(vehicleid);
	 	ProxDetector(30.0, playerid, "Se escucha el ruido de una colisión automovilística.", COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
    	GameTextForPlayer(playerid, "~y~has producido golpes en el vehiculo, conduce con precaucion.", 2500, 1);
	}
	
	if(CuentaBaul[vehicleid] > 0)
	{
	    CuentaBaul[vehicleid] = -1;
		DestruirBaul(vehicleid);
		ProxDetector(30.0, playerid, "Se escucha el ruido de un vehículo golpeandose con algo.", COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
        GameTextForPlayer(playerid, "~y~has producido golpes en el vehiculo, conduce con precaucion.", 2500, 1);
	}
	
	if(CocheInfo[vehicleid][cBaulRoto] == 1)
	{
	    DestruirBaul(vehicleid);
	}
	
	if(CocheInfo[vehicleid][cCapoRoto] == 1)
	{
	    DestruirCapo(vehicleid);
	}
	
	if(pinchadas == 1)
	{
	    GetVehicleDamageStatus(vehicleid,panels,doors,lights,tires);
	    tires = encode_tires(1, 1, 1, 1);
		UpdateVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
	}
	SetVehicleHealth(vehicleid, vida);
	return 1;
}

//------------------------------------------------------------------//

forward LoadCar(); //Cargar coches
public LoadCar()
{
    new Query[180], content[60], maletero[10], maleterocant[20];
	new ccount, conteo;
	new car = MAX_VEHPUBLICO+1;
	new sql[80], row[512];
 	format(sql, sizeof(sql), "SELECT SQLID FROM vehiculos ORDER BY SQLID DESC");
	mysql_query(1, sql);
	mysql_store_result();
	mysql_fetch_row(row);
	ccount = strval(row);

	for(new x=1; x<=ccount; x++)
	{
	    mysql_format(1, Query, sizeof(Query), "SELECT * FROM `vehiculos` WHERE `SQLID` = %d", x);
		mysql_query(1, Query);
		mysql_store_result();
		if(cache_get_field_content_int(0, "Llave") != 0 && cache_get_field_content_int(0, "Modelo") != 0)
		{
			CocheInfo[car][cSQLID] = cache_get_field_content_int(0, "SQLID");
		 	CocheInfo[car][cLlave] = cache_get_field_content_int(0, "Llave");
		 	CocheInfo[car][cModelo] = cache_get_field_content_int(0, "Modelo");
		 	CocheInfo[car][cPosX] = cache_get_field_content_float(0, "PosX");
		 	CocheInfo[car][cPosY] = cache_get_field_content_float(0, "PosY");
		 	CocheInfo[car][cPosZ] = cache_get_field_content_float(0, "PosZ");
		 	CocheInfo[car][cZAngle] = cache_get_field_content_float(0, "ZAngle");
		 	CocheInfo[car][cColor1] = cache_get_field_content_int(0, "Color1");
		 	CocheInfo[car][cColor2] = cache_get_field_content_int(0, "Color2");
		 	CocheInfo[car][cComprado] = cache_get_field_content_int(0, "Comprado");
		 	cache_get_field_content(0, "Dueno", content);
		    format(CocheInfo[car][cDueno], 60, "%s", content);
            cache_get_field_content(0, "NombreModelo", content);
		    format(CocheInfo[car][cNombreModelo], 60, "%s", content);
		    CocheInfo[car][cValor] = cache_get_field_content_int(0, "Valor");
		    CocheInfo[car][cCerrado] = cache_get_field_content_int(0, "Cerrado");
			CocheInfo[car][cGas] = cache_get_field_content_int(0, "Gas");
			CocheInfo[car][cEnDeposito] = cache_get_field_content_int(0, "EnDeposito");
			CocheInfo[car][cMaxMaletero] = cache_get_field_content_int(0, "MaxMaletero");
			for(new a=0; a<CocheInfo[car][cMaxMaletero]; a++)
		    {
		        format(maletero, sizeof(maletero), "Maletero%d", a+1);
		        format(maleterocant, sizeof(maleterocant), "MaleteroCant%d", a+1);
		        CocheInfo[car][cMaletero][a] = cache_get_field_content_int(0, maletero);
		    	CocheInfo[car][cMaleteroCant][a] = cache_get_field_content_int(0, maleterocant);
		    }
			CocheInfo[car][cPanels] = cache_get_field_content_int(0, "Panels");
			CocheInfo[car][cDoors] = cache_get_field_content_int(0, "Doors");
			CocheInfo[car][cLights] = cache_get_field_content_int(0, "Lights");
			CocheInfo[car][cTires] = cache_get_field_content_int(0, "Tires");
			CocheInfo[car][cDamage] = cache_get_field_content_float(0, "Damage");
			CocheInfo[car][cVirtualWorld] = cache_get_field_content_int(0, "VirtualWorld");
			CocheInfo[car][cInterior] = cache_get_field_content_int(0, "Interior");
			
			CocheInfo[car][cGuantera][0] = cache_get_field_content_int(0, "Guantera0");
			CocheInfo[car][cGuantera][1] = cache_get_field_content_int(0, "Guantera1");
			CocheInfo[car][cGuanteraCant][0] = cache_get_field_content_int(0, "GuanteraCant0");
			CocheInfo[car][cGuanteraCant][1] = cache_get_field_content_int(0, "GuanteraCant1");

			CocheInfo[car][cCapoRoto] = cache_get_field_content_int(0, "CapoFeo");
			CocheInfo[car][cBaulRoto] = cache_get_field_content_int(0, "BaulFeo");
			
			if(CocheInfo[car][cDamage] < 250){CocheInfo[car][cDamage] = 250;}
			else if(CocheInfo[car][cDamage] > 1000){CocheInfo[car][cDamage] = 1000;}
				
			CocheInfo[car][cID] = CreateVehicle(CocheInfo[car][cModelo],CocheInfo[car][cPosX],CocheInfo[car][cPosY],CocheInfo[car][cPosZ],CocheInfo[car][cZAngle],CocheInfo[car][cColor1],CocheInfo[car][cColor2],600000);
			
			CocheInfo[car][cMaxMaletero] = EspaciosMaletero(GetVehicleModel(car));
			
			if(CocheInfo[car][cEnDeposito] == 1) //Desgüace
			{
			    SetVehicleVirtualWorld(car, car+1);
			    if(IsABoat(car)){SetVehiclePos(car, 2294.3999,-2447.8000,0.0000);}
		     	if(!IsABoat(car)){SetVehiclePos(car, 2274.1028,-2345.5371,13.5469);}
		    }
		    
		    UpdateVehicleDamageStatus(car, CocheInfo[car][cPanels], CocheInfo[car][cDoors], CocheInfo[car][cLights], CocheInfo[car][cTires]);
		    
		    if(CocheInfo[car][cBaulRoto] == 1)
			{
			    DestruirBaul(car);
				CuentaBaul[car] = -1;
			}
			if(CocheInfo[car][cCapoRoto] == 1)
			{
			    DestruirCapo(car);
			    CuentaCapo[car] = -1;
			}
	
		    SetVehicleHealth(car, CocheInfo[car][cDamage]);
		    SetVehicleVirtualWorld(car, CocheInfo[car][cVirtualWorld]);
		    LinkVehicleToInteriorEx(car, CocheInfo[car][cInterior]);
			if(CocheInfo[car][cLlave] >= CodigoLlave){CodigoLlave = CocheInfo[car][cLlave]+1;}
			conteo++;
			car ++;
		}
	}
	mysql_free_result();
	if(CodigoLlave < 1000){CodigoLlave = 1000;}
	printf("[MYSQL]: Coches cargados: %d", conteo);
	return 1;
}

forward SaveCar(idx); //Guardar coches -IMPORTANTE NO BORRAR NI UN SOLO VEHÍCULO DE LA DB-
public SaveCar(idx)
{
    if(CocheInfo[idx][cLlave] != 0 && CocheInfo[idx][cModelo] != 0 && idx >= MAX_VEHPUBLICO+1)
    {
	    GetVehiclePos(idx, CocheInfo[idx][cPosX], CocheInfo[idx][cPosY], CocheInfo[idx][cPosZ]);
	    GetVehicleZAngle(idx, CocheInfo[idx][cZAngle]);
	    GetVehicleDamageStatus(idx, CocheInfo[idx][cPanels], CocheInfo[idx][cDoors], CocheInfo[idx][cLights], CocheInfo[idx][cTires]);
	    GetVehicleHealth(idx, CocheInfo[idx][cDamage]);
	    CocheInfo[idx][cVirtualWorld] = GetVehicleVirtualWorld(idx);
	    new sql[1024];
	    format(sql, 1024, "UPDATE vehiculos SET ID=%d,Llave=%d,Modelo=%d,PosX=%f,PosY=%f,PosZ=%f,ZAngle=%f,Color1=%d,Color2=%d,Comprado=%d,Dueno='%s',NombreModelo='%s',Valor=%d,Cerrado=%d,Gas=%d,EnDeposito=%d,MaxMaletero=%d WHERE SQLID=%d",
		CocheInfo[idx][cID], //ID en SAMP
		CocheInfo[idx][cLlave], //Llave del vehículo
		CocheInfo[idx][cModelo], //Modelo del vehículo
		CocheInfo[idx][cPosX], //Posición X
		CocheInfo[idx][cPosY], //Posición Y
		CocheInfo[idx][cPosZ], //Posición Z
		CocheInfo[idx][cZAngle], //Ángulo
		CocheInfo[idx][cColor1], //Color 1
		CocheInfo[idx][cColor2], //Color 2
		CocheInfo[idx][cComprado], //Si tiene propietario
		CocheInfo[idx][cDueno], //Nombre del propietario
		CocheInfo[idx][cNombreModelo], //Nombre del modelo
		CocheInfo[idx][cValor], //Coste del vehículo
		CocheInfo[idx][cCerrado], //Si está cerrado
		CocheInfo[idx][cGas], //Combustible
		CocheInfo[idx][cEnDeposito], //Si está en el depósito
		CocheInfo[idx][cMaxMaletero], //Número de slots que el maletero podrá tener
		CocheInfo[idx][cSQLID]); //ID en DB
		mysql_query(1, sql);
		
		for(new x=0; x<CocheInfo[idx][cMaxMaletero]; x++)
		{
		    format(sql, 1024, "UPDATE vehiculos SET Maletero%d=%d,MaleteroCant%d=%d WHERE SQLID=%d",
		    x+1, CocheInfo[idx][cMaletero][x], x+1, CocheInfo[idx][cMaleteroCant][x],
			CocheInfo[idx][cSQLID]);
			mysql_query(1, sql);
		}
		
		for(new x=0; x<2; x++)
		{
		    format(sql, 1024, "UPDATE vehiculos SET Guantera%d=%d,GuanteraCant%d=%d WHERE SQLID=%d",
		    x, CocheInfo[idx][cGuantera][x], x, CocheInfo[idx][cGuanteraCant][x],
			CocheInfo[idx][cSQLID]);
			mysql_query(1, sql);
		}
		format(sql, 1024, "UPDATE vehiculos SET CapoFeo=%d,BaulFeo=%d WHERE SQLID=%d",
		CocheInfo[idx][cCapoRoto],
		CocheInfo[idx][cBaulRoto],
		CocheInfo[idx][cSQLID]);
		mysql_query(1, sql);
		
		format(sql, 1024, "UPDATE vehiculos SET Panels=%d,Doors=%d,Lights=%d,Tires=%d,Damage=%f,VirtualWorld=%d,Interior=%d WHERE SQLID=%d",
		CocheInfo[idx][cPanels], //Daño superficies
		CocheInfo[idx][cDoors], //Daño puertas
		CocheInfo[idx][cLights], //Daño luces
		CocheInfo[idx][cTires], //Ruedas pinchadas
		CocheInfo[idx][cDamage], //Daño del vehículo
		CocheInfo[idx][cVirtualWorld],
		CocheInfo[idx][cInterior],
		CocheInfo[idx][cSQLID]);
		mysql_query(1, sql);
	}
	return 1;
}

new LSPD[69], LSFD[21], LSN[3], AutoEscuela[3], PizzaMoto[3], Aviacion, Navegacion;

stock CocheLSPD(carid) //Comprueba si el coche pertenece a LSPD
{
    for(new v = 0; v < sizeof(LSPD); v++)
	{
	    if(carid == LSPD[v]) return 1;
	}
	return 0;
}

stock CocheLSFD(carid)
{
	for(new v = 0; v < sizeof(LSFD); v++)
	{
	    if(carid == LSFD[v]) return 1;
	}
	return 0;
}

stock CocheLSTV(carid) //Comprueba si el coche pertenece a LSN
{
	for(new v = 0; v < sizeof(LSN); v++)
	{
	    if(carid == LSN[v]) return 1;
	}
	return 0;
}

stock CocheAutoescuelaCond(carid) //Comprueba si el coche pertenece a la autoescuela de conducción
{
	for(new v = 0; v < sizeof(AutoEscuela); v++)
	{
	    if(carid == AutoEscuela[v]) return 1;
	}
	return 0;
}

stock CocheAutoescuelaAvion(carid) //Comprueba si el coche pertenece a la autoescuela de aviación
{
	if(carid == Aviacion) return 1;
	return 0;
}

stock CocheAutoescuelaBarco(carid) //Comprueba si el coche pertenece a la autoescuela de navegación
{
	if(carid == Navegacion) return 1;
	return 0;
}


stock SoloPizzas(carid) //Comprueba si es una moto de repartir pizza
{
	for(new v = 0; v < sizeof(PizzaMoto); v++)
	{
	    if(carid == PizzaMoto[v]) return 1;
	}
	return 0;
}


stock IsAPizzaBike(carid) //Comprueba si es una moto de repartir pizza
{
	new M;
	M = GetVehicleModel(carid);
	if(M == 448)
	    return 1;
	return 0;
}

stock IsASweeper(carid) //Comprueba si es un barrendero
{
	new M;
	M = GetVehicleModel(carid);
	if(M == 574)
	    return 1;
	return 0;
}

stock IsACombine(carid) //Comprueba si es una cosechadora
{
	new M;
	M = GetVehicleModel(carid);
	if(M == 532)
	    return 1;
	return 0;
}

stock IsACropduster(carid) //Comprueba si es avión fumigador
{
	new M;
	M = GetVehicleModel(carid);
	if(M == 512)
	    return 1;
	return 0;
}

stock IsATaxi(carid) //Comprueba si es un taxi
{
	new M;
	M = GetVehicleModel(carid);
	if(M == 420 || M == 438)
	    return 1;
	return 0;
}

stock IsABarcoPesca(carid) //Comprueba si es un barco de pesca
{
    new M;
	M = GetVehicleModel(carid);
	if(M == 453)
	    return 1;
	return 0;
}

stock IsABike(carid) //Comprueba si es una bici
{
	new M;
	M = GetVehicleModel(carid);
	if(M == 510 || M == 481 || M == 509)
	    return 1;
	return 0;
}

stock IsAMBike(carid) //Comprueba si es una moto
{
	new M;
	M = GetVehicleModel(carid);
	if(M == 462 || M == 581 || M == 522 || M == 461 || M == 521 || M == 523 || M == 463 || M == 586 || M == 468 || M == 471)
	    return 1;
	return 0;
}

stock IsABoat(carid) //Comprueba si es un barco
{
	new M = GetVehicleModel(carid);
	if(M == 472 || M == 473 || M == 493 || M == 595 || M == 484 || M == 430 || M == 453 || M == 452 || M == 446 || M == 454){return 1;}
	return 0;
}

stock IsAPlane(carid) //Comprueba si es un avión o helicóptero
{
	new M =GetVehicleModel(carid);
	if(M == 592 || M == 577 || M == 511 || M == 548 || M == 512 || M == 593 || M == 425 || M == 417 || M == 487 || M == 553){return 1;}
	if(M == 488 || M == 497 || M == 563 || M == 476 || M == 447 || M == 519 || M == 460 || M == 469 || M == 513 || M == 520){return 1;}
	return 0;
}

stock LimpiarChat(playerid, lines) //Limpiar Chat
{
	if(IsPlayerConnected(playerid))
	{
		for(new i=0; i<lines; i++)
		{
			SendClientMessage(playerid, Gris, " ");
		}
	}
	return 1;
}

stock IsFaccionPublica(playerid) //Comprueba si es un taxi
{
	new f;
	f = JugadorInfo[playerid][pFaccion];
	if(f == 1 || f == 2)
	    return 1;
	return 0;
}

stock BanL(playerid) //Timer ban
{
    JugadorInfo[playerid][pBloqueado] = 1; PlayerSave(playerid);
    SetTimerEx("BanI", 200, false, "i", playerid);
}

stock ExpulsarTodosR() //Timer kick
{
    for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
    	SetTimerEx("Kick2", 5000, false, "i", playerid);
	}
}

forward Kick2(playerid); //Kickea con timer
public Kick2(playerid)
{
    Kick(playerid);
    SetTimer("ResertServer", 1000, false);
}

forward ResertServer(playerid);
public ResertServer(playerid)
{
    SendRconCommand("gmx");
}

stock AvisarIlegal(playerid)
{
    SetTimerEx("AvisarPescaIlegal", 3000, false, "i", playerid);
}

forward AvisarPescaIlegal(playerid);
public AvisarPescaIlegal(playerid)
{
	SendRadioMessage(1, Naranja, "[AVISO]: Se ha reportado una pesca ilegal por las costas de East Beach.");
}

stock DarNoPD(playerid)
{
	SetTimerEx("DarNoPD2", 1500, false, "i", playerid);
}

forward DarNoPD2(playerid);
public DarNoPD2(playerid)
{
    SendClientMessage(playerid, COLOR_PIEL, "[Teléfono: 911] ¡Lo sentimos!, No hay unidades disponibles para tu llamado de emergencia.");
}

forward VolverReaparecer(playerid); public VolverReaparecer(playerid){
    for(new i = 0; zInfo:i < zInfo; i++) { HeridasInfo[playerid][zInfo:i] = 0; } // Reinicia todas las heridas a 0
	Delete3DTextLabel(Yo3DText[playerid]);
   	Delete3DTextLabel(Heridas[playerid]);
 	SetPlayerHealth(playerid, 50.0);
 	ClearAnimations(playerid);
    TogglePlayerControllable(playerid, 1);
    Muerte[playerid] = JugadorInfo[playerid][pMuerto];
	JugadorInfo[playerid][pMuerto] = 0;
	SetPlayerPos(playerid, 1128.9801,-1490.0947,22.7690);
	SetPlayerFacingAngle(playerid, 360);
	Muerte[playerid] = 0;
 	JailPlayerIC(playerid);
	if(JugadorInfo[playerid][pEncarcelado] == 0)
	{
	    SetPlayerVirtualWorld(playerid, 0);
	    SetPlayerInterior(playerid, 0);
	    GetPlayerLevel(playerid);
	    LimpiarChat(playerid, 20);
	    SendClientMessage(playerid, Naranja, "Has pasado el tiempo de espera. Tu personaje ha reaparecido.");
  		SendClientMessage(playerid, -1, " ");
  		PuedeMorir[playerid] = 0;
  		new descuento = random(100);
  		JugadorInfo[playerid][pDineroBanco] -= 200+descuento;
	}
	return 1;
}

stock Expulsar(playerid) //Timer kick
{
    SetTimerEx("KickI", 200, false, "i", playerid);
}

forward BanI(playerid); //Banea con timer
public BanI(playerid)
{
    Ban(playerid);
}

forward KickI(playerid); //Kickea con timer
public KickI(playerid)
{
    Kick(playerid);
}

stock ini_GetKey( line[] ) //Comprueba contraseña
{
	new keyRes[128];
	keyRes[0] = 0;
    if( strfind( line , "=" , true ) == -1 ) return keyRes;
    strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
    return keyRes;
}

stock ini_GetValue( line[] ) //Comprueba valores
{
	new valRes[128];
	valRes[0] = 0;
	if( strfind( line , "=" , true ) == -1 ) return valRes;
	strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
	return valRes;
}

stock splitex(const strsrc[], strdest[][], delimiter) //Ni puta idea
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}

strtok(const string[], &index) //Ni puta idea
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

forward RandomWeather();
public RandomWeather()
{
	new rand = random(sizeof(TiempoAleatorioID));
	SetWeather(TiempoAleatorioID[rand][TiempoID]);
	DefaultWeather = TiempoAleatorioID[rand][TiempoID];
}

forward OnPlayerLogin(playerid,password[]); //Loguear
public OnPlayerLogin(playerid,password[])
{
    new EscapedText[60], Query[180], NombreUsuario[MAX_PLAYER_NAME], string[128];
    GetPlayerName(playerid, NombreUsuario, sizeof(NombreUsuario));
    mysql_real_escape_string(password, EscapedText);
    format(Query,sizeof(Query),"SELECT * FROM usuarios WHERE Nombre = '%s' AND Contra = '%s'",NombreUsuario,EscapedText);
    mysql_query(1, Query);
    mysql_store_result();
    if(cache_get_row_count() == 0)
    {
        new loginstring[128];
        format(loginstring,sizeof(loginstring),"¡Contraseña incorrecta!\nPor favor, vuelve a introducirla, %s", NombreJugador(playerid));
        ShowPlayerDialog(playerid,0,DIALOG_STYLE_PASSWORD,"Inicio de sesión",loginstring,"Entrar","Salir");
        return 1;
    }
    mysql_free_result();
    
    PlayerLoad(playerid); //Carga variables
    
    if(JugadorInfo[playerid][pBloqueado] == 1)
	{
	    SendClientMessage(playerid, COLOR_ROJO, "Cuenta bloqueada permanentemente");
		SetTimerEx("KickI", 200, false, "i", playerid);
	}
	if(JugadorInfo[playerid][pBloqueado] == 2)
	{
	    SendClientMessage(playerid, COLOR_ROJO, "Tu personaje se encuentra muerto");
	    SetTimerEx("KickI", 200, false, "i", playerid);
	}

    printf("[ID: %d] %s ha ingresado al servidor.",playerid, NombreUsuario);

	if(JugadorInfo[playerid][pBloqueado] == 0)
	{
	    LimpiarChat(playerid, 50);
	    JugadorLogueado[playerid] = 1;
		new dinero = JugadorInfo[playerid][pDineroMano];
	    GivePlayerMoneyAC(playerid, dinero);
		SpawnPlayer(playerid); //OnPlayerSpawn

        SetPlayerInterior(playerid, JugadorInfo[playerid][pInterior]);
		SetPlayerVirtualWorld(playerid, JugadorInfo[playerid][pVirtualWorld]);
	        
		format(Query, sizeof(Query), "[Siglo-XXI] Bienvenido(a) de vuelta a Siglo XXI - RolePlay, %s.", NombreJugador(playerid));
		SendClientMessage(playerid, COLOR_PIEL, Query);
		SendClientMessage(playerid, COLOR_VERDE, "[Siglo-XXI] Recuerda que la versión actual del servidor es BETA, si tienes algún error de posición usa /autofix.");
		
		if(JugadorInfo[playerid][pFaccion] != 1){if(JugadorInfo[playerid][pServicioPD] > 0){JugadorInfo[playerid][pServicioPD] = 0;}}
		
		
		if(!JugadorInfo[playerid][pMascaraID]) {JugadorInfo[playerid][pMascaraID] = random(90000) + 10000;}

		if(JugadorInfo[playerid][pServicioPD] > 0)
		{
			if(JugadorInfo[playerid][pUniformePD] > 0)
			{
		    	SetPlayerSkin(playerid, JugadorInfo[playerid][pUniformePD]);
		    	SendClientMessage(playerid, COLOR_PIEL, "Antes de abandonar el juego estabas de servicio en tu trabajo, así que ahora vuelves a estarlo.");
		    }
		    else { SendClientMessage(playerid, COLOR_ROJO, "Estás de servicio en tu trabajo, pero no tienes un uniforme asignado. (/miuniforme)"); }
		}
		SendClientMessage(playerid, -1, " ");
		if(JugadorInfo[playerid][pNivel] == 1)
		{
			format(string, sizeof(string), "[Siglo-XXI]: %s es un jugador novato [ID: %d]", NombreJugador(playerid), playerid);
 			SendAdminMessage(Rojo, string);
		}
		if(JugadorInfo[playerid][pAdmin] == 5) { AdminOculto[playerid] = 1; } // Oculta a los rojos del /staff.
		
		CargarAnims(playerid);
		if(JugadorInfo[playerid][pMuerto] > 0)
		{
		    TogglePlayerControllable(playerid, 1);
		    Muerte[playerid] = JugadorInfo[playerid][pMuerto];
			JugadorInfo[playerid][pMuerto] = 0;
			SetPlayerPos(playerid, 1128.9801,-1490.0947,22.7690);
			SetPlayerFacingAngle(playerid, 360);
			Muerte[playerid] = 0;
		    JailPlayerIC(playerid);
			if(JugadorInfo[playerid][pEncarcelado] == 0)
			{
			    TogglePlayerControllable(playerid, 0);
		        SetPlayerPos(playerid, 1128.9801,-1490.0947,22.7690);
		        SetPlayerVirtualWorld(playerid, playerid+2);
		        SetPlayerCameraPos(playerid, 1060.6636, -3005.4705, 138.1333);
				SetPlayerCameraLookAt(playerid, 1060.6927, -3006.4761, 138.0934);
				SetTimerEx("VolverReaparecer", 180000, false, "i", playerid);
			}
		}
	}
	return 1;
}

forward PlayerLoad(playerid);
public PlayerLoad(playerid)
{
	new Query[180], NombreUsuario[MAX_PLAYER_NAME], content[60];
    GetPlayerName(playerid, NombreUsuario, sizeof(NombreUsuario));
	mysql_format(1, Query, sizeof(Query), "SELECT * FROM `usuarios` WHERE `Nombre` = '%s'", NombreUsuario);
	mysql_query(1, Query);
	mysql_store_result();

    cache_get_field_content(0, "Nombre", content);
    format(JugadorInfo[playerid][pNombre], sizeof(content), "%s", content);
    
	cache_get_field_content(0, "Contra", content);
	format(JugadorInfo[playerid][pContra], sizeof(content), "%s", content);
	
	JugadorInfo[playerid][pSQLID] = cache_get_field_content_int(0, "ID");
	
 	JugadorInfo[playerid][pAdmin] = cache_get_field_content_int(0, "Admin");
 	
 	cache_get_field_content(0, "AdminNombre", content);
 	format(JugadorInfo[playerid][pAdminNombre], sizeof(content), "%s", content);
 	
 	cache_get_field_content(0, "CuentaForo", content);
 	format(JugadorInfo[playerid][pCuentaForo], sizeof(content), "%s", content);
 	
 	JugadorInfo[playerid][pBloqueado] = cache_get_field_content_int(0, "Bloqueado");
 	JugadorInfo[playerid][pPrimerLogueo] = cache_get_field_content_int(0, "PrimerLogueo");
 	JugadorInfo[playerid][pPrimerLugarSpawn] = cache_get_field_content_int(0, "PrimerLugarSpawn");
 	JugadorInfo[playerid][pPrimeraMejora] = cache_get_field_content_int(0, "PrimeraMejora");
 	JugadorInfo[playerid][pEdad] = cache_get_field_content_int(0, "Edad");
 	JugadorInfo[playerid][pRaza] = cache_get_field_content_int(0, "Raza");
 	JugadorInfo[playerid][pSexo] = cache_get_field_content_int(0, "Sexo");
 	JugadorInfo[playerid][pNivel] = cache_get_field_content_int(0, "Nivel");
 	JugadorInfo[playerid][pExp] = cache_get_field_content_int(0, "Exp");
    JugadorInfo[playerid][pVida] = cache_get_field_content_float(0, "Vida");
 	JugadorInfo[playerid][pChaleco] = cache_get_field_content_float(0, "Chaleco");
 	JugadorInfo[playerid][pTelefono] = cache_get_field_content_int(0, "Telefono");
 	JugadorInfo[playerid][pTrabajo] = cache_get_field_content_int(0, "Trabajo");
 	JugadorInfo[playerid][pContrato] = cache_get_field_content_int(0, "Contrato");
 	JugadorInfo[playerid][pEsperaTrabajar] = cache_get_field_content_int(0, "EsperaTrabajar");
 	JugadorInfo[playerid][pPosX] = cache_get_field_content_float(0, "PosX");
 	JugadorInfo[playerid][pPosY] = cache_get_field_content_float(0, "PosY");
 	JugadorInfo[playerid][pPosZ] = cache_get_field_content_float(0, "PosZ");
 	JugadorInfo[playerid][pDineroBanco] = cache_get_field_content_int(0, "DineroBanco");
 	JugadorInfo[playerid][pDineroMano] = cache_get_field_content_int(0, "DineroMano");
 	JugadorInfo[playerid][pEncarcelado] = cache_get_field_content_int(0, "Encarcelado");
    JugadorInfo[playerid][pTiempoCarcel] = cache_get_field_content_int(0, "TiempoCarcel");
    JugadorInfo[playerid][pAdvertencias] = cache_get_field_content_int(0, "Advertencias");
    JugadorInfo[playerid][pSkin] = cache_get_field_content_int(0, "Skin");
    JugadorInfo[playerid][pUniformePD] = cache_get_field_content_int(0, "UniformePD");
    JugadorInfo[playerid][pMascaraID] = cache_get_field_content_int(0, "MascaraID");
    JugadorInfo[playerid][pFaccion] = cache_get_field_content_int(0, "Faccion");
    JugadorInfo[playerid][pRango] = cache_get_field_content_int(0, "Rango");
    JugadorInfo[playerid][pLider] = cache_get_field_content_int(0, "Lider");
    JugadorInfo[playerid][pPuntosRol] = cache_get_field_content_int(0, "PuntosRol");
    JugadorInfo[playerid][pPuntosRolNo] = cache_get_field_content_int(0, "PuntosRolNo");
    JugadorInfo[playerid][pInterior] = cache_get_field_content_int(0, "Interior");
    JugadorInfo[playerid][pVirtualWorld] = cache_get_field_content_int(0, "VirtualWorld");
    JugadorInfo[playerid][pHabPistola] = cache_get_field_content_int(0, "HabPistola");
    JugadorInfo[playerid][pHabSD] = cache_get_field_content_int(0, "HabSD");
    JugadorInfo[playerid][pHabDEagle] = cache_get_field_content_int(0, "HabDEagle");
    JugadorInfo[playerid][pHabEscopeta] = cache_get_field_content_int(0, "HabEscopeta");
    JugadorInfo[playerid][pHabSawnoff] = cache_get_field_content_int(0, "HabSawnoff");
    JugadorInfo[playerid][pHabEscopetaCom] = cache_get_field_content_int(0, "HabEscopetaCom");
    JugadorInfo[playerid][pHabUzi] = cache_get_field_content_int(0, "HabUzi");
    JugadorInfo[playerid][pHabMP5] = cache_get_field_content_int(0, "HabMP5");
    JugadorInfo[playerid][pHabAK47] = cache_get_field_content_int(0, "HabAK47");
    JugadorInfo[playerid][pHabM4] = cache_get_field_content_int(0, "HabM4");
    JugadorInfo[playerid][pHabFranco] = cache_get_field_content_int(0, "HabFranco");
    new stringdado[128];
    for(new x = 0; x<MAX_SLOTS_INV; x++)
	{
	    format(stringdado, 128, "Bol%d",x);
	    JugadorInfo[playerid][pBol][x] = cache_get_field_content_int(0, stringdado);
	}
    new stringdado2[128];
    for(new x = 0; x<MAX_SLOTS_INV; x++)
	{
	    format(stringdado2, 128, "BolCant%d",x);
	    JugadorInfo[playerid][pBolCant][x] = cache_get_field_content_int(0, stringdado2);
	}
    JugadorInfo[playerid][pManoIzq] = cache_get_field_content_int(0, "ManoIzq");
    JugadorInfo[playerid][pManoIzqCant] = cache_get_field_content_int(0, "ManoIzqCant");
    JugadorInfo[playerid][pManoDer] = cache_get_field_content_int(0, "ManoDer");
    JugadorInfo[playerid][pManoDerCant] = cache_get_field_content_int(0, "ManoDerCant");
    JugadorInfo[playerid][pMuerto] = cache_get_field_content_int(0, "Muerto");
    JugadorInfo[playerid][pEspalda] = cache_get_field_content_int(0, "Espalda");
    JugadorInfo[playerid][pEspaldaCant] = cache_get_field_content_int(0, "EspaldaCant");
    JugadorInfo[playerid][pCint][0] = cache_get_field_content_int(0, "Cint0");
    JugadorInfo[playerid][pCint][1] = cache_get_field_content_int(0, "Cint1");
    JugadorInfo[playerid][pCint][2] = cache_get_field_content_int(0, "Cint2");
    JugadorInfo[playerid][pCint][3] = cache_get_field_content_int(0, "Cint3");
    JugadorInfo[playerid][pCint][4] = cache_get_field_content_int(0, "Cint4");
    JugadorInfo[playerid][pCint][5] = cache_get_field_content_int(0, "Cint5");
    JugadorInfo[playerid][pCintCant][0] = cache_get_field_content_int(0, "CintCant0");
    JugadorInfo[playerid][pCintCant][1] = cache_get_field_content_int(0, "CintCant1");
    JugadorInfo[playerid][pCintCant][2] = cache_get_field_content_int(0, "CintCant2");
    JugadorInfo[playerid][pCintCant][3] = cache_get_field_content_int(0, "CintCant3");
    JugadorInfo[playerid][pCintCant][4] = cache_get_field_content_int(0, "CintCant4");
    JugadorInfo[playerid][pCintCant][5] = cache_get_field_content_int(0, "CintCant5");
    JugadorInfo[playerid][pServicioPD] = cache_get_field_content_int(0, "ServicioPD");
    JugadorInfo[playerid][pLlaveCoche][0] = cache_get_field_content_int(0, "LlaveCoche0");
    JugadorInfo[playerid][pLlaveCoche][1] = cache_get_field_content_int(0, "LlaveCoche1");
    JugadorInfo[playerid][pLlaveCoche][2] = cache_get_field_content_int(0, "LlaveCoche2");
    JugadorInfo[playerid][pLlaveCoche][3] = cache_get_field_content_int(0, "LlaveCoche3");
    JugadorInfo[playerid][pLlaveCoche][4] = cache_get_field_content_int(0, "LlaveCoche4");
    JugadorInfo[playerid][pLlaveCochePrestado][0] = cache_get_field_content_int(0, "LlaveCochePrestado0");
    JugadorInfo[playerid][pLlaveCochePrestado][1] = cache_get_field_content_int(0, "LlaveCochePrestado1");
    JugadorInfo[playerid][pLlaveCochePrestado][2] = cache_get_field_content_int(0, "LlaveCochePrestado2");
    JugadorInfo[playerid][pLlaveCochePrestado][3] = cache_get_field_content_int(0, "LlaveCochePrestado3");
    JugadorInfo[playerid][pLlaveCochePrestado][4] = cache_get_field_content_int(0, "LlaveCochePrestado4");
    JugadorInfo[playerid][pMinPayDay] = cache_get_field_content_int(0, "MinPayDay");
    JugadorInfo[playerid][pLicConduccion] = cache_get_field_content_int(0, "LicConduccion");
    JugadorInfo[playerid][pPuntosConduccion] = cache_get_field_content_int(0, "PuntosConduccion");
	JugadorInfo[playerid][pLicNavegacion] = cache_get_field_content_int(0, "LicNavegacion");
	JugadorInfo[playerid][pLicAviacion] = cache_get_field_content_int(0, "LicAviacion");
	JugadorInfo[playerid][pLicArmas] = cache_get_field_content_int(0, "LicArmas");
	JugadorInfo[playerid][pLicPesca] = cache_get_field_content_int(0, "LicPesca");
	JugadorInfo[playerid][pLicCaza] = cache_get_field_content_int(0, "LicCaza");
	JugadorInfo[playerid][pCasa] = cache_get_field_content_int(0, "Casa");
	JugadorInfo[playerid][pCasaAlq] = cache_get_field_content_int(0, "CasaAlq");
    JugadorInfo[playerid][pNegocio] = cache_get_field_content_int(0, "Negocio");
    JugadorInfo[playerid][pTaller] = cache_get_field_content_int(0, "Taller");
    JugadorInfo[playerid][pHabMec] = cache_get_field_content_int(0, "HabMec");
    JugadorInfo[playerid][pHabLad] = cache_get_field_content_int(0, "HabLad");
    JugadorInfo[playerid][pTiempoRobo] = cache_get_field_content_int(0, "TiempoRobo");
    JugadorInfo[playerid][pAdiccion][0] = cache_get_field_content_int(0, "Adiccion0");
    JugadorInfo[playerid][pAdiccion][1] = cache_get_field_content_int(0, "Adiccion1");
    JugadorInfo[playerid][pAdiccion][2] = cache_get_field_content_int(0, "Adiccion2");
    JugadorInfo[playerid][pAdiccion][3] = cache_get_field_content_int(0, "Adiccion3");
    JugadorInfo[playerid][pAdiccion][4] = cache_get_field_content_int(0, "Adiccion4");
    JugadorInfo[playerid][pDrConsumida][0] = cache_get_field_content_int(0, "DrConsumida0");
    JugadorInfo[playerid][pDrConsumida][1] = cache_get_field_content_int(0, "DrConsumida1");
    JugadorInfo[playerid][pDrConsumida][2] = cache_get_field_content_int(0, "DrConsumida2");
    JugadorInfo[playerid][pDrConsumida][3] = cache_get_field_content_int(0, "DrConsumida3");
    JugadorInfo[playerid][pDrConsumida][4] = cache_get_field_content_int(0, "DrConsumida4");
    JugadorInfo[playerid][pFuerza] = cache_get_field_content_int(0, "Fuerza");
    JugadorInfo[playerid][pCansancioEntrenar] = cache_get_field_content_int(0, "CansancioEntrenar");
    JugadorInfo[playerid][pProductos] = cache_get_field_content_int(0, "Productos");
	mysql_free_result();
    return 1;
}
/*-------------------------------------------------------------------------------------------------------------*/
GuardarCasa(idx)
{
    if(strlen(CasaInfo[idx][hBarrio]))
	{
        new File[256];
	    format(File, sizeof(File), "Casas/%d.ini", idx);
		if(dini_Exists(File)) { }
		else dini_Create(File);
		
	    dini_IntSet(File,"SQLID", CasaInfo[idx][hSQLID]);
	    dini_FloatSet(File,"EntradaX",CasaInfo[idx][hEntradaX]);
	    dini_FloatSet(File,"EntradaY",CasaInfo[idx][hEntradaY]);
	    dini_FloatSet(File,"EntradaZ",CasaInfo[idx][hEntradaZ]);
	    dini_FloatSet(File,"SalidaX",CasaInfo[idx][hSalidaX]);
	    dini_FloatSet(File,"SalidaY",CasaInfo[idx][hSalidaY]);
	    dini_FloatSet(File,"SalidaZ",CasaInfo[idx][hSalidaZ]);
	    dini_Set(File,"Barrio", CasaInfo[idx][hBarrio]);
	    dini_IntSet(File,"Interior", CasaInfo[idx][hInterior]);
	    dini_IntSet(File,"VirtualWorld", CasaInfo[idx][hVirtualWorld]);
	    dini_IntSet(File,"Interior2", CasaInfo[idx][hInterior2]);
	    dini_IntSet(File,"VirtualWorld2", CasaInfo[idx][hVirtualWorld2]);
	    dini_IntSet(File,"Valor", CasaInfo[idx][hValor]);
        dini_IntSet(File,"Comprada", CasaInfo[idx][hComprada]);
        dini_IntSet(File,"Cerrada", CasaInfo[idx][hCerrada]);
        dini_Set(File,"Dueno", CasaInfo[idx][hDueno]);
        dini_IntSet(File,"Alquilable", CasaInfo[idx][hAlquilable]);
        dini_IntSet(File,"PAlquiler", CasaInfo[idx][hPAlquiler]);
        dini_IntSet(File,"Inquilinos", CasaInfo[idx][hInquilinos]);
        dini_IntSet(File,"DineroGuardado", CasaInfo[idx][hDineroGuardado]);

		new string[128];
        for(new x=0; x<10; x++)
		{
			format(string, sizeof(string), "Armario%d",x+1);
			dini_IntSet(File, string, CasaInfo[idx][hArmario][x]);
			format(string, sizeof(string), "ArmarioCant%d",x+1);
			dini_IntSet(File, string, CasaInfo[idx][hArmarioCant][x]);
		}
 	}
	return 1;
}


CargarCasas() //Cargar casas
{
    new archivo[256];
    for(new x=1; x<=MAX_HOUSES; x++)
    {
  		format(archivo, sizeof(archivo), "Casas/%d.ini", x);
		if(dini_Exists(archivo))
		{
		    CasaInfo[x][hSQLID] = dini_Int(archivo, "SQLID");
		 	CasaInfo[x][hEntradaX] = dini_Float(archivo, "EntradaX");
		 	CasaInfo[x][hEntradaY] = dini_Float(archivo, "EntradaY");
		 	CasaInfo[x][hEntradaZ] = dini_Float(archivo, "EntradaZ");
		 	CasaInfo[x][hSalidaX] = dini_Float(archivo, "SalidaX");
		 	CasaInfo[x][hSalidaY] = dini_Float(archivo, "SalidaY");
		 	CasaInfo[x][hSalidaZ] = dini_Float(archivo, "SalidaZ");
            format(CasaInfo[x][hBarrio], 60, "%s", dini_Get(archivo, "Barrio"));
            format(CasaInfo[x][hDueno], 60, "%s", dini_Get(archivo, "Dueno"));
		    CasaInfo[x][hVirtualWorld] = dini_Int(archivo, "VirtualWorld");
		    CasaInfo[x][hInterior] = dini_Int(archivo, "Interior");
		    CasaInfo[x][hVirtualWorld2] = dini_Int(archivo, "VirtualWorld2");
		    CasaInfo[x][hInterior2] = dini_Int(archivo, "Interior2");
		    CasaInfo[x][hValor] = dini_Int(archivo, "Valor");
		    CasaInfo[x][hComprada] = dini_Int(archivo, "Comprada");
		    CasaInfo[x][hCerrada] = dini_Int(archivo, "Cerrada");
		    CasaInfo[x][hAlquilable] = dini_Int(archivo, "Alquilable");
		    CasaInfo[x][hPAlquiler] = dini_Int(archivo, "PAlquiler");
		    CasaInfo[x][hInquilinos] = dini_Int(archivo, "Inquilinos");
            CasaInfo[x][hDineroGuardado] = dini_Int(archivo, "DineroGuardado");
			new armario[32], armariocant[32];
			for(new a=0; a<10; a++)
		    {
		        format(armario, sizeof(armario), "Armario%d", a+1);
		        format(armariocant, sizeof(armariocant), "ArmarioCant%d", a+1);
		        
		        CasaInfo[x][hArmario][a] = dini_Int(archivo, armario);
		    	CasaInfo[x][hArmarioCant][a] = dini_Int(archivo, armariocant);
			}
		    if(TotalCasas < x) TotalCasas = x;
		}
	}
	printf("[CARGADO]: Se han cargado %d casas dinámicas.",TotalCasas);
    return 1;
}
// Negocios

CargarNegocios() //Cargar negocios
{
    new archivo[256];
    for(new x=1; x<=MAX_HOUSES; x++)
    {
  		format(archivo, sizeof(archivo), "Negocios/%d.ini", x);
		if(dini_Exists(archivo))
		{
		    NegocioInfo[x][nSQLID] = dini_Int(archivo, "ID");
		 	NegocioInfo[x][nEntradaX] = dini_Float(archivo, "EntradaX");
		 	NegocioInfo[x][nEntradaY] = dini_Float(archivo, "EntradaY");
		 	NegocioInfo[x][nEntradaZ] = dini_Float(archivo, "EntradaZ");
		 	NegocioInfo[x][nSalidaX] = dini_Float(archivo, "SalidaX");
		 	NegocioInfo[x][nSalidaY] = dini_Float(archivo, "SalidaY");
		 	NegocioInfo[x][nSalidaZ] = dini_Float(archivo, "SalidaZ");
            NegocioInfo[x][nTipo] = dini_Int(archivo, "Tipo");
		    NegocioInfo[x][nVirtualWorld] = dini_Int(archivo, "VirtualWorld");
		    NegocioInfo[x][nInterior] = dini_Int(archivo, "Interior");
		    NegocioInfo[x][nVirtualWorld2] = dini_Int(archivo, "VirtualWorld2");
		    NegocioInfo[x][nInterior2] = dini_Int(archivo, "Interior2");
		    NegocioInfo[x][nValor] = dini_Int(archivo, "Valor");
		    NegocioInfo[x][nComprado] = dini_Int(archivo, "Comprado");
		    NegocioInfo[x][nCerrado] = dini_Int(archivo, "Cerrado");
	   		NegocioInfo[x][nDineroGuardado] = dini_Int(archivo, "DineroGuardado");
		    NegocioInfo[x][nProd] = dini_Int(archivo, "Prod");
		    NegocioInfo[x][nMaxAlmacen] = dini_Int(archivo, "MaxAlmacen");
			NegocioInfo[x][nTallerEX] = dini_Float(archivo, "TallerEX");
			NegocioInfo[x][nTallerEY] = dini_Float(archivo, "TallerEY");
			NegocioInfo[x][nTallerEZ] = dini_Float(archivo, "TallerEZ");
			NegocioInfo[x][nTallerERotZ] = dini_Float(archivo, "TallerERotZ");
			NegocioInfo[x][nTallerSX] = dini_Float(archivo, "TallerSX");
			NegocioInfo[x][nTallerSY] = dini_Float(archivo, "TallerSY");
			NegocioInfo[x][nTallerSZ] = dini_Float(archivo, "TallerSZ");
			NegocioInfo[x][nTallerSRotZ] = dini_Float(archivo, "TallerSRotZ");
			format(NegocioInfo[x][nNombre], 120, "%s", dini_Get(archivo, "Nombre"));
            format(NegocioInfo[x][nDueno], 60, "%s", dini_Get(archivo, "Dueno"));
			
			new armario[32], armariocant[32];
			for(new a=0; a<10; a++)
		    {
		        format(armario, sizeof(armario), "Almacen%d", a+1);
		        format(armariocant, sizeof(armariocant), "AlmacenCant%d", a+1);

		        NegocioInfo[x][nAlmacen][a] = dini_Int(archivo, armario);
		    	NegocioInfo[x][nAlmacenCant][a] = dini_Int(archivo, armariocant);
			}
		    if(TotalNegs < x) TotalNegs = x;
		}
	}
	printf("[CARGADO]: Se han cargado %d negocios dinámicos.",TotalNegs);
    return 1;
}

GuardarNegocio(idx)
{
    if(strlen(NegocioInfo[idx][nNombre]))
	{
        new File[256];
	    format(File, sizeof(File), "Negocios/%d.ini", idx);
		if(dini_Exists(File)) { }
		else dini_Create(File);
	    dini_IntSet(File,"SQLID", NegocioInfo[idx][nSQLID]);
	    dini_FloatSet(File,"EntradaX",NegocioInfo[idx][nEntradaX]);
	    dini_FloatSet(File,"EntradaY",NegocioInfo[idx][nEntradaY]);
	    dini_FloatSet(File,"EntradaZ",NegocioInfo[idx][nEntradaZ]);
	    dini_FloatSet(File,"SalidaX",NegocioInfo[idx][nSalidaX]);
	    dini_FloatSet(File,"SalidaY",NegocioInfo[idx][nSalidaY]);
	    dini_FloatSet(File,"SalidaZ",NegocioInfo[idx][nSalidaZ]);
	    dini_Set(File,"Nombre", NegocioInfo[idx][nNombre]);
	    dini_IntSet(File,"Interior", NegocioInfo[idx][nInterior]);
	    dini_IntSet(File,"VirtualWorld", NegocioInfo[idx][nVirtualWorld]);
	    dini_IntSet(File,"Interior2", NegocioInfo[idx][nInterior2]);
	    dini_IntSet(File,"VirtualWorld2", NegocioInfo[idx][nVirtualWorld2]);
	    dini_IntSet(File,"Valor", NegocioInfo[idx][nValor]);
        dini_IntSet(File,"Comprado", NegocioInfo[idx][nComprado]);
        dini_IntSet(File,"Cerrado", NegocioInfo[idx][nCerrado]);
        dini_Set(File,"Dueno", NegocioInfo[idx][nDueno]);
        dini_IntSet(File,"DineroGuardado", NegocioInfo[idx][nDineroGuardado]);
        dini_IntSet(File,"Tipo", NegocioInfo[idx][nTipo]);
        dini_IntSet(File,"Prod", NegocioInfo[idx][nProd]);
        dini_IntSet(File,"MaxAlmacen", NegocioInfo[idx][nMaxAlmacen]);
		new string[128];
        for(new x=0; x<NegocioInfo[idx][nMaxAlmacen]; x++)
		{
			format(string, sizeof(string), "Almacen%d",x+1);
			dini_IntSet(File, string, NegocioInfo[idx][nAlmacen][x]);
			format(string, sizeof(string), "AlmacenCant%d",x+1);
			dini_IntSet(File, string, NegocioInfo[idx][nAlmacenCant][x]);
		}
		dini_FloatSet(File,"TallerEX",NegocioInfo[idx][nTallerEX]);
	    dini_FloatSet(File,"TallerEY",NegocioInfo[idx][nTallerEY]);
	    dini_FloatSet(File,"TallerEZ",NegocioInfo[idx][nTallerEZ]);
	    dini_FloatSet(File,"TallerERotZ",NegocioInfo[idx][nTallerERotZ]);
	    dini_FloatSet(File,"TallerSX",NegocioInfo[idx][nTallerSX]);
	    dini_FloatSet(File,"TallerSY",NegocioInfo[idx][nTallerSY]);
	    dini_FloatSet(File,"TallerSZ",NegocioInfo[idx][nTallerSZ]);
	    dini_FloatSet(File,"TallerSRotZ",NegocioInfo[idx][nTallerSRotZ]);
 	}
	return 1;
}
//-----------------------------------------------------------------------------------------------------
forward SaveToys(playerid);
public SaveToys(playerid)
{
	new archivo[256];
    format(archivo, sizeof(archivo), "Accesorios/%d.ini", JugadorInfo[playerid][pSQLID]);
	if(dini_Exists(archivo)) { }
	else dini_Create(archivo);
	
	dini_IntSet(archivo, "Gorro", JugadorInfo[playerid][pToy][0]);
	dini_IntSet(archivo, "Gafas", JugadorInfo[playerid][pToy][1]);
	dini_IntSet(archivo, "Personalizado", JugadorInfo[playerid][pToy][4]);
    dini_IntSet(archivo, "Chaleco", JugadorInfo[playerid][pToy][3]);
	dini_IntSet(archivo, "Mandibula", JugadorInfo[playerid][pToy][2]);
	
	if(JugadorInfo[playerid][pToy][0] > 0)
	{
	    dini_FloatSet(archivo, "GorroX", JugadorInfo[playerid][pToyX][0]);
	    dini_FloatSet(archivo, "GorroY", JugadorInfo[playerid][pToyY][0]);
	    dini_FloatSet(archivo, "GorroZ", JugadorInfo[playerid][pToyZ][0]);
	    dini_FloatSet(archivo, "GorrorX", JugadorInfo[playerid][pToyrX][0]);
	    dini_FloatSet(archivo, "GorrorY", JugadorInfo[playerid][pToyrY][0]);
	    dini_FloatSet(archivo, "GorrorZ", JugadorInfo[playerid][pToyrZ][0]);
	    dini_FloatSet(archivo, "GorrotX", JugadorInfo[playerid][pToytX][0]);
	    dini_FloatSet(archivo, "GorrotY", JugadorInfo[playerid][pToytY][0]);
	    dini_FloatSet(archivo, "GorrotZ", JugadorInfo[playerid][pToytZ][0]);
	}
	if(JugadorInfo[playerid][pToy][1] > 0)
	{
	    dini_FloatSet(archivo, "GafasX", JugadorInfo[playerid][pToyX][1]);
	    dini_FloatSet(archivo, "GafasY", JugadorInfo[playerid][pToyY][1]);
	    dini_FloatSet(archivo, "GafasZ", JugadorInfo[playerid][pToyZ][1]);
	    dini_FloatSet(archivo, "GafasrX", JugadorInfo[playerid][pToyrX][1]);
	    dini_FloatSet(archivo, "GafasrY", JugadorInfo[playerid][pToyrY][1]);
	    dini_FloatSet(archivo, "GafasrZ", JugadorInfo[playerid][pToyrZ][1]);
	    dini_FloatSet(archivo, "GafastX", JugadorInfo[playerid][pToytX][1]);
	    dini_FloatSet(archivo, "GafastY", JugadorInfo[playerid][pToytY][1]);
	    dini_FloatSet(archivo, "GafastZ", JugadorInfo[playerid][pToytZ][1]);
	}
	if(JugadorInfo[playerid][pToy][2] > 0)
	{
	    dini_FloatSet(archivo, "MandibulaX", JugadorInfo[playerid][pToyX][2]);
	    dini_FloatSet(archivo, "MandibulaY", JugadorInfo[playerid][pToyY][2]);
	    dini_FloatSet(archivo, "MandibulaZ", JugadorInfo[playerid][pToyZ][2]);
	    dini_FloatSet(archivo, "MandibularX", JugadorInfo[playerid][pToyrX][2]);
	    dini_FloatSet(archivo, "MandibularY", JugadorInfo[playerid][pToyrY][2]);
	    dini_FloatSet(archivo, "MandibularZ", JugadorInfo[playerid][pToyrZ][2]);
	    dini_FloatSet(archivo, "MandibulatX", JugadorInfo[playerid][pToytX][2]);
	    dini_FloatSet(archivo, "MandibulatY", JugadorInfo[playerid][pToytY][2]);
	    dini_FloatSet(archivo, "MandibulatZ", JugadorInfo[playerid][pToytZ][2]);
	}
	if(JugadorInfo[playerid][pToy][3] > 0)
	{
	    dini_FloatSet(archivo, "ChalecoX", JugadorInfo[playerid][pToyX][3]);
	    dini_FloatSet(archivo, "ChalecoY", JugadorInfo[playerid][pToyY][3]);
	    dini_FloatSet(archivo, "ChalecoZ", JugadorInfo[playerid][pToyZ][3]);
	    dini_FloatSet(archivo, "ChalecorX", JugadorInfo[playerid][pToyrX][3]);
	    dini_FloatSet(archivo, "ChalecorY", JugadorInfo[playerid][pToyrY][3]);
	    dini_FloatSet(archivo, "ChalecorZ", JugadorInfo[playerid][pToyrZ][3]);
	    dini_FloatSet(archivo, "ChalecotX", JugadorInfo[playerid][pToytX][3]);
	    dini_FloatSet(archivo, "ChalecotY", JugadorInfo[playerid][pToytY][3]);
	    dini_FloatSet(archivo, "ChalecotZ", JugadorInfo[playerid][pToytZ][3]);
    }
	if(JugadorInfo[playerid][pToy][4] > 0)
	{
	    dini_FloatSet(archivo, "PersonalizadoX", JugadorInfo[playerid][pToyX][4]);
	    dini_FloatSet(archivo, "PersonalizadoY", JugadorInfo[playerid][pToyY][4]);
	    dini_FloatSet(archivo, "PersonalizadoZ", JugadorInfo[playerid][pToyZ][4]);
	    dini_FloatSet(archivo, "PersonalizadorX", JugadorInfo[playerid][pToyrX][4]);
	    dini_FloatSet(archivo, "PersonalizadorY", JugadorInfo[playerid][pToyrY][4]);
	    dini_FloatSet(archivo, "PersonalizadorZ", JugadorInfo[playerid][pToyrZ][4]);
	    dini_FloatSet(archivo, "PersonalizadotX", JugadorInfo[playerid][pToytX][4]);
	    dini_FloatSet(archivo, "PersonalizadotY", JugadorInfo[playerid][pToytY][4]);
	    dini_FloatSet(archivo, "PersonalizadotZ", JugadorInfo[playerid][pToytZ][4]);
	    dini_IntSet(archivo, "PersonalizadoBone", JugadorInfo[playerid][pEspecialBone]);
	}
    return 1;
}

forward LoadToys(playerid);
public LoadToys(playerid)
{
    new archivo[256];
    format(archivo, sizeof(archivo), "Accesorios/%d.ini", JugadorInfo[playerid][pSQLID]);
	if(dini_Exists(archivo)) // Detecta si tiene accesorios guardados.
	{
    	JugadorInfo[playerid][pToy][0] = dini_Int(archivo, "Gorro");
    	JugadorInfo[playerid][pToyX][0] = dini_Float(archivo, "GorroX");
    	JugadorInfo[playerid][pToyY][0] = dini_Float(archivo, "GorroY");
    	JugadorInfo[playerid][pToyZ][0] = dini_Float(archivo, "GorroZ");
    	JugadorInfo[playerid][pToyrX][0] = dini_Float(archivo, "GorrorX");
    	JugadorInfo[playerid][pToyrY][0] = dini_Float(archivo, "GorrorY");
    	JugadorInfo[playerid][pToyrZ][0] = dini_Float(archivo, "GorrorZ");
    	JugadorInfo[playerid][pToytX][0] = dini_Float(archivo, "GorrotX");
    	JugadorInfo[playerid][pToytY][0] = dini_Float(archivo, "GorrotY");
    	JugadorInfo[playerid][pToytZ][0] = dini_Float(archivo, "GorrotZ");
    	
    	if(JugadorInfo[playerid][pToy][0] > 0)
    	{
	    	for(new toy; toy < sizeof(ToyInfo); toy++)
		    {
		        if(JugadorInfo[playerid][pToy][0] == ToyInfo[toy][tObjetoID]) // Es un objeto válido para los accesorios
		        {
	    			SetPlayerAttachedObject(playerid, ToyInfo[toy][tIndex], ToyInfo[toy][tModeloID], ToyInfo[toy][tBone],
					JugadorInfo[playerid][pToyX][0], JugadorInfo[playerid][pToyY][0], JugadorInfo[playerid][pToyZ][0],
					JugadorInfo[playerid][pToyrX][0], JugadorInfo[playerid][pToyrY][0], JugadorInfo[playerid][pToyrZ][0],
					JugadorInfo[playerid][pToytX][0], JugadorInfo[playerid][pToytY][0], JugadorInfo[playerid][pToytZ][0]);
	    		}
	    	}
		}
    	JugadorInfo[playerid][pToy][1] = dini_Int(archivo, "Gafas");
    	JugadorInfo[playerid][pToyX][1] = dini_Float(archivo, "GafasX");
    	JugadorInfo[playerid][pToyY][1] = dini_Float(archivo, "GafasY");
    	JugadorInfo[playerid][pToyZ][1] = dini_Float(archivo, "GafasZ");
    	JugadorInfo[playerid][pToyrX][1] = dini_Float(archivo, "GafasrX");
    	JugadorInfo[playerid][pToyrY][1] = dini_Float(archivo, "GafasrY");
    	JugadorInfo[playerid][pToyrZ][1] = dini_Float(archivo, "GafasrZ");
    	JugadorInfo[playerid][pToytX][1] = dini_Float(archivo, "GafastX");
    	JugadorInfo[playerid][pToytY][1] = dini_Float(archivo, "GafastY");
    	JugadorInfo[playerid][pToytZ][1] = dini_Float(archivo, "GafastZ");
    	
    	if(JugadorInfo[playerid][pToy][1] > 0)
    	{
	    	for(new toy; toy < sizeof(ToyInfo); toy++)
		    {
		        if(JugadorInfo[playerid][pToy][1] == ToyInfo[toy][tObjetoID]) // Es un objeto válido para los accesorios
		        {
	    			SetPlayerAttachedObject(playerid, ToyInfo[toy][tIndex], ToyInfo[toy][tModeloID], ToyInfo[toy][tBone],
					JugadorInfo[playerid][pToyX][1], JugadorInfo[playerid][pToyY][1], JugadorInfo[playerid][pToyZ][1],
					JugadorInfo[playerid][pToyrX][1], JugadorInfo[playerid][pToyrY][1], JugadorInfo[playerid][pToyrZ][1],
					JugadorInfo[playerid][pToytX][1], JugadorInfo[playerid][pToytY][1], JugadorInfo[playerid][pToytZ][1]);
	    		}
	    	}
    	}
    	JugadorInfo[playerid][pToy][2] = dini_Int(archivo, "Mandibula");
    	JugadorInfo[playerid][pToyX][2] = dini_Float(archivo, "MandibulaX");
    	JugadorInfo[playerid][pToyY][2] = dini_Float(archivo, "MandibulaY");
    	JugadorInfo[playerid][pToyZ][2] = dini_Float(archivo, "MandibulaZ");
    	JugadorInfo[playerid][pToyrX][2] = dini_Float(archivo, "MandibularX");
    	JugadorInfo[playerid][pToyrY][2] = dini_Float(archivo, "MandibularY");
    	JugadorInfo[playerid][pToyrZ][2] = dini_Float(archivo, "MandibularZ");
    	JugadorInfo[playerid][pToytX][2] = dini_Float(archivo, "MandibulatX");
    	JugadorInfo[playerid][pToytY][2] = dini_Float(archivo, "MandibulatY");
    	JugadorInfo[playerid][pToytZ][2] = dini_Float(archivo, "MandibulatZ");
    	if(JugadorInfo[playerid][pToy][2] > 0)
    	{
	    	for(new toy; toy < sizeof(ToyInfo); toy++)
		    {
		        if(JugadorInfo[playerid][pToy][2] == ToyInfo[toy][tObjetoID]) // Es un objeto válido para los accesorios
		        {
	    			SetPlayerAttachedObject(playerid, ToyInfo[toy][tIndex], ToyInfo[toy][tModeloID], ToyInfo[toy][tBone],
					JugadorInfo[playerid][pToyX][2], JugadorInfo[playerid][pToyY][2], JugadorInfo[playerid][pToyZ][2],
					JugadorInfo[playerid][pToyrX][2], JugadorInfo[playerid][pToyrY][2], JugadorInfo[playerid][pToyrZ][2],
					JugadorInfo[playerid][pToytX][2], JugadorInfo[playerid][pToytY][2], JugadorInfo[playerid][pToytZ][2]);
					MascaraGas[playerid] = 1;
            		Mascara[playerid] = 1;
            		for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
			                ShowPlayerNameTagForPlayer(i, playerid, 0);
						}
					}
	    		}
			}
		}
    	JugadorInfo[playerid][pToy][3] = dini_Int(archivo, "Chaleco");
    	JugadorInfo[playerid][pToyX][3] = dini_Float(archivo, "ChalecoX");
    	JugadorInfo[playerid][pToyY][3] = dini_Float(archivo, "ChalecoY");
    	JugadorInfo[playerid][pToyZ][3] = dini_Float(archivo, "ChalecoZ");
    	JugadorInfo[playerid][pToyrX][3] = dini_Float(archivo, "ChalecorX");
    	JugadorInfo[playerid][pToyrY][3] = dini_Float(archivo, "ChalecorY");
    	JugadorInfo[playerid][pToyrZ][3] = dini_Float(archivo, "ChalecorZ");
    	JugadorInfo[playerid][pToytX][3] = dini_Float(archivo, "ChalecotX");
    	JugadorInfo[playerid][pToytY][3] = dini_Float(archivo, "ChalecotY");
    	JugadorInfo[playerid][pToytZ][3] = dini_Float(archivo, "ChalecotZ");
    	if(JugadorInfo[playerid][pToy][3] > 0)
    	{
	    	for(new toy; toy < sizeof(ToyInfo); toy++)
		    {
		        if(JugadorInfo[playerid][pToy][3] == ToyInfo[toy][tObjetoID]) // Es un objeto válido para los accesorios
		        {
	    			SetPlayerAttachedObject(playerid, ToyInfo[toy][tIndex], ToyInfo[toy][tModeloID], ToyInfo[toy][tBone],
					JugadorInfo[playerid][pToyX][3], JugadorInfo[playerid][pToyY][3], JugadorInfo[playerid][pToyZ][3],
					JugadorInfo[playerid][pToyrX][3], JugadorInfo[playerid][pToyrY][3], JugadorInfo[playerid][pToyrZ][3],
					JugadorInfo[playerid][pToytX][3], JugadorInfo[playerid][pToytY][3], JugadorInfo[playerid][pToytZ][3]);
	    		}
	    	}
	    }
	}
	return 1;
}
/*-------------------------------------------------------------------------------------------------------------*/
forward PlayerSave(playerid);
public PlayerSave(playerid)
{
    if(JugadorLogueado[playerid])
    {
    	ActualizarManos(playerid);
    	
        if(AdminDuty[playerid] == 0)
    	{
        	GetPlayerHealth(playerid,JugadorInfo[playerid][pVida]);
        	GetPlayerArmour(playerid,JugadorInfo[playerid][pChaleco]);
    	}

        new string[1200];
        format(string, sizeof(string), "UPDATE usuarios SET Contra = '%s', Admin = %d, AdminNombre = '%s', PrimerLogueo = %d, Edad = %d, Sexo = %d, Nivel = %d, Raza = %d, Exp = %d, Vida = %f, Chaleco = %f, Telefono = %d WHERE Nombre = '%s'",
    	JugadorInfo[playerid][pContra], JugadorInfo[playerid][pAdmin], JugadorInfo[playerid][pAdminNombre], JugadorInfo[playerid][pPrimerLogueo],
    	JugadorInfo[playerid][pEdad], JugadorInfo[playerid][pSexo], JugadorInfo[playerid][pNivel], JugadorInfo[playerid][pRaza],
        JugadorInfo[playerid][pExp], JugadorInfo[playerid][pVida], JugadorInfo[playerid][pChaleco], JugadorInfo[playerid][pTelefono], JugadorInfo[playerid][pNombre]);
    	mysql_query(1, string);

        if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
        {
            GetPlayerPos(playerid,JugadorInfo[playerid][pPosX],JugadorInfo[playerid][pPosY],JugadorInfo[playerid][pPosZ]);
        }

        JugadorInfo[playerid][pDineroMano] = GetPlayerMoney(playerid);

        format(string, sizeof(string), "UPDATE usuarios SET Trabajo = %d, Contrato = %d, EsperaTrabajar = %d, PosX = %f, PosY = %f, PosZ = %f, DineroBanco = %d, DineroMano = %d, Encarcelado = %d, TiempoCarcel = %d, Advertencias = %d, Skin = %d, UniformePD = %d, MascaraID = %d WHERE Nombre = '%s'",
    	JugadorInfo[playerid][pTrabajo], JugadorInfo[playerid][pContrato], JugadorInfo[playerid][pEsperaTrabajar], JugadorInfo[playerid][pPosX], JugadorInfo[playerid][pPosY], JugadorInfo[playerid][pPosZ],
    	JugadorInfo[playerid][pDineroBanco], JugadorInfo[playerid][pDineroMano], JugadorInfo[playerid][pEncarcelado],
    	JugadorInfo[playerid][pTiempoCarcel], JugadorInfo[playerid][pAdvertencias], JugadorInfo[playerid][pSkin], JugadorInfo[playerid][pUniformePD], JugadorInfo[playerid][pMascaraID], JugadorInfo[playerid][pNombre]);
    	mysql_query(1, string);

    	if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
        {
            JugadorInfo[playerid][pInterior] = GetPlayerInterior(playerid);
        	JugadorInfo[playerid][pVirtualWorld] = GetPlayerVirtualWorld(playerid);
        }

        format(string, sizeof(string), "UPDATE usuarios SET Faccion = %d, Rango = %d, Lider = %d, PuntosRol = %d, PuntosRolNo = %d, Interior = %d, VirtualWorld = %d, HabPistola = %d, HabSD = %d, HabDEagle = %d, HabEscopeta = %d WHERE Nombre = '%s'",
    	JugadorInfo[playerid][pFaccion], JugadorInfo[playerid][pRango], JugadorInfo[playerid][pLider], JugadorInfo[playerid][pPuntosRol], JugadorInfo[playerid][pPuntosRolNo],
    	JugadorInfo[playerid][pInterior], JugadorInfo[playerid][pVirtualWorld], JugadorInfo[playerid][pHabPistola],
    	JugadorInfo[playerid][pHabSD], JugadorInfo[playerid][pHabDEagle], JugadorInfo[playerid][pHabEscopeta], JugadorInfo[playerid][pNombre]);
    	mysql_query(1, string);

        format(string, sizeof(string), "UPDATE usuarios SET HabSawnoff = %d, HabEscopetaCom = %d, HabUzi = %d, HabMP5 = %d, HabAK47 = %d, HabM4 = %d, HabFranco = %d WHERE Nombre = '%s'",
    	JugadorInfo[playerid][pHabSawnoff], JugadorInfo[playerid][pHabEscopetaCom], JugadorInfo[playerid][pHabUzi], JugadorInfo[playerid][pHabMP5],
    	JugadorInfo[playerid][pHabAK47], JugadorInfo[playerid][pHabM4], JugadorInfo[playerid][pHabFranco], JugadorInfo[playerid][pNombre]);
    	mysql_query(1, string);

    	for(new x = 0; x<MAX_SLOTS_INV; x++)
		{
		    format(string, sizeof(string), "UPDATE usuarios SET Bol%d=%d, BolCant%d=%d WHERE Nombre = '%s'",
		    x, JugadorInfo[playerid][pBol][x], x, JugadorInfo[playerid][pBolCant][x],
			JugadorInfo[playerid][pNombre]);
			mysql_query(1, string);
		}
		
		for(new x = 0; x<MAX_SLOTS_CT; x++)
		{
		    format(string, sizeof(string), "UPDATE usuarios SET Cint%d=%d, CintCant%d=%d WHERE Nombre = '%s'",
		    x, JugadorInfo[playerid][pCint][x], x, JugadorInfo[playerid][pCintCant][x],
			JugadorInfo[playerid][pNombre]);
			mysql_query(1, string);
		}

    	format(string, sizeof(string), "UPDATE usuarios SET ManoIzq = %d, ManoIzqCant = %d, ManoDer = %d, ManoDerCant = %d, Muerto = %d, Espalda = %d, EspaldaCant = %d WHERE Nombre = '%s'",
    	JugadorInfo[playerid][pManoIzq], JugadorInfo[playerid][pManoIzqCant], JugadorInfo[playerid][pManoDer], JugadorInfo[playerid][pManoDerCant], JugadorInfo[playerid][pMuerto],
		JugadorInfo[playerid][pEspalda], JugadorInfo[playerid][pEspaldaCant], JugadorInfo[playerid][pNombre]);
    	mysql_query(1, string);
    	
    	format(string, sizeof(string), "UPDATE usuarios SET ServicioPD = %d, LlaveCoche0 = %d, LlaveCoche1 = %d, LlaveCoche2 = %d, LlaveCoche3 = %d, LlaveCoche4 = %d, MinPayDay = %d WHERE Nombre = '%s'",
    	JugadorInfo[playerid][pServicioPD], JugadorInfo[playerid][pLlaveCoche][0], JugadorInfo[playerid][pLlaveCoche][1], JugadorInfo[playerid][pLlaveCoche][2], JugadorInfo[playerid][pLlaveCoche][3], JugadorInfo[playerid][pLlaveCoche][4],
		JugadorInfo[playerid][pMinPayDay], JugadorInfo[playerid][pNombre]);
    	mysql_query(1, string);
    	
    	format(string, sizeof(string), "UPDATE usuarios SET LlaveCochePrestado0 = %d, LlaveCochePrestado1 = %d, LlaveCochePrestado2 = %d, LlaveCochePrestado3 = %d, LlaveCochePrestado4 = %d WHERE Nombre = '%s'",
    	JugadorInfo[playerid][pLlaveCochePrestado][0], JugadorInfo[playerid][pLlaveCochePrestado][1], JugadorInfo[playerid][pLlaveCochePrestado][2], JugadorInfo[playerid][pLlaveCochePrestado][3], JugadorInfo[playerid][pLlaveCochePrestado][4],
		JugadorInfo[playerid][pNombre]);
    	mysql_query(1, string);
    	
    	format(string, sizeof(string), "UPDATE usuarios SET LicConduccion = %d, LicNavegacion = %d, LicAviacion = %d, LicArmas = %d, LicPesca = %d, LicCaza = %d, Casa = %d, CasaAlq = %d, Negocio = %d WHERE Nombre = '%s'",
    	JugadorInfo[playerid][pLicConduccion], JugadorInfo[playerid][pLicNavegacion], JugadorInfo[playerid][pLicAviacion], JugadorInfo[playerid][pLicArmas], JugadorInfo[playerid][pLicPesca], JugadorInfo[playerid][pLicCaza],
		JugadorInfo[playerid][pCasa], JugadorInfo[playerid][pCasaAlq], JugadorInfo[playerid][pNegocio], JugadorInfo[playerid][pNombre]);
    	mysql_query(1, string);
    	
    	format(string, sizeof(string), "UPDATE usuarios SET Taller = %d, HabMec = %d, HabLad = %d, TiempoRobo = %d, PuntosConduccion = %d WHERE Nombre = '%s'",
    	JugadorInfo[playerid][pTaller], JugadorInfo[playerid][pHabMec], JugadorInfo[playerid][pHabLad], JugadorInfo[playerid][pTiempoRobo], JugadorInfo[playerid][pPuntosConduccion], JugadorInfo[playerid][pProductos], JugadorInfo[playerid][pNombre]);
    	mysql_query(1, string);
    	
    	format(string, sizeof(string), "UPDATE usuarios SET Productos = %d WHERE Nombre = '%s'",
    	JugadorInfo[playerid][pProductos], JugadorInfo[playerid][pNombre]);
    	mysql_query(1, string);
    	
    	for(new x=0; x<5; x++)
		{
		    format(string, sizeof(string), "UPDATE usuarios SET Adiccion%d=%d WHERE Nombre = '%s'",
		    x, JugadorInfo[playerid][pAdiccion][x],
			JugadorInfo[playerid][pNombre]);
			mysql_query(1, string);
		}
		
		for(new x=0; x<5; x++)
		{
		    format(string, sizeof(string), "UPDATE usuarios SET DrConsumida%d=%d WHERE Nombre = '%s'",
		    x, JugadorInfo[playerid][pDrConsumida][x],
			JugadorInfo[playerid][pNombre]);
			mysql_query(1, string);
		}
    }
    return 1;
}

forward SendFaccionMessage(faccion, color, string[]); //Mensajes OOC a miembros de facción pública
public SendFaccionMessage(faccion, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
        {
		    if(JugadorInfo[i][pFaccion] == faccion)
		    {
				if(ActivoFamilia[i] == 0)
				{
			    	SendClientMessage(i, color, string);
				}
			}
		}
	}
}

forward SendRadioMessage(faccion, color, string[]); //Mensajes IC a miembros de facción pública
public SendRadioMessage(faccion, color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
        {
		    if(JugadorInfo[i][pFaccion] == faccion)
		    {
		        if(JugadorInfo[i][pServicioPD] == 1 || JugadorInfo[i][pServicioFD] == 1)
		        {
					SendClientMessage(i, color, string);
				}
			}
		}
	}
}

forward SendPublicMessage(color, string[]); //Mensajes IC a facciones gubernamentales
public SendPublicMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
        {
		    if(JugadorInfo[i][pFaccion] == 1 || JugadorInfo[i][pFaccion] == 2 || JugadorInfo[i][pFaccion] == 4)
		    {
			    SendClientMessage(i, color, string);
			}
		}
	}
}

forward SendTesterMessage(color, mensaje[]); //Mensajes a admines
public SendTesterMessage(color, mensaje[])
{
	new string[256];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(JugadorInfo[i][pAdmin] >= 1)
		    {
		        if(ActivoAdmin[i] == 0)
		        {
          			if(strlen(mensaje) > 120)
				    {
				        new text1[256],text2[256];
				        strmid(text2, mensaje, 120, 256);
				        strmid(text1, mensaje, 0, 120);
				        format(string, 256, "%s...", text1);
				        SendClientMessage(i, color, string);
				        format(string, 256, "%s", text2);
				        SendClientMessage(i, color, string);
				    }
				    else
					{
					 	SendClientMessage(i, color, mensaje);
					}
				}
			}
		}
	}
}

forward SendAdminMessage(color, mensaje[]); //Mensajes a admines
public SendAdminMessage(color, mensaje[])
{
	new string[256];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(JugadorInfo[i][pAdmin] >= 3)
		    {
		        if(ActivoAdmin[i] == 0)
		        {
          			if(strlen(mensaje) > 120)
				    {
				        new text1[256],text2[256];
				        strmid(text2, mensaje, 120, 256);
				        strmid(text1, mensaje, 0, 120);
				        format(string, 256, "%s...", text1);
				        SendClientMessage(i, color, string);
				        format(string, 256, "%s", text2);
				        SendClientMessage(i, color, string);
				    }
				    else
					{
					 	SendClientMessage(i, color, mensaje);
					}
				}
			}
		}
	}
}

forward SendDuenoMessage(color, string[]); //Mensajes a dueños
public SendDuenoMessage(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(JugadorInfo[i][pAdmin] >= 5)
		    {
				SendClientMessage(i, color, string);
			}
		}
	}
}

forward SendAnuncio(color, string[]); //Anuncios
public SendAnuncio(color, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && JugadorLogueado[i])
		{
			SendClientMessage(i, color, string);
		}
	}
}

AntiDeAMX() //Encriptador
{
    new a[][] =
    {
        "Unarmed (Fist)",
        "Brass K"
    };
    #pragma unused a
}

forward GetPlayersProx(Float:radi, playerid, targetid); //Cercanía de jugadores
public GetPlayersProx(Float:radi, playerid, targetid)
{
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	GetPlayerPos(targetid, posx, posy, posz);
	tempposx = (oldposx -posx);
	tempposy = (oldposy -posy);
	tempposz = (oldposz -posz);
	if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
	    return 1;
	}
	return 0;
}

forward ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5); //Mensajes limitados por distancia
public ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	//radi = 2.0; //Trigger Radius
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && (GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i)))
		{
			GetPlayerPos(i, posx, posy, posz);
			tempposx = (oldposx -posx);
			tempposy = (oldposy -posy);
			tempposz = (oldposz -posz);
			//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
			if(((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
			{
				SendClientMessage(i, col1, string);
			}
			else if(((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
			{
				SendClientMessage(i, col2, string);
			}
			else if(((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
			{
				SendClientMessage(i, col3, string);
			}
			else if(((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
			{
				SendClientMessage(i, col4, string);
			}
			else if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
			{
				SendClientMessage(i, col5, string);
			}
		}
	}
	return 1;
}

stock NombreJugadorProxy(playerid)
{
	new Nombre[100];
    if(IsPlayerConnected(playerid))
    {
        if(!JugadorInfo[playerid][pMascaraID]) {JugadorInfo[playerid][pMascaraID] = random(90000) + 10000;}
	    if(Mascara[playerid] == 1)
	    {
	        format(Nombre, sizeof(Nombre),"[Extraño_%d]", JugadorInfo[playerid][pMascaraID]);
	    }
	    else
		{
			format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
		}
    }
    return Nombre;
}

stock NombreJugador(playerid) //Utilizar como *format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));*
{
    new Name[MAX_PLAYER_NAME];
    if(IsPlayerConnected(playerid))
    {
        GetPlayerName(playerid, Name, sizeof(Name));
    }
    for(new name = 0; name < MAX_PLAYER_NAME; name++) if(Name[name] == '_') Name[name] = ' ';
    return Name;
}

stock GetWeaponNameEx(id, name[], len) return format(name,len, "%s", GunNames[id]); //Comprueba nombre de una arma en español

forward StartFly(playerid); //Inicia el modo vuelo
public StartFly(playerid)
{
    if(Volando[playerid]) return 0;
    Volando[playerid] = 1;
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid,x,y,z);
    SetPlayerPos(playerid,x,y,z+5.0);
    Fly(playerid);
    return 1;
}

forward Fly(playerid); //Timer del modo vuelo
public Fly(playerid)
{
    if(!IsPlayerConnected(playerid)){return 1;}
    new k, ud,lr;
    GetPlayerKeys(playerid,k,ud,lr);
    new Float:v_x,Float:v_y,Float:v_z,
    Float:x,Float:y,Float:z;
    if(ud < 0) //Forward
    {
        GetPlayerCameraFrontVector(playerid,x,y,z);
        v_x = x+0.1;
        v_y = y+0.1;
    }
    if(k & 128){v_z = -0.2;} //Baja
    else if(k & KEY_FIRE){v_z = 0.2;} //Sube
    if(k & KEY_WALK) //Lento
    {
        v_x /=5.0;
        v_y /=5.0;
        v_z /=5.0;
    }
    if(k & KEY_SPRINT) //Rápido
    {
        v_x *=4.0;
        v_y *=4.0;
        v_z *=4.0;
    }
    if(v_z == 0.0) {v_z = 0.025;}
    SetPlayerVelocity(playerid,v_x,v_y,v_z);
    GetPlayerCameraFrontVector(playerid,v_x,v_y,v_z);
    GetPlayerCameraPos(playerid,x,y,z);
    SetPlayerLookAt(playerid,v_x*500.0+x,v_y*500.0+y);
    if(Volando[playerid])
    {
        SetTimerEx("Fly",50,false,"i",playerid);
    }
    return 1;
}

forward StopFly(playerid); //Para el modo vuelo
public StopFly(playerid)
{
    if(!Volando[playerid]){return 0;}
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid,x,y,z);
    SetPlayerPos(playerid,x,y,z);
    Volando[playerid] = 0;
    return 1;
}

stock SetPlayerLookAt(playerid,Float:x,Float:y) //Comprueba a qué direccion mira el jugador
{
        new Float:pX, Float:pY, Float:pZ, Float:ang;
        GetPlayerPos(playerid, pX, pY, pZ);
        if( y > pY ) ang = (-acos((x - pX) / floatsqroot((x - pX)*(x - pX) + (y - pY)*(y - pY))) - 90.0);
        else if( y < pY && x < pX ) ang = (acos((x - pX) / floatsqroot((x - pX)*(x - pX) + (y - pY)*(y - pY))) - 450.0);
        else if( y < pY ) ang = (acos((x - pX) / floatsqroot((x - pX)*(x - pX) + (y - pY)*(y - pY))) - 90.0);
        if(x > pX) ang = (floatabs(floatabs(ang) + 180.0));
        else ang = (floatabs(ang) - 180.0);
        //ang += 180.0;
        SetPlayerFacingAngle(playerid, ang);
        return;
}

forward JailPlayerOOC(playerid); //Sistema de jail OOC
public JailPlayerOOC(playerid)
{
	new string[128];
	SetPlayerInterior(playerid, 1);
	SetPlayerVirtualWorld(playerid, playerid+1000);
	SetPlayerPos(playerid, 2263.9739, 1647.4904, 1084.2344);
	SetCameraBehindPlayer(playerid);
	format(string, sizeof(string), "Estás en prisión OOC, te quedan %d minutos. Usa /reloj para ver el tiempo restante.", JugadorInfo[playerid][pTiempoCarcel]);
	SendClientMessage(playerid, Amarillo, string);
	return 1;
}
UnJailPlayerOOC(playerid)
{
	JugadorInfo[playerid][pTiempoCarcel] = 0;
	JugadorInfo[playerid][pEncarcelado] = 0;
	SetPlayerFacingAngle(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid,0);
	SetPlayerPos(playerid, 1479.1301,-1742.1343,13.5469);
	SetCameraBehindPlayer(playerid);
	PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
	return 1;
}

forward JailPlayerIC(playerid); //Sistema de jail IC
public JailPlayerIC(playerid)
{
	new string[128];
	if(JugadorInfo[playerid][pEncarcelado] == 1)
	{
		format(string, sizeof(string), "Estás en la prisión de comisaría, te quedan %d minutos. Usa /reloj para ver el tiempo restante.", JugadorInfo[playerid][pTiempoCarcel]);
		SendClientMessage(playerid, Amarillo, string);
		SetPlayerInterior(playerid, 6);
		SetPlayerVirtualWorld(playerid, 1);
		SetPlayerPos(playerid, 264.1901,77.6065,1001.0391);
	}
	if(JugadorInfo[playerid][pEncarcelado] == 2)
	{
		format(string, sizeof(string), "Estás en la prisión federal, te quedan %d minutos. Usa /reloj para ver el tiempo restante.", JugadorInfo[playerid][pTiempoCarcel]);
		SendClientMessage(playerid, Amarillo, string);
		SetPlayerInterior(playerid, 2);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerPos(playerid, 2532.8345,-1291.8160,1044.1250);
	}
}
UnJailPlayerIC(playerid)
{
    if(JugadorInfo[playerid][pEncarcelado] == 1)
	{
		JugadorInfo[playerid][pTiempoCarcel] = 0;
		JugadorInfo[playerid][pEncarcelado] = 0;
		SetPlayerFacingAngle(playerid, 90);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid,0);
		SetPlayerPos(playerid, 1554.8660, -1675.6772, 16.1953);
		SetCameraBehindPlayer(playerid);
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
	}
	if(JugadorInfo[playerid][pEncarcelado] == 2)
	{
		JugadorInfo[playerid][pTiempoCarcel] = 0;
		JugadorInfo[playerid][pEncarcelado] = 0;
		SetPlayerFacingAngle(playerid, 90);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid,0);
		SetPlayerPos(playerid, 1797.9216,-1578.7523,14.0898);
		SetCameraBehindPlayer(playerid);
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
	}
}

forward CederTimer(playerid);
public CederTimer(playerid)
{
	CederTiempo[playerid] = 0;
	return 1;
}

forward RecargarTimer(playerid);
public RecargarTimer(playerid)
{
	RecargarTiempo[playerid] = 0;
	return 1;
}

forward TimerDeUnaHora(); //Timer que se activa cada hora
public TimerDeUnaHora()
{

	if(CargasTotal < 97)
	{
	    CargasTotal += 3;
	}
	else { CargasTotal = 100; }
	
	if(CargasTotalVendidas > 3)
	{
	    CargasTotalVendidas -=3;
	}
	
    new conteo;
	for(new idx=MAX_VEHPUBLICO+1; idx <= TotalVeh; idx++)
	{
    	SaveCar(idx); //Guardado de vehículos
    	conteo++;
    }
	printf("Coches guardados: %d", conteo);
	
	for(new x=1; x<=TotalFaccs; x++)
	{
	    if(FamiliaInfo[x][fTipo] == 3) FamiliaInfo[x][fPuntosExpansion] ++; //Suma 1 punto de expansión a las pandillas y bandas
	    if(FamiliaInfo[x][fTipo] == 4) //Resta una hora a las mafias de espera para comprar armas y drogas
	    {
	        if(FamiliaInfo[x][fTiempoArmas] > 0) FamiliaInfo[x][fTiempoArmas] --;
	        if(FamiliaInfo[x][fTiempoDrogas] > 0) FamiliaInfo[x][fTiempoDrogas] --;
	    }
	}
	
	new hora;
	gettime(hora);
	if(hora == 5 || hora == 6) //Guardado de stats nocturno
	{
	    new cuenta;
		for(new idx=MAX_VEHPUBLICO+1; idx <= TotalVeh; idx++)
		{
			SaveCar(idx);
			cuenta++;
		}
		printf("Coches guardados: %d", cuenta);

		cuenta = 0;
		for(new x=1; x<=TotalCasas; x++)
	    {
	    	GuardarCasa(x); //Guardado de casas
	    	cuenta++;
	    }
	    printf("Casas guardadas: %d (MAX: %d)", cuenta, MAX_HOUSES);

	    cuenta = 0;
	    for(new x=1; x<=TotalNegs; x++)
	    {
	    	GuardarNegocio(x); //Guardado de negocios
	    	cuenta++;
	    }
	    printf("Negocios guardados: %d (MAX: %d)", cuenta, MAX_NEGS);

	    cuenta = 0;
	    for(new x=1; x<=TotalFaccs; x++)
	    {
	    	SaveFacc(x); //Guardado de facciones
	    	cuenta++;
	    }
	    printf("Facciones guardadas: %d (MAX: %d)", cuenta, MAX_FACCS);

	    cuenta = 0;
	    for(new x=0; x<=CodigoPlantacion; x++)
	    {
	        if(strlen(PlantaInfo[x][plPlantador]))
	        {
		    	SavePlantacion(x); //Guardado de plantaciones
		    	cuenta++;
	    	}
	    }
	    printf("Plantaciones guardadas: %d (MAX: %d)", cuenta, MAX_PLANTACIONES);
	}
	return 1;
}

forward TimerDeCincoMinutos();
public TimerDeCincoMinutos()
{
    for(new x = 0; x <= CodigoPlantacion; x++) //Loop de plantaciones
	{
	    if(PlantaInfo[x][plEstado] > 0)
	    {
	        PlantaInfo[x][plEstado] ++;
	    }
	}
	return 1;
}
forward TimerDeUnSegundo();
public TimerDeUnSegundo()
{
    for(new playerid = 0; playerid < MAX_PLAYERS; playerid++) //Loop de playerids
	{
	    if(JugadorInfo[playerid][pManoDer] == 177) { SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY); }
	    if(JugadorInfo[playerid][pManoIzq] == 177) { SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY); }
        SetPlayerTime(playerid,Hour,Minute);
        //Anim muerte
        if(JugadorInfo[playerid][pMuerto] != 0)
		{
			ApplyAnimation(playerid,"WUZI","CS_Dead_Guy",4.1,1,1,1,0,0,1);
			ApplyAnimation(playerid,"WUZI","CS_Dead_Guy",4.1,1,1,1,0,0,1);
			ApplyAnimation(playerid,"WUZI","CS_Dead_Guy",4.1,1,1,1,0,0,1);
			ApplyAnimation(playerid,"WUZI","CS_Dead_Guy",4.1,1,1,1,0,0,1);
			ApplyAnimation(playerid,"WUZI","CS_Dead_Guy",4.1,1,1,1,0,0,1);
			ApplyAnimation(playerid,"WUZI","CS_Dead_Guy",4.1,1,1,1,0,0,1);
			ApplyAnimation(playerid,"WUZI","CS_Dead_Guy",4.1,1,1,1,0,0,1);
			ApplyAnimation(playerid,"WUZI","CS_Dead_Guy",4.1,1,1,1,0,0,1);
			ApplyAnimation(playerid,"WUZI","CS_Dead_Guy",4.1,1,1,1,0,0,1);
			SetPlayerHealth(playerid, 10);
		}
		if(ApagandoFuego[playerid] == 1) {
			for(new fuego=0; fuego < MAX_FUEGOS; fuego++) {
  			    if(JugadorInfo[playerid][pManoDer] == 35 && JugadorInfo[playerid][pManoDerCant] > 0) {
	     			if(FuegoInfo[fuego][fuCreado] == 1) {
			    	    if(IsPlayerInRangeOfPoint(playerid,3.0,FuegoInfo[fuego][fuX],FuegoInfo[fuego][fuY],FuegoInfo[fuego][fuZ])) {
	              			if(FuegoInfo[fuego][fuVida] >= 1) { FuegoInfo[fuego][fuVida]--; }
	                        else {
	                            FuegoInfo[fuego][fuCreado] = 0;
	                            FuegoInfo[fuego][fuVida] = 0;
	                            FuegoInfo[fuego][fuTipo]= 0;
	                            FuegoInfo[fuego][fuX] = 0;
	                            FuegoInfo[fuego][fuY] = 0;
	                            FuegoInfo[fuego][fuZ] = 0;
	                            DestroyDynamicObject(FuegoInfo[fuego][fuObjeto]);
	                            ApagandoFuego[playerid] = 0;
	                        }
			            }
					}
				}
    		}
		}
	}
	return 1;
}
forward TimerDeUnMinuto(); //Timer que se activa cada minuto
public TimerDeUnMinuto()
{
	if(anunciotiempo > 0) anunciotiempo --; //Sistema de anuncios
    for(new playerid = 0; playerid < MAX_PLAYERS; playerid++) //Loop de playerids
	{
	    if(JugadorInfo[playerid][pTrabajo] >= 1)
	    {
	  		if(JugadorInfo[playerid][pPuntosRol] < Jobs[JugadorInfo[playerid][pTrabajo]-1][JobPuntos])
			{
			    JugadorInfo[playerid][pTrabajo] = 0;
			    JugadorInfo[playerid][pContrato] = 0;
			    JugadorInfo[playerid][pEsperaTrabajar] = 60;
			    SendClientMessage(playerid, Rojo, "¡No tienes los suficientes puntos de rol para trabajar!");
			}
		}
		if(PrimerSpawn[playerid] == 0 || JugadorLogueado[playerid] == 0 || !IsPlayerConnected(playerid)){continue;}
        if(JugadorLogueado[playerid] != 0)
		{
		    if(JugadorInfo[playerid][pPuntosConduccion] == 0 && JugadorInfo[playerid][pLicConduccion] != 0)
		    {
		        JugadorInfo[playerid][pPuntosConduccion] = 12;
		    }
		    //Contador de activación de payday
		    JugadorInfo[playerid][pMinPayDay] ++;
		    if(JugadorInfo[playerid][pMinPayDay] >= 55)
		    {
		        JugadorInfo[playerid][pMinPayDay] = 0;
				PayDay(playerid);
		    }
        	//Job ladrón
        	if(JugadorInfo[playerid][pTrabajo] == 8)
        	{
        		if(PuertaForzada[playerid] > 0){PuertaForzada[playerid] --;}
        		if(PuertaForzada[playerid] < 0){PuertaForzada[playerid] = 0;}
        		if(JugadorInfo[playerid][pTiempoRobo] > 0){JugadorInfo[playerid][pTiempoRobo] --;}
        		if(JugadorInfo[playerid][pTiempoRobo] < 0){JugadorInfo[playerid][pTiempoRobo] = 0;}
        		if(PuenteHecho[playerid] > 0){PuenteHecho[playerid] --;}
        		if(PuenteHecho[playerid] < 0){PuenteHecho[playerid] = 0;}
        	}
            //Asigna el score de un jugador a su nivel
			SetPlayerScore(playerid, JugadorInfo[playerid][pNivel]);
			//Jail IC
            if(JugadorInfo[playerid][pEncarcelado] == 1 || JugadorInfo[playerid][pEncarcelado] == 2)
			{
                if(JugadorInfo[playerid][pTiempoCarcel] > 0)
				{
					JugadorInfo[playerid][pTiempoCarcel]--;
				}
				else if(JugadorInfo[playerid][pTiempoCarcel] == 0)
				{
					UnJailPlayerIC(playerid);
				}
			}
			//Jail OOC
			if(JugadorInfo[playerid][pEncarcelado] == 3)
			{
				if(!IsPlayerInRangeOfPoint(playerid, 10.0, 2263.9739, 1647.4904, 1084.2344))
				{
					JailPlayerOOC(playerid);
					SendClientMessage(playerid, COLOR_ROJO, "Has sido reubicado.");

				}
				if(JugadorInfo[playerid][pTiempoCarcel] > 0)
				{
					JugadorInfo[playerid][pTiempoCarcel]--;
				}
				else if(JugadorInfo[playerid][pTiempoCarcel] <= 0)
				{
					UnJailPlayerOOC(playerid);
				}
			}
			//Sistema de fuerza /Entrenar
			if(JugadorInfo[playerid][pCansancioEntrenar] > 0)JugadorInfo[playerid][pCansancioEntrenar] --; //Reduce cansancio
			//Sistema de recuperar vida
			if(AdminDuty[playerid] == 0)
			{
			    new drogaconsumida; //Si ha consumido droga
				for(new x=0; x<5; x++)
				{
				    if(JugadorInfo[playerid][pDrConsumida][x] != 0) drogaconsumida = 1;
				}
				
				if(drogaconsumida == 0)
				{
				    new Float:cvida;
				    GetPlayerHealth(playerid, cvida);
				    if(cvida < 100){GivePlayerHealth(playerid, 1);}
			    }
			}
			//Drogas
			if(AdminDuty[playerid] == 0)
			{
				new Float:cvida;
				if(JugadorInfo[playerid][pDrConsumida][0] > 0) //Marihuana
				{
                    JugadorInfo[playerid][pDrConsumida][0] --;
	                if(JugadorInfo[playerid][pDrConsumida][0] == 0) SendClientMessage(playerid, Naranja, "Te recuperas del efecto de la marihuana");
	                GetPlayerHealth(playerid, cvida);
	                if(cvida > 10) SetTimerEx("GivePlayerHealth1", 1000, false, "i", playerid);
				}
				if(JugadorInfo[playerid][pDrConsumida][1] > 0) //Cocaína
				{
	                JugadorInfo[playerid][pDrConsumida][1] --;
	                if(JugadorInfo[playerid][pDrConsumida][1] == 0) SendClientMessage(playerid, Naranja, "Te recuperas del efecto de la cocaína");
	                GetPlayerHealth(playerid, cvida);
	                if(cvida > 10) SetTimerEx("GivePlayerHealth1", 1000, false, "i", playerid);
				}
				if(JugadorInfo[playerid][pDrConsumida][2] > 0) //Crack
				{
	                JugadorInfo[playerid][pDrConsumida][2] --;
	                if(JugadorInfo[playerid][pDrConsumida][2] == 0) SendClientMessage(playerid, Naranja, "Te recuperas del efecto del crack");
	                GetPlayerHealth(playerid, cvida);
	                if(cvida > 10) SetTimerEx("GivePlayerHealth1", 1200, false, "i", playerid);
				}
				if(JugadorInfo[playerid][pDrConsumida][3] > 0) //Heroína
				{
	                JugadorInfo[playerid][pDrConsumida][3] --;
	                if(JugadorInfo[playerid][pDrConsumida][3] == 0){SendClientMessage(playerid, Naranja, "Te recuperas del efecto de la heroína"); SetPlayerWeather(playerid, DefaultWeather);}
	                GetPlayerHealth(playerid, cvida);
	                if(cvida > 10) SetTimerEx("GivePlayerHealth1", 1400, false, "i", playerid);
				}
				if(JugadorInfo[playerid][pDrConsumida][4] > 0) //LSD
				{
	                JugadorInfo[playerid][pDrConsumida][4] --;
	                if(JugadorInfo[playerid][pDrConsumida][4] == 0)
					{
						SendClientMessage(playerid, Naranja, "Te recuperas del efecto del LSD");
					 	RemovePlayerColorFade(playerid);
						SetPlayerWeather(playerid, DefaultWeather);
					}
	                for(new x=0; x<=200; x+=5)
	                {
	                	if(JugadorInfo[playerid][pDrConsumida][4] == x){RemovePlayerColorFade(playerid); SetTimerEx("DarEfectoLSD", 200, false, "i", playerid); break;}
	                }
				}
			}
			//Trabajo
			if(JugadorInfo[playerid][pEsperaTrabajar] > 0) JugadorInfo[playerid][pEsperaTrabajar] --;
		}
	}
	for(new carid=0; carid <= MAX_VEHICLES; carid++)
 	{
		if(carid <= MAX_VEHPUBLICO)
	    {
			new engine,lights,alarm,doors,bonnet,boot,objective;
	    	GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
			if(engine == 1 && CocheInfo[carid][cGas] > 0)CocheInfo[carid][cGas]--; //Bajar 1 de gasolina
			if(CocheInfo[carid][cGas] < 0)CocheInfo[carid][cGas] = 0; //Setear gasolina a 0 si es menor a tal
			if(engine == 1 && CocheInfo[carid][cGas] == 0 && !IsABike(carid))SetVehicleParamsEx(carid,0,lights,alarm,doors,bonnet,boot,objective); //Apagar motor si no tiene gasolina
	   	}
	}
	for(new carid = MAX_VEHPUBLICO+1; carid <= TotalVeh; carid++) //Loop de carids
	{
	    new Float:cvida;
	    GetVehicleHealth(carid, cvida);
		new engine,lights,alarm,doors,bonnet,boot,objective;
    	GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
		if(engine == 1 && CocheInfo[carid][cGas] > 0)CocheInfo[carid][cGas]--; //Bajar 1 de gasolina
		if(CocheInfo[carid][cGas] < 0)CocheInfo[carid][cGas] = 0; //Setear gasolina a 0 si es menor a tal
		if(engine == 1 && CocheInfo[carid][cGas] == 0 && !IsABike(carid))SetVehicleParamsEx(carid,0,lights,alarm,doors,bonnet,boot,objective); //Apagar motor si no tiene gasolina
		if(CocheInfo[carid][cEnDeposito] == 1) //Desguace
		{
			SetVehicleVirtualWorld(carid, carid+1);
			if(IsABoat(carid)){SetVehiclePos(carid, 2294.3999,-2447.8000,0.0000);}
	    	if(!IsABoat(carid)){SetVehiclePos(carid, 2274.1028,-2345.5371,13.5469);}
		}
		if(CocheInfo[carid][cEnDeposito] == 2 && GetVehicleDistanceFromPoint(carid, 1622.1896,-1823.4991,13.5279) > 50) //Depósito LSPD
		{
			SetVehiclePos(carid, 1622.1896,-1823.4991,13.5279);
		}
		if(engine == 1 && cvida < MIN_CAR_HEALTH && !IsABike(carid))SetVehicleParamsEx(carid,0,lights,alarm,doors,bonnet,boot,objective); //Apagar motor si está muy dañado
	}
	return 1;
}

forward TimerDeMedioMinuto(); //Timer que se activa cada medio minuto
public TimerDeMedioMinuto()
{
	// ---------------------------------------- //
    for(new playerid = 0; playerid < MAX_PLAYERS; playerid++)
	{
	    JugadorInfo[playerid][pInterior] = GetPlayerInterior(playerid);
       	JugadorInfo[playerid][pVirtualWorld] = GetPlayerVirtualWorld(playerid);
       	
	    if(PrimerSpawn[playerid] == 0 || JugadorLogueado[playerid] == 0 || !IsPlayerConnected(playerid)){continue;}
     	if(JugadorLogueado[playerid] != 0)
		{
		    if(TaxiConductor[playerid] != NOEXISTE && Trabajando[TaxiConductor[playerid]]) //Está pagando a un taxista
		    {
		        if(!IsATaxi(GetPlayerVehicleID(playerid))){TaxiPasajero[TaxiConductor[playerid]] = NOEXISTE; TaxiConductor[playerid] = NOEXISTE; TaxiCoste[playerid] = 0; return 1;}//No está en un taxi
				new taxista = TaxiConductor[playerid];
		        JugadorInfo[playerid][pDineroBanco] -= Tarifa[taxista];
		        GivePlayerMoneyAC(taxista, Tarifa[taxista]);
		        TaxiCoste[playerid] += Tarifa[taxista];
	            return 1;
		    }
	    }
	}
	return 1;
}

public OnPlayerAirbreak(playerid)
{
    new string[128];
    format(string, sizeof(string), "[Siglo-XXI]: %s ha sido expulsado del servidor. Razón: Software no aceptado.", NombreJugador(playerid));
	SendClientMessageToAll(Rojo, string);
	format(string, sizeof(string), "[Anti-CHEAT]: El jugador %s (SQLID: %d) se le detectó usando 'airbreak'. Expulsado.", NombreJugador(playerid), JugadorInfo[playerid][pSQLID]);
	SendAdminMessage(Naranja,string);
	Expulsar(playerid);
    return 1;
}

forward IsPlayerRunning(playerid);
public IsPlayerRunning(playerid)
{
    new ai = GetPlayerAnimationIndex(playerid);
    if(ai == 1231 || ai == 1266) return 1;
    return 0;
}

forward TimerDeMedioSegundo(); //Timer que se activa cada medio segundo
public TimerDeMedioSegundo()
{
    for(new playerid; playerid < MAX_PLAYERS; playerid++)
	{
	    BalasActual[playerid] = GetPlayerAmmo(playerid);
	    GetPlayerArmour(playerid,ChalecoActual[playerid]);
	    
        if(PrimerSpawn[playerid] == 0 || JugadorLogueado[playerid] == 0 || !IsPlayerConnected(playerid)){continue;}
        //Anticheat
        if(GetPlayerPing(playerid) > MAX_PING) //Ping kicker
        {
            PingKick[playerid] ++;
            if(PingKick[playerid] >= 20)
            {
                SendClientMessage(playerid, COLOR_ROJO, "[Siglo-XXI]Fuiste expulsado del servidor. Razón: Tener un ping elevado.");
            	Expulsar(playerid);
            }
        }
        else{PingKick[playerid] = 0;}
        
        if(GetPlayerMoney(playerid) > DineroAC[playerid]) //Dinero
        {
			new string[128];
            format(string, sizeof(string), "[Anti-CHEAT]: %s usó trampas para spawnear %d$ (¿error de sincronización?)", NombreJugador(playerid), (DineroAC[playerid] - GetPlayerMoney(playerid)));
			SendAdminMessage(Naranja,string);

			ResetPlayerMoney(playerid);
			GivePlayerMoney(playerid, DineroAC[playerid]);
        }
        
        new Float:Chaleco;
        GetPlayerArmour(playerid, Chaleco);
        if(Chaleco > 0 && JugadorInfo[playerid][pAdmin] == 0 && JugadorInfo[playerid][pFaccion] == 0) //Tiene chaleco y no es poli y no está de servicio admin y no está de servicio poli
        {
            ChalecoAC[playerid] ++;
		    SetPlayerArmour(playerid, 0);
		    if(ChalecoAC[playerid] >= 10)
		    {
		        new string[128];
		        format(string, sizeof(string), "[Siglo-XXI]: %s ha sido expulsado del servidor. Razón: Software no aceptado.", NombreJugador(playerid));
        		SendClientMessageToAll(Rojo, string);
				format(string, sizeof(string), "[Anti-CHEAT]: El jugador %s (SQLID: %d) ha spawneado un 'chaleco'. Expulsado.", NombreJugador(playerid), JugadorInfo[playerid][pSQLID]);
				SendAdminMessage(Naranja,string);
	        	Expulsar(playerid);
		    }
        }
        else{ChalecoAC[playerid] = 0;}
        
        if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USEJETPACK && JugadorInfo[playerid][pAdmin] == 0) //Jetpack
		{
			new string[128];
			format(string, sizeof(string), "[Siglo-XXI]: %s ha sido baneado del servidor. Razón: Software no aceptado.", NombreJugador(playerid));
 			SendClientMessageToAll(Rojo, string);
			format(string, sizeof(string), "[Anti-CHEAT]: El jugador %s (SQLID: %d) ha spawneado un 'jetpack'. Expulsado.", NombreJugador(playerid), JugadorInfo[playerid][pSQLID]);
			SendAdminMessage(Naranja,string);
        	BanL(playerid);
		}
		
		if((GetPlayerWeapon(playerid) == 35 || GetPlayerWeapon(playerid) == 36 || GetPlayerWeapon(playerid) == 37 || GetPlayerWeapon(playerid) == 38) && JugadorInfo[playerid][pAdmin] == 0) //Anti armas tochas
		{
		    new gunname[50];
		    GetWeaponName(playerid,gunname,sizeof(gunname));
		    new string[128];
			format(string, sizeof(string), "[Siglo-XXI]: %s ha sido expulsado del servidor. Razón: Software no aceptado.", NombreJugador(playerid));
 			SendClientMessageToAll(Rojo, string);
			format(string, sizeof(string), "[Anti-CHEAT]: El jugador %s (SQLID: %d) ha spawneado un arma. Expulsado.", NombreJugador(playerid), JugadorInfo[playerid][pSQLID]);
			SendAdminMessage(Naranja,string);
        	printf(string);
        	Expulsar(playerid);
		}
		
		if(GetPlayerWeapon(playerid) != 0 && GetPlayerWeapon(playerid) != ObjetoInfo[JugadorInfo[playerid][pManoDer]][IDArma] && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) //Anti spawn de armas
		{
		    new gunname[50];
    		GetWeaponName(playerid,gunname,sizeof(gunname));
		    ArmaSpawnAC[playerid] ++;
		    SetPlayerArmedWeapon(playerid, ObjetoInfo[JugadorInfo[playerid][pManoDer]][IDArma]);
		    if(ArmaSpawnAC[playerid] >= 6)
		    {
		        new string[128];
				format(string, sizeof(string), "[Siglo-XXI]: %s ha sido expulsado del servidor. Razón: Software no aceptado.", NombreJugador(playerid));
 				SendClientMessageToAll(Rojo, string);
				format(string, sizeof(string), "[Anti-CHEAT]: El jugador %s (SQLID: %d) ha spawneado un arma. Expulsado.", NombreJugador(playerid), JugadorInfo[playerid][pSQLID]);
				SendAdminMessage(Naranja,string);
	        	Expulsar(playerid);
		    }
		}
		else{ArmaSpawnAC[playerid] = 0;}
		
		VehicleHack[playerid] = 0;
		
		if(JugadorInfo[playerid][pAdmin] >= 1 && GodMode[playerid] == 1) //Parte admin
		{
		    //Godmode admin
			SetPlayerHealth(playerid, 999999);
		    SetPlayerArmour(playerid, 999999);
			//Sistema RECON
			if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING  && (JugadorInfo[playerid][pSpecType] == ADMIN_SPEC_TYPE_PLAYER || JugadorInfo[playerid][pSpecType] == ADMIN_SPEC_TYPE_VEHICLE))
			{
				new specplayerid = JugadorInfo[playerid][pSpecID];
				SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(specplayerid));
				SetPlayerInterior(playerid,GetPlayerInterior(specplayerid));
			}
		} //Fin parte admin
		
		//Arregla la solicitud de refuerzos
    	if(JugadorInfo[playerid][pFaccion] == 1 && JugadorInfo[playerid][pServicioPD] > 0 && SolicitaRefuerzos[playerid] == 1)
    	{
    	    for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(JugadorInfo[i][pFaccion] == 1 && JugadorInfo[i][pServicioPD] > 0)
					{
						SetPlayerMarkerForPlayer(i, playerid, 0x00CB00FF);
					}
				}
			}
    	}
    	// Marcar todos
    	if(SolicitaTodos[playerid] == 1)
		{
    	    for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(JugadorInfo[i][pFaccion] == 1 && JugadorInfo[i][pServicioPD] > 0 || (JugadorInfo[i][pFaccion] == 2 && JugadorInfo[i][pServicioFD] > 0))
					{
						SetPlayerMarkerForPlayer(i, playerid, Naranja);
					}
				}
			}
    	}
    	if(SolicitaTodos[playerid] == 2)
		{
    	    for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(JugadorInfo[i][pFaccion] == 1 && JugadorInfo[i][pServicioPD] > 0)
					{
						SetPlayerMarkerForPlayer(i, playerid, 0x1229FAFF);
					}
				}
			}
    	}
    	if(SolicitaTodos[playerid] == 3)
		{
    	    for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(JugadorInfo[i][pFaccion] == 1 && JugadorInfo[i][pServicioPD] > 0 || (JugadorInfo[i][pFaccion] == 3))
					{
						SetPlayerMarkerForPlayer(i, playerid, 0x5b0000FF);
					}
				}
			}
    	}
    	if(SolicitaTodos[playerid] == 4)
		{
    	    for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(JugadorInfo[i][pFaccion] == 1 && JugadorInfo[i][pServicioPD] > 0 || (JugadorInfo[i][pFaccion] == 2 && JugadorInfo[i][pServicioFD] > 0))if(JugadorInfo[i][pFaccion] == 1 && JugadorInfo[i][pServicioPD] > 0 || (JugadorInfo[i][pFaccion] == 2 && JugadorInfo[i][pServicioFD] > 0))
					{
						SetPlayerMarkerForPlayer(i, playerid, COLOR_YELLOW);
					}
				}
			}
    	}
		if(Mascara[playerid] == 1)
		{
		    for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
	                ShowPlayerNameTagForPlayer(i, playerid, 0);
				}
			}
		}
		//Si NO está subido a un vehículo
		if(!IsPlayerInAnyVehicle(playerid))
		{
   	 		if(Taseado[playerid] > 0 && JugadorInfo[playerid][pMuerto] == 0)
			{
				if(GetPlayerAnimationIndex(playerid) != 1209)
				{
					ApplyAnimation(playerid,"PED","KO_skid_front",4.1,0,1,1,1,0);
				}
			}
			if(BaleadoGoma[playerid] > 0 && JugadorInfo[playerid][pMuerto] == 0)
			{
			    new Animacion[32], Libreria[32];
			    GetAnimationName(GetPlayerAnimationIndex(playerid) , Libreria, sizeof(Libreria), Animacion, sizeof(Animacion));
				if(strcmp(Libreria,"SWEET") == 1)
				{
			        ApplyAnimation(playerid,"SWEET", "Sweet_injuredloop", 4.1,0,1,1,1,0);
			    }
			}
		}
	 	//Si SÍ está subido a un vehículo
        if(IsPlayerInAnyVehicle(playerid))
		{
		    new carid = GetPlayerVehicleID(playerid);
		    if(TaxiConductor[playerid] != NOEXISTE && Trabajando[TaxiConductor[playerid]]) //Está pagando a un taxista
		    {
				new taxista = TaxiConductor[playerid], string[50];
		        format(string, sizeof(string), "~y~Coste actual del viaje: %d$", TaxiCoste[playerid]);
	            GameTextForPlayer(playerid, string, 1000, 3);
	            GameTextForPlayer(taxista, string, 1000, 3);
	            return 1;
		    }
		    if(GetPlayerState(playerid) == 2 && !IsABike(carid)) //Si es conductor
		    {
		        if(Trabajando[playerid] == 1 && IsACropduster(carid) && JugadorInfo[playerid][pTrabajo] == 5) //Fumigador aéreo
		        {
		            if(!IsPlayerInRangeOfPoint(playerid, 550.0, -376.4928,-1436.4470,25.7266)) //Si se sale de la zona de fumigación
		            {
		                SetVehicleToRespawn(carid);
		                SetPlayerSkin(playerid, JugadorInfo[playerid][pSkin]);
		                Fumigado[playerid] = 0;
		                SetPlayerPos(playerid, -420.8934,-1750.6937,6.8467);
		                Trabajando[playerid] = 0;
						SendClientMessage(playerid, COLOR_PIEL, "Has salido de la zona de fumigación y has dejado de trabajar.");
						DisablePlayerRaceCheckpoint(playerid);
						DisablePlayerCheckpoint(playerid);
		            }
		        }
  			    if(CocheAutoescuelaCond(carid) && EnAutoEscuela[playerid] == 1)
  			    {
  			        if(velocidad[playerid] > 90)
  			        {
  			            MaxVelAutoEscuela[playerid] ++;
  			            if(MaxVelAutoEscuela[playerid] > 20)
  			            {
  			                SendClientMessage(playerid, Rojo, "Has superado el límite de velocidad durante bastante tiempo y has suspendido.");
  			                KillTimer(MaxTiempoAutoEscuelaTimer[playerid]);
  			                GameTextForPlayer(playerid, "~r~Suspenso", 1000, 6);
							GivePlayerMoneyAC(playerid, -100);
							CheckPointAutoEscuela[playerid] = 0;
							EnAutoEscuela[playerid] = 0;
							MaxVelAutoEscuela[playerid] = 0;
			                SetVehicleToRespawn(carid);
			                DisablePlayerCheckpoint(playerid);
			                SetPlayerPos(playerid, 2048.6418,-1908.1290,13.5469);
  			            }
  			        }
  			        else{MaxVelAutoEscuela[playerid] = 0;}
  			    }
		    }
		    new Float:cvida;
		    GetVehicleHealth(carid, cvida);
		    new engine,lights,alarm,doors,bonnet,boot,objective;
			GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
		    if(cvida < MIN_CAR_HEALTH && engine != 0 && !IsABike(carid)) //Daños del vehículo inferiores a 350 y motor encendido
		    {
		        SetVehicleParamsEx(carid,0,lights,alarm,doors,bonnet,boot,objective);
		        SendClientMessage(playerid, Rojo, "El motor del vehículo se encuentra demasiado dañado para seguir funcionando.");
				MotorFeo[carid] = 1;
				virtualworldres[carid] = GetVehicleVirtualWorld(carid);
				GetVehiclePos(carid, respawnx[carid], respawny[carid], respawnz[carid]);
				GetVehicleZAngle(carid, respawnrot[carid]);
				GetVehicleParamsEx(carid,resengine[carid],reslights[carid],resalarm[carid],resdoors[carid],resbonnet[carid],resboot[carid],resobjective[carid]);
			}
		}
		ActualizarManos(playerid); //Actualiza los objetos en mano del jugador
		if(EnLlamada[playerid] > 0 && JugadorInfo[playerid][pManoDer] != 68 && JugadorInfo[playerid][pManoIzq] != 68 && EnLlamada[PersonaEnLlamada[playerid]] != 912){ColgarTelefono(playerid);}
        // ------------- EFECTO DE FUEGOS ------------------ //
        for(new fuego=0; fuego < MAX_FUEGOS; fuego++)
        {
        	if(FuegoInfo[fuego][fuCreado] == 1)
            {
            	if(IsPlayerInRangeOfPoint(playerid,2.0,FuegoInfo[fuego][fuX],FuegoInfo[fuego][fuY],FuegoInfo[fuego][fuZ])) // Esta a -2 metros
         		{
        		 	if(GetPlayerSkin(playerid) != 277 && GetPlayerSkin(playerid) != 278 && GetPlayerSkin(playerid) != 279)
					{
					    new Float:health; GetPlayerHealth(playerid, health);
    					SetPlayerHealth(playerid,health-1);
                        SetPlayerDrunkLevel(playerid, 8000);
				    	PlayerTextDrawBoxColor(playerid, Pantallazo[playerid], 0xF60000FF);
				    	PlayerTextDrawShow(playerid, Pantallazo[playerid]);
				    	SetTimerEx("QuitarFlash", 500, 0, "d", playerid);
				    	SetTimerEx("QuitarDrunk", 3000, 0, "d", playerid);
         			}
				}
         	}
         	return 1;
        }
	    for(new i; i < sizeof(Jobs); i++) //Jobs
		{
			new textosd[128];
            if(IsPlayerInRangeOfPoint(playerid,2.0, Jobs[i][Jx], Jobs[i][Jy], Jobs[i][Jz]))
            {
                format(textosd, 128, "~y~Empleo %s~n~~r~usa /trabajo para mas informacion", Jobs[i][JobNombre]);
				GameTextForPlayer(playerid, textosd, 1000, 3);
			}
		}
		if(JugadorInfo[playerid][pManoDer] == 0) { ResetPlayerWeapons(playerid); }
	}
	return 1;
}

stock StartSpectate(playerid, specplayerid) //Sistema Recon
{
	for(new x=0; x<MAX_PLAYERS; x++)
	{
	    if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && JugadorInfo[x][pSpecID] == playerid)
		{
  	     AdvanceSpectate(x);
		}
	}
	TogglePlayerSpectating(playerid, 1);

	if(IsPlayerInAnyVehicle(specplayerid))
	{
		PlayerSpectateVehicle(playerid, GetPlayerVehicleID(specplayerid));
		JugadorInfo[playerid][pSpecID] = specplayerid;
		JugadorInfo[playerid][pSpecType] = ADMIN_SPEC_TYPE_VEHICLE;
	}
	else
	{
		PlayerSpectatePlayer(playerid, specplayerid);
		JugadorInfo[playerid][pSpecID] = specplayerid;
		JugadorInfo[playerid][pSpecType] = ADMIN_SPEC_TYPE_PLAYER;
	}
	SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(specplayerid));
	SetPlayerInterior(playerid,GetPlayerInterior(specplayerid));
}

stock StopSpectate(playerid) //Sistema Recon
{
	TogglePlayerSpectating(playerid, 0);
	JugadorInfo[playerid][pSpecID] = INVALID_PLAYER_ID;
	JugadorInfo[playerid][pSpecType] = ADMIN_SPEC_TYPE_NONE;
	return 1;
}

stock AdvanceSpectate(playerid) //Sistema Recon
{
    if(ConnectedPlayers() == 1) { StopSpectate(playerid); SetTimerEx("ReturnPosition",500,0,"d",playerid); return 1; }
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && JugadorInfo[playerid][pSpecID] != INVALID_PLAYER_ID)
	{
	    for(new x=JugadorInfo[playerid][pSpecID]+1; x<=MAX_PLAYERS; x++)
		{
	    	if(x == MAX_PLAYERS) x = 0;
	        if(IsPlayerConnected(x) && x != playerid)
			{
				if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && JugadorInfo[x][pSpecID] != INVALID_PLAYER_ID || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
				{
					continue;
				}
				else
				{
					StartSpectate(playerid, x);
					break;
				}
			}
		}
	}
	return 1;
}

stock ReverseSpectate(playerid) //Sistema Recon
{
    if(ConnectedPlayers() == 1) { StopSpectate(playerid); SetTimerEx("ReturnPosition",500,0,"d",playerid); return 1; }
	if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && JugadorInfo[playerid][pSpecID] != INVALID_PLAYER_ID)
	{
	    for(new x=JugadorInfo[playerid][pSpecID]-1; x>=0; x--)
		{
	    	if(x == 0) x = MAX_PLAYERS;
	        if(IsPlayerConnected(x) && x != playerid)
			{
				if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && JugadorInfo[x][pSpecID] != INVALID_PLAYER_ID || (GetPlayerState(x) != 1 && GetPlayerState(x) != 2 && GetPlayerState(x) != 3))
				{
					continue;
				}
				else
				{
					StartSpectate(playerid, x);
					break;
				}
			}
		}
	}
	return 1;
}

stock ReconTextDraws() //Sistema Recon
{
	for(new l=0; l<130; l++)
	{
	GpsTD[l] = TextDrawCreate(326.000000, 362.000000, " ");
	TextDrawAlignment(GpsTD[l], 2);
	TextDrawBackgroundColor(GpsTD[l], 255);
	TextDrawFont(GpsTD[l], 1);
	TextDrawLetterSize(GpsTD[l], 0.300000, 1.100000);
	TextDrawColor(GpsTD[l], -1587871574);
	TextDrawSetOutline(GpsTD[l], 0);
	TextDrawSetProportional(GpsTD[l], 1);
	TextDrawSetShadow(GpsTD[l], 1);
	}
	return 1;
}

forward ReturnPosition(playerid); //Sistema Recon
public ReturnPosition(playerid)
{
	TogglePlayerControllable(playerid, 1);
	SetPlayerPos(playerid,RecPos[playerid][0],RecPos[playerid][1],RecPos[playerid][2]);
	SetPlayerFacingAngle(playerid,RecPos[playerid][3]);
	SetPlayerInterior(playerid,IntRec[playerid]);
	SetPlayerVirtualWorld(playerid,VwRec[playerid]);
	if(JugadorInfo[playerid][pServicioPD] > 0) { if(JugadorInfo[playerid][pUniformePD] > 0) { SetPlayerSkin(playerid, JugadorInfo[playerid][pUniformePD]); } else { SetPlayerSkin(playerid, JugadorInfo[playerid][pSkin]); } } else { SetPlayerSkin(playerid, JugadorInfo[playerid][pSkin]); }
}

stock ConnectedPlayers() //Cuenta el número de jugadores conectados
{
	new Connected;
	for(new i = 0; i < MAX_PLAYERS; i++)
	if(IsPlayerConnected(i))
	Connected++;
	return Connected;
}

forward ChatOOCTimer(playerid); //Chat OOC /b
public ChatOOCTimer(playerid)
{
	ChatOOC[playerid] = 0;
}

forward ShowStats(playerid, targetid); //Muestra stats de un jugador
public ShowStats(playerid, targetid)
{
    JugadorInfo[playerid][pInterior] = GetPlayerInterior(playerid);
   	JugadorInfo[playerid][pVirtualWorld] = GetPlayerVirtualWorld(playerid);
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
	    if(JugadorInfo[targetid][pFaccion] != 1){JugadorInfo[targetid][pUniformePD] = 0;}
		new stats[128], sexo[50], trabajo[33], taller[17], faccion[33], lider[9], rango[33], premium[50];
		//Premium
		if(JugadorInfo[targetid][pPremium] == 0){premium = "Ninguno";}
		if(JugadorInfo[targetid][pPremium] == 1){premium = "Sí";}
		//Sexo
		if(JugadorInfo[targetid][pSexo] == 2){sexo = "Femenino";}
        else{sexo = "Masculino";}
		//Trabajo
		if(JugadorInfo[targetid][pTrabajo] == 0){trabajo = "No";}
		else{format(trabajo, sizeof(trabajo), "%s", Jobs[JugadorInfo[targetid][pTrabajo]-1][JobNombre]);}
		if(JugadorInfo[targetid][pTrabajo] == 7 && JugadorInfo[targetid][pTaller] == 0){taller = " (Taller: No)";}
		else if(JugadorInfo[targetid][pTrabajo] == 7){format(taller, sizeof(taller), " (Taller: %d)",JugadorInfo[targetid][pTaller]);}
		//Facción
		if(JugadorInfo[targetid][pFaccion] == 0){faccion = "No", rango = "No";}
		if(JugadorInfo[targetid][pFaccion] > 0)
		{
			format(faccion, sizeof(faccion), "%s", FamiliaInfo[JugadorInfo[targetid][pFaccion]][fNombre]);
		}
		//Líder
		if(JugadorInfo[targetid][pLider] > 0){lider = " (Líder)";}
		//Rango
		if(JugadorInfo[targetid][pFaccion] > 0) //Parte de una facción
		{
	        switch(JugadorInfo[targetid][pRango])
		    {
	            case 1: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[targetid][pFaccion]][fRango1]);
	            case 2: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[targetid][pFaccion]][fRango2]);
	            case 3: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[targetid][pFaccion]][fRango3]);
	            case 4: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[targetid][pFaccion]][fRango4]);
	            case 5: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[targetid][pFaccion]][fRango5]);
	            case 6: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[targetid][pFaccion]][fRango6]);
	            case 7: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[targetid][pFaccion]][fRango7]);
	            case 8: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[targetid][pFaccion]][fRango8]);
	            case 9: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[targetid][pFaccion]][fRango9]);
	            case 10: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[targetid][pFaccion]][fRango10]);
	            case 11: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[targetid][pFaccion]][fRango11]);
	            case 12: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[targetid][pFaccion]][fRango12]);
	        }
		}

		SendClientMessage(playerid, Naranja, "|_________________________________ INFORMACIÓN DEL PERSONAJE: ________________________________|");
		format(stats, sizeof(stats), "Nombre: %s | Edad: %d | Facción: %s | Rango: %s | Sexo: %s | Tlf: %d", JugadorInfo[targetid][pNombre], JugadorInfo[targetid][pEdad], faccion, rango, sexo, JugadorInfo[targetid][pTelefono]);
		SendClientMessage(playerid, Gris, stats);
		format(stats, sizeof(stats), "Trabajo: %s%s | Minutos espera: %d | Contrado: %d (hrs.) | Cartera: %d$ | Saldo Bancario: %d$", trabajo, taller, JugadorInfo[targetid][pEsperaTrabajar], JugadorInfo[targetid][pContrato], GetPlayerMoney(targetid), JugadorInfo[targetid][pDineroBanco]);
		SendClientMessage(playerid, Gris, stats);
		
		SendClientMessage(playerid, Naranja, "|_________________________________ ESTADÍSTICAS: ________________________________________________|");
		format(stats, sizeof(stats), "Premium: %s | Nivel: %d | Puntos Exp: [%d/%d] | Puntos de rol: +%d, -%d | Advertencias: %d", premium, JugadorInfo[targetid][pNivel], JugadorInfo[targetid][pExp], GetRespetoMinimo(JugadorInfo[targetid][pNivel] + 1), JugadorInfo[targetid][pPuntosRol], JugadorInfo[targetid][pPuntosRolNo], JugadorInfo[playerid][pAdvertencias]);
		SendClientMessage(playerid, Gris, stats);
		
		SendClientMessage(playerid, Naranja, "|_________________________________ PROPIEDADES: ________________________________________________|");
		format(stats, sizeof(stats), "Casa: %d | Casa alquilada: %d | Negocio: %d | Vehículos: %d, %d, %d, %d, %d | Prestados: %d, %d, %d, %d, %d",JugadorInfo[targetid][pCasa], JugadorInfo[targetid][pCasaAlq], JugadorInfo[targetid][pNegocio], JugadorInfo[targetid][pLlaveCoche][0], JugadorInfo[targetid][pLlaveCoche][1],
	    JugadorInfo[targetid][pLlaveCoche][2], JugadorInfo[targetid][pLlaveCoche][3], JugadorInfo[targetid][pLlaveCoche][4],JugadorInfo[targetid][pLlaveCochePrestado][0], JugadorInfo[targetid][pLlaveCochePrestado][1], JugadorInfo[targetid][pLlaveCochePrestado][2], JugadorInfo[targetid][pLlaveCochePrestado][3], JugadorInfo[targetid][pLlaveCochePrestado][4]);
		SendClientMessage(playerid, Gris, stats);
		
		if(JugadorInfo[playerid][pAdmin] > 0 || JugadorInfo[targetid][pAdmin] > 0)
		{
			SendClientMessage(playerid, Naranja, "|_________________________________ ADICIONALES: ________________________________________________|");
			format(stats, sizeof(stats), "SQLID: %d | Admin Lvl: %d | Virtual World: %d | Interior: %d | Skin personal: %d | Skin de trabajo: %d", JugadorInfo[targetid][pSQLID], JugadorInfo[targetid][pAdmin], JugadorInfo[targetid][pVirtualWorld], JugadorInfo[targetid][pInterior], JugadorInfo[targetid][pSkin], JugadorInfo[targetid][pUniformePD]);
			SendClientMessage(playerid, Gris, stats);
		}
    }
}

forward GivePlayerArmour(playerid,Float:Armour); //Dar chaleco a un jugador
public GivePlayerArmour(playerid,Float:Armour)
{
    new Float:armour; GetPlayerArmour(playerid, armour);
    SetPlayerArmour(playerid,armour+Armour);
    return 1;
}

forward GivePlayerHealth(playerid,Float:Health); //Dar vida a un jugador
public GivePlayerHealth(playerid,Float:Health)
{
    new Float:health; GetPlayerHealth(playerid, health);
    SetPlayerHealth(playerid,health+Health);
    return 1;
}

forward GivePlayerHealth1(playerid); //Quita 1 de vida al jugador
public GivePlayerHealth1(playerid)
{
    new Float:health; GetPlayerHealth(playerid, health);
    SetPlayerHealth(playerid,health-1);
    return 1;
}

forward PayDay(playerid);
public PayDay(playerid)
{
	if(JugadorLogueado[playerid] != 1 || PrimerSpawn[playerid] != 1){return 1;}
	PlayerSave(playerid); //Guarda stats
	//Puntos de respeto y nivel
	new nivel = JugadorInfo[playerid][pNivel];
	JugadorInfo[playerid][pExp]++;
	GetPlayerLevel(playerid);
	//Sueldos
	new banco = JugadorInfo[playerid][pDineroBanco], sueldo, string[128];
	SendClientMessage(playerid, Blanco, "|---------- ESTADO DE CUENTA BANCARIA ----------|");
    format(string, sizeof(string), " Balance actual: %d$", banco);
	SendClientMessage(playerid, COLOR_GREY, string);
	// Sueldo
	switch(JugadorInfo[playerid][pNivel]) // Paga por nivel
 	{
		case 0,1: sueldo = 100;
	    case 2,3: sueldo = 100;
	    case 4..30: sueldo = 100;
  	}
  	// Sueldo facción +
  	if(JugadorInfo[playerid][pFaccion] == 1)
  	{
  	    sueldo += 260; // LSPD
  	}
  	if(JugadorInfo[playerid][pFaccion] == 2)
  	{
  	    sueldo += 260; // LSFD
  	}
  	if(JugadorInfo[playerid][pFaccion] == 3)
  	{
  	    sueldo += 125; // Estado
  	}
  	if(JugadorInfo[playerid][pFaccion] == 4)
  	{
  	    sueldo += 250; // LSRTV
  	}
  	if(JugadorInfo[playerid][pFaccion] == 5)
  	{
  	    sueldo += 260; // Guardia Nacional
  	}
  	// Sueldo premium +
  	if(JugadorInfo[playerid][pPremium] >= 1)
  	{
  	    sueldo += 500;
  	}
   	JugadorInfo[playerid][pDineroBanco] += sueldo;
	format(string, sizeof(string), " Paga recibida: %d$", sueldo);
	SendClientMessage(playerid, COLOR_GREY, string);
	//Si tiene facción pública y job resetear el job
	if(JugadorInfo[playerid][pFaccion] >= 1 && JugadorInfo[playerid][pFaccion] <= 4 && JugadorInfo[playerid][pTrabajo] != 0) JugadorInfo[playerid][pTrabajo] = 0;
	//Si tiene alquilada una vivienda
	new impuestos, casa = JugadorInfo[playerid][pCasaAlq];
	
	if(JugadorInfo[playerid][pCasaAlq] > 0) { impuestos += CasaInfo[casa][hPAlquiler]; }// Si tiene casa alquilada, sumar el alquiler a impuestos.
	if(JugadorInfo[playerid][pCasa] > 0) { impuestos += 23; } // Si tiene casa propia, sumar a impuestos.
	if(JugadorInfo[playerid][pNegocio] > 0) { impuestos += 33; } // Si tiene un negocio, sumar a impuestos.
	if(JugadorInfo[playerid][pDineroBanco] > 100000) { impuestos += 500; } // Si tiene mayor capital de 100,000. sumar impuestos.
	if(JugadorInfo[playerid][pLlaveCoche][0] >= 1) { impuestos += 15; }  // Si tiene coche en slot 1, sumar impuestos.
    if(JugadorInfo[playerid][pLlaveCoche][1] >= 1) { impuestos += 16; }  // Si tiene coche en slot 2, sumar impuestos.
    if(JugadorInfo[playerid][pLlaveCoche][2] >= 1) { impuestos += 17; }  // Si tiene coche en slot 3, sumar impuestos.
    if(JugadorInfo[playerid][pLlaveCoche][3] >= 1) { impuestos += 18; }  // Si tiene coche en slot 4, sumar impuestos.
    if(JugadorInfo[playerid][pLlaveCoche][4] >= 1) { impuestos += 19; }  // Si tiene coche en slot 5, sumar impuestos.

	format(string, sizeof(string), " Impuestos y rentas por propiedades: -%d$", impuestos);
	SendClientMessage(playerid, COLOR_GREY, string);
	JugadorInfo[playerid][pDineroBanco] -= impuestos;
	
	format(string, sizeof(string), " Nuevo balance: %d$", JugadorInfo[playerid][pDineroBanco]);
	SendClientMessage(playerid, COLOR_GREY, string);
	SendClientMessage(playerid, Blanco, "|------------------------------------------------------------------------|");
	
	format(string, sizeof(string), "~y~paga~n~~w~diaria~n~~g~+%d$", sueldo-impuestos);
	GameTextForPlayer(playerid, string, 1000, 1);
	
	if(JugadorInfo[playerid][pCasaAlq] > 0)
	{
	    if(CasaInfo[casa][hComprada] == 0 || (CasaInfo[casa][hAlquilable] == 0 && CasaInfo[casa][hComprada] > 0)) //Si no tiene dueño o no es alquilable, desalquilar automáticamente
		{
			JugadorInfo[playerid][pCasaAlq] = 0;
			SendClientMessage(playerid, COLOR_GREEN, "La casa que alquilaste no tiene dueño o no está disponible. ¡Ya no tienes hogar!");
		}
	}
	//Mensaje al subir de nivel
	if(JugadorInfo[playerid][pNivel] > nivel)
	{
		format(string, sizeof(string), "~g~Ahora eres nivel %d!", JugadorInfo[playerid][pNivel]);
		GameTextForPlayer(playerid, string, 1000, 1);
	}
	//Adicción de drogas
	new cvida, Float:cvida2, drunklevel;
	GetPlayerHealth(playerid, cvida2);
	if(JugadorInfo[playerid][pDrConsumida][0] == 0 && JugadorInfo[playerid][pAdiccion][0] > 17) //No ha consumido marihuana y es adicto
	{
	    cvida += (JugadorInfo[playerid][pAdiccion][1]/3);
		SendClientMessage(playerid, COLOR_GREEN, "Sufres el mono de la marihuana");
		FadePlayerScreen(playerid, 0xb0b0b0DA, 1);
		drunklevel += 2000;
	}
	if(JugadorInfo[playerid][pDrConsumida][1] == 0 && JugadorInfo[playerid][pAdiccion][1] > 15) //No ha consumido cocaína y es adicto
	{
	    cvida += (JugadorInfo[playerid][pAdiccion][1]/3);
		SendClientMessage(playerid, COLOR_GREEN, "Sufres el mono de la cocaína");
		FadePlayerScreen(playerid, 0xb0b0b0DA, 1);
		drunklevel += 2000;
	}
	if(JugadorInfo[playerid][pDrConsumida][2] == 0 && JugadorInfo[playerid][pAdiccion][2] > 13) //No ha consumido crack y es adicto
	{
	    cvida += (JugadorInfo[playerid][pAdiccion][2]/3);
		SendClientMessage(playerid, COLOR_GREEN, "Sufres el mono del crack");
		FadePlayerScreen(playerid, 0xb0b0b0DA, 1);
		drunklevel += 2000;
	}
	if(JugadorInfo[playerid][pDrConsumida][3] == 0 && JugadorInfo[playerid][pAdiccion][3] > 9) //No ha consumido heroína y es adicto
	{
	    cvida += (JugadorInfo[playerid][pAdiccion][3]/3);
		SendClientMessage(playerid, COLOR_GREEN, "Sufres el mono de la heroína");
		FadePlayerScreen(playerid, 0xb0b0b0DA, 1);
		drunklevel += 2000;
	}
	if((cvida2 - cvida) > 10){GivePlayerHealth(playerid, -cvida);}
	else if(cvida2 > 10){SetPlayerHealth(playerid, 10);}
	GivePlayerDrunkLevel(playerid, drunklevel);
	if(JugadorInfo[playerid][pAdiccion][0] > 0) JugadorInfo[playerid][pAdiccion][0] --; //MArihuana
	if(JugadorInfo[playerid][pAdiccion][1] > 0) JugadorInfo[playerid][pAdiccion][1] --; //Cocaína
	if(JugadorInfo[playerid][pAdiccion][2] > 0) JugadorInfo[playerid][pAdiccion][2] --; //Crack
	if(JugadorInfo[playerid][pAdiccion][3] > 0) JugadorInfo[playerid][pAdiccion][3] --; //Heroína
	if(JugadorInfo[playerid][pAdiccion][4] > 0) JugadorInfo[playerid][pAdiccion][4] --; //LSD
	//Habilidades físicas
	JugadorInfo[playerid][pFuerza] --;
 	if(JugadorInfo[playerid][pFuerza] <= 0) JugadorInfo[playerid][pFuerza] = 1;
 	if(JugadorInfo[playerid][pFuerza] >= 5) JugadorInfo[playerid][pFuerza] = 1;
	if(JugadorInfo[playerid][pContrato] > 0) JugadorInfo[playerid][pContrato] --;
    return 1;
}

stock GetPlayerLevel(playerid) //Sube de nivel automáticamente
{
    new nivel = JugadorInfo[playerid][pNivel], string[50];
	if(JugadorInfo[playerid][pExp] >= 396) JugadorInfo[playerid][pNivel]=12;
	else if(JugadorInfo[playerid][pExp] >= 360) JugadorInfo[playerid][pNivel]=11;
	else if(JugadorInfo[playerid][pExp] >= 324) JugadorInfo[playerid][pNivel]=10;
	else if(JugadorInfo[playerid][pExp] >= 288) JugadorInfo[playerid][pNivel]=9;
	else if(JugadorInfo[playerid][pExp] >= 252) JugadorInfo[playerid][pNivel]=8;
	else if(JugadorInfo[playerid][pExp] >= 216) JugadorInfo[playerid][pNivel]=7;
	else if(JugadorInfo[playerid][pExp] >= 180) JugadorInfo[playerid][pNivel]=6;
	else if(JugadorInfo[playerid][pExp] >= 144) JugadorInfo[playerid][pNivel]=5;
	else if(JugadorInfo[playerid][pExp] >= 108) JugadorInfo[playerid][pNivel]=4;
	else if(JugadorInfo[playerid][pExp] >= 72) JugadorInfo[playerid][pNivel]=3;
	else if(JugadorInfo[playerid][pExp] >= 36) JugadorInfo[playerid][pNivel]=2;
	else if(JugadorInfo[playerid][pExp] >= 0) JugadorInfo[playerid][pNivel]=1;
	if(JugadorInfo[playerid][pNivel] > nivel)
	{
		format(string, sizeof(string), "~w~¡Ahora eres nivel ~g~%d~w~!", JugadorInfo[playerid][pNivel]);
		GameTextForPlayer(playerid, string, 1000, 1);
	}
	return JugadorInfo[playerid][pNivel];
}

stock SetPlayerLevel(playerid) //Asigna pExp al nivel del jugador
{
    if(JugadorInfo[playerid][pNivel] == 12) JugadorInfo[playerid][pExp] = 396;
	else if(JugadorInfo[playerid][pNivel] == 11) JugadorInfo[playerid][pExp] = 360;
	else if(JugadorInfo[playerid][pNivel] == 10) JugadorInfo[playerid][pExp] = 324;
	else if(JugadorInfo[playerid][pNivel] == 9) JugadorInfo[playerid][pExp] = 288;
	else if(JugadorInfo[playerid][pNivel] == 8) JugadorInfo[playerid][pExp] = 252;
	else if(JugadorInfo[playerid][pNivel] == 7) JugadorInfo[playerid][pExp] = 216;
	else if(JugadorInfo[playerid][pNivel] == 6) JugadorInfo[playerid][pExp] = 180;
	else if(JugadorInfo[playerid][pNivel] == 5) JugadorInfo[playerid][pExp] = 144;
	else if(JugadorInfo[playerid][pNivel] == 4) JugadorInfo[playerid][pExp] = 108;
	else if(JugadorInfo[playerid][pNivel] == 3) JugadorInfo[playerid][pExp] = 72;
	else if(JugadorInfo[playerid][pNivel] == 2) JugadorInfo[playerid][pExp] = 36;
	else if(JugadorInfo[playerid][pNivel] == 1) JugadorInfo[playerid][pExp] = 0;
	return JugadorInfo[playerid][pExp];
}

stock GetRespetoMinimo(level) //Cuenta cuánto falta para el siguiente nivel
{
	new RespetoMinimo;
	if(level == 0 || level == 1) RespetoMinimo = 0;
	else if(level == 2) RespetoMinimo = 36;
	else if(level == 3) RespetoMinimo = 72;
	else if(level == 4) RespetoMinimo = 108;
	else if(level == 5) RespetoMinimo = 144;
	else if(level == 6) RespetoMinimo = 180;
	else if(level == 7) RespetoMinimo = 216;
	else if(level == 8) RespetoMinimo = 252;
	else if(level == 9) RespetoMinimo = 288;
	else if(level == 10) RespetoMinimo = 324;
	else if(level == 11) RespetoMinimo = 360;
	else if(level == 12) RespetoMinimo = 396;
	return RespetoMinimo;
}

stock GetPlayerCajero(playerid) //Detecta cercanía a un cajero
{
	new Cajero;
	for(new i = 0; i < sizeof(Cajeros); i ++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 1.5, Cajeros[i][cX], Cajeros[i][cY], Cajeros[i][cZ]))
		{
			Cajero = i+1;
		}
	}
	return Cajero;
}

forward EntrarSitioPublico(playerid);
public EntrarSitioPublico(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 2.0, 1684.8969,-1343.3191,17.4355)) //Entrada de Banco
	{
		SetPlayerPos(playerid,2935.3982,-1803.0120,1191.0657);
		SetPlayerInterior(playerid, 5);
		TogglePlayerControllable(playerid, 0);
		SetCameraBehindPlayer(playerid);
		SetTimerEx("Descongelar", 2000, false, "i", playerid);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.0, 2935.3982,-1803.0120,1191.0657)) //Salida de banco
	{
	    SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid,1684.8969,-1343.3191,17.4355);
		SetPlayerInterior(playerid, 0);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1555.1526,-1675.6384,16.1953)) //Entrada de LSPD
	{
		SetPlayerPos(playerid,1550.5697,-1255.9052,8606.0859);
		SetPlayerInterior(playerid, 5);
		TogglePlayerControllable(playerid, 0);
		SetCameraBehindPlayer(playerid);
		SetTimerEx("Descongelar", 2000, false, "i", playerid);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1550.5697,-1255.9052,8606.0859)) //Salida de LSPD
	{
	    SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid,1555.1526,-1675.6384,16.1953);
		SetPlayerInterior(playerid, 0);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1525.2449,-1677.8851,5.8906)) // Armeria exterior
	{
	    SetPlayerPos(playerid,316.3823,-169.1238,999.5938);
	    SetPlayerFacingAngle(playerid, 360);
	    TogglePlayerControllable(playerid, 0);
	    SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid, 6);
		SetTimerEx("Descongelar", 2000, false, "i", playerid);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 316.3823,-169.1238,999.5938)) // Armeria interior
	{
	    SetPlayerPos(playerid,1525.2449,-1677.8851,5.8906);
	    SetPlayerFacingAngle(playerid, 360);
	    TogglePlayerControllable(playerid, 0);
	    SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid, 0);
		SetTimerEx("Descongelar", 2000, false, "i", playerid);
	}
	else if(EnAscensorPD(playerid))
	{ // Ascensor
		new string[128], dialog[1024];
	    format(string, sizeof(string), "\nComisaría");
		strcat(dialog, string);
		format(string, sizeof(string), "\nGarage -1");
		strcat(dialog, string);
		format(string, sizeof(string), "\nGarage -2");
		strcat(dialog, string);
		format(string, sizeof(string), "\nHelipuerto");
		strcat(dialog, string);
		ShowPlayerDialog(playerid, 1, DIALOG_STYLE_LIST, "Ascensor", dialog, "Entrar", "Salir");
	}
	
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1716.0415,-1107.6191,24.0781)) //Entrada de heli LSFD
	{
		if(JugadorInfo[playerid][pFaccion] == 1 || JugadorInfo[playerid][pFaccion] == 2)
		{
			SetCameraBehindPlayer(playerid);
			SetPlayerPos(playerid,1751.8625,-1120.7828,46.5746);
			TogglePlayerControllable(playerid, 0);
			SetTimerEx("Descongelar", 2000, false, "i", playerid);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1751.8625,-1120.7828,46.5746)) //Salida de heli LSFD
	{
		SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid,1716.0415,-1107.6191,24.0781);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("Descongelar", 2000, false, "i", playerid);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1705.7666,-1101.0613,24.0781)) //Abajo de LSFD
	{
		SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid,1751.5073,-1128.4902,46.5746);
		SetPlayerInterior(playerid, 0);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1751.5073,-1128.4902,46.5746)) //Arriba de LSFD
	{
		SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid,1705.7666,-1101.0613,24.0781);
		SetPlayerInterior(playerid, 0);
	}
	
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1582.0264, -1674.8207, 5.8945)) //2ª planta parking LSPD
	{
        if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
		SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid,-1609.3883, 729.6197, -5.2422);
		SetPlayerFacingAngle(playerid, 0);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, -1609.3883, 729.6197, -5.2422)) //1ª planta parking LSPD
	{
		SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid,1582.0264, -1674.8207, 5.8945);
		SetPlayerFacingAngle(playerid, 270);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 270.3885,113.4809,1004.6172)) //Entrada armería comisaría LSPD
	{
        if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
		SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid,221.1510,79.8274,1005.0391);
		SetPlayerInterior(playerid, 6);
		SetPlayerFacingAngle(playerid, 90);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 221.1510,79.8274,1005.0391)) //Salida armería comisaría LSPD
	{
		SetPlayerPos(playerid,270.3885,113.4809,1004.6172);
		SetCameraBehindPlayer(playerid);
		SetPlayerInterior(playerid, 10);
		SetPlayerFacingAngle(playerid, 0);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 238.4005,114.8457,1010.2188)) //Salida azotea comisaría LSPD
	{
        if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
		SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid,1573.0088,-1670.1738,28.3956);
		SetPlayerInterior(playerid, 0);
		SetPlayerFacingAngle(playerid, 270);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1573.0088,-1670.1738,28.3956)) //Entrada azotea comisaría LSPD
	{
		SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid,238.4005,114.8457,1010.2188);
		SetPlayerInterior(playerid, 10);
		SetPlayerFacingAngle(playerid, 90);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1525.1538,-1677.8840,5.8906) || IsPlayerInRangeOfPoint(playerid, 1.0, -1606.3339,672.5668,-5.2422)) //Entradas cárcel comisaría LSPD
	{
		SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid,218.8535,121.0664,999.0156);
		SetPlayerInterior(playerid, 10);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerFacingAngle(playerid, 90);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 217.7758,117.4122,999.0216)) //Entrada celdas comisaría LSPD
	{
		SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid,249.0331,86.8339,1003.3804);
		SetPlayerInterior(playerid, 6);
		SetPlayerVirtualWorld(playerid, 1);
		SetPlayerFacingAngle(playerid, 270);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 249.0331,86.8339,1003.3804)) //Salida celdas comisaría LSPD
	{
		SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid,217.7758,117.4122,999.0216);
		SetPlayerInterior(playerid, 10);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerFacingAngle(playerid, 0);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1481.0206,-1771.1138,18.7958)) //Ayuntamiento entrada
	{
		SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid, 390.1899,173.7861,1008.3828);
		SetPlayerInterior(playerid, 3);
		SetPlayerFacingAngle(playerid, 90);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 390.1899,173.7861,1008.3828)) //Ayuntamiento salida
	{
		SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid, 1481.0206,-1771.1138,18.7958);
		SetPlayerInterior(playerid, 0);
		SetPlayerFacingAngle(playerid, 0);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 366.64654541016,158.77993774414,1008.3828125)) //Entrada garaje ayuntamiento
    {
        if(JugadorInfo[playerid][pFaccion] == 0 || JugadorInfo[playerid][pFaccion] > 3){SendClientMessage(playerid,COLOR_ROJO,"Acceso restringido."); return 1;}
 		SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid, 1437.2343,-1786.3534,33.4297);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 180);
    }
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1437.2343,-1786.3534,33.4297)) //Salida garaje ayuntamiento
    {
	    if(JugadorInfo[playerid][pFaccion] == 0 || JugadorInfo[playerid][pFaccion] > 3){SendClientMessage(playerid,COLOR_ROJO,"Acceso restringido."); return 1;}
 	  	SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid, 366.64654541016,158.77993774414,1008.3828125);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 0);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2045.6418,-1908.1290,13.5469)) //Entrada autoescuela Willowfield
	{
		SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid, -2026.8535,-104.0617,1035.1719);
		SetPlayerInterior(playerid,3);
		SetPlayerFacingAngle(playerid, 180);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, -2026.8535,-104.0617,1035.1719)) //Salida autoescuela Willowfield
	{
		SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid, 2045.6418,-1908.1290,13.5469);
		SetPlayerInterior(playerid,0);
		SetPlayerFacingAngle(playerid, 270);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1726.8964,-1636.7064,20.2172)) //Entrada Hotel Commerce
	{
	    SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid, 1726.9388,-1638.4977,20.2233);
		SetPlayerInterior(playerid,18);
		SetPlayerVirtualWorld(playerid,1);
		SetPlayerFacingAngle(playerid, 180);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1726.9388,-1638.4977,20.2233)) //Salida Hotel Commerce
	{
	    SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid, 1726.8964,-1636.7064,20.2172);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 360);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2232.6450,-1159.8384,25.8906)) //Entrada Motel Jefferson
	{
	    SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid, 2215.0349,-1150.5457,1025.7969);
		SetPlayerInterior(playerid,15);
		SetPlayerVirtualWorld(playerid,1);
		SetPlayerFacingAngle(playerid, 270);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2215.0349,-1150.5457,1025.7969)) //Salida Motel Jefferson
	{
	    SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid, 2232.6450,-1159.8384,25.8906);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 90);
	}
	
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1784.8442,-1539.6187,9.7870)) //Entrada Prisión Federal
	{
	    SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid, 2524.8838,-1280.8079,1048.2891);
		SetPlayerInterior(playerid,2);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 270);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2524.8838,-1280.8079,1048.2891)) //Salida Prisión Federal
	{
	    SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid, 1784.8442,-1539.6187,9.7870);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 270);
	}
	
	
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1797.9216,-1578.7523,14.0898)) //Entrada Prisión Federal
	{
	    SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid, 2523.4546,-1301.8833,1048.2891);
		SetPlayerInterior(playerid,2);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 270);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2523.4546,-1301.8833,1048.2891)) //Salida Prisión Federal
	{
	    SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid, 1797.9216,-1578.7523,14.0898);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 270);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2576.7878,-1289.9611,1044.1250)) //Entrada Patio Prisión Federal
	{
	    SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid, 1772.0688,-1548.1400,9.9063);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 90);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1772.0688,-1548.1400,9.9063)) //Salida Patio Prisión Federal
	{
	    SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid, 2576.7878,-1289.9611,1044.1250);
		SetPlayerInterior(playerid,2);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 90);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2233.1997,-1333.3169,23.9816)) //Entrada Iglesia Jefferson
	{
	    SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("Descongelar", 2000, false, "i", playerid);
	    SetPlayerPos(playerid, 1964.0940,-350.2319,1092.9454);
		SetPlayerInterior(playerid,1);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 180);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1964.0940,-350.2319,1092.9454)) //Salida Iglesia Jefferson
	{
	    SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid, 2233.1997,-1333.3169,23.9816);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 90);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1571.1857,-1336.7592,16.4844)) //Entrada LSRTV
	{
	    SetCameraBehindPlayer(playerid);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("Descongelar", 2000, false, "i", playerid);
	    SetPlayerPos(playerid, 1038.7687,51.4474,801.0356);
		SetPlayerInterior(playerid,1);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 264);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, 1038.7687,51.4474,801.0356)) //Salida LSRTV
	{
	    SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid, 1571.1857,-1336.7592,16.4844);
		SetPlayerInterior(playerid,0);
		SetPlayerVirtualWorld(playerid,0);
		SetPlayerFacingAngle(playerid, 136);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2529.6387,-1281.9346,1048.2891)) //Puerta oficina - prisión
	{
        if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
		SetPlayerPos(playerid,2532.1252,-1281.9380,1048.2891);
		SetPlayerFacingAngle(playerid, 270);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 2532.1252,-1281.9380,1048.2891)) //Puerta prisión oficina
	{
	    if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
		SetPlayerPos(playerid,2529.6387,-1281.9346,1048.2891);
		SetPlayerFacingAngle(playerid, 90);
	}
	
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1771.8159,-1099.0328,24.0781)) //Central LSFD - Entrada
	{
		SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid,1774.0291,-1106.4480,1024.1171);
		SetPlayerInterior(playerid, 5);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1774.0291,-1106.4480,1024.1171)) //Central LSFD - Interior
	{
		SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid,1771.8159,-1099.0328,24.0781);
		SetPlayerInterior(playerid, 0);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 1.0, 1172.7678,-1323.3112,15.4009)) //Central LSFD - Entrada
	{
		SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid,-346.8302,143.9234,1035.1298);
		SetPlayerFacingAngle(playerid, 90);
		SetPlayerInterior(playerid, 5);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 3.0, -346.8302,143.9234,1035.1298)) //Central LSFD - Interior
	{
		SetCameraBehindPlayer(playerid);
		SetPlayerPos(playerid,1172.7678,-1323.3112,15.4009);
		SetPlayerFacingAngle(playerid, 270);
		SetPlayerInterior(playerid, 0);
	}
    return 1;
}

stock IsVehicleInRangeOfPoint(Float:radi, vehicleid, Float:x, Float:y, Float:z) //Si un vehículo está cerca de un punto
{
        new Float:oldposx, Float:oldposy, Float:oldposz;
        new Float:tempposx, Float:tempposy, Float:tempposz;
        GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
        tempposx = (oldposx -x);
        tempposy = (oldposy -y);
        tempposz = (oldposz -z);
        if(((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
        {
                return 1;
        }
        return 0;
}

forward AbrirPuerta(playerid); //Abre puertas scripteadas
public AbrirPuerta(playerid)
{
	if(JugadorInfo[playerid][pFaccion] == 1) //LSPD
	{
	    if(IsPlayerInRangeOfPoint(playerid, 15.0, 1544.6999500,-1630.8000500,13.3000000) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) //Barra elevadora LSPD
		{
	    	SetDynamicObjectRot(lspdpuerta1, 0.0, 10.0, 90.0);
	    	SetTimerEx("CerrarPuerta",4000,0,"p",lspdpuerta1);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 12.0, 1589.0595700,-1638.1992200,14.0300000) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) //Valla parking LSPD
		{
	    	MoveDynamicObject(lspdpuerta2, 1595.9589800,-1638.1992200,14.0300000, 2.0);
	    	SetTimerEx("CerrarPuerta",4000,0,"p",lspdpuerta2);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 1582.6169400,-1637.9000200,13.5400000) && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) //Puerta parking LSPD
		{
	    	SetDynamicObjectRot(lspdpuerta3, 0.0000000,0.0000000,102.0000000);
	    	SetTimerEx("CerrarPuerta",4000,0,"p",lspdpuerta3);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 213.8999900,124.9300000,1000.6500200)) //Puerta cárcel comisaria
		{
	    	MoveDynamicObject(lspdpuerta4, 215.5000000,124.9296900,1000.6500200, 2.0);
	    	SetTimerEx("CerrarPuerta",4000,0,"p",lspdpuerta4);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 253.1992200,109.8193400,1003.5000000)) //Puerta comisaria 1
		{
	    	MoveDynamicObject(lspdpuerta5, 253.1992200,111.0000000,1003.5000000, 2.0);
	    	SetTimerEx("CerrarPuerta",4000,0,"p",lspdpuerta5);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 2.0, 239.5996100,118.3496100,1003.5000000)) //Puerta comisaria 2
		{
	    	MoveDynamicObject(lspdpuerta6, 239.5996100,119.5306000,1003.5000000, 2.0);
	    	SetTimerEx("CerrarPuerta",4000,0,"p",lspdpuerta6);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 3.0, 258.89999390,91.50000000,1004.09997559)) //Puerta celdas comisaría LSPD
        {
			MoveDynamicObject(lspdpuerta7, 258.89999390,90.00000000,1004.09997559, 2.0);
			SetTimerEx("CerrarPuerta",4000,0,"p",lspdpuerta7);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2527.2000000,-1294.1300000,1049.9000000)) //Puerta prisión
        {
            MoveDynamicObject(puertaprision, 2528.8000000,-1294.1299000,1049.9000000, 2.0);
			SetTimerEx("CerrarPuerta",4000,0,"p",puertaprision);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 3.0, 2533.3999000,-1283.8000000,1049.9000000)) //Puerta prisión 2
        {
            MoveDynamicObject(puertaprision2, 2533.1001000,-1283.8740000,1049.9000000, 2.0);
			SetTimerEx("CerrarPuerta",3000,0,"p",puertaprision2);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.5, 1554.3333,-1252.8975,8606.0859)) //Puerta LSPD interior 1
        {
            MoveDynamicObject(lspdpuertaint1, 1552.12793, -1252.49023, 8605.08691, 2.0);
			SetTimerEx("CerrarPuerta",2500,0,"p",lspdpuertaint1);
        }
        else if(IsPlayerInRangeOfPoint(playerid, 2.5, 1554.3594,-1258.8239,8606.0859)) //Puerta LSPD interior 2
        {
            MoveDynamicObject(lspdpuertaint2, 1552.12793, -1259.23694, 8605.08691, 2.0);
			SetTimerEx("CerrarPuerta",2500,0,"p",lspdpuertaint2);
        }
	}
	if(JugadorInfo[playerid][pFaccion] == 4) //LSN
	{
	    if(IsPlayerInRangeOfPoint(playerid, 8.0, 781.8000000,-1384.8000000,12.7000000)) //Puerta LSN sur
		{
	    	MoveDynamicObject(LSNpuerta1, 775.0000000,-1384.8300000,12.7000000, 2.0);
	    	SetTimerEx("CerrarPuerta",5000,0,"p",LSNpuerta1);
		}
		else if(IsPlayerInRangeOfPoint(playerid, 8.0, 781.8000000,-1330.3000000,12.7000000)) //Puerta LSN norte
        {
			MoveDynamicObject(LSNpuerta2, 775.0000000,-1330.1600000,12.7000000, 2.0);
			SetTimerEx("CerrarPuerta",5000,0,"p",LSNpuerta2);
        }
	}
    return 1;
}
forward CerrarPrision(); //Cierra puertas scripteadas
public CerrarPrision()
{
	MoveObject(LSPrisonGatesObject[0], 1824.318481, -1534.731201, 14.296878 - 0.01, 0.025, 0, 0, 343);
	MoveObject(LSPrisonGatesObject[1], 1822.407592, -1540.949951, 14.296878 - 0.01, 0.025, 0, 0, 163);
	EasternGatesStatus = GATES_CLOSING;
	return 1;
}

forward CerrarAeropuerto(); //Cierra puertas scripteadas
public CerrarAeropuerto()
{
	MoveDynamicObject(PuertaAero[0], 1958.78625, -2189.82690, 13.54420, 1.75);
	MoveDynamicObject(PuertaAero[1], 1964.28125, -2189.82690, 13.54420, 1.75);
	return 1;
}

forward CerrarPuerta(puerta); //Cierra puertas scripteadas
public CerrarPuerta(puerta)
{
    if(puerta == lspdpuerta1){SetDynamicObjectRot(lspdpuerta1, 0.0, 90.0, 90.0);}
	else if(puerta == lspdpuerta2){MoveDynamicObject(lspdpuerta2, 1589.0595700,-1638.1992200,14.0300000, 2.0);}
	else if(puerta == lspdpuerta3){SetDynamicObjectRot(lspdpuerta3, 0.0000000,0.0000000,0.0000000);}
	else if(puerta == lspdpuerta4){MoveDynamicObject(lspdpuerta4, 213.8999900,124.9300000,1000.6500200, 2.0);}
	else if(puerta == lspdpuerta5){MoveDynamicObject(lspdpuerta5, 253.1992200,109.8193400,1003.5000000, 2.0);}
	else if(puerta == lspdpuerta6){MoveDynamicObject(lspdpuerta6, 239.5996100,118.3496100,1003.5000000, 2.0);}
	else if(puerta == lspdpuerta7){MoveDynamicObject(lspdpuerta7, 258.89999390,91.50000000,1004.09997559, 2.0);}
	else if(puerta == Celda1){MoveDynamicObject(Celda1, 266.25, 78.46, 1001.29, 3.0);}
	else if(puerta == Celda2){MoveDynamicObject(Celda2, 266.25, 82.95, 1001.29, 3.0);}
	else if(puerta == Celda3){MoveDynamicObject(Celda3, 266.25, 87.46, 1001.29, 3.0);}
	else if(puerta == lspddeposito){MoveDynamicObject(lspddeposito, 1620.6500244,-1861.5996094,15.3000002,2.5);}
	else if(puerta == puertaprision){MoveDynamicObject(puertaprision, 2527.2000000,-1294.1300000,1049.9000000,2.0);}
	else if(puerta == puertaprision2){MoveDynamicObject(puertaprision2, 2531.7000000,-1283.8740000,1049.9000000,2.0);}
	else if(puerta == puertaceldaprision1){SetDynamicObjectRot(puertaceldaprision1, 0.0, 0.0, 0.0);}
	else if(puerta == puertaceldaprision2){SetDynamicObjectRot(puertaceldaprision2, 0.0, 0.0, 0.0);}
	else if(puerta == puertaceldaprision3){SetDynamicObjectRot(puertaceldaprision3, 0.0, 0.0, 0.0);}
	else if(puerta == puertaceldaprision4){SetDynamicObjectRot(puertaceldaprision4, 0.0, 0.0, 0.0);}
	else if(puerta == puertaceldaprision5){SetDynamicObjectRot(puertaceldaprision5, 0.0, 0.0, 0.0);}
	else if(puerta == puertaceldaprision6){SetDynamicObjectRot(puertaceldaprision6, 0.0, 0.0, 0.0);}
	else if(puerta == puertaceldaprision7){SetDynamicObjectRot(puertaceldaprision7, 0.0, 0.0, 0.0);}
	else if(puerta == puertaceldaprision8){SetDynamicObjectRot(puertaceldaprision8, 0.0, 0.0, 0.0);}
	else if(puerta == puertaceldaprision9){SetDynamicObjectRot(puertaceldaprision9, 0.0, 0.0, 180.0);}
	else if(puerta == puertaceldaprision10){SetDynamicObjectRot(puertaceldaprision10, 0.0, 0.0, 180.0);}
	else if(puerta == puertaceldaprision11){SetDynamicObjectRot(puertaceldaprision11, 0.0, 0.0, 180.0);}
	else if(puerta == puertaceldaprision12){SetDynamicObjectRot(puertaceldaprision12, 0.0, 0.0, 180.0);}
	else if(puerta == puertaceldaprision13){SetDynamicObjectRot(puertaceldaprision13, 0.0, 0.0, 180.0);}
	else if(puerta == puertaceldaprision14){SetDynamicObjectRot(puertaceldaprision14, 0.0, 0.0, 180.0);}
	else if(puerta == puertaceldaprision15){SetDynamicObjectRot(puertaceldaprision15, 0.0, 0.0, 180.0);}
	else if(puerta == LSNpuerta1){MoveDynamicObject(LSNpuerta1, 781.8000000,-1384.8000000,12.7000000, 2.0);}
	else if(puerta == LSNpuerta2){MoveDynamicObject(LSNpuerta2, 781.8000000,-1330.3000000,12.7000000, 2.0);}
    else if(puerta == lspdpuertaint1){MoveDynamicObject(lspdpuertaint1, 1553.60791, -1252.49023, 8605.08691, 2.0);}
    else if(puerta == lspdpuertaint2){MoveDynamicObject(lspdpuertaint2, 1553.60791, -1259.23694, 8605.08691, 2.0);}
	return 1;
}

forward MostrarHeridas(playerid, targetid);
public MostrarHeridas(playerid, targetid)
{
	new dialog[1024], string[128];
	strcat(dialog, "Descripción\t\tCalibre\n");
	for(new hit = 0; hit < MAX_HERIDAS; hit++)
	{
		if(HeridasInfo[targetid][pHerida][hit] > 0)
	    {
			format(string, sizeof(string), "\n%d disparo(s) en %s\t\t%s", HeridasInfo[targetid][pHerida][hit], BodyName(HeridasInfo[targetid][pBody][hit]), AmmoName(HeridasInfo[targetid][pCalibre][hit]));
			strcat(dialog, string);
  		}
	}
	if(HeridasInfo[targetid][pGolpeado] > 0 || HeridasInfo[targetid][pCortado] > 0) // Evita que se mezclen las balas y las heridas
	{
		strcat(dialog, "\n---");
		switch(HeridasInfo[targetid][pGolpeado])
		{
		    case 3..9: strcat(dialog,    "\nPequeños y simples moretones.");
			case 10..100: strcat(dialog, "\nGrandes y numerosos moretones.");
		}
		switch(HeridasInfo[targetid][pCortado])
		{
			case 1..3: strcat(dialog,   "\nAlgunos cortes superficiales simples.");
			case 4..6: strcat(dialog,   "\nAlgunos cortes abiertos simples.");
			case 7..100: strcat(dialog, "\nVarios cortes abiertos simples y profundos.");
		}
	}
	new titulo[128]; format(titulo, 128, "Heridas de %s", NombreJugador(targetid));
    ShowPlayerDialog(playerid, 32, DIALOG_STYLE_TABLIST_HEADERS, titulo, dialog, "Cerrar", "");
    return 1;
}

stock BodyName(bodypart)
{
	new bodyname[128];
	switch(bodypart)
	{
	    case 3: format(bodyname, 128, "torso");
	    case 4: format(bodyname, 128, "entrepierna");
	    case 5: format(bodyname, 128, "brazo izquierdo");
	    case 6: format(bodyname, 128, "brazo derecho");
	    case 7: format(bodyname, 128, "pierna izquierda");
	    case 8: format(bodyname, 128, "pierna derecha");
	    case 9: format(bodyname, 128, "cabeza");
	}
	return bodyname;
}

stock AmmoName(weaponid)
{
	new calibre[128];
	switch(weaponid)
	{
	    case 22: format(calibre, 128, ".45 ACP");
     	case 23: format(calibre, 128, ".45 ACP");
	    case 24: format(calibre, 128, ".50 AE");
	    case 28: format(calibre, 128, ".45 ACP");
	    case 32: format(calibre, 128, ".45 ACP");
	    case 31: format(calibre, 128, "5.56x45 OTAN");
	    case 30: format(calibre, 128, ".22 LR");
	    case 29: format(calibre, 128, ".40 SW");
	    case 25: format(calibre, 128, "12 GA");
	    case 33: format(calibre, 128, "12.7x99 mm");
	    case 34: format(calibre, 128, "12.7x99 mm");
	}
	return calibre;
}

//______________________________________________________________________

forward MostrarInformes(playerid); //Muestra inventario al jugador
public MostrarInformes(playerid)
{
	new dialog[1024], string[256], estado[40];
	strcat(dialog, "Descripción\t\tID");
	for(new i = 0; i < MAX_INFORMES; i++)
	{
	    if(Informes[i][iEstado] == 1)
		{
			format(estado, 128, "(sin atender.)", i);
		}
		else if(Informes[i][iEstado] == 2)
		{
			format(estado, 128, "(atendido.)", i);
		}
		new Informe = Informes[i][iEstado];
		if(Informe == 0){format(string, sizeof(string), "\n-\t\t-");}
		else{format(string, sizeof(string), "\nHerido %s\t\t%d", estado, i);}
		strcat(dialog, string);
	}
	ShowPlayerDialog(playerid, 33, DIALOG_STYLE_TABLIST_HEADERS, "Informes", dialog, "Aceptar", "");
    return 1;
}
//------------------------------------------------------------------------------
forward VerCinturon(playerid); //Muestra cinturón al jugador
public VerCinturon(playerid)
{
    ActualizarManos(playerid);
    new dialog[1024], string[128];
	for(new x = 0; x<MAX_SLOTS_CT; x++)
	{
		new Bol = JugadorInfo[playerid][pCint][x];
		if(Bol == 0){format(string, sizeof(string), "\n[%d] Libre", x);}
		else{format(string, sizeof(string), "\n[%d] %s (%d)", x, ObjetoInfo[Bol][NombreObjeto], JugadorInfo[playerid][pCintCant][x]);}
		strcat(dialog, string);
	}
	ShowPlayerDialog(playerid, 3, DIALOG_STYLE_LIST, "Cinturón táctico", dialog, "Sacar", "Salir");
	return 1;
}

forward SacarCinturon(playerid, id); //Saca un objeto del bolsillo
public SacarCinturon(playerid, id)
{
	new string[128];
    ActualizarManos(playerid);
    new Bol = JugadorInfo[playerid][pCint][id];
	new Cant = JugadorInfo[playerid][pCintCant][id];
	if(Bol == 0){return 1;}
    if(JugadorInfo[playerid][pManoDer] == 0) //Si la mano derecha está libre
    {
   	    if(ObjetoInfo[Bol][IDArma] > 0) //Es un arma
		{
			new arma = ObjetoInfo[Bol][IDArma], municion = Cant;
			if(municion > 0){GivePlayerWeapon(playerid, arma, municion);} //Si tiene munición, dar el arma.
			BalasActual[playerid] = GetPlayerAmmo(playerid);
		}
		JugadorInfo[playerid][pManoDer] = Bol;
		JugadorInfo[playerid][pManoDerCant] = Cant;
		PonerObjeto(playerid, 1, Bol);
		JugadorInfo[playerid][pCint][id] = 0;
		JugadorInfo[playerid][pCintCant][id] = 0;
		format(string, sizeof(string), "¡Desenfundas tu %s del cinturón táctico!", ObjetoInfo[Bol][NombreObjeto]);
		SendClientMessage(playerid, COLOR_GREEN2, string);
        return 1;
	}
	else
	{
		format(string, sizeof(string), "Ya tienes %s en mano.", ObjetoInfo[JugadorInfo[playerid][pManoDer]][NombreObjeto]);
		SendClientMessage(playerid, COLOR_PIEL, string);
	}
	return 1;
}

forward GuardarCinturon(playerid, mano); //Guardar un objeto en el bolsillo
public GuardarCinturon(playerid, mano)
{
    ActualizarManos(playerid);
    if(mano == 1)
    {
		if(JugadorInfo[playerid][pManoDer] == 0){SendClientMessage(playerid, Rojo, "Tu mano derecha está vacía."); return 1;}
		new ManoDer = JugadorInfo[playerid][pManoDer];
		if(ManoDer == 39 || ManoDer == 40 ||ManoDer == 38 || ManoDer == 34 || ManoDer == 3 || ManoDer == 4 || ManoDer == 174 || ManoDer == 175)
		{
			new Mano = JugadorInfo[playerid][pManoDer];
			new Cant = JugadorInfo[playerid][pManoDerCant];
			if(ObjetoInfo[Mano][Guardable] == 0 || ObjetoInfo[Mano][Guardable] == 2){SendClientMessage(playerid, COLOR_ROJO, "¡Objeto demasiado voluminoso para meter en un cinturón!"); return 1;}
	        new string[128];
	        new BolsilloLibre;
			for(new x = 0; x<MAX_SLOTS_CT; x++) //Coloca el objeto en el primer cinturón/funda libre que encuentra
			{
				if(JugadorInfo[playerid][pCint][x] == 0)
				{
				    ResetPlayerWeapons(playerid);
				    RemovePlayerAttachedObject(playerid, 1);
				    format(string, sizeof(string), "¡Enfundas tu %s en el cinturón táctico!", ObjetoInfo[Mano][NombreObjeto]);
	                SendClientMessage(playerid, COLOR_GREEN2, string);
				    BolsilloLibre = 1;
				    JugadorInfo[playerid][pCint][x] = Mano;
				    JugadorInfo[playerid][pCintCant][x] = Cant;
				    JugadorInfo[playerid][pManoDer] = 0;
				    JugadorInfo[playerid][pManoDerCant] = 0;
	                BalasActual[playerid] = 0;
				    return 1;
				}
			}
			if(BolsilloLibre == 0){SendClientMessage(playerid, COLOR_ROJO, "No hay fundas disponibles en tu cinturón"); return 1;}
		}
		else { return SendClientMessage(playerid, COLOR_ROJO, "No puedes guardar esto en tu cinturón táctico"), 1; }
	}
	return 1;
}
//------------------------------------------------------------------------------
forward MostrarBolsillos(playerid); //Muestra inventario al jugador
public MostrarBolsillos(playerid)
{
    ActualizarManos(playerid);
    new dialog[1024], string[128];
	for(new x = 0; x<MAX_SLOTS_INV; x++)
	{
		new Bol = JugadorInfo[playerid][pBol][x];
		if(Bol == 0){format(string, sizeof(string), "\n{AFAFAF}[%d] Vacío", x);}
		else if(Bol == 176){format(string, sizeof(string), "\n[%d] %s (%d$)", x, ObjetoInfo[Bol][NombreObjeto], JugadorInfo[playerid][pBolCant][x]);}
		else{format(string, sizeof(string), "\n[%d] %s (%d)", x, ObjetoInfo[Bol][NombreObjeto], JugadorInfo[playerid][pBolCant][x]);}
		strcat(dialog, string);
	}
	strcat(dialog, "\n---");
	if(JugadorInfo[playerid][pManoDer] != 0)
	{
	    if(JugadorInfo[playerid][pManoDer] == 176){format(string, sizeof(string), "\nMano D: %s (%d$)", ObjetoInfo[JugadorInfo[playerid][pManoDer]][NombreObjeto], JugadorInfo[playerid][pManoDerCant]);}
		else{format(string, sizeof(string), "\nMano D: %s (%d)", ObjetoInfo[JugadorInfo[playerid][pManoDer]][NombreObjeto], JugadorInfo[playerid][pManoDerCant]);}
		strcat(dialog, string);
	}
	if(JugadorInfo[playerid][pManoIzq] != 0)
	{
	    if(JugadorInfo[playerid][pManoIzq] == 176){format(string, sizeof(string), "\nMano I: %s (%d$)", ObjetoInfo[JugadorInfo[playerid][pManoIzq]][NombreObjeto], JugadorInfo[playerid][pManoIzqCant]);}
		else{format(string, sizeof(string), "\nMano I: %s (%d)", ObjetoInfo[JugadorInfo[playerid][pManoIzq]][NombreObjeto], JugadorInfo[playerid][pManoIzqCant]);}
		strcat(dialog, string);
	}
	ShowPlayerDialog(playerid, 2, DIALOG_STYLE_LIST, "Bolsillos", dialog, "Sacar", "Salir");
	return 1;
}

forward SacarBolsillo(playerid, id); //Saca un objeto del bolsillo
public SacarBolsillo(playerid, id)
{
	new string[128];
    ActualizarManos(playerid);
    new Bol = JugadorInfo[playerid][pBol][id];
	new Cant = JugadorInfo[playerid][pBolCant][id];
	if(Bol == 0){return 1;}
    if(JugadorInfo[playerid][pManoDer] == 0) //Si la mano derecha está libre
    {
   	    if(ObjetoInfo[Bol][IDArma] > 0) //Es un arma
		{
		    //new string2[128]; format(string2, 128, "saca un/a %s de sus bolsillos.", ObjetoInfo[Bol][NombreObjeto]);
			//AutoRol(playerid, string2);
			new arma = ObjetoInfo[Bol][IDArma], municion = Cant;
			if(municion > 0){GivePlayerWeapon(playerid, arma, municion);} //Si tiene munición, dar el arma.
			BalasActual[playerid] = GetPlayerAmmo(playerid);
		}
		JugadorInfo[playerid][pManoDer] = Bol;
		JugadorInfo[playerid][pManoDerCant] = Cant;
		PonerObjeto(playerid, 1, Bol);
		JugadorInfo[playerid][pBol][id] = 0;
		JugadorInfo[playerid][pBolCant][id] = 0;
		format(string, sizeof(string), "Sacas tu %s y %s sostienes en tu mano derecha.", ObjetoInfo[Bol][NombreObjeto], ObjetoInfo[Bol][Conector]);
		SendClientMessage(playerid, COLOR_GREEN, string);
        return 1;
	}
	else
	{
		format(string, sizeof(string), "Ya tienes %s en mano.", ObjetoInfo[JugadorInfo[playerid][pManoDer]][NombreObjeto]);
		SendClientMessage(playerid, COLOR_PIEL, string);
	}
	return 1;
}
forward AcomodarBolsillo(playerid, x);
public AcomodarBolsillo(playerid, x)
{
    if(JugadorInfo[playerid][pManoDer] == 0){SendClientMessage(playerid, Rojo, "Tu mano derecha está vacía."); return 1;}
	new Mano = JugadorInfo[playerid][pManoDer];
	new Cant = JugadorInfo[playerid][pManoDerCant];
	if(ObjetoInfo[Mano][Guardable] == 0 || ObjetoInfo[Mano][Guardable] == 2){SendClientMessage(playerid, COLOR_ROJO, "¡Objeto demasiado voluminoso para meter en un bolsillo!"); return 1;}
    new string[128];
	if(JugadorInfo[playerid][pBol][x] == 0)
	{
	    ResetPlayerWeapons(playerid);
	    RemovePlayerAttachedObject(playerid, 1);
	    format(string, sizeof(string), "Guardas y acomodas tu %s", ObjetoInfo[Mano][NombreObjeto]);
        SendClientMessage(playerid, COLOR_GREEN2, string);
	    JugadorInfo[playerid][pBol][x] = Mano;
	    JugadorInfo[playerid][pBolCant][x] = Cant;
	    JugadorInfo[playerid][pManoDer] = 0;
	    JugadorInfo[playerid][pManoDerCant] = 0;
	    return 1;
	}
	else SendClientMessage(playerid, COLOR_ROJO, "El bolsillo seleccionado está ocupado, no puedes guardar algo allí.");
	return 1;
}
forward GuardarBolsillo(playerid, mano); //Guardar un objeto en el bolsillo
public GuardarBolsillo(playerid, mano)
{
    ActualizarManos(playerid);
    if(mano == 1)
    {
		if(JugadorInfo[playerid][pManoDer] == 0){SendClientMessage(playerid, Rojo, "Tu mano derecha está vacía."); return 1;}
		new Mano = JugadorInfo[playerid][pManoDer];
		new Cant = JugadorInfo[playerid][pManoDerCant];
		if(ObjetoInfo[Mano][Guardable] == 0 || ObjetoInfo[Mano][Guardable] == 2){SendClientMessage(playerid, COLOR_ROJO, "¡Objeto demasiado voluminoso para meter en un bolsillo!"); return 1;}
        new string[128];
        new BolsilloLibre;
		for(new x = 0; x<MAX_SLOTS_INV; x++) //Coloca el objeto en el primer bolsillo libre que encuentra
		{
			if(JugadorInfo[playerid][pBol][x] == 0)
			{
			    ResetPlayerWeapons(playerid);
			    RemovePlayerAttachedObject(playerid, 1);
			    format(string, sizeof(string), "Guardas tu %s", ObjetoInfo[Mano][NombreObjeto]);
                SendClientMessage(playerid, COLOR_GREEN, string);
			    BolsilloLibre = 1;
			    JugadorInfo[playerid][pBol][x] = Mano;
			    JugadorInfo[playerid][pBolCant][x] = Cant;
			    JugadorInfo[playerid][pManoDer] = 0;
			    JugadorInfo[playerid][pManoDerCant] = 0;
                BalasActual[playerid] = 0;
			    return 1;
			}
		}
		if(BolsilloLibre == 0){SendClientMessage(playerid, COLOR_ROJO, "Tus bolsillos están llenos."); return 1;}
	}
	return 1;
}
//----------Maleteros----------//
forward ColocarCaja(vehicleid, slot);
public ColocarCaja(vehicleid, slot)
{
	new M = GetVehicleModel(vehicleid);
	if(M == 600)
	{
	    if(slot == 0)
	    {
	        Cajas1[vehicleid] = CreateObject(1271,0,0,0,0,0,0,600);
			AttachObjectToVehicle(Cajas1[vehicleid], vehicleid, 0.339999, -1.029999, 0.184999, 0.000000, 0.000000, 0.000000);
		}
	    else if(slot == 1)
	    {
	        Cajas2[vehicleid] = CreateObject(1271,0,0,0,0,0,0,600);
			AttachObjectToVehicle(Cajas2[vehicleid], vehicleid, -0.359999, -1.034999, 0.184999, 0.000000, 0.000000, 0.000000);
		}
  		else if(slot == 2)
 	    {
	        Cajas3[vehicleid] = CreateObject(1271,0,0,0,0,0,0,600);
			AttachObjectToVehicle(Cajas3[vehicleid], vehicleid, -0.045000, -1.819998, 0.179999, 0.000000, 0.000000, 0.000000);
		}
	}
	if(M == 478)
	{
	    if(slot == 0)
	    {
	        Cajas1[vehicleid] = CreateObject(1271,0,0,0,0,0,0,600);
			AttachObjectToVehicle(Cajas1[vehicleid], vehicleid, 0.399999, -1.654998, 0.299999, 0.000000, 0.000000, 0.000000);
		}
	    else if(slot == 1)
	    {
	        Cajas2[vehicleid] = CreateObject(1271,0,0,0,0,0,0,600);
			AttachObjectToVehicle(Cajas2[vehicleid], vehicleid, -0.389999, -0.864999, 0.299999, 0.000000, 0.000000, 0.000000);
		}
  		else if(slot == 2)
 	    {
	        Cajas3[vehicleid] = CreateObject(1271,0,0,0,0,0,0,600);
			AttachObjectToVehicle(Cajas3[vehicleid], vehicleid, -0.389999, -1.654998, 0.299999, 0.000000, 0.000000, 0.000000);
		}
	}
	if(M == 543)
	{
	    if(slot == 0)
	    {
	        Cajas1[vehicleid] = CreateObject(1271,0,0,0,0,0,0,600);
			AttachObjectToVehicle(Cajas1[vehicleid], vehicleid, 0.389999, -0.934999, 0.234999, 0.000000, 0.000000, 0.000000);
		}
	    else if(slot == 1)
	    {
	        Cajas2[vehicleid] = CreateObject(1271,0,0,0,0,0,0,600);
			AttachObjectToVehicle(Cajas2[vehicleid], vehicleid, -0.344999, -0.934999, 0.234999, 0.000000, 0.000000, 0.000000);
		}
  		else if(slot == 2)
 	    {
	        Cajas3[vehicleid] = CreateObject(1271,0,0,0,0,0,0,600);
			AttachObjectToVehicle(Cajas3[vehicleid], vehicleid, -0.344999, -1.724998, 0.234999, 0.000000, 0.000000, 0.000000);
		}
		else if(slot == 3)
 	    {
	        Cajas4[vehicleid] = CreateObject(1271,0,0,0,0,0,0,600);
			AttachObjectToVehicle(Cajas4[vehicleid], vehicleid, 0.384999, -1.724998, 0.234999, 0.000000, 0.000000, 0.000000);
		}
	}
	if(M == 422)
	{
	    if(slot == 0)
	    {
	        Cajas1[vehicleid] = CreateObject(1271,0,0,0,0,0,0,600);
			AttachObjectToVehicle(Cajas1[vehicleid], vehicleid, 0.334999, -0.879999, 0.125000, 0.000000, 0.000000, 0.000000);
		}
	    else if(slot == 1)
	    {
	        Cajas2[vehicleid] = CreateObject(1271,0,0,0,0,0,0,600);
			AttachObjectToVehicle(Cajas2[vehicleid], vehicleid, -0.364999, -0.869999, 0.125000, 0.000000, 0.000000, 0.000000);
		}
  		else if(slot == 2)
 	    {
	        Cajas3[vehicleid] = CreateObject(1271,0,0,0,0,0,0,600);
			AttachObjectToVehicle(Cajas3[vehicleid], vehicleid, -0.349999, -1.654998, 0.125000, 0.000000, 0.000000, 0.000000);
		}
		else if(slot == 3)
 	    {
	        Cajas4[vehicleid] = CreateObject(1271,0,0,0,0,0,0,600);
			AttachObjectToVehicle(Cajas4[vehicleid], vehicleid, 0.334999, -1.659998, 0.125000, 0.000000, 0.000000, 0.000000);
		}
	}
	if(M == 554)
	{
	    if(slot == 0)
	    {
	        Cajas1[vehicleid] = CreateObject(1271,0,0,0,0,0,0,600);
			AttachObjectToVehicle(Cajas1[vehicleid], vehicleid, 0.669999, -1.104999, 0.299999, 0.000000, 0.000000, 0.000000);
		}
	    else if(slot == 1)
	    {
	        Cajas2[vehicleid] = CreateObject(1271,0,0,0,0,0,0,600);
			AttachObjectToVehicle(Cajas2[vehicleid], vehicleid, -0.040000, -1.109999, 0.304999, 0.000000, 0.000000, 0.000000);
		}
  		else if(slot == 2)
 	    {
	        Cajas3[vehicleid] = CreateObject(1271,0,0,0,0,0,0,600);
			AttachObjectToVehicle(Cajas3[vehicleid], vehicleid, -0.694999, -1.099999, 0.299999, 0.000000, 0.000000, 0.000000);
		}
		else if(slot == 3)
 	    {
	        Cajas4[vehicleid] = CreateObject(1271,0,0,0,0,0,0,600);
			AttachObjectToVehicle(Cajas4[vehicleid], vehicleid, -0.694999, -1.869998, 0.294999, 0.000000, 0.000000, 0.000000);
		}
		else if(slot == 4)
 	    {
	        Cajas5[vehicleid] = CreateObject(1271,0,0,0,0,0,0,600);
			AttachObjectToVehicle(Cajas5[vehicleid], vehicleid, 0.004999, -1.869998, 0.294999, 0.000000, 0.000000, 0.000000);
		}
		else if(slot == 5)
 	    {
	        Cajas6[vehicleid] = CreateObject(1271,0,0,0,0,0,0,600);
			AttachObjectToVehicle(Cajas6[vehicleid], vehicleid, 0.674999, -1.869998, 0.294999, 0.000000, 0.000000, 0.000000);
		}
	}
	return 1;
}

forward QuitarCaja(vehicleid, slot);
public QuitarCaja(vehicleid, slot)
{
	new M = GetVehicleModel(vehicleid);
	if(M == 600 || M == 478 || M == 543 || M == 422 || M == 554)
	{
	    if(slot == 0) { DestroyObject(Cajas1[vehicleid]); }
 		else if(slot == 1) { DestroyObject(Cajas2[vehicleid]); }
	    else if(slot == 2) { DestroyObject(Cajas3[vehicleid]); }
	    else if(slot == 3) { DestroyObject(Cajas4[vehicleid]); }
	    else if(slot == 4) { DestroyObject(Cajas5[vehicleid]); }
	    else if(slot == 5) { DestroyObject(Cajas6[vehicleid]); }
        return 1;
	}
	return 1;
}

//-----------------------------//
forward MostrarMaletero(playerid, vehicleid); //Muestra maletero de un vehículo al jugador
public MostrarMaletero(playerid, vehicleid)
{
    if(VehMaletero[vehicleid] == 0){return 1;}
    ActualizarManos(playerid);
    new nombre[128], string[128];
    format(nombre, 128, "[*] MALETERO: %s", GetVehicleName(vehicleid));
    SendClientMessage(playerid, Verde, nombre);
    for(new i = 0; i < CocheInfo[vehicleid][cMaxMaletero]; i++)
	{
		new Bonnet = CocheInfo[vehicleid][cMaletero][i];
		if(Bonnet != 0)
		{
			if(Bonnet == 176){format(string, sizeof(string), "Hueco %d: %s (%d$)", i+1, ObjetoInfo[Bonnet][NombreObjeto], CocheInfo[vehicleid][cMaleteroCant][i]);}
			else{format(string, sizeof(string), "Hueco %d: %s (%d uds.)", i+1, ObjetoInfo[Bonnet][NombreObjeto], CocheInfo[vehicleid][cMaleteroCant][i]);}
            SendClientMessage(playerid, COLOR_PIEL, string);
		}
	}
	SendClientMessage(playerid, Amarillo, "Comandos: /mal [coger/guardar/cerrar]");
	return 1;
}

forward SacarMaletero(playerid, vehicleid, id); //Saca un objeto de un maletero
public SacarMaletero(playerid, vehicleid, id)
{
    if(VehMaletero[vehicleid] == 0){return 1;}
    ActualizarManos(playerid);
    new Bonnet = CocheInfo[vehicleid][cMaletero][id];
	new Cant = CocheInfo[vehicleid][cMaleteroCant][id];
    if(Bonnet == 0){SendClientMessage(playerid, Rojo, "No hay nada en el hueco"); return 1;}
    if(JugadorInfo[playerid][pManoDer] == 0) //Si la mano derecha está libre
    {
   	    if(ObjetoInfo[Bonnet][IDArma] > 0) //Es un arma
		{
			new arma = ObjetoInfo[Bonnet][IDArma], municion = Cant;
			if(municion > 0){GivePlayerWeapon(playerid, arma, municion);} //Si tiene munición, dar el arma.
		}
		new string[128];
		if(Bonnet == 177){QuitarCaja(vehicleid, id);}
		JugadorInfo[playerid][pManoDer] = Bonnet;
		JugadorInfo[playerid][pManoDerCant] = Cant;
		PonerObjeto(playerid, 1, Bonnet);
		CocheInfo[vehicleid][cMaletero][id] = 0;
		CocheInfo[vehicleid][cMaleteroCant][id] = 0;
		format(string, sizeof(string), "¡Has cogido %s del maletero del %s!", ObjetoInfo[Bonnet][NombreObjeto], GetVehicleName(vehicleid));
		SendClientMessage(playerid, COLOR_GREEN2, string);
		VehMaleteroPlayer[playerid] = 0;
		if(JugadorInfo[playerid][pManoDer] == 177){SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);}
        return 1;
	}
	else { SendClientMessage(playerid, Rojo, "La mano derecha está ocupada."); }
	return 1;
}

forward GuardarMaletero(playerid, vehicleid, mano); //Guardar un objeto en el maletero de un vehículo
public GuardarMaletero(playerid, vehicleid, mano)
{
    if(VehMaletero[vehicleid] == 0){return 1;}
    ActualizarManos(playerid);
    new M = GetVehicleModel(vehicleid);

	if(mano == 1)
    {
        if(JugadorInfo[playerid][pManoDer] == 0){SendClientMessage(playerid, Rojo, "No tienes nada en tu mano derecha."); return 1;}
		new Mano = JugadorInfo[playerid][pManoDer];
		new Cant = JugadorInfo[playerid][pManoDerCant];
        if(ObjetoInfo[Mano][IDArma] > 0) //Guarda un arma
        {
			Cant = GetPlayerAmmo(playerid);
			RemovePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma]);
        }
        new string[128];
        new BonnetLibre;
		for(new x = 0; x < CocheInfo[vehicleid][cMaxMaletero]; x++)
		{
			if(CocheInfo[vehicleid][cMaletero][x] == 0)
			{
			    if(JugadorInfo[playerid][pManoDer] == 177 || JugadorInfo[playerid][pManoIzq] == 177)
				{
					if(M == 600 || M == 478 || M == 543 || M == 422 || M == 554 || M == 413 || M == 414 || M == 440 || M == 455 || M == 456 || M == 459 || M == 482 || M == 498 || M == 499 || M == 573 || M == 609 || M == 591)
					{
					    switch(M)
					    {
							case 600: { if(x > 2) {return SendClientMessage(playerid, Rojo, "No caben más cajas en el maletero del vehículo o no permite guardar cajas."), 1;} }
					    	case 478: { if(x > 2) {return SendClientMessage(playerid, Rojo, "No caben más cajas en el maletero del vehículo o no permite guardar cajas."), 1;} }
							case 543: { if(x > 3) {return SendClientMessage(playerid, Rojo, "No caben más cajas en el maletero del vehículo o no permite guardar cajas."), 1;} }
							case 422: { if(x > 3) {return SendClientMessage(playerid, Rojo, "No caben más cajas en el maletero del vehículo o no permite guardar cajas."), 1;} }
							case 554: { if(x > 5) {return SendClientMessage(playerid, Rojo, "No caben más cajas en el maletero del vehículo o no permite guardar cajas."), 1;} }
							case 413: { if(x > 5) {return SendClientMessage(playerid, Rojo, "No caben más cajas en el maletero del vehículo o no permite guardar cajas."), 1;} }
							case 414: { if(x > 6) {return SendClientMessage(playerid, Rojo, "No caben más cajas en el maletero del vehículo o no permite guardar cajas."), 1;} }
							case 440: { if(x > 5) {return SendClientMessage(playerid, Rojo, "No caben más cajas en el maletero del vehículo o no permite guardar cajas."), 1;} }
							case 442: { if(x > 3) {return SendClientMessage(playerid, Rojo, "No caben más cajas en el maletero del vehículo o no permite guardar cajas."), 1;} }
							case 455: { if(x > 9) {return SendClientMessage(playerid, Rojo, "No caben más cajas en el maletero del vehículo o no permite guardar cajas."), 1;} }
							case 456: { if(x > 7) {return SendClientMessage(playerid, Rojo, "No caben más cajas en el maletero del vehículo o no permite guardar cajas."), 1;} }
							case 459: { if(x > 4) {return SendClientMessage(playerid, Rojo, "No caben más cajas en el maletero del vehículo o no permite guardar cajas."), 1;} }
							case 482: { if(x > 4) {return SendClientMessage(playerid, Rojo, "No caben más cajas en el maletero del vehículo o no permite guardar cajas."), 1;} }
							case 498: { if(x > 9) {return SendClientMessage(playerid, Rojo, "No caben más cajas en el maletero del vehículo o no permite guardar cajas."), 1;} }
							case 499: { if(x > 7) {return SendClientMessage(playerid, Rojo, "No caben más cajas en el maletero del vehículo o no permite guardar cajas."), 1;} }
							case 573: { if(x > 9) {return SendClientMessage(playerid, Rojo, "No caben más cajas en el maletero del vehículo o no permite guardar cajas."), 1;} }
							case 609: { if(x > 9) {return SendClientMessage(playerid, Rojo, "No caben más cajas en el maletero del vehículo o no permite guardar cajas."), 1;} }
							case 591: { if(x > 9) {return SendClientMessage(playerid, Rojo, "No caben más cajas en el maletero del vehículo o no permite guardar cajas."), 1;} }
						}
					}
					else { return SendClientMessage(playerid, Rojo, "No caben más cajas en el maletero del vehículo o no permite guardar cajas."), 1; }
				}
	
			    CocheInfo[vehicleid][cMaletero][x] = Mano;
			    CocheInfo[vehicleid][cMaleteroCant][x] = Cant;
			    RemovePlayerAttachedObject(playerid, 1);
			    JugadorInfo[playerid][pManoDer] = 0;
			    JugadorInfo[playerid][pManoDerCant] = 0;
			    format(string, sizeof(string), "¡Has guardado tu %s en el maletero del %s!", ObjetoInfo[Mano][NombreObjeto], GetVehicleName(vehicleid));
				SendClientMessage(playerid, COLOR_GREEN2, string);
			    BonnetLibre = 1;
			    VehMaleteroPlayer[playerid] = 0;
		    	SetPlayerSpecialAction(playerid, 0);
                if(Mano == 177)
				{
					ColocarCaja(vehicleid, x);
				}
				return 1;
			}
		}
		if(BonnetLibre == 0){return SendClientMessage(playerid, Rojo, "No hay más espacios en el maletero del vehículo."), 1;}
	}
	else { SendClientMessage(playerid, Rojo, "Tu mano derecha está ocupada."); }
	return 1;
}
//--------------------//
forward SacarInterior(playerid, vehicleid, id); //Saca un objeto de un maletero
public SacarInterior(playerid, vehicleid, id)
{
    ActualizarManos(playerid);
    new Bonnet = CocheInfo[vehicleid][cGuantera][id];
	new Cant = CocheInfo[vehicleid][cGuanteraCant][id];
    if(Bonnet == 0){SendClientMessage(playerid, Rojo, "No hay nada en el hueco"); return 1;}
    if(JugadorInfo[playerid][pManoDer] == 0) //Si la mano derecha está libre
    {
   	    if(ObjetoInfo[Bonnet][IDArma] > 0) //Es un arma
		{
			new arma = ObjetoInfo[Bonnet][IDArma], municion = Cant;
			if(municion > 0){GivePlayerWeapon(playerid, arma, municion);} //Si tiene munición, dar el arma.
		}
		new string[128];
		JugadorInfo[playerid][pManoDer] = Bonnet;
		JugadorInfo[playerid][pManoDerCant] = Cant;
		PonerObjeto(playerid, 1, Bonnet);
		CocheInfo[vehicleid][cGuantera][id] = 0;
		CocheInfo[vehicleid][cGuanteraCant][id] = 0;
		format(string, sizeof(string), "¡Has cogido %s del interior del %s!", ObjetoInfo[Bonnet][NombreObjeto], GetVehicleName(vehicleid));
		SendClientMessage(playerid, COLOR_GREEN2, string);
        return 1;
	}
	else SendClientMessage(playerid, Rojo, "Tu mano derecha está ocupada");
	return 1;
}

forward GuardarInterior(playerid, vehicleid); //Guardar un objeto en el maletero de un vehículo
public GuardarInterior(playerid, vehicleid)
{
    ActualizarManos(playerid);
    if(JugadorInfo[playerid][pManoDer] == 0){SendClientMessage(playerid, Rojo, "No tienes nada en tu mano derecha."); return 1;}
	new Mano = JugadorInfo[playerid][pManoDer];
	new Cant = JugadorInfo[playerid][pManoDerCant];
    if(ObjetoInfo[Mano][IDArma] > 0) //Guarda un arma
    {
		Cant = GetPlayerAmmo(playerid);
		RemovePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma]);
  	}
   	new string[128];
    new BonnetLibre;
	for(new x = 0; x < 2; x++) //Coloca el objeto en el primer slot libre del interior (0/1)
	{
		if(CocheInfo[vehicleid][cGuantera][x] == 0)
		{
		    CocheInfo[vehicleid][cGuantera][x] = Mano;
		    CocheInfo[vehicleid][cGuanteraCant][x] = Cant;
		    RemovePlayerAttachedObject(playerid, 1);
		    JugadorInfo[playerid][pManoDer] = 0;
		    JugadorInfo[playerid][pManoDerCant] = 0;
		    format(string, sizeof(string), "¡Has guardado tu %s en el interior del %s!", ObjetoInfo[Mano][NombreObjeto], GetVehicleName(vehicleid));
			SendClientMessage(playerid, COLOR_GREEN2, string);
		    BonnetLibre = 1;
		    return 1;
		}
	}
	if(BonnetLibre == 0){return SendClientMessage(playerid, Rojo, "No hay más espacios en el interior del vehículo."), 1;}
	return 1;
}
//----------Armarios----------//
forward MostrarArmario(playerid, casa); //Muestra armario de una casa al jugador
public MostrarArmario(playerid, casa)
{
    ActualizarManos(playerid);
    new string[128];
    SendClientMessage(playerid, Verde, "[*] ARMARIO: Casa");
    for(new i = 0; i < 10; i++)
	{
		new ArmarioObj = CasaInfo[casa][hArmario][i];
		if(ArmarioObj != 0)
		{
		    if(ArmarioObj == 176){format(string, sizeof(string), "Hueco %d: %s (%d$)", i, ObjetoInfo[ArmarioObj][NombreObjeto], CasaInfo[casa][hArmarioCant][i]);}
			else{format(string, sizeof(string), "Hueco %d: %s (%d uds.)", i, ObjetoInfo[ArmarioObj][NombreObjeto], CasaInfo[casa][hArmarioCant][i]);}
            SendClientMessage(playerid, COLOR_PIEL, string);
		}
	}
	SendClientMessage(playerid, Amarillo, "Comandos: (/arm)ario ver, (/arm)ario sacar, (/arm)ario guardar");
	return 1;
}

forward SacarArmario(playerid, casa, id); //Saca un objeto de un armario
public SacarArmario(playerid, casa, id)
{
    if(casa == 0){return 1;}
    ActualizarManos(playerid);
    new ArmarioObj = CasaInfo[casa][hArmario][id];
	new Cant = CasaInfo[casa][hArmarioCant][id];
    if(ArmarioObj == 0){return 1;}
    if(JugadorInfo[playerid][pManoDer] == 0) //Si la mano derecha está libre
    {
   	    if(ObjetoInfo[ArmarioObj][IDArma] > 0) //Es un arma
		{
			new arma = ObjetoInfo[ArmarioObj][IDArma], municion = Cant;
			if(municion > 0){GivePlayerWeapon(playerid, arma, municion);} //Si tiene munición, dar el arma.
		}
		new string[128];
		JugadorInfo[playerid][pManoDer] = ArmarioObj;
		JugadorInfo[playerid][pManoDerCant] = Cant;
		PonerObjeto(playerid, 1, ArmarioObj);
		CasaInfo[casa][hArmario][id] = 0;
		CasaInfo[casa][hArmarioCant][id] = 0;
		format(string, sizeof(string), "¡Has sacado %s del armario de la casa!", ObjetoInfo[ArmarioObj][NombreObjeto]);
		SendClientMessage(playerid, COLOR_GREEN2, string);
        return 1;
	}
	else SendClientMessage(playerid, Rojo, "¡Mano derecha ocupada!");
	return 1;
}

forward GuardarArmario(playerid, casa, mano); //Guardar un objeto en el armario de una casa
public GuardarArmario(playerid, casa, mano)
{
    if(casa == 0){return 1;}
    ActualizarManos(playerid);
    if(mano == 1)
    {
        if(JugadorInfo[playerid][pManoDer] == 0){return 1;}
		new Mano = JugadorInfo[playerid][pManoDer];
		new Cant = JugadorInfo[playerid][pManoDerCant];
        if(ObjetoInfo[Mano][IDArma] > 0) //Guarda un arma
        {
			Cant = GetPlayerAmmo(playerid);
			RemovePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma]);
        }
        new string[128];
        new ArmarioLibre;
		for(new x = 0; x < 10; x++) //Coloca el objeto en el primer slot libre del maletero
		{
			if(CasaInfo[casa][hArmario][x] == 0)
			{
			    CasaInfo[casa][hArmario][x] = Mano;
			    CasaInfo[casa][hArmarioCant][x] = Cant;
			    RemovePlayerAttachedObject(playerid, 1);
			    JugadorInfo[playerid][pManoDer] = 0;
			    JugadorInfo[playerid][pManoDerCant] = 0;
			    format(string, sizeof(string), "¡Guardaste tu %s en el armario de tu casa!", ObjetoInfo[Mano][NombreObjeto]);
                SendClientMessage(playerid, COLOR_GREEN2, string);
			    ArmarioLibre = 1;
			    return 1;
			}
		}
		if(ArmarioLibre == 0){SendClientMessage(playerid, Rojo, "Todos los huecos del armario están ocupados."); return 1;}
	}
	return 1;
}

//----------Almacenes----------//
forward MostrarAlmacen(playerid, nego); //Muestra armario de una casa al jugador
public MostrarAlmacen(playerid, nego)
{
    ActualizarManos(playerid);
    new string[128];
    SendClientMessage(playerid, Verde, "[*] ALMACÉN: Negocio");
    for(new i = 0; i < NegocioInfo[nego][nMaxAlmacen]; i++)
	{
		new AlmacenObj = NegocioInfo[nego][nAlmacen][i];
		if(AlmacenObj != 0)
		{
			format(string, sizeof(string), "Hueco %d: %s (%d uds.)", i, ObjetoInfo[AlmacenObj][NombreObjeto], NegocioInfo[nego][nAlmacenCant][i]);
            SendClientMessage(playerid, COLOR_PIEL, string);
		}
	}
	SendClientMessage(playerid, Amarillo, "Comandos: (/alm)acen ver, (/alm)acen sacar, (/alm)acen guardar");
	return 1;
}

forward SacarAlmacen(playerid, nego, id); //Saca un objeto de un almacén
public SacarAlmacen(playerid, nego, id)
{
    if(nego == 0){return 1;}
    ActualizarManos(playerid);
    new AlmacenObj = NegocioInfo[nego][nAlmacen][id];
	new Cant = NegocioInfo[nego][nAlmacenCant][id];
    if(AlmacenObj == 0){return 1;}
    if(JugadorInfo[playerid][pManoDer] == 0) //Si la mano derecha está libre
    {
   	    if(ObjetoInfo[AlmacenObj][IDArma] > 0) //Es un arma
		{
			new arma = ObjetoInfo[AlmacenObj][IDArma], municion = Cant;
			if(municion > 0){GivePlayerWeapon(playerid, arma, municion);} //Si tiene munición, dar el arma.
		}
		new string[128];
		JugadorInfo[playerid][pManoDer] = AlmacenObj;
		JugadorInfo[playerid][pManoDerCant] = Cant;
		PonerObjeto(playerid, 1, AlmacenObj);
		NegocioInfo[nego][nAlmacen][id] = 0;
		NegocioInfo[nego][nAlmacenCant][id] = 0;
		format(string, sizeof(string), "¡Sacaste una %s del almacén!", ObjetoInfo[AlmacenObj][NombreObjeto]);
		SendClientMessage(playerid, COLOR_GREEN2, string);
        return 1;
	}
	else if(JugadorInfo[playerid][pManoIzq] == 0) //Si la mano izquierda está libre
	{
	    new string[128];
		JugadorInfo[playerid][pManoIzq] = AlmacenObj;
		JugadorInfo[playerid][pManoIzqCant] = Cant;
		PonerObjeto(playerid, 2, AlmacenObj);
		NegocioInfo[nego][nAlmacen][id] = 0;
		NegocioInfo[nego][nAlmacenCant][id] = 0;
		format(string, sizeof(string), "¡Sacaste una %s del almacén!", ObjetoInfo[AlmacenObj][NombreObjeto]);
		SendClientMessage(playerid, COLOR_GREEN2, string);
	}
	else
	{
		SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;
	}
	return 1;
}

forward GuardarAlmacen(playerid, nego, mano); //Guardar un objeto en el almacén de un local
public GuardarAlmacen(playerid, nego, mano)
{
    if(nego == 0){return 1;}
    ActualizarManos(playerid);
    if(mano == 1)
    {
        if(JugadorInfo[playerid][pManoDer] == 0){SendClientMessage(playerid, Rojo, "No tienes nada en tu mano derecha."); return 1;}
		new Mano = JugadorInfo[playerid][pManoDer];
		new Cant = JugadorInfo[playerid][pManoDerCant];
        if(ObjetoInfo[Mano][IDArma] > 0) //Guarda un arma
        {
			Cant = GetPlayerAmmo(playerid);
			RemovePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma]);
        }
        new string[128];
        new AlmacenLibre;
		for(new x = 0; x < NegocioInfo[nego][nMaxAlmacen]; x++) //Coloca el objeto en el primer slot libre del maletero
		{
			if(NegocioInfo[nego][nAlmacen][x] == 0)
			{
			    NegocioInfo[nego][nAlmacen][x] = Mano;
			    NegocioInfo[nego][nAlmacenCant][x] = Cant;
			    RemovePlayerAttachedObject(playerid, 1);
			    JugadorInfo[playerid][pManoDer] = 0;
			    JugadorInfo[playerid][pManoDerCant] = 0;
			    format(string, sizeof(string), "¡Guardaste tu %s en el almacén!", ObjetoInfo[Mano][NombreObjeto]);
                SendClientMessage(playerid, COLOR_GREEN2, string);
			    AlmacenLibre = 1;
			    return 1;
			}
		}
		if(AlmacenLibre == 0){SendClientMessage(playerid, Rojo, "Todos los huecos del armario están ocupados."); return 1;}
	}
	else if(mano == 2)
	{
	    if(JugadorInfo[playerid][pManoIzq] == 0){SendClientMessage(playerid, Rojo, "No tienes nada en tu mano izquierda."); return 1;}
		new Mano = JugadorInfo[playerid][pManoIzq];
		new Cant = JugadorInfo[playerid][pManoIzqCant];
		new string[128];
		new AlmacenLibre;
		for(new x = 0; x < NegocioInfo[nego][nMaxAlmacen]; x++) //Coloca el objeto en el primer slot libre que encuentra
		{
			if(NegocioInfo[nego][nAlmacen][x] == 0)
			{
   				NegocioInfo[nego][nAlmacen][x] = Mano;
			    NegocioInfo[nego][nAlmacenCant][x] = Cant;
			    RemovePlayerAttachedObject(playerid, 2);
			    JugadorInfo[playerid][pManoIzq] = 0;
			    JugadorInfo[playerid][pManoIzqCant] = 0;
			    format(string, sizeof(string), "Guardas tu %s en el almacén", ObjetoInfo[Mano][NombreObjeto]);
                SendClientMessage(playerid, COLOR_GREEN2, string);
			    AlmacenLibre = 1;
			    return 1;
			}
		}
		if(AlmacenLibre == 0){SendClientMessage(playerid, Rojo, "Todos los huecos del armario están ocupados."); return 1;}
	}
	return 1;
}
//--------------------//

forward ActualizarManos(playerid); //Actualiza el inventario
public ActualizarManos(playerid)
{
	new ManoDer = JugadorInfo[playerid][pManoDer], ManoDerCant = JugadorInfo[playerid][pManoDerCant];
	if(ManoDer > 0 && ObjetoInfo[ManoDer][IDArma] > 0) //Actualiza la munición del arma que sujeta
	{
	    JugadorInfo[playerid][pManoDerCant] = GetPlayerWeaponAmmo(playerid, ObjetoInfo[ManoDer][IDArma]);
	}
	if(ManoDer == 0){RemovePlayerAttachedObject(playerid, 1);}

	if(ObjetoInfo[ManoDer][Arrojadizo] == 1 && ManoDerCant <= 0) //Si es arrojadizo y tiene 0 munición se la quita
	{
		JugadorInfo[playerid][pManoDer] = 0;
		JugadorInfo[playerid][pManoDerCant] = 0;
		RemovePlayerAttachedObject(playerid, 1);
	}

	if(ManoDer > 0 && ManoDer < sizeof(ObjetoInfo)) //Si la cantidad del objeto es mayor a su capacidad, setear su cantidad a su capacidad
	{
	    if(ManoDerCant > ObjetoInfo[ManoDer][Capacidad])
	    {
	        if(ObjetoInfo[ManoDer][IDArma] > 0){ResetPlayerWeapons(playerid), GivePlayerWeapon(playerid, ObjetoInfo[ManoDer][IDArma], ObjetoInfo[ManoDer][Capacidad]);}
	        JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[ManoDer][Capacidad];
	    }
	    if(ManoDer < 19 && ManoDerCant <= 0){GivePlayerWeapon(playerid, ObjetoInfo[ManoDer][IDArma], 1);}
	}
	
	new ManoIzq = JugadorInfo[playerid][pManoIzq], ManoIzqCant = JugadorInfo[playerid][pManoIzqCant];
	if(ManoIzq == 0){RemovePlayerAttachedObject(playerid, 2);}
	if(ManoIzq > 0 && ManoIzq < sizeof(ObjetoInfo))
	{
	    if(ManoIzqCant > ObjetoInfo[ManoIzq][Capacidad])
	    {
	        JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[ManoIzq][Capacidad];
	    }
	    if(ManoIzq < 19 && ManoIzqCant <= 0){JugadorInfo[playerid][pManoIzqCant] = 1;}
	}
	if(ObjetoInfo[ManoIzq][Arrojadizo] == 1 && ManoIzqCant <= 0)
	{
		JugadorInfo[playerid][pManoIzq] = 0;
		JugadorInfo[playerid][pManoIzqCant] = 0;
		RemovePlayerAttachedObject(playerid, 2);
	}
}

forward CambiarObjetosMano(playerid);
public CambiarObjetosMano(playerid)
{
    ActualizarManos(playerid);
	if(JugadorInfo[playerid][pManoDer] == 177) { SendClientMessage(playerid, Rojo, "La caja toma las dos manos, no puedes intercambiar."); return 1; }
	if(JugadorInfo[playerid][pManoIzq] == 177) { SendClientMessage(playerid, Rojo, "La caja toma las dos manos, no puedes intercambiar."); return 1; }
	
    if(JugadorInfo[playerid][pManoDer] == 0 && JugadorInfo[playerid][pManoIzq] == 0){SendClientMessage(playerid, COLOR_PIEL, "Intercambias los objetos que sostienes entre tus manos"); return 1;}
	new ManoDer = JugadorInfo[playerid][pManoDer], ManoDerCant = JugadorInfo[playerid][pManoDerCant];
	new ManoIzq = JugadorInfo[playerid][pManoIzq], ManoIzqCant = JugadorInfo[playerid][pManoIzqCant];
	if(ManoDer == 0)
	{
		RemovePlayerAttachedObject(playerid, 2);
        PonerObjeto(playerid, 1, ManoIzq);
        SendClientMessage(playerid, COLOR_PIEL, "Intercambias los objetos que sostienes entre tus manos");
        if(ObjetoInfo[ManoIzq][IDArma] > 0){GivePlayerWeapon(playerid, ObjetoInfo[ManoIzq][IDArma], ManoIzqCant);}
	}
	else if(ManoIzq == 0)
	{
		PonerObjeto(playerid, 2, ManoDer);
		ResetPlayerWeapons(playerid);
		RemovePlayerAttachedObject(playerid, 1);
		SendClientMessage(playerid, COLOR_PIEL, "Intercambias los objetos que sostienes entre tus manos");
	}
	else
	{
	    ResetPlayerWeapons(playerid);
		PonerObjeto(playerid, 1, ManoIzq);
		PonerObjeto(playerid, 2, ManoDer);
		SendClientMessage(playerid, COLOR_PIEL, "Intercambias los objetos que sostienes entre tus manos");
        if(ObjetoInfo[ManoIzq][IDArma] > 0){GivePlayerWeapon(playerid, ObjetoInfo[ManoIzq][IDArma], ManoIzqCant);}
	}
    JugadorInfo[playerid][pManoDerCant] = ManoIzqCant, JugadorInfo[playerid][pManoDer] = ManoIzq;
	JugadorInfo[playerid][pManoIzqCant] = ManoDerCant, JugadorInfo[playerid][pManoIzq] = ManoDer;
    return 1;
}

forward EliminarObjeto(playerid);
public EliminarObjeto(playerid)
{
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { SendClientMessage(playerid, Rojo, "No puedes usar este comando ahora."); return 1;}
    new string[128], tomouno;
    tomouno = 0;
	for(new i = 0; i < sizeof(DropInfo); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0,DropInfo[i][DropPosX],DropInfo[i][DropPosY],DropInfo[i][DropPosZ]))
		{
			if(GetPlayerVirtualWorld(playerid) == DropInfo[i][DropVWorld] && GetPlayerInterior(playerid) == DropInfo[i][DropInterior])
			{
			    if(DropInfo[i][DropID] == 0) break;
			    DestroyDynamicObject(DropObject[i]);
				format(string, sizeof(string), "Eliminaste un %s del suelo", ObjetoInfo[DropInfo[i][DropID]][NombreObjeto]);
				SendClientMessage(playerid, COLOR_GREEN2, string);
                DropInfo[i][DropPosX] = 0.0;
				DropInfo[i][DropPosY] = 0.0;
				DropInfo[i][DropPosZ] = 0.0;
				DropInfo[i][DropID] = 0;
				DropInfo[i][DropCantidad] = 0;
				Streamer_Update(playerid);
				tomouno = 1;
				BalasActual[playerid] = GetPlayerAmmo(playerid);
				break;
			}
		}
	}
	if(tomouno == 0)
	{
 		SendClientMessage(playerid, COLOR_ROJO, "Ningún objeto cercano.");
	}
	return 1;
}

forward RecogerObjeto(playerid);
public RecogerObjeto(playerid)
{
    if(JugadorInfo[playerid][pManoDer] > 0 && JugadorInfo[playerid][pManoIzq] > 0){SendClientMessage(playerid, Rojo, "Tienes tus manos ocupadas."); return 1;}
	if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) { SendClientMessage(playerid, Rojo, "No puedes usar este comando ahora."); return 1;}
    new string[128], tomouno;
    tomouno = 0;
	for(new i = 0; i < sizeof(DropInfo); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0,DropInfo[i][DropPosX],DropInfo[i][DropPosY],DropInfo[i][DropPosZ]))
		{
			if(GetPlayerVirtualWorld(playerid) == DropInfo[i][DropVWorld] && GetPlayerInterior(playerid) == DropInfo[i][DropInterior])
			{
			    if(DropInfo[i][DropID] == 0) break;
			    DestroyDynamicObject(DropObject[i]);
				if(JugadorInfo[playerid][pManoDer] == 0)
				{
				    JugadorInfo[playerid][pManoDer] = DropInfo[i][DropID], JugadorInfo[playerid][pManoDerCant] = DropInfo[i][DropCantidad];
					if(ObjetoInfo[DropInfo[i][DropID]][IDArma] > 0 && DropInfo[i][DropCantidad] > 0){GivePlayerWeapon(playerid,ObjetoInfo[DropInfo[i][DropID]][IDArma],DropInfo[i][DropCantidad]);}
					PonerObjeto(playerid, 1, DropInfo[i][DropID]);
					new string2[128]; format(string2, 128, "recoge un/a %s del suelo.", ObjetoInfo[DropInfo[i][DropID]][NombreObjeto]);
					AutoRol(playerid, string2);
					format(string, sizeof(string), "¡Recoges un %s del suelo!", ObjetoInfo[DropInfo[i][DropID]][NombreObjeto]);
					SendClientMessage(playerid, COLOR_GREEN2, string);
                    DropInfo[i][DropPosX] = 0.0;
					DropInfo[i][DropPosY] = 0.0;
					DropInfo[i][DropPosZ] = 0.0;
					DropInfo[i][DropID] = 0;
					DropInfo[i][DropCantidad] = 0;
					Streamer_Update(playerid);
					tomouno = 1;
					BalasActual[playerid] = GetPlayerAmmo(playerid);
					if(JugadorInfo[playerid][pManoDer] == 177){SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);}
					break;
				}
				else SendClientMessage(playerid, Rojo, "Ya tienes ocupada tu mano derecha.");
			}
		}
	}
	if(tomouno == 0)
	{
 		SendClientMessage(playerid, COLOR_ROJO, "Ningún objeto cercano.");
	}
	return 1;
}

stock PonerObjeto(playerid, slot, objetoid) //Coloca un objeto en la mano
{
    if(slot == 1)
	{
	    if(objetoid == 1) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6); //Armas
	    if(objetoid == 2) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 3) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 4) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 5) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 6) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 7) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 8) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 9) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 10) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 11) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 12) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 13) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 14) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 15) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 16) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 17) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 18) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 19) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 20) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 21) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 22) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 23) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 24) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 25) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 26) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 27) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 28) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 29) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 30) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 31) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 32) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 33) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 34) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 35) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 36) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 37) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 38) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    

        if(objetoid >= 39 && objetoid <= 43) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.065000,0.029999,0.016999,10.800001,-103.099998,0.000000,0.649999,0.910999,0.476999); //Cargador pequeño
        if(objetoid >= 44 && objetoid <= 46) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.064999,0.035998,0.018999,1.599980,-105.499984,1.800009,0.649999,0.910999,0.476999); //Cargador grande
        if(objetoid >= 47 && objetoid <= 49) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.047999,0.058999,0.016999,100.800003,-103.099998,0.000000,0.482998,0.710998,0.414999); //Munición pequeña
	    if(objetoid == 50) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.037999,0.066998,0.016999,100.800003,8.199994,-0.999999,0.484999,0.847999,0.408999); //Munición escopeta
		if(objetoid >= 51 && objetoid <= 53) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.045999,0.074998,0.016999,100.800003,-3.899986,0.000000,0.445999,0.910999,0.476999); //Munición grande
		
		if(objetoid == 54)SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6); //Granada cegadora

	    if(objetoid >= 55 && objetoid <= 57) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.204000,0.029998,0.016999,10.800001,-103.099998,0.000000,0.839000,0.423999,0.645000); //Doritos, patatas y nachos
	    if(objetoid == 58 ||  objetoid == 59) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.043999,0.029998,0.016999,10.800001,-13.199980,1.000000,1.000000,1.000000,1.000000); //Sprunk y fanta
	    if(objetoid == 60) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,-0.031000,-0.030001,0.060999,10.800001,17.200008,0.000000,1.000000,1.000000,1.000000); //Botella agua
	    if(objetoid == 61) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.042000,0.055999,-0.085000,10.800001,1.100013,0.000000,1.000000,1.000000,1.000000); //Botella cerveza
	    if(objetoid == 62) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.064999,0.029998,0.016999,10.800001,-30.299997,0.000000,1.000000,1.000000,1.000000); //Copa de vino
	    if(objetoid == 63 || objetoid == 64) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.059999,0.029998,0.016999,10.800001,-31.300012,0.000000,1.000000,1.000000,1.000000); //Vaso de whisky y ron
	    if(objetoid == 65) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.088999,0.029998,0.045999,-43.799991,-24.899995,-10.599997,1.000000,1.000000,0.833999); //Hamburguesa
	    if(objetoid == 66) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.054000,0.029998,0.016999,106.699981,-11.200008,-105.300056,1.000000,1.000000,1.000000); //Burrito
	    if(objetoid == 67) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.296000,0.126998,0.016999,103.400001,0.199999,0.000000,1.000000,1.000000,1.000000); //Pizza
	    if(objetoid == 68) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,-0.005000,-0.010000,-0.024000,10.800001,1.499994,0.000000,1.000000,1.000000,1.000000); //Móvil
	    if(objetoid == 69) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.117999,0.009998,-0.041000,10.800001,-103.099998,0.000000,1.000000,1.000000,1.000000); //Mechero
	    if(objetoid == 70) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.070999,0.032999,0.025999,10.800001,89.800041,0.000000,1.000000,1.000000,1.000000); //Cigarrillos
	    if(objetoid == 71) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.035000,0.059999,-0.076000,10.800001,5.399998,0.000000,1.000000,1.000000,1.000000); //Botella ron
	    if(objetoid == 72) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.037000,0.072998,-0.065001,10.800001,0.100004,0.000000,1.000000,1.000000,1.000000); //Botella whisky
	    if(objetoid == 73) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.036000,0.034998,0.064998,10.800001,-0.399997,0.000000,1.000000,1.000000,1.000000); //Botella vino
	    if(objetoid == 74) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.079999,0.020998,0.016999,10.800001,164.000000,0.000000,1.000000,1.000000,1.000000); //Destornillador
	    
	    if(objetoid >= 75 && objetoid <= 79) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.092000,0.147998,-0.012001,-108.800010,178.099975,95.300003,0.703999,0.758000,0.787999); //Fardos droga
	    if(objetoid >= 80 && objetoid <= 84) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.117999,0.009998,-0.041000,10.800001,-103.099998,0.000000,1.000000,1.000000,1.000000); //Bolsitas droga
	    if(objetoid == 85) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.117999,0.009998,-0.041000,10.800001,-103.099998,0.000000,1.000000,1.000000,1.000000); //Semillas maria y coca
	    if(objetoid == 86) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,-0.010000,0.066998,0.096998,10.800001,-3.799994,0.000000,0.533999,0.475000,0.656000); //Planta maria
	    
	    if(objetoid >= 87 && objetoid <= 101) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,-0.034000,-0.010001,-0.006000,-2.199992,76.499961,179.900070,1.038000,1.230000,1.000000); //Relojes
	    if(objetoid >= 102 && objetoid <= 124) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.152999,0.106998,0.034999,-85.699996,179.999969,78.399993,1.038999,0.752000,0.854999); //Cajas de armamento
		if(objetoid == 125) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.117999,0.009998,-0.041000,10.800001,-103.099998,0.000000,1.000000,1.000000,1.000000); //Lata de gasolina
	    if(objetoid == 126) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.036000,0.034998,0.064998,10.800001,-0.399997,0.000000,1.000000,1.000000,1.000000); // Chaleco Antibalas
		if(objetoid == 127) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.152999,0.106998,0.034999,-85.699996,179.999969,78.399993,1.038999,0.752000,0.854999); //Cajas de armamento
		if(objetoid >= 129 && objetoid <= 173) SetPlayerAttachedObject(playerid,1,ObjetoInfo[objetoid][ModeloObjeto],6,0.070999,0.032999,0.025999,10.800001,89.800041,0.000000,1.000000,1.000000,1.000000);
        if(objetoid == 174) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 175) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6);
	    if(objetoid == 176) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 6, 0.3, 0.1, 0, 0, -90, 0, 1, 1, 1);
		if(objetoid == 177) SetPlayerAttachedObject(playerid, 1, ObjetoInfo[objetoid][ModeloObjeto], 1, 0.198000,0.390999,0.000000,0.000000,0.000000,-4.600000,0.534999,0.562999,0.568000); // Caja
 	}
	if(slot == 2)
	{
	    if(objetoid == 1) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.024999,0.000000,-0.005999,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000); //Armas
        if(objetoid == 2) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,-0.040000,0.067000,-0.003000,-29.899999,152.000000,176.000030,1.000000,1.000000,1.000000);
	    if(objetoid == 3) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.000000,0.059999,-0.022000,161.599990,10.700001,5.800002,1.000000,1.000000,1.000000);
	    if(objetoid == 4) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.180999,0.000000,0.017999,0.000000,177.800018,-8.799996,1.000000,1.000000,1.000000);
	    if(objetoid == 5) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.135999,0.030999,0.053999,-17.900001,153.800018,0.000000,1.000000,1.000000,1.000000);
	    if(objetoid == 6) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.041999,0.051999,-0.080000,-27.899986,155.800018,-167.499938,1.000000,1.000000,1.000000);
	    if(objetoid == 7) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.156999,0.092000,0.071999,-25.099998,172.899963,-19.899995,1.000000,1.000000,1.000000);
	    if(objetoid == 8) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.058000,0.008000,-0.109000,-27.999998,155.100036,172.699966,1.000000,1.000000,1.000000);
	    if(objetoid == 9) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.000000,0.078999,-0.009000,155.599990,7.200000,4.800000,1.000000,1.000000,1.000000);
	    if(objetoid == 10) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.015000,0.041000,-0.068000,-25.599971,162.900054,-175.300018,1.000000,1.000000,1.000000);
        if(objetoid == 11) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.023999,0.052999,-0.041999,157.899978,2.499999,0.000000,1.000000,1.000000,1.000000);
	    if(objetoid == 12) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,-0.002000,0.074000,0.001000,151.200042,23.000000,-9.100001,1.000000,1.000000,1.000000);
	    if(objetoid == 13) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.017999,0.003999,-0.047999,168.200012,18.300003,-27.900005,1.000000,1.000000,1.000000);
        if(objetoid == 14) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.176000,0.000000,-0.011000,-23.399999,160.599990,-6.399995,1.000000,1.000000,1.000000);
	    if(objetoid == 15) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.008999,-0.018999,-0.047999,-33.199996,159.900085,156.399902,1.000000,1.000000,1.000000);
	    if(objetoid == 16) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.019000,0.047000,-0.021000,164.499984,0.000000,-17.599994,1.000000,1.000000,1.000000);
	    if(objetoid == 17) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.034000,0.063000,-0.037999,164.500000,14.599996,-4.700009,1.000000,1.000000,1.000000);
	    if(objetoid == 18) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.022999,0.039000,-0.125999,165.700012,0.000000,0.000000,1.000000,1.000000,1.000000);
	    if(objetoid == 19) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.033000,0.057999,-0.017999,146.299987,14.999998,-4.700002,1.000000,1.000000,1.000000);
	    if(objetoid == 20) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.050999,0.038000,-0.021999,144.500015,9.100000,-11.600002,1.000000,1.000000,1.000000);
	    if(objetoid == 21) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.041000,0.038000,-0.026999,173.899963,0.000000,1.799999,1.000000,1.000000,1.000000);
	    if(objetoid == 22) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.000000,0.089000,0.000000,153.500015,10.000001,4.800000,1.000000,1.000000,1.000000);
        if(objetoid == 23) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.040000,0.026000,0.011000,-156.300003,0.000000,2.600000,1.000000,1.000000,1.000000);
	    if(objetoid == 24) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.023000,0.048999,-0.013000,172.200012,14.400005,0.599999,1.000000,1.000000,1.000000);
	    if(objetoid == 25) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.024999,0.048000,-0.012000,172.000076,-3.099988,-2.099991,1.000000,1.000000,1.000000);
	    if(objetoid == 26) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.005000,0.065000,-0.016000,162.399963,9.599999,8.400000,1.000000,1.000000,1.000000);
	    if(objetoid == 27) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.057999,0.076999,-0.023999,162.799942,14.399999,0.000000,1.000000,1.000000,1.000000);
	    if(objetoid == 28) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.043999,0.028999,-0.038000,167.499969,15.999998,0.000000,1.000000,1.000000,1.000000);
	    if(objetoid == 29) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.048000,0.049999,0.011000,-172.600006,-2.299995,5.999999,1.000000,1.000000,1.000000);
        if(objetoid == 30) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,-0.043000,0.065999,-0.044999,167.499954,17.399999,0.000000,1.000000,1.000000,1.000000);
        if(objetoid == 31) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,-0.018000,0.085000,0.033000,167.399978,12.200000,-0.299997,1.000000,1.000000,1.000000);
        if(objetoid == 32) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,-0.022000,0.087999,0.006999,154.899978,20.799997,-0.300001,1.000000,1.000000,1.000000);
        if(objetoid == 33) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.047000,0.057000,-0.038000,133.699981,17.199989,2.099999,1.000000,1.000000,1.000000);
        if(objetoid == 34) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.036999,0.026999,-0.079999,152.899993,14.900004,-0.400000,1.000000,1.000000,1.000000);
        if(objetoid == 35) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.004000,0.061999,-0.063999,126.599990,33.099998,2.200000,1.000000,1.000000,1.000000);
        if(objetoid == 36) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.018000,0.062999,0.074999,-109.400039,0.000000,0.000000,1.000000,1.000000,1.000000);
        if(objetoid == 37) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.018000,0.062999,0.074999,-109.400039,0.000000,0.000000,1.000000,1.000000,1.000000);
        if(objetoid == 38) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.050999,0.038000,-0.021999,144.500015,9.100000,-11.600002,1.000000,1.000000,1.000000);

		if(objetoid >= 39 && objetoid <= 43) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.092000,0.038000,-0.026000,-37.200008,82.199996,3.499996,0.649999,0.910999,0.476999); //Cargador pequeño
        if(objetoid >= 44 && objetoid <= 46) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.092000,0.038000,-0.026000,-37.200008,82.199996,3.499996,0.649999,0.910999,0.476999); //Cargador grande
        if(objetoid >= 47 && objetoid <= 49) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.067999,0.053999,-0.006999,-110.800018,-20.899999,3.499995,0.482998,0.710998,0.414999); //Munición pequeña
	    if(objetoid == 50) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.129999,0.076999,-0.022999,-108.799964,163.299972,3.499995,0.484999,0.847999,0.408999); //Munición escopeta
		if(objetoid >= 51 && objetoid <= 53) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.145999,0.071999,-0.008000,-107.200004,172.799987,3.499995,0.445999,0.910999,0.476999); //Munición grande
		
		if(objetoid == 54) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.034000,0.063000,-0.037999,164.500000,14.599996,-4.700009,1.000000,1.000000,1.000000); //Granada cegadora
		
		if(objetoid >= 55 && objetoid <= 57) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.216999,0.037999,-0.002999,-13.699973,-98.399971,3.000000,0.839000,0.423999,0.645000); //Doritos, patatas y nachos
		if(objetoid == 58 || objetoid == 59) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.072000,0.036999,-0.026000,-11.800009,175.100036,3.000000,1.000000,1.000000,1.000000); //Sprunk y fanta
		if(objetoid == 60) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.134000,0.001999,-0.122000,-37.200008,-149.699951,-37.999996,1.000000,1.000000,1.000000); //Botella agua
		if(objetoid == 61) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.092000,0.114000,0.069000,-37.200008,-173.000015,3.499995,1.000000,1.000000,1.000000); //Botella cerveza
		if(objetoid == 62) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.077000,0.037999,-0.026000,-37.200008,-174.300003,3.499995,1.000000,1.000000,1.000000); //Copa vino
		if(objetoid == 63 || objetoid == 64) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.081000,0.037999,-0.012999,-37.200008,172.500061,3.499995,1.000000,1.000000,1.000000); //Vaso de whisky y ron
		if(objetoid == 65) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.125999,0.037999,-0.006999,-143.300033,-3.300006,144.699966,1.000000,1.000000,0.833999); //Hamburguesa
		if(objetoid == 66) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.092000,0.037999,-0.026000,-37.200008,82.199996,-175.000000,1.000000,1.000000,1.000000); //Burrito
		if(objetoid == 67) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.293000,0.108000,-0.049999,-116.499977,170.400054,3.799995,1.000000,1.000000,1.000000); //Pizza
		if(objetoid == 68) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.144999,-0.009999,0.027000,-23.500009,-173.399993,3.499995,1.000000,1.000000,1.000000); //Móvil
		if(objetoid == 69) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.036000,0.037999,0.054999,-37.200008,82.199996,3.499995,1.000000,1.000000,1.000000); //Mechero
		if(objetoid == 70) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.092000,0.038000,-0.026000,-37.200008,82.199996,3.499996,1.000000,1.000000,1.000000); //Cigarrillos
		if(objetoid == 71) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.092000,0.096000,0.066999,-25.500007,179.099990,3.499995,1.000000,1.000000,1.000000); //Botella de ron
		if(objetoid == 72) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.092000,0.092000,0.045000,-37.200008,-165.699996,3.499995,1.000000,1.000000,1.000000); //Botella de whisky
		if(objetoid == 73) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.072000,0.037999,-0.038000,-15.100006,-158.999984,3.499995,1.000000,1.000000,1.000000); //Botella de vino
		if(objetoid == 74) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.092000,0.037999,-0.026000,-37.200008,-18.400012,3.499995,1.000000,1.000000,1.000000); //Destornillador
		
		if(objetoid >= 75 && objetoid <= 79) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.150000,0.002999,-0.026000,-117.300010,-4.899999,81.599998,0.703999,0.758000,0.787999); //Fardos droga
		if(objetoid >= 80 && objetoid <= 84) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.036000,0.037999,0.054999,-37.200008,82.199996,3.499995,1.000000,1.000000,1.000000); //Bolsitas droga
		if(objetoid == 85) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.036000,0.037999,0.054999,-37.200008,82.199996,3.499995,1.000000,1.000000,1.000000); //Semillas maria y coca
		if(objetoid == 86) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.146999,0.037999,-0.098000,-37.200008,170.300018,3.499995,0.533999,0.475000,0.656000); //Planta maria
		
		if(objetoid >= 87 && objetoid <= 101) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,-0.014999,-0.005999,-0.018000,-35.700012,82.199996,-68.900001,1.038000,1.230000,1.000000); //Relojes
		if(objetoid >= 102 && objetoid <= 124) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.171999,0.079999,-0.111999,-124.399993,166.300018,-93.599990,1.038999,0.752000,0.854999); //Cajas de armamento
		if(objetoid >= 129 && objetoid <= 173) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.092000,0.038000,-0.026000,-37.200008,82.199996,3.499996,1.000000,1.000000,1.000000); //Cigarrillos
		if(objetoid == 125) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.036000,0.037999,0.054999,10.800001,-103.099998,0.000000,1.000000,1.000000,1.00000); //LAta de gasolina
		if(objetoid == 126) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.072000,0.037999,-0.038000,-15.100006,-158.999984,3.499995,1.000000,1.000000,1.000000); // Chaleco antibalas
        if(objetoid == 127) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.171999,0.079999,-0.111999,-124.399993,166.300018,-93.599990,1.038999,0.752000,0.854999); //Cajas de armamento
        if(objetoid == 174) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.033000,0.057999,-0.017999,146.299987,14.999998,-4.700002,1.000000,1.000000,1.000000);
	    if(objetoid == 175) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5,0.041000,0.038000,-0.026999,173.899963,0.000000,1.799999,1.000000,1.000000,1.000000);
		if(objetoid == 176) SetPlayerAttachedObject(playerid,2,ObjetoInfo[objetoid][ModeloObjeto],5, 0.3, 0.1, 0, 0, -90.000000, 0, 1.000000, 1.000000, 1.000000);
		if(objetoid == 177) SetPlayerAttachedObject(playerid,2, ObjetoInfo[objetoid][ModeloObjeto],1, 0.198000,0.390999,0.000000,0.000000,0.000000,-4.600000,0.534999,0.562999,0.568000); // Caja
 	}
	if(slot == 3)
	{
		if(ObjetoInfo[objetoid][IDArma] < 16){SetPlayerAttachedObject(playerid,3,ObjetoInfo[objetoid][ModeloObjeto],1, -0.1061, -0.1544, -0.0411, 0.0000, 60.0000, 60.0000, 1.0000);}
		if(ObjetoInfo[objetoid][IDArma] >= 16){SetPlayerAttachedObject(playerid,3,ObjetoInfo[objetoid][ModeloObjeto],1, -0.1061, -0.1544, -0.0411, 0.0000, 0.0000, 0.0000, 1.0000);}
	}
	return 1;
}

forward ConnectMySQL(); //Conectar a la base mysql NOTA: DEBE EXISTIR EL USUARIO 'Plantilla' PARA CONECTAR A LA BASE DE DATOS
public ConnectMySQL()
{
    mysql_debug(1);
    mysql_connect(SQL_HOST, SQL_USER, SQL_DB, SQL_PASS);
    mysql_query(1, "SELECT Nombre FROM usuarios WHERE Nombre = 'Plantilla'"); //Comprueba si se ha conectado correctamente
    mysql_store_result();
    new value;
	value = mysql_num_rows();
	mysql_free_result();
	if(value != 0)
	{
	    printf("[CONEXIÓN]: Se ha establecido conexión con la base de datos.\n");
	    ConectadoBaseDatos = 1;
	    SendRconCommand("hostname Siglo XXI - Roleplay avanzado [siglo-21.net] ");
	}
	else
	{
        printf("[CONEXIÓN]: No se ha podido conectar con la base de datos.\n");
	    SendRconCommand("hostname Siglo XXI | No hay conexión.");
	    ConectadoBaseDatos = 0;
	}
	return 1;
}

CheckAccountExists(account[])
{
	new string[128], Query[180];
    format(string, sizeof(string), "SELECT Nombre FROM usuarios WHERE Nombre = '%s'", account);
    mysql_query(1, string);

	mysql_store_result();

	new value;
	value = mysql_num_rows();
	mysql_free_result();
	
	new certificado;
	if(value != 0) // Cuenta creada
	{ // ¿Certificada?

		mysql_format(1, Query, sizeof(Query), "SELECT * FROM `usuarios` WHERE `Nombre` = '%s'", account);
		mysql_query(1, Query);
		mysql_store_result();
     	certificado = cache_get_field_content_int(0, "Certificado");
	}
	else
	{
	    certificado = 0;
	}
	return certificado;
}

stock RemovePlayerWeapon(playerid, weaponid) //Quitar un arma de un jugador
{
    if(!IsPlayerConnected(playerid) || weaponid < 0 || weaponid > 50)
        return;
    new saveweapon[13], saveammo[13];
    for(new slot = 0; slot < 13; slot++)
        GetPlayerWeaponData(playerid, slot, saveweapon[slot], saveammo[slot]);
    ResetPlayerWeapons(playerid);
    for(new slot; slot < 13; slot++)
    {
        if(saveweapon[slot] == weaponid || saveammo[slot] == 0)
            continue;
        GivePlayerWeapon(playerid, saveweapon[slot], saveammo[slot]);
    }
    GivePlayerWeapon(playerid, 0, 1);
}

stock GetPlayerWeaponAmmo(playerid, weapon) //Retorna la municion de un arma
{
    new wdata[13][2];
    for(new i; i < 13; i++)
    {
        GetPlayerWeaponData(playerid, i, wdata[i][0], wdata[i][1]);
        if(wdata[i][0] == weapon)return wdata[i][1];
    }
    return 0;
}

forward EncenderMotor(playerid); //Sistema arrancado de vehiculos
public EncenderMotor(playerid)
{
	new car = GetPlayerVehicleID(playerid), string[128];
	format(string, sizeof(string), "%s pone la llave en el contacto y enciende el motor del %s.", NombreJugadorProxy(playerid), GetVehicleName(car));
	ProxDetector(15.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(car,1,lights,alarm,doors,bonnet,boot,objective);
	EncendiendoMotor[playerid] = 0;
}

stock GetDistance(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2) //Calcula distancia entre dos puntos
{
	return floatround(floatsqroot(((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2)) + ((z1 - z2) * (z1 - z2))));
}

forward CambioSkin(playerid); //Congelar al jugador
public CambioSkin(playerid)
{
    if(JugadorInfo[playerid][pSexo] == 2) ShowModelSelectionMenu(playerid, primerropamujer, "Eleccion de skin", 0x00000099, 0xFFFFFFF96, 0xFF0000AA);
    else ShowModelSelectionMenu(playerid, primerropahombre, "Eleccion de skin", 0x00000099, 0xFFFFFFF96, 0xFF0000AA);
    return 1;
}

forward Congelar(playerid); //Congelar al jugador
public Congelar(playerid)
{
	TogglePlayerControllable(playerid, 0);
    return 1;
}

forward Descongelar(playerid); //Descongelar al jugador
public Descongelar(playerid)
{
	TogglePlayerControllable(playerid, 1);
    return 1;
}

forward Descongelar2(playerid); //Descongelar2 al jugador
public Descongelar2(playerid)
{
	TogglePlayerControllable(playerid, 1);
}

forward Destasear(playerid); //Destasea al jugador
public Destasear(playerid)
{
    if(Taseado[playerid] > 0){Taseado[playerid] = 0;}
    TogglePlayerControllable(playerid, 1);
    return 1;
}

forward LlenarDeposito(playerid); //Timer para llenar el depósito
public LlenarDeposito(playerid)
{
	new carid = GetPlayerVehicleID(playerid), string[128];
    LlenandoDeposito[playerid] = 0;
	GameTextForPlayer(playerid, "~b~Deposito llenado", 3000, 5);
	TogglePlayerControllable(playerid, 1);
	format(string, 128, "Precio: %d$ (%d lts.)\nDepósito coche: %d(lts.)", PrecioLlenar[playerid], CantidadLlenar[playerid], CocheInfo[carid][cGas]);
	ShowPlayerDialog(playerid, 32, DIALOG_STYLE_MSGBOX, "FACTURA", string, "Cerrar", "");
    return 1;
}

forward Muerto(playerid); //Sistema de muerte (en shock)
public Muerto(playerid)
{
	if(JugadorInfo[playerid][pMuerto] > 0)
	{
	    Muerte[playerid] = JugadorInfo[playerid][pMuerto];
		JugadorInfo[playerid][pMuerto] = 0;
		SpawnPlayer(playerid);
		if(JugadorInfo[playerid][pEncarcelado] == 0)
		{
	  		SetPlayerVirtualWorld(playerid, 0);
		    SetPlayerInterior(playerid, 0);
		    GetPlayerLevel(playerid);
		    SendClientMessage(playerid, COLOR_GREEN, "Tu personaje ha reaparecido. Ha perdido la memoria de lo ocurrido. Ten más cuidado la próxima vez.");
		}
		if(JugadorInfo[playerid][pEncarcelado] == 1 || JugadorInfo[playerid][pEncarcelado] == 2)
		{
			SendClientMessage(playerid, COLOR_GREEN, "Estabas pagando tu condena. Fuiste resituado en la prisión.");
		}
	}
	return 1;
}

forward MuertoFlash(playerid); //Luz al morir
public MuertoFlash(playerid)
{
	if(JugadorInfo[playerid][pMuerto] > 0)
	{
	    RemovePlayerColorFade(playerid);
        FlashPlayerScreen(playerid, 0xFFFFFFFF, 1, 1);
	}
	return 1;
}

stock GetWeaponModel(weaponid) //Modelo de un arma
{
        switch(weaponid)
        {
            case 1:
                return 331;

                case 2..8:
                    return weaponid+331;

        case 9:
                    return 341;

                case 10..15:
                        return weaponid+311;

                case 16..18:
                    return weaponid+326;

                case 22..29:
                    return weaponid+324;

                case 30,31:
                    return weaponid+325;

                case 32:
                    return 372;

                case 33..45:
                    return weaponid+324;

                case 46:
                    return 371;
        }
        return 0;
}

forward RecargarTaser(playerid); //Recarga el táser (PD)
public RecargarTaser(playerid)
{
	TaserRecarga[playerid] = 0;
	return 1;
}

stock DropObjeto(ObjetoID, Cantidad, Float:X, Float:Y, Float:Z, world, interior, const NombreJugador[])
{
    if(ObjetoID != 0)
    {
        for(new i = 0; i < sizeof(DropInfo); i++)
        {
            if(DropInfo[i][DropPosX] == 0.0 && DropInfo[i][DropPosY] == 0.0 && DropInfo[i][DropPosZ] == 0.0)
            {
                new randomz = random(360);
        		new Float:rotx, Float:roty, Float:rotz;
                DropInfo[i][DropID] = ObjetoID;
                DropInfo[i][DropCantidad] = Cantidad;
                DropInfo[i][DropPosX] = X;
                DropInfo[i][DropPosY] = Y;
                DropInfo[i][DropPosZ] = Z;
                DropInfo[i][DropVWorld] = world;
                DropInfo[i][DropInterior] = interior;
                format(DropInfo[i][Persona], 32, NombreJugador);
                rotx = 90;
                roty = 0;
                rotz = randomz;
                
                if(ObjetoID >= 0 && ObjetoID <= 38) {rotx = 80;}
                if(ObjetoID >= 39 && ObjetoID <= 46) {rotx = 0;}
                if(ObjetoID >= 47 && ObjetoID <= 49) {rotx = 0;}
                if(ObjetoID >= 50 && ObjetoID <= 53) {rotx = 0; Z+=0.02;}
                if(ObjetoID == 67) {rotx = 0;}
                if(ObjetoID >= 75 && ObjetoID <= 79) {rotx = 0;}
                if(ObjetoID >= 102 && ObjetoID <= 124) {rotx = 0; Z+=0.02;}
                if(ObjetoID == 125) {rotx = 0; rotz+=0.07;}
                if(ObjetoID == 126) {rotx = 0;}
                if(ObjetoID == 126) {Z+=0.2;}
                if(ObjetoID >= 58 && ObjetoID <= 64) {rotx = 0;}
                if(ObjetoID >= 71 && ObjetoID <= 73) {rotx = 0;}
				if(ObjetoID == 125) {Z+=0.16;}
				if(ObjetoID == 127) {Z+=0.16;}
                if(ObjetoID == 176) {Z+=0.16;}
				if(ObjetoID == 177) {rotx = 0; Z+=0.33;}

                DropObject[i] = CreateDynamicObject(ObjetoInfo[ObjetoID][ModeloObjeto], X, Y, Z-1, rotx, roty, rotz, world);
                SetTimerEx("DropObjetoTimer", 36000000, false, "i", i);
                return 1;
            }
        }
        return 1;
    }
    return 1;
}

forward DropObjetoTimer(i);
public DropObjetoTimer(i)
{
    DestroyDynamicObject(DropObject[i]);
    DropInfo[i][DropPosX] = 0.0;
    DropInfo[i][DropPosY] = 0.0;
    DropInfo[i][DropPosZ] = 0.0;
    DropInfo[i][DropID] = 0;
    DropInfo[i][DropCantidad] = 0;
    return 1;
}

GetPlayerConcesionarioEx(playerid) //Retorna ID de concesionario
{
	new Concesionario;
	for(new i = 0; i < 7; i ++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5, Concesionarios[i][cX], Concesionarios[i][cY], Concesionarios[i][cZ]))
		{
			Concesionario = i;
		}
	}
	return Concesionario;
}

GetPlayerConcesionario(playerid) //Retorna ID de concesionario + 1
{
	new Concesionario;
	for(new i = 0; i < 7; i ++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5, Concesionarios[i][cX], Concesionarios[i][cY], Concesionarios[i][cZ]))
		{
			Concesionario = i+1;
		}
	}
	return Concesionario;
}

//Gamemode
main() { }

forward OnUpdate();
public OnUpdate()
{
	gettime(Hour, Minute, Second);
	SetWorldTime(Hour);
	
	for(new v = 0; v < MAX_VEHICLES; v++)
    {
        new Float:health;
        GetVehicleHealth(v, health);
        if(health < 251)
        {
            SetVehicleHealth(v, 251);
        }
    }
}

public OnGameModeInit()
{
	new string[128];
	//UsePlayerPedAnims(); // Forma de caminar rápida
    ConnectMySQL(); //Conectar a la base MYSQL
    AntiDeAMX(); //Evita desencriptar a partir del .AMX
    AddPlayerClass(60,1481.3505,-1743.2399,13.5469,360.0,-1,-1,-1,-1,-1,-1); //Sistema de spawn
    AllowInteriorWeapons(1); //Permite armas en interiores
    DisableInteriorEnterExits(); //Desactiva entradas a locales
    EnableStuntBonusForAll(0); //Desactiva bonus por saltos y acrobacias
    SetTimer("TimerDeUnaHora",3600000,1); //Iniciar timer de una hora
    SetTimer("TimerDeUnMinuto",60000,1); //Inicia timer de un minuto
    SetTimer("TimerDeCincoMinutos",60000*5,1); // Inicia timer de 5 minutos
    SetTimer("TimerDeMedioMinuto",30000,1); //Inicia timer de medio minuto
    SetTimer("TimerDeMedioSegundo",500,1); //Inicia timer de medio segundo
    SetTimer("TimerDeUnSegundo",1000,1); //Inicia timer de medio segundo
    SetTimer("RandomWeather", 3600000, 1); //Tiempo aleatorio

    CargasTotal = 100;

    SetTimer("OnUpdate", 1000, true);
    ManualVehicleEngineAndLights(); //Sistema arranque de vehiculos
    AreaDepositoLSPD = CreateDynamicPolygon(PuntosDeposito, 12, 17.5); //Área depósito LSPD
    Cerrados = 0;
    SendRconCommand("weburl www.siglo-21.net/register");
    SendRconCommand("mapname San Andreas");
    SetGameModeText("Roleplay en español");
	SendRconCommand("language Español/Spanish");
	
    SendRconCommand("rcon_password siglo2c1d70d895ea54a7bd6e071c62cadbf1siglo");

    for(new i; i < MAX_INFORMES; i++)
	{
		Informes[i][iPaciente] = -1;
		Informes[i][iMedico] = -1;
	}

    Streamer_TickRate(200);
    Streamer_SetMaxItems(STREAMER_TYPE_OBJECT,  10000);
    Streamer_VisibleItems(STREAMER_TYPE_OBJECT, 10000);
    SetNameTagDrawDistance(15.0);

	CargarObjetos();
    CargarObjetos2();
    CargarObjetos3();
    CargarObjetos4();

    lspdpuertaint1 = CreateDynamicObject(1569, 1553.60791, -1252.49023, 8605.08691,   0.00000, 0.00000, 0.00010); // PUERTA 1
	CreateDynamicObject(1569, 1552.12793, -1252.49023, 8605.08691,   0.00000, 0.00000, 0.00000); // MARCO 1
	lspdpuertaint2 = CreateDynamicObject(1569, 1553.60791, -1259.23694, 8605.08691,   0.00000, 0.00000, 0.00010); // PUERTA 2
    CreateDynamicObject(1569, 1552.12793, -1259.23694, 8605.08691,   0.00000, 0.00000, 0.00000); // MARCO 2

    SetActorInvulnerable(Traficante[0], false);
    SetActorInvulnerable(Traficante[1], false);
	Traficante[0] = CreateActor(29,2218.2908,-1048.5878,57.6828,305.1864); // Traficante blanco en Las Colinas
	Traficante[1] = CreateActor(30,1328.0433,206.3178,19.5547,112.5097);   // Traficante negro en Montgomery
	ApplyActorAnimation(Traficante[0],"GANGS","leanIDLE",4.0,1,0,1,1,1); // /apoyarse del Traficante en Las Colinas
	ApplyActorAnimation(Traficante[1],"DEALER","DEALER_IDLE",4.1,0,1,1,1,1); // /brazos del Traficante en Montgomery
	
	uniformespd = LoadModelSelectionMenu("uniformes-pd.txt");
 	uniformesfd = LoadModelSelectionMenu("uniformes-fd.txt");
 	catalogocoches1 = LoadModelSelectionMenu("concesionario1.txt");
 	catalogocoches2 = LoadModelSelectionMenu("concesionario2.txt");
 	catalogocoches3 = LoadModelSelectionMenu("concesionario3.txt");
 	catalogocoches4 = LoadModelSelectionMenu("concesionario4.txt");
 	catalogocoches5 = LoadModelSelectionMenu("concesionario5.txt");
 	catalogocoches6 = LoadModelSelectionMenu("concesionario6.txt");
 	catalogocoches7 = LoadModelSelectionMenu("concesionario7.txt");
    ropa = LoadModelSelectionMenu("ropa.txt"); //Sistema elección skin binco
    ropahombre = LoadModelSelectionMenu("ropa-hombre.txt"); //Sistema elección skin binco
    ropamujer = LoadModelSelectionMenu("ropa-mujer.txt"); //Sistema elección skin binco
    ropaservicio = LoadModelSelectionMenu("ropa.txt"); //Sistema elección skin binco
    
    primerropahombre = LoadModelSelectionMenu("ropa-hombre.txt"); //Sistema elección al spawnear
    primerropamujer = LoadModelSelectionMenu("ropa-mujer.txt"); //Sistema elección al spawnear
    
    CreateDynamicPickup(1318, 23, 2813.7825,891.6566,10.7578);  // Venta cajas
    CreateDynamicPickup(1318, 23, 2348.0203,-2302.1589,13.5469); // Compra cajas
	CreateDynamicPickup(1239, 23, 2045.6418,-1908.1290,13.5469); // Autoescuela
	CreateDynamicPickup(1314, 23, 1481.0206,-1771.1138,18.7958); // Ayuntamiento
	CreateDynamicPickup(1240, 23, 1172.7678,-1323.3112,15.4009); // Hospital All Saints
	CreateDynamicPickup(1273, 23, 1571.1857,-1336.7592,16.4844); // Entrada estudios
	CreateDynamicPickup(1247, 23, 1797.9216,-1578.7523,14.0898); // Pickup prisión 1.
	CreateDynamicPickup(1247, 23, 1772.0688,-1548.1400,9.9063); // Pickup patio-prisión 2.
	CreateDynamicPickup(1247, 23, 1555.1526,-1675.6384,16.1953); // Comisaría Pershing
	CreateDynamicPickup(1314, 23, 2529.6387,-1281.9346,1048.2891); // Entrada prisión interior por dentro
	CreateDynamicPickup(19523, 23, 2232.6450,-1159.8384,25.89060); // Hotel de Jefferson
	CreateDynamicPickup(19523, 23, 1726.8964,-1636.7064,20.21729); // Hotel de Commerce
	CreateDynamicPickup(1239, 23, 1771.8159,-1099.0328,24.0781); // Entrada LSFD (interior)
	CreateDynamicPickup(1239, 23, 1774.0291,-1106.4480,1024.1171); // Salida LSFD (interior)
	CreateDynamicPickup(1239, 23, 1045.6129,51.5695,801.0356); // Colocar un /anuncio
	CreateDynamicPickup(1274, 23, 1684.8969,-1343.3191,17.4355); // Entrada Banco
	CreateDynamicPickup(1239, 23, 1525.2449,-1677.8851,5.8906); // Armeria LSPD
	CreateDynamicPickup(1239, 23, 312.2588,-165.6956,999.6010); // Pickup /armas
	
    MoveDynamicObject(puertapatioprision, 2571.4004000,-1307.7000000,1043.0000000, 3.0); // Se abre el patio de la prisión
	
	CreateDynamicObject(1227, 1555.70081, -1684.40845, 6.06940, 0.00000, 0.00000, -90.00000); // Basurero Pershing Square
    CreateDynamicObject(3224, 1550.191406, -1258.620727, 8605.0722659, 0.000000, 0.000000, 51.099983); // Planta PD
	CreateDynamicObject(3225, 1550.184326, -1253.400634, 8605.075195, 0.000000, 0.000000, -20.597421); // Planta PD

	restaurantes = CreateMenu("Restaurante", 2, 50.0, 180.0, 200.0, 200.0); //Menú restaurantes
	AddMenuItem(restaurantes, 0, "Botella de cerveza");
	AddMenuItem(restaurantes, 1, "15$");
	AddMenuItem(restaurantes, 0, "Copa de vino");
	AddMenuItem(restaurantes, 1, "15$");
    AddMenuItem(restaurantes, 0, "Vaso de whisky");
	AddMenuItem(restaurantes, 1, "15$");
	AddMenuItem(restaurantes, 0, "Vaso de ron");
	AddMenuItem(restaurantes, 1, "15$");
	AddMenuItem(restaurantes, 0, "Salir");

	bares = CreateMenu("Menu bar", 2, 50.0, 180.0, 200.0, 200.0); //Menú bares
	AddMenuItem(bares, 0, "Botella de cerveza");
	AddMenuItem(bares, 1, "15$");
	AddMenuItem(bares, 0, "Botella de agua");
	AddMenuItem(bares, 1, "10$");
	AddMenuItem(bares, 0, "Lata de fanta");
	AddMenuItem(bares, 1, "13$");
	AddMenuItem(bares, 0, "Lata de sprunk");
	AddMenuItem(bares, 1, "13$");
	AddMenuItem(bares, 0, "Copa de vino");
	AddMenuItem(bares, 1, "15$");
    AddMenuItem(bares, 0, "Vaso de whisky");
	AddMenuItem(bares, 1, "15$");
	AddMenuItem(bares, 0, "Vaso de ron");
	AddMenuItem(bares, 1, "15$");
	AddMenuItem(bares, 0, "Salir");

	comidasrapidas = CreateMenu("Menu comida", 2, 50.0, 180.0, 200.0, 200.0); //Menú comidas rápidas
	AddMenuItem(comidasrapidas, 0, "Lata de sprunk");
	AddMenuItem(comidasrapidas, 1, "13$");
	AddMenuItem(comidasrapidas, 0, "Lata de fanta");
	AddMenuItem(comidasrapidas, 1, "13$");
	AddMenuItem(comidasrapidas, 0, "Botella de agua");
	AddMenuItem(comidasrapidas, 1, "10$");
	AddMenuItem(comidasrapidas, 0, "Hamburguesa");
	AddMenuItem(comidasrapidas, 1, "20$");
	AddMenuItem(comidasrapidas, 0, "Burrito");
	AddMenuItem(comidasrapidas, 1, "20$");
	AddMenuItem(comidasrapidas, 0, "Pizza");
	AddMenuItem(comidasrapidas, 1, "30$");
	AddMenuItem(comidasrapidas, 0, "Salir");

	discoteca = CreateMenu("Menu disco", 2, 50.0, 180.0, 200.0, 200.0); //Menú clubs y discotecas
	AddMenuItem(discoteca, 0, "Lata de sprunk");
	AddMenuItem(discoteca, 1, "13$");
	AddMenuItem(discoteca, 0, "Lata de fanta");
	AddMenuItem(discoteca, 1, "13$");
    AddMenuItem(discoteca, 0, "Vaso de whisky");
	AddMenuItem(discoteca, 1, "15$");
	AddMenuItem(discoteca, 0, "Vaso de ron");
	AddMenuItem(discoteca, 1, "15$");
	AddMenuItem(discoteca, 0, "Salir");

	puticlub = CreateMenu("Menu club", 2, 50.0, 180.0, 200.0, 200.0); //Menú puticlubs
	AddMenuItem(puticlub, 0, "Botella de cerveza");
	AddMenuItem(puticlub, 1, "15$");
    AddMenuItem(puticlub, 0, "Vaso de whisky");
	AddMenuItem(puticlub, 1, "15$");
	AddMenuItem(puticlub, 0, "Vaso de ron");
	AddMenuItem(puticlub, 1, "15$");
	AddMenuItem(puticlub, 0, "Salir");

	ammunation = CreateMenu("Tienda de armas", 2, 50.0, 180.0, 200.0, 200.0); //Menú ammunations
	AddMenuItem(ammunation, 0, "Navaja");
	AddMenuItem(ammunation, 1, "100$");
    AddMenuItem(ammunation, 0, "Chaleco pesado");
	AddMenuItem(ammunation, 1, "15000$");
	/*AddMenuItem(ammunation, 0, "Pistola");
	AddMenuItem(ammunation, 1, "5000$");
	AddMenuItem(ammunation, 0, "Cargador pistola");
	AddMenuItem(ammunation, 1, "500$");
	AddMenuItem(ammunation, 0, "Desert Eagle");
	AddMenuItem(ammunation, 1, "6000$");
	AddMenuItem(ammunation, 0, "Cargador Deagle");
	AddMenuItem(ammunation, 1, "600$");
	AddMenuItem(ammunation, 0, "Uzi");
	AddMenuItem(ammunation, 1, "7000$");
	AddMenuItem(ammunation, 0, "Cargador Uzi");
	AddMenuItem(ammunation, 1, "700$");
	AddMenuItem(ammunation, 0, "Escopeta");
	AddMenuItem(ammunation, 1, "8000$");
	AddMenuItem(ammunation, 0, "Cartuchos escopeta");
	AddMenuItem(ammunation, 1, "800$");*/
	AddMenuItem(ammunation, 0, "Rifle de caza");
	AddMenuItem(ammunation, 1, "12000$");
	AddMenuItem(ammunation, 0, "Cargador rifle");
	AddMenuItem(ammunation, 1, "1000$");

	menu247 = CreateMenu("24/7", 2, 50.0, 180.0, 200.0, 200.0); //Menú tienda 24/7
	AddMenuItem(menu247, 0, "Bolsa de doritos");
	AddMenuItem(menu247, 1, "20$");
	AddMenuItem(menu247, 0, "Bolsa de patatas");
	AddMenuItem(menu247, 1, "20$");
	AddMenuItem(menu247, 0, "Bolsa de nachos");
	AddMenuItem(menu247, 1, "20$");
	AddMenuItem(menu247, 0, "Lata de sprunk");
	AddMenuItem(menu247, 1, "13$");
	AddMenuItem(menu247, 0, "Lata de fanta");
	AddMenuItem(menu247, 1, "13$");
	AddMenuItem(menu247, 0, "Botella de agua");
	AddMenuItem(menu247, 1, "10$");
	AddMenuItem(menu247, 0, "Botella de cerveza");
	AddMenuItem(menu247, 1, "15$");
	AddMenuItem(menu247, 0, "Salir");

	tiendadeportes = CreateMenu("Tienda deportiva", 2, 50.0, 180.0, 200.0, 200.0); //Menú tienda de deportes
	AddMenuItem(tiendadeportes, 0, "Bate");
	AddMenuItem(tiendadeportes, 1, "50$");
	AddMenuItem(tiendadeportes, 0, "Palo de golf");
	AddMenuItem(tiendadeportes, 1, "70$");
	AddMenuItem(tiendadeportes, 0, "Palo de billar");
	AddMenuItem(tiendadeportes, 1, "60$");
	AddMenuItem(tiendadeportes, 0, "Maletin cuero");
	AddMenuItem(tiendadeportes, 1, "50$");
	AddMenuItem(tiendadeportes, 0, "Salir");

	ferreteria = CreateMenu("Ferreteria", 2, 50.0, 180.0, 200.0, 200.0); //Menú ferretería
	AddMenuItem(ferreteria, 0, "Palanca");
	AddMenuItem(ferreteria, 1, "100$");
	AddMenuItem(ferreteria, 0, "Navaja");
	AddMenuItem(ferreteria, 1, "200$");
	AddMenuItem(ferreteria, 0, "Destornillador");
	AddMenuItem(ferreteria, 1, "20$");
	AddMenuItem(ferreteria, 0, "Extintor");
	AddMenuItem(ferreteria, 1, "300$");
	AddMenuItem(ferreteria, 0, "Spray");
	AddMenuItem(ferreteria, 1, "150$");
	AddMenuItem(ferreteria, 0, "Pala");
	AddMenuItem(ferreteria, 1, "60$");
	AddMenuItem(ferreteria, 0, "Lata gasolina");
	AddMenuItem(ferreteria, 1, "120$");
	AddMenuItem(ferreteria, 0, "Salir");

	tiendaropa = CreateMenu("Tienda de ropa", 2, 50.0, 180.0, 200.0, 200.0); //Menú tiendas de ropa
	AddMenuItem(tiendaropa, 0, "Skin");
	AddMenuItem(tiendaropa, 1, "50$");
	AddMenuItem(tiendaropa, 0, "Salir");

	electronica = CreateMenu("Tienda de electrónica", 2, 50.0, 180.0, 200.0, 200.0); //Menú tienda electrónica
	AddMenuItem(electronica, 0, "Movil");
	AddMenuItem(electronica, 1, "400$");
	AddMenuItem(electronica, 0, "Camara");
	AddMenuItem(electronica, 1, "40$");
	AddMenuItem(electronica, 0, "Reloj casio digital");
	AddMenuItem(electronica, 1, "40$");
	AddMenuItem(electronica, 0, "Salir");

	estanco = CreateMenu("Estanco", 2, 50.0, 180.0, 200.0, 200.0); //Menú estanco
	AddMenuItem(estanco, 0, "Cigarrillos");
	AddMenuItem(estanco, 1, "20$");
	AddMenuItem(estanco, 0, "Mechero");
	AddMenuItem(estanco, 1, "15$");
	AddMenuItem(estanco, 0, "Salir");

	licoreria = CreateMenu("Licoreria", 2, 50.0, 180.0, 200.0, 200.0); //Menú licoreria
	AddMenuItem(licoreria, 0, "Botella Whisky");
	AddMenuItem(licoreria, 1, "30$");
	AddMenuItem(licoreria, 0, "Botella Ron");
	AddMenuItem(licoreria, 1, "30$");
	AddMenuItem(licoreria, 0, "Botella cerveza");
	AddMenuItem(licoreria, 1, "20$");
	AddMenuItem(licoreria, 0, "Paquete cerveza");
	AddMenuItem(licoreria, 1, "200$");
	AddMenuItem(licoreria, 0, "Salir");
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	for(new i; i < sizeof(Jobs); i++) //Jobs
 	{
 		CreateDynamicPickup(1239, 23, Jobs[i][Jx], Jobs[i][Jy], Jobs[i][Jz]);
		format(string, 128, "Trabajo de %s\n{ffffff}Para más información: /trabajo", Jobs[i][JobNombre]);
		CreateDynamic3DTextLabel(string, Amarillo, Jobs[i][Jx], Jobs[i][Jy], Jobs[i][Jz] + 0.1, 2);
	}
	
	for(new i; i < sizeof(Concesionarios); i++) //Concesionarios
	{
		CreateDynamicPickup(1239, 23, Concesionarios[i][cX], Concesionarios[i][cY], Concesionarios[i][cZ]);
		format(string, 128, "Concesionario %s\n{b0b0b0}/comprarveh - /catalogo", Concesionarios[i][cNombre]);
		CreateDynamic3DTextLabel(string, Amarillo, Concesionarios[i][cX], Concesionarios[i][cY], Concesionarios[i][cZ] + 0.1, 2);
	}
    
    for(new i; i < sizeof(AutoEscuelas); i++) //Autoescuelas
	{
		CreateDynamicPickup(1239, 23, AutoEscuelas[i][AutoX], AutoEscuelas[i][AutoY], AutoEscuelas[i][AutoZ]);
		format(string, 128, "%s\n{ffffff}Para más información: /examen", AutoEscuelas[i][AutoNombre]);
		CreateDynamic3DTextLabel(string, Amarillo, AutoEscuelas[i][AutoX], AutoEscuelas[i][AutoY], AutoEscuelas[i][AutoZ] + 0.5, 5);
	}
	
	format(string, sizeof(string), "[{fdfe8b}CAJAS{FFFFFF}]\n{FFCC99}Stock: %d/100\n{33AA33}(( /cargo comprar ))\n{b0b0b0}Precio: 100$ c/u", CargasTotal);
	compra = CreateDynamic3DTextLabel(string, -1, 2348.0203,-2302.1589,13.7469, 5.2);

    format(string, sizeof(string), "[{fdfe8b}CAJAS{FFFFFF}]\n{FFCC99}Stock: %d/300\n{33AA33}(( /cargo vender ))\n{b0b0b0}Precio: 420$ c/u", CargasTotalVendidas);
	venta = CreateDynamic3DTextLabel(string, -1, 2813.7825,891.6566,10.7578, 5.2);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//////////////////////////////////////////////////Mapeos Siglo XXI////////////////////////////////////////////////////////////////////////////

	//Estacionamiento 01
    /*CreateObject(1483, 1221.39636, -976.50140, 45.05220,   0.00000, 0.00000, -90.00000);
    CreateObject(1483, 1214.70618, -976.49017, 45.05220,   0.00000, 0.00000, -90.00000);
    CreateObject(1483, 1207.94617, -976.49017, 45.05220,   0.00000, 0.00000, -90.00000);
    CreateObject(1483, 1202.56616, -976.49017, 45.05220,   0.00000, 0.00000, -90.00000);
    CreateObject(18285, 1208.46655, -972.24298, 42.57230,   0.00000, 0.00000, -152.00000);
    CreateObject(19868, 1206.30518, -994.05524, 43.67650,   0.00000, 0.00000, 0.00000);
    CreateObject(19868, 1195.83789, -994.09949, 43.67650,   0.00000, 0.00000, 0.00000);
    CreateObject(19868, 1201.08020, -994.08478, 43.67650,   0.00000, 0.00000, 0.00000);
    CreateObject(19868, 1211.51892, -994.05817, 43.67650,   0.00000, 0.00000, 0.00000);
    CreateObject(19868, 1216.73926, -994.06360, 43.67650,   0.00000, 0.00000, 0.00000);
    CreateObject(19868, 1221.98206, -994.07617, 43.67650,   0.00000, 0.00000, 0.00000);
    CreateObject(19868, 1227.23425, -994.08844, 43.67650,   0.00000, 0.00000, 0.00000);
    CreateObject(19868, 1230.74951, -994.09839, 43.67650,   0.00000, 0.00000, 0.00000);
    CreateObject(19868, 1190.55090, -994.11273, 43.67650,   0.00000, 0.00000, 0.00000);
    CreateObject(19868, 1187.00037, -994.11914, 43.67650,   0.00000, 0.00000, 0.00000);*/
    
    //Unity
    /*CreateDynamicObject(4859, 1891.58923, -1859.41541, 13.72629,   0.00000, 0.00000, 0.12000);
	CreateDynamicObject(4859, 1891.44458, -1890.51074, 13.63517,   0.00000, 0.00000, -180.23999);
	CreateDynamicObject(4859, 1891.81763, -1859.47437, 13.75103,   0.00000, 0.00000, 0.12000);
	CreateDynamicObject(4859, 1891.80737, -1890.51624, 13.74525,   0.00000, 0.00000, -180.23999);
	CreateDynamicObject(3587, 1944.77271, -1913.52051, 15.03131,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3587, 1924.19983, -1909.30481, 15.03131,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3587, 1908.92725, -1911.51697, 15.03131,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3587, 1883.43176, -1911.42346, 15.03131,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3587, 1867.95935, -1911.42969, 15.03131,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3587, 1841.28430, -1911.32312, 15.03131,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3587, 1854.09106, -1911.37402, 15.03131,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3587, 1941.65820, -1891.37756, 15.03131,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3587, 1922.74829, -1891.42212, 15.03131,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3587, 1909.24976, -1893.89331, 15.03131,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3587, 1896.47498, -1891.77563, 15.03131,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3587, 1873.65308, -1891.50793, 15.03131,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3587, 1859.46765, -1891.56274, 15.03131,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3587, 1843.39624, -1892.12402, 15.03131,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3648, 1938.71948, -1867.61633, 15.23882,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3648, 1922.02039, -1867.06250, 15.23882,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3648, 1922.42712, -1849.60925, 15.23882,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3648, 1939.94568, -1849.46838, 15.23882,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3648, 1939.70154, -1832.63586, 15.23882,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3648, 1922.77563, -1832.09265, 15.23882,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3648, 1921.01904, -1809.56787, 15.27723,   0.00000, 0.00000, -89.58000);
	CreateDynamicObject(3648, 1938.87891, -1809.98291, 15.27723,   0.00000, 0.00000, -89.58000);
	CreateDynamicObject(673, 1911.05261, -1883.44189, 11.44531,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(1308, 1948.57666, -1877.09680, 11.53906,   356.85840, 0.08727, -3.14159);
	CreateDynamicObject(1308, 1915.68835, -1888.93835, 11.53906,   356.85840, 0.08727, -3.14159);
	CreateDynamicObject(17575, 1844.06567, -1823.20337, 16.13097,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(17575, 1877.68323, -1842.43640, 16.13097,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1412, 1831.78430, -1843.36804, 13.80335,   0.00000, 0.00000, -89.70001);
	CreateDynamicObject(1412, 1831.71375, -1832.96692, 13.81197,   0.00000, 0.00000, -89.70001);
	CreateDynamicObject(3555, 1899.76428, -1864.59521, 15.12584,   0.00000, 0.00000, -180.35999);
	CreateDynamicObject(3555, 1899.19800, -1843.02515, 15.12584,   0.00000, 0.00000, -360.05988);
	CreateDynamicObject(3555, 1898.72070, -1819.14722, 15.12584,   0.00000, 0.00000, -360.05988);
	CreateDynamicObject(4859, 1891.94666, -1830.71472, 13.78930,   0.00000, 0.00000, 0.12000);
	CreateDynamicObject(3555, 1871.43311, -1809.22717, 15.12584,   0.00000, 0.00000, -360.05988);
	CreateDynamicObject(3555, 1885.04626, -1809.20410, 15.12584,   0.00000, 0.00000, -360.05988);
	CreateDynamicObject(3555, 1838.64063, -1857.72461, 15.12584,   0.00000, 0.00000, -180.35999);
	CreateDynamicObject(3555, 1850.85095, -1857.55127, 15.12584,   0.00000, 0.00000, -179.64001);
	CreateDynamicObject(1412, 1831.74487, -1838.14954, 13.80335,   0.00000, 0.00000, -89.70001);
	CreateDynamicObject(1412, 1831.79773, -1848.56946, 13.81197,   0.00000, 0.00000, -89.70001);
	CreateDynamicObject(1412, 1831.84277, -1853.74902, 13.81197,   0.00000, 0.00000, -89.70001);
	CreateDynamicObject(1412, 1831.88696, -1858.90918, 13.81197,   0.00000, 0.00000, -89.70001);
	CreateDynamicObject(3578, 1830.99756, -1865.07092, 13.16950,   0.00000, 0.00000, -90.12006);
	CreateDynamicObject(3578, 1830.97058, -1868.83362, 13.16950,   0.00000, 0.00000, -90.12006);
	CreateDynamicObject(673, 1943.91260, -1903.20459, 11.44531,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1930.71497, -1873.19409, 12.41637,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1910.09302, -1870.37036, 11.44531,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1909.59021, -1852.29150, 11.44531,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1908.83850, -1832.18909, 11.44531,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1909.04907, -1799.49207, 11.44531,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(10841, 1968.42102, -1862.38184, 9.90461,   0.00000, 0.00000, 100.68000);
	CreateDynamicObject(10841, 1966.83301, -1840.20361, 9.90461,   0.00000, 0.00000, 87.36000);
	CreateDynamicObject(10841, 1679.86377, -1777.44019, 9.78281,   0.00000, 0.00000, 89.94001);
	CreateDynamicObject(620, 1871.51074, -1842.68799, 7.54472,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(620, 1885.72766, -1842.14856, 4.44902,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(700, 1847.80493, -1825.59204, 12.52225,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(700, 1847.91956, -1818.81250, 12.52225,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(700, 1856.76526, -1818.76636, 12.52225,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(700, 1856.13147, -1825.33215, 12.52225,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(1332, 1829.63379, -1861.18311, 13.39130,   0.00000, 0.00000, -91.08000);
	CreateDynamicObject(1332, 1829.58484, -1872.62231, 13.35187,   0.00000, 0.00000, -91.08000);
	CreateDynamicObject(1331, 1829.53540, -1865.39697, 13.25078,   0.00000, 0.00000, -89.87999);
	CreateDynamicObject(1333, 1829.58496, -1868.97058, 13.25989,   0.00000, 0.00000, -92.22003);
	CreateDynamicObject(1308, 1833.87781, -1875.27710, 11.51923,   356.85840, 0.08727, -3.14159);
	CreateDynamicObject(673, 1852.40210, -1901.20093, 11.44531,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1832.61560, -1886.11682, 11.44531,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1832.44788, -1893.59351, 11.44531,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1832.53162, -1901.18933, 11.44531,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1832.64893, -1907.84558, 11.44531,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1832.42053, -1913.89124, 11.44531,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1832.51514, -1920.58179, 11.44531,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(1412, 1844.88623, -1879.83435, 13.77612,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(1412, 1850.14063, -1879.55469, 13.77461,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(1412, 1855.39795, -1879.27466, 13.78947,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(1358, 1844.26489, -1883.35327, 13.69458,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1358, 1854.80212, -1873.69177, 13.69679,   0.00000, 0.00000, -90.00001);
	CreateDynamicObject(1308, 1836.65320, -1868.67017, 11.51923,   356.85840, 0.08727, -3.14159);
	CreateDynamicObject(1226, 1845.94958, -1871.72424, 16.23098,   0.00000, 0.00000, -271.55997);
	CreateDynamicObject(1226, 1839.32166, -1875.17529, 16.23098,   0.00000, 0.00000, -458.81982);
	CreateDynamicObject(673, 1882.07715, -1871.77368, 11.44531,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1866.71692, -1871.27563, 11.44531,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1873.94360, -1871.28015, 11.44531,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1886.25952, -1896.22327, 11.44531,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1886.69763, -1888.37244, 11.44531,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1890.79736, -1883.27734, 11.44531,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1898.44104, -1915.69849, 11.44531,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(673, 1898.31140, -1905.08276, 11.44531,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(1358, 1834.82703, -1871.87427, 13.72614,   0.00000, 0.00000, -89.40001);
	CreateDynamicObject(647, 1891.46484, -1864.64258, 13.67035,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(647, 1890.95410, -1854.30139, 13.67035,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(647, 1890.60889, -1837.63245, 13.67035,   0.00000, 0.00000, 111.48004);
	CreateDynamicObject(647, 1898.11707, -1855.82300, 13.67035,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(647, 1912.08167, -1827.99182, 13.67035,   0.00000, 0.00000, 111.48004);
	CreateDynamicObject(647, 1910.37305, -1809.46252, 13.67035,   0.00000, 0.00000, 111.48004);
	CreateDynamicObject(647, 1901.38550, -1809.13586, 13.67035,   0.00000, 0.00000, 50.10004);
	CreateDynamicObject(647, 1859.50256, -1804.46436, 13.67035,   0.00000, 0.00000, 50.10004);
	CreateDynamicObject(647, 1871.37671, -1799.58569, 13.67035,   0.00000, 0.00000, 50.10004);
	CreateDynamicObject(647, 1861.87781, -1804.54077, 13.67035,   0.00000, 0.00000, 50.10004);
	CreateDynamicObject(1413, 1863.75940, -1863.50195, 13.67969,   356.85840, 0.00000, -90.21840);
	CreateDynamicObject(1413, 1863.74255, -1858.26746, 13.67969,   356.85840, 0.00000, -88.29840);
	CreateDynamicObject(1413, 1863.69604, -1853.00745, 13.67969,   356.85840, 0.00000, -88.89841);
	CreateDynamicObject(1308, 1872.39807, -1883.75122, 11.53906,   356.85840, 0.08727, -3.14159);
	CreateDynamicObject(1308, 1858.50208, -1883.81006, 11.53906,   356.85840, 0.08727, -3.14159);
	CreateDynamicObject(1498, 1836.35291, -1815.58801, 12.58577,   0.00000, 0.00000, 0.30000);
	CreateDynamicObject(1498, 1869.93188, -1834.71069, 12.58729,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1413, 1938.59302, -1922.31763, 13.67969,   3.14159, 0.00000, 0.71433);
	CreateDynamicObject(1413, 1928.05029, -1922.31311, 13.67969,   3.14159, 0.00000, 0.71433);
	CreateDynamicObject(1413, 1922.77966, -1922.30164, 13.67969,   3.14159, 0.00000, 0.71433);
	CreateDynamicObject(1413, 1917.49438, -1922.35596, 13.67969,   3.14159, 0.00000, 0.71433);
	CreateDynamicObject(1412, 1837.76477, -1922.17395, 13.77612,   356.85840, 0.00000, 0.26159);
	CreateDynamicObject(1412, 1842.94580, -1922.16711, 13.77612,   356.85840, 0.00000, 0.26159);
	CreateDynamicObject(1412, 1852.00183, -1922.16785, 13.77612,   356.85840, 0.00000, -0.75841);
	CreateDynamicObject(5040, 1785.54126, -1914.34583, 15.87672,   0.00000, 0.00000, 180.06000);
	CreateDynamicObject(1522, 1797.16504, -1927.47705, 12.44513,   0.00000, 0.00000, 89.40002);
	CreateDynamicObject(1522, 1797.14197, -1928.97986, 12.44513,   0.00000, 0.00000, 89.28004);
	CreateDynamicObject(2957, 1788.13367, -1913.59131, 13.98623,   0.00000, 0.00000, 90.18002);
	CreateDynamicObject(1227, 1780.69397, -1904.34924, 13.21444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 1791.37463, -1916.85388, 11.65820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 1789.22937, -1898.45313, 11.67816,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 1801.82336, -1933.49097, 11.63495,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 1804.37988, -1933.37012, 11.63495,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 1794.08228, -1898.42310, 11.67816,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19866, 1794.60278, -1916.84204, 11.65820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1227, 1777.00818, -1904.36768, 13.21444,   0.00000, 0.00000, 0.00000);*/

    //pasillos
    CreateDynamicObject(1413, 1695.01086, -2080.58008, 13.67970,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(12938, 1663.47632, -2114.33521, 16.43610,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1413, 1681.28821, -2156.52490, 13.45190,   0.00000, 0.00000, 0.57080);
    CreateDynamicObject(3641, 1668.79468, -2144.89502, 14.95245,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1617, 1659.13062, -2098.43701, 17.08310,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1617, 1654.94214, -2104.38232, 17.08310,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(850, 1657.55298, -2103.21802, 12.64293,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(850, 1654.50952, -2101.66357, 12.64290,   0.00000, 0.00000, 105.00000);
    CreateDynamicObject(1345, 1662.99426, -2113.26099, 13.25880,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1413, 1695.01086, -2085.89990, 13.67970,   -0.08000, 0.00000, 90.00000);
    CreateDynamicObject(1413, 1695.01086, -2091.19189, 13.67970,   -0.08000, 0.00000, 90.00000);
    CreateDynamicObject(1413, 1695.01086, -2096.45190, 13.67970,   -0.08000, 0.00000, 90.00000);
    CreateDynamicObject(1413, 1693.03015, -2100.96338, 13.67970,   0.00000, 0.00000, 44.00000);
    CreateDynamicObject(1413, 1688.39868, -2102.73999, 13.67970,   -0.08000, 0.00000, 0.00000);
    CreateDynamicObject(1413, 1683.09277, -2102.73999, 13.67970,   -0.08000, 0.00000, 0.00000);
    CreateDynamicObject(1299, 1694.38843, -2102.18384, 13.09030,   0.00000, 0.00000, 40.00000);
    CreateDynamicObject(1358, 1682.34216, -2115.60181, 13.53905,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1358, 1682.47595, -2111.47949, 13.53910,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(1442, 1657.53979, -2105.98169, 13.12023,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(12957, 1647.18188, -2104.56470, 13.19128,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1441, 1654.38452, -2103.90234, 13.24710,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(1440, 1651.25427, -2103.44653, 13.24710,   0.00000, 0.00000, -180.00000);
    CreateDynamicObject(1450, 1647.41602, -2101.86182, 13.11351,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(851, 1650.32251, -2101.98462, 12.80144,   0.00000, 0.00000, 135.00000);
    CreateDynamicObject(851, 1651.83838, -2101.94458, 12.80347,   0.00000, 0.00000, -11.00000);
    CreateDynamicObject(849, 1651.45496, -2100.62695, 12.82045,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1368, 1669.04492, -2098.81738, 13.22143,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1421, 1670.20532, -2094.82495, 19.17097,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1421, 1668.47925, -2094.83057, 19.17097,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1771, 1652.82556, -2103.84595, 13.76170,   62.00000, 0.00000, 180.00000);
    CreateDynamicObject(1728, 1695.67212, -2079.41724, 12.52920,   0.00000, 0.00000, 25.00000);
    CreateDynamicObject(1728, 1698.97168, -2078.51709, 12.52920,   0.00000, 0.00000, -4.00000);
    CreateDynamicObject(1551, 1698.44189, -2079.15698, 12.77557,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1543, 1698.30615, -2079.36914, 12.53850,   0.00000, 0.00000, 84.00000);
    CreateDynamicObject(1551, 1698.26245, -2079.21826, 12.77560,   0.00000, 0.00000, 76.00000);
    CreateDynamicObject(1543, 1700.80908, -2079.50098, 12.53850,   0.00000, 0.00000, 193.00000);
    CreateDynamicObject(1520, 1698.06409, -2079.22632, 12.59950,   0.00000, 0.00000, -55.00000);
    CreateDynamicObject(1520, 1701.43628, -2078.99829, 12.59950,   0.00000, 0.00000, -39.00000);
    CreateDynamicObject(1520, 1695.43542, -2080.09204, 12.59950,   0.00000, 0.00000, -55.00000);
    CreateDynamicObject(1520, 1695.27112, -2080.08105, 12.59950,   0.00000, 0.00000, 25.00000);
    CreateDynamicObject(1520, 1695.41052, -2080.40137, 12.59950,   0.00000, 0.00000, 37.00000);
    CreateDynamicObject(1368, 1702.24280, -2100.94482, 13.24280,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(1514, 1649.41626, -2103.52808, 12.78170,   0.00000, 0.00000, -55.00000);
    CreateDynamicObject(922, 1702.09534, -2081.16187, 13.43890,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(922, 1702.09534, -2085.81812, 13.43890,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(922, 1702.09534, -2090.49243, 13.43890,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(922, 1695.72839, -2083.39404, 13.43890,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(922, 1695.72839, -2088.06787, 13.43890,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(922, 1695.72839, -2092.71240, 13.44484,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3576, 1681.37329, -2097.27197, 14.01250,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(3576, 1684.07556, -2097.82349, 14.01250,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3630, 1684.06140, -2101.03271, 13.95784,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(8886, 1691.37109, -2082.86963, 15.77170,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(5262, 1683.51758, -2082.77759, 15.38650,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(5261, 1686.47620, -2088.98486, 14.67949,   0.00000, 0.00000, 1.00000);
    CreateDynamicObject(3585, 1678.59583, -2081.98071, 14.14422,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(18260, 1690.03723, -2092.31152, 14.07852,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2567, 1692.27881, -2099.70093, 14.45740,   0.00000, 0.00000, 44.00000);
    CreateDynamicObject(3066, 1657.33997, -2094.62451, 13.53225,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3630, 1669.71594, -2089.39038, 14.03119,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3630, 1693.40784, -2092.23389, 14.03119,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(18665, 1697.74097, -2077.81030, 14.49665,   -11.00000, 0.00000, 90.00000);
    CreateDynamicObject(18665, 1699.78101, -2077.81030, 14.49670,   3.00000, 0.00000, 90.00000);
    CreateDynamicObject(851, 1662.96899, -2115.78027, 12.80144,   0.00000, 0.00000, 135.00000);
    CreateDynamicObject(851, 1664.38867, -2115.91699, 12.80144,   0.00000, 0.00000, 135.00000);
    CreateDynamicObject(851, 1665.16162, -2114.35547, 12.80140,   0.00000, 0.00000, 69.00000);
    CreateDynamicObject(852, 1664.03772, -2114.55078, 12.80140,   0.00000, 0.00000, 69.00000);
    CreateDynamicObject(850, 1663.51917, -2110.84424, 12.66350,   0.00000, 0.00000, 113.00000);
    CreateDynamicObject(853, 1659.74927, -2105.53101, 12.92464,   0.00000, 0.00000, 69.00000);
    CreateDynamicObject(1442, 1678.50940, -2122.70190, 13.12020,   0.00000, 0.00000, 40.00000);
    CreateDynamicObject(922, 1666.48108, -2138.85620, 13.43970,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(922, 1666.48108, -2143.57739, 13.43970,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(922, 1671.10950, -2145.97583, 13.43970,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(922, 1671.10950, -2150.69458, 13.43970,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1709, 1668.31079, -2133.92896, 13.24980,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1750, 1671.40454, -2150.18555, 13.48380,   0.00000, 0.00000, -62.00000);
    CreateDynamicObject(1362, 1671.17505, -2136.75854, 13.12641,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(851, 1659.71008, -2134.63525, 12.82040,   0.00000, 0.00000, 55.00000);
    CreateDynamicObject(851, 1660.32678, -2133.02368, 12.82040,   0.00000, 0.00000, -33.00000);
    CreateDynamicObject(3066, 1678.59717, -2144.77832, 13.51742,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1344, 1677.76257, -2138.22583, 13.31414,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1368, 1666.38965, -2151.41138, 13.20865,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1296, 1666.31421, -2152.04590, 12.84440,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1265, 1666.77307, -2146.39868, 12.84437,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3593, 1672.00403, -2121.07861, 13.02163,   0.00000, 0.00000, 105.00000);
    CreateDynamicObject(3593, 1672.51257, -2118.06006, 13.39347,   11.00000, 0.00000, 200.00000);
    CreateDynamicObject(854, 1678.82251, -2123.01318, 12.68820,   0.00000, 0.00000, -33.00000);
    CreateDynamicObject(854, 1678.23071, -2123.65039, 12.68820,   0.00000, 0.00000, -33.00000);
    CreateDynamicObject(854, 1677.18201, -2123.25684, 12.68820,   0.00000, 0.00000, -33.00000);
    CreateDynamicObject(854, 1677.71045, -2122.39697, 12.68820,   0.00000, 0.00000, -33.00000);
    CreateDynamicObject(854, 1674.86035, -2123.10718, 12.68820,   0.00000, 0.00000, -33.00000);
    CreateDynamicObject(853, 1676.43823, -2122.12573, 12.90689,   0.00000, 0.00000, -33.00000);
    CreateDynamicObject(853, 1676.53491, -2123.60889, 12.90689,   0.00000, 0.00000, -33.00000);
    CreateDynamicObject(853, 1700.96472, -2093.83740, 12.90689,   0.00000, 0.00000, -33.00000);
    CreateDynamicObject(853, 1698.85815, -2094.40723, 12.90690,   0.00000, 0.00000, 55.00000);
    CreateDynamicObject(854, 1701.42188, -2094.46411, 12.75645,   0.00000, 0.00000, 55.00000);
    CreateDynamicObject(854, 1701.61987, -2095.44678, 12.75645,   0.00000, 0.00000, 55.00000);
    CreateDynamicObject(854, 1700.16699, -2095.81860, 12.75645,   0.00000, 0.00000, 55.00000);
    CreateDynamicObject(851, 1698.55164, -2096.20752, 12.75640,   0.00000, 0.00000, 55.00000);
    CreateDynamicObject(852, 1701.67493, -2096.87280, 12.48784,   0.00000, 0.00000, 185.00000);
    CreateDynamicObject(854, 1696.28894, -2091.02393, 12.75645,   0.00000, 0.00000, 55.00000);
    CreateDynamicObject(1362, 1702.17712, -2098.05273, 13.14840,   0.00000, 0.00000, -360.00000);
    CreateDynamicObject(854, 1696.42053, -2088.95605, 12.75645,   0.00000, 0.00000, 55.00000);
    CreateDynamicObject(854, 1697.58228, -2089.90723, 12.75645,   0.00000, 0.00000, 55.00000);
    CreateDynamicObject(854, 1696.87842, -2087.49561, 12.75645,   0.00000, 0.00000, 55.00000);
    CreateDynamicObject(854, 1698.24792, -2088.15723, 12.75645,   0.00000, 0.00000, 55.00000);
    CreateDynamicObject(3641, 1691.30969, -2147.38892, 14.75010,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3641, 1706.88550, -2147.81689, 14.75010,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2943, 1714.68176, -2138.97705, 12.99685,   4.00000, 76.00000, 185.00000);
    CreateDynamicObject(852, 1713.71082, -2138.74951, 12.54594,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(851, 1712.41858, -2138.72437, 12.85140,   0.00000, 0.00000, 142.00000);
    CreateDynamicObject(851, 1710.62097, -2138.51904, 12.79325,   0.00000, 0.00000, 142.00000);
    CreateDynamicObject(852, 1711.44653, -2137.58667, 12.49406,   0.00000, 0.00000, 142.00000);
    CreateDynamicObject(852, 1713.22107, -2137.48950, 12.49188,   0.00000, 0.00000, 142.00000);
    CreateDynamicObject(849, 1709.38220, -2137.22852, 12.81957,   0.00000, 0.00000, 142.00000);
    CreateDynamicObject(849, 1708.33289, -2138.69409, 12.80407,   0.00000, 0.00000, 353.00000);
    CreateDynamicObject(853, 1714.80066, -2137.68799, 12.91917,   0.00000, 0.00000, 273.00000);
    CreateDynamicObject(3805, 1709.85071, -2139.48730, 15.00624,   90.00000, 0.00000, 90.00000);
    CreateDynamicObject(12986, 1688.13513, -2128.40112, 14.05178,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2838, 1714.51379, -2136.07080, 12.54560,   0.00000, 0.00000, 47.00000);
    CreateDynamicObject(2838, 1713.73157, -2135.87378, 12.54560,   0.00000, 0.00000, 135.00000);
    CreateDynamicObject(2837, 1715.58044, -2136.72559, 12.55615,   0.00000, 0.00000, 229.00000);
    CreateDynamicObject(2837, 1715.28931, -2136.29419, 12.55620,   0.00000, 0.00000, 287.00000);
    CreateDynamicObject(2837, 1715.21326, -2135.75244, 12.55620,   0.00000, 0.00000, 178.00000);
    CreateDynamicObject(2866, 1716.64148, -2138.48120, 12.55620,   0.00000, 0.00000, 178.00000);
    CreateDynamicObject(3285, 1715.25562, -2130.04932, 14.40810,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3285, 1696.57922, -2129.67700, 14.40810,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(853, 1700.31641, -2149.61035, 12.91920,   0.00000, 0.00000, 222.00000);
    CreateDynamicObject(854, 1702.04260, -2150.26978, 12.76071,   0.00000, 0.00000, 127.00000);
    CreateDynamicObject(854, 1701.79919, -2148.82983, 12.76071,   0.00000, 0.00000, 127.00000);
    CreateDynamicObject(854, 1703.31702, -2150.13306, 12.76071,   0.00000, 0.00000, 127.00000);
    CreateDynamicObject(854, 1700.86108, -2147.07251, 12.76071,   0.00000, 0.00000, 127.00000);
    CreateDynamicObject(854, 1701.81042, -2146.09497, 12.76071,   0.00000, 0.00000, 127.00000);
    CreateDynamicObject(854, 1700.59436, -2145.99463, 12.76071,   0.00000, 0.00000, 127.00000);
    CreateDynamicObject(854, 1702.83948, -2147.98413, 12.76071,   0.00000, 0.00000, 127.00000);
    CreateDynamicObject(849, 1705.12402, -2150.12549, 12.81957,   0.00000, 0.00000, 142.00000);
    CreateDynamicObject(849, 1701.02759, -2148.32495, 12.81960,   0.00000, 0.00000, 360.00000);
    CreateDynamicObject(1440, 1705.85376, -2138.60303, 13.04770,   0.00000, 0.00000, 185.00000);
    CreateDynamicObject(1440, 1702.95300, -2138.22266, 13.04770,   0.00000, 0.00000, 171.00000);
    CreateDynamicObject(2675, 1706.04456, -2136.84521, 12.61360,   0.00000, 0.00000, 135.00000);
    CreateDynamicObject(2675, 1706.07861, -2136.90845, 12.61360,   0.00000, 0.00000, 280.00000);
    CreateDynamicObject(3302, 1700.88843, -2138.82031, 13.64290,   105.00000, 0.00000, 0.00000);
    CreateDynamicObject(17969, 1703.35193, -2139.34570, 14.68812,   0.00000, 0.00000, -91.00000);
    CreateDynamicObject(1362, 1710.15930, -2132.62354, 13.10403,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(922, 1691.80334, -2155.48926, 13.40070,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(922, 1691.80334, -2155.48926, 9.40070,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(922, 1693.67822, -2152.59473, 13.40070,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(922, 1690.80005, -2154.25610, 13.40070,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(853, 1717.98926, -2155.70068, 12.91920,   0.00000, 0.00000, 302.00000);
    CreateDynamicObject(854, 1720.22827, -2155.67798, 12.76035,   0.00000, 0.00000, 302.00000);
    CreateDynamicObject(854, 1721.68921, -2155.62109, 12.76035,   0.00000, 0.00000, 302.00000);
    CreateDynamicObject(854, 1720.84412, -2155.01099, 12.76035,   0.00000, 0.00000, 302.00000);
    CreateDynamicObject(852, 1721.68896, -2153.82886, 12.50040,   0.00000, 0.00000, -273.00000);
    CreateDynamicObject(851, 1719.11719, -2154.43530, 12.76040,   0.00000, 0.00000, 312.00000);
    CreateDynamicObject(854, 1721.50562, -2154.65332, 12.76035,   0.00000, 0.00000, 302.00000);
    CreateDynamicObject(1362, 1706.08887, -2145.52710, 13.10403,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(684, 1715.92773, -2125.84912, 12.89423,   360.00000, 0.00000, 90.00000);
    CreateDynamicObject(684, 1701.17212, -2129.49072, 12.92285,   360.00000, 0.00000, 0.00000);
    
    //Puente richman
	CreateDynamicObject(901, 1259.03223, -617.91229, 101.76474,   0.00000, 0.00000, 64.92001);
	CreateDynamicObject(901, 1257.80090, -621.30328, 100.44765,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(659, 1260.91040, -597.83911, 103.78419,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(659, 1263.04309, -593.35272, 102.59913,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(659, 1264.72876, -588.54700, 101.15959,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(1319, 1268.50598, -617.28125, 102.87387,   0.00000, 0.00000, -61.26000);
	CreateDynamicObject(1319, 1267.58948, -615.47882, 102.82324,   0.00000, 0.00000, -62.27999);
	CreateDynamicObject(1319, 1266.94812, -613.61212, 102.75571,   0.00000, 0.00000, -64.14000);
	CreateDynamicObject(1319, 1265.47791, -611.63062, 102.75571,   0.00000, 0.00000, -49.98001);
	CreateDynamicObject(1319, 1263.50122, -610.25452, 102.68036,   0.00000, 0.00000, -55.86001);
	CreateDynamicObject(1319, 1262.02026, -608.83337, 102.66037,   0.00000, 0.00000, -61.98000);
	CreateDynamicObject(3091, 1268.37366, -611.29736, 102.65430,   0.00000, 0.00000, 133.38002);
	CreateDynamicObject(3379, 1284.55103, -597.61987, 99.53725,   0.00000, 0.00000, 102.36003);
	CreateDynamicObject(1306, 1155.13098, -641.66241, 110.24094,   0.00000, 0.00000, -317.57980);
	CreateDynamicObject(7933, 1155.33813, -633.47626, 103.23161,   0.00000, 0.00000, 91.08000);
	CreateDynamicObject(1237, 1149.91077, -632.98035, 102.62952,   0.00000, 0.00000, -90.48004);
	CreateDynamicObject(714, 1116.61816, -599.22986, 103.30879,   0.00000, 0.00000, 0.00000);
    
    //Mapa 03
    CreateDynamicObject(3284, 1737.89197, -2128.77783, 14.48250,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1440, 1725.81750, -2141.28174, 13.04430,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1441, 1735.85071, -2124.79956, 13.16720,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(3284, 1729.90698, -2143.52588, 14.48250,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3172, 1740.33594, -2149.90503, 12.50070,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(922, 1741.85706, -2141.38965, 13.44347,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(922, 1741.85706, -2136.68945, 13.44350,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(922, 1738.83655, -2134.84863, 13.44350,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(922, 1726.20178, -2155.82007, 13.44350,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(922, 1730.86694, -2155.82007, 13.44350,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(922, 1735.53027, -2155.82007, 13.44350,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19836, 1738.69556, -2135.05420, 13.50450,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19836, 1738.95569, -2135.05176, 13.50450,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19836, 1738.88452, -2134.97827, 13.50450,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1543, 1739.20959, -2134.93433, 13.48145,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1543, 1739.03247, -2134.82935, 13.48150,   0.00000, 0.00000, 120.00000);
    CreateDynamicObject(335, 1738.96777, -2135.08789, 13.70360,   178.00000, 4.00000, 156.00000);
    CreateDynamicObject(365, 1726.06909, -2155.69165, 13.48840,   90.00000, 0.00000, 69.00000);
    CreateDynamicObject(365, 1726.23499, -2155.87476, 13.48840,   90.00000, 0.00000, 135.00000);
    CreateDynamicObject(365, 1726.60254, -2155.66284, 13.48840,   90.00000, 0.00000, 142.00000);
    CreateDynamicObject(849, 1725.31323, -2153.98828, 12.83990,   0.00000, 0.00000, 86.00000);
    CreateDynamicObject(848, 1733.51160, -2152.38623, 14.10900,   0.00000, 0.00000, 120.00000);
    CreateDynamicObject(843, 1724.53247, -2151.46948, 13.15816,   0.00000, 0.00000, 91.00000);
    CreateDynamicObject(851, 1726.29346, -2154.08838, 12.83990,   0.00000, 0.00000, 55.00000);
    CreateDynamicObject(852, 1725.38525, -2151.95044, 12.83990,   0.00000, 0.00000, 55.00000);
    CreateDynamicObject(852, 1726.75183, -2152.32422, 12.83990,   0.00000, 0.00000, -18.00000);
    CreateDynamicObject(852, 1727.24744, -2150.82886, 12.83990,   0.00000, 0.00000, -18.00000);
    CreateDynamicObject(811, 1726.42700, -2149.28198, 13.58493,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2891, 1741.60046, -2136.30786, 13.53010,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2916, 1741.74658, -2136.87817, 13.57010,   0.00000, 0.00000, 76.00000);

	//mapa 04
	CreateDynamicObject(3285, 1764.92676, -2148.40283, 14.39860,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3285, 1756.69922, -2148.40283, 14.39860,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3285, 1748.44507, -2148.40283, 14.39860,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3285, 1764.92676, -2135.25171, 14.39860,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3285, 1756.73657, -2135.25171, 14.39860,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3285, 1748.44507, -2135.25171, 14.39860,   0.00000, 0.00000, 0.00000);

	//canchas
	CreateDynamicObject(1413, 2440.91895, -1668.84119, 13.78660,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1413, 2435.62036, -1668.82129, 13.78660,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1413, 2430.34351, -1668.82129, 13.78660,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1413, 2425.06592, -1668.82117, 13.78660,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1413, 2422.31055, -1671.46680, 13.78660,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(1413, 2422.31763, -1676.74121, 13.78660,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(1413, 2443.45337, -1676.82483, 13.78660,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1413, 2443.45703, -1671.54688, 13.78660,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1413, 2443.45703, -1682.07581, 13.78660,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1413, 2440.68433, -1681.22473, 13.78660,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1413, 2443.45703, -1687.35889, 13.78660,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(946, 2423.27075, -1675.41357, 14.81424,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(946, 2442.59692, -1675.58374, 14.81420,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1368, 2416.71362, -1676.24951, 13.30878,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1368, 2416.67358, -1673.32202, 13.30880,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1362, 2422.44214, -1681.32678, 13.36430,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1432, 2419.34766, -1687.58643, 12.82370,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1728, 2422.45264, -1685.25378, 12.79960,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(1510, 2419.52856, -1687.50684, 13.45654,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1520, 2419.45264, -1687.62634, 13.47645,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2674, 2417.48071, -1681.26294, 12.80640,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2674, 2420.27783, -1686.66968, 12.80640,   0.00000, 0.00000, 76.00000);
    CreateDynamicObject(2674, 2418.05420, -1676.77637, 12.80640,   0.00000, 0.00000, 120.00000);
    CreateDynamicObject(2670, 2419.48975, -1685.93640, 12.87477,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2670, 2419.37402, -1687.52502, 12.87477,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2670, 2420.60327, -1682.78455, 12.87480,   0.00000, 0.00000, -69.00000);
    CreateDynamicObject(2670, 2417.44189, -1674.67749, 12.87480,   0.00000, 0.00000, 84.00000);
    CreateDynamicObject(1413, 2415.97168, -1694.09265, 13.78660,   0.00000, 0.00000, 338.00000);
    CreateDynamicObject(1413, 2420.86768, -1696.09265, 13.78660,   0.00000, 0.00000, 338.00000);
    CreateDynamicObject(3783, 2234.10107, -1444.12830, 25.24680,   0.00000, 1.00000, 0.00000);
    CreateDynamicObject(3783, 2234.13184, -1423.43481, 25.23765,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3783, 2262.00000, 3772.00000, -1433.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3784, 2258.86426, -1432.76245, 22.99700,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3783, 2260.87231, -1433.36414, 25.23760,   0.00000, 0.00000, 90.60000);
    CreateDynamicObject(3698, 2251.63696, -1408.14111, 25.67134,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3698, 2229.54053, -1408.29553, 25.60065,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3698, 2229.56812, -1459.16602, 25.60065,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3698, 2251.47144, -1459.21228, 25.60065,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1412, 2222.61450, -1465.84302, 23.37560,   0.00000, 0.00000, -90.54000);
    CreateDynamicObject(1412, 2222.58154, -1471.00317, 23.37560,   0.00000, 0.00000, -90.54000);
    CreateDynamicObject(1412, 2225.25781, -1473.48291, 23.37560,   0.00000, 0.00000, -179.94009);
    CreateDynamicObject(1412, 2230.44263, -1473.48291, 23.37560,   0.00000, 0.00000, -179.94009);
    CreateDynamicObject(1412, 2235.60474, -1473.48291, 23.37560,   0.00000, 0.00000, -179.94009);
    CreateDynamicObject(1412, 2240.79199, -1473.48291, 23.37560,   0.00000, 0.00000, -179.94009);
    CreateDynamicObject(1412, 2245.93384, -1473.48291, 23.37560,   0.00000, 0.00000, -179.94009);
    CreateDynamicObject(1412, 2251.12305, -1473.48291, 23.37560,   0.00000, 0.00000, -179.94009);
    CreateDynamicObject(1412, 2256.32300, -1473.48291, 23.32500,   0.00000, 0.00000, -179.94009);
    CreateDynamicObject(1412, 2258.98364, -1470.80652, 23.37560,   0.00000, 0.00000, -271.07999);
    CreateDynamicObject(1412, 2259.08496, -1465.62939, 23.37560,   0.00000, 0.00000, -271.26001);
    CreateDynamicObject(673, 2240.73730, -1460.38293, 19.95478,   356.85840, 0.00000, 3.14159);
    CreateDynamicObject(1412, 2225.28955, -1394.28711, 23.37560,   3.14160, 0.00000, 0.31080);
    CreateDynamicObject(1412, 2230.48047, -1394.28711, 23.37560,   3.14160, 0.00000, 0.31080);
    CreateDynamicObject(1412, 2235.68066, -1394.28711, 23.37560,   3.14160, 0.00000, 0.31080);
    CreateDynamicObject(1412, 2240.85010, -1394.28711, 23.37560,   3.14160, 0.00000, 0.31080);
    CreateDynamicObject(1412, 2246.02100, -1394.28711, 23.37560,   3.14160, 0.00000, 0.31080);
    CreateDynamicObject(1412, 2251.19458, -1394.28711, 23.37560,   3.14160, 0.00000, 0.31080);
    CreateDynamicObject(1412, 2256.37573, -1394.28711, 23.37560,   3.14160, 0.00000, 0.31080);
    CreateDynamicObject(1412, 2259.01147, -1396.98682, 23.37560,   3.14160, 0.00000, -90.40920);
    CreateDynamicObject(1412, 2258.98364, -1402.20569, 23.37560,   3.14160, 0.00000, -90.40920);
    CreateDynamicObject(1412, 2222.64600, -1402.22998, 23.37560,   0.00000, 0.00000, -90.48000);
    CreateDynamicObject(673, 2240.58789, -1408.30566, 21.24704,   356.85840, 0.00000, 3.14159);
    CreateDynamicObject(16061, 2276.02759, -1436.88843, 22.22333,   0.00000, 0.00000, -6.23999);
    CreateDynamicObject(1226, 2240.45142, -1453.75488, 26.60427,   0.00000, 0.00000, -91.26002);
    CreateDynamicObject(1226, 2250.53369, -1449.22400, 26.60427,   0.00000, 0.00000, -269.27939);
    CreateDynamicObject(1226, 2250.28955, -1418.33130, 26.59516,   0.00000, 0.00000, -90.72000);
    CreateDynamicObject(1226, 2241.07959, -1413.17102, 26.59516,   0.00000, 0.00000, -268.26013);
    CreateDynamicObject(1358, 2247.14819, -1423.75293, 24.17483,   0.00000, 0.00000, -90.83997);
    CreateDynamicObject(1438, 2221.42285, -1424.52124, 22.99103,   0.00000, 0.00000, -92.10001);
    CreateDynamicObject(1412, 2222.70044, -1433.88647, 24.13266,   0.00000, 0.00000, -89.63999);
    CreateDynamicObject(1412, 2222.67163, -1428.70422, 24.13266,   0.00000, 0.00000, -89.63999);
    CreateDynamicObject(1412, 2222.76050, -1439.08716, 24.13266,   0.00000, 0.00000, -89.63999);
    CreateDynamicObject(700, 2233.37866, -1433.50867, 23.89490,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(700, 2250.77344, -1433.08350, 23.93041,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1372, 2246.30518, -1445.88220, 23.11167,   0.00000, 0.00000, -269.39987);
    CreateDynamicObject(1281, 2264.11987, -1400.22693, 23.78465,   0.00000, 0.00000, -1.68000);
    CreateDynamicObject(1281, 2269.89648, -1400.33057, 23.78466,   0.00000, 0.00000, -1.68000);
    CreateDynamicObject(1281, 2267.03882, -1409.00024, 23.76914,   0.00000, 0.00000, -1.68000);
    CreateDynamicObject(1281, 2263.86719, -1463.15430, 23.78257,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1432, 2225.89917, -1468.34717, 23.04999,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1432, 2235.38599, -1468.78308, 23.12127,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1432, 2249.14624, -1468.72205, 23.08257,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1432, 2255.27100, -1467.01648, 23.14585,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1432, 2224.98755, -1433.15552, 23.06868,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19966, 2218.16260, -1459.11719, 22.99224,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19966, 2218.25879, -1408.38684, 22.98621,   0.00000, 0.00000, -151.25999);
    CreateDynamicObject(1432, 2226.35791, -1399.76428, 23.06777,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1432, 2232.86694, -1398.66565, 23.03275,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1432, 2247.55591, -1400.21985, 23.07118,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1432, 2254.81348, -1397.61633, 23.07118,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1227, 2221.81958, -1441.93982, 23.80756,   0.00000, 0.00000, -91.32001);
    CreateDynamicObject(1438, 2221.36646, -1444.93469, 22.99103,   0.00000, 0.00000, -92.10001);
    CreateDynamicObject(1221, 2222.01001, -1408.15625, 23.42635,   356.85840, 0.00000, -2.01841);
    CreateDynamicObject(1221, 2221.64160, -1409.15991, 23.42635,   356.85840, 0.00000, -2.01841);
    CreateDynamicObject(1412, 2222.64600, -1397.00195, 23.37560,   0.00000, 0.00000, -90.48000);
    CreateDynamicObject(1308, 2086.70337, -1602.26160, 12.08034,   356.85840, 0.00000, -3.14159);
    CreateDynamicObject(1413, 2055.13354, -1599.38281, 13.71816,   0.00000, 0.00000, -88.85994);
    CreateDynamicObject(1413, 2055.06445, -1594.20398, 13.71816,   0.00000, 0.00000, -88.85994);
    CreateDynamicObject(1413, 2062.96680, -1602.17322, 13.71816,   0.00000, 0.00000, 0.48009);
    CreateDynamicObject(1413, 2057.77856, -1602.16858, 13.71816,   0.00000, 0.00000, -0.35991);
    CreateDynamicObject(1413, 2068.16064, -1602.21582, 13.71816,   0.00000, 0.00000, -0.11991);
    CreateDynamicObject(1413, 2073.43262, -1602.24951, 13.71816,   0.00000, 0.00000, -0.11991);
    CreateDynamicObject(1413, 2078.66309, -1602.30273, 13.71816,   0.00000, 0.00000, -0.11991);
    CreateDynamicObject(1413, 2083.87524, -1602.34705, 13.71816,   0.00000, 0.00000, 0.18009);
    CreateDynamicObject(1431, 2085.43237, -1601.94580, 13.11348,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3241, 2102.18604, -1585.87695, 12.68912,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3241, 2102.22485, -1560.10352, 12.68912,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3241, 2102.21143, -1572.99585, 12.68912,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1308, 2086.81567, -1554.26416, 11.83423,   356.85840, 0.00000, -3.14159);
    CreateDynamicObject(2121, 2110.33911, -1588.08313, 12.98998,   0.00000, 0.00000, 160.43983);
    CreateDynamicObject(1413, 2100.10840, -1603.08276, 13.71816,   0.00000, 0.00000, -5.03991);
    CreateDynamicObject(1413, 2105.36768, -1603.55127, 13.71816,   0.00000, 0.00000, -5.03991);
    CreateDynamicObject(1413, 2110.63013, -1604.04370, 13.71816,   0.00000, 0.00000, -5.03991);
    CreateDynamicObject(1413, 2115.67163, -1605.13953, 13.71816,   0.00000, 0.00000, -19.25991);
    CreateDynamicObject(3174, 2088.72949, -1589.97302, 12.13078,   0.00000, 0.00000, -180.24004);
    CreateDynamicObject(3174, 2088.67676, -1556.58459, 12.13078,   0.00000, 0.00000, -179.34004);
    CreateDynamicObject(3174, 2088.69995, -1568.83313, 12.13078,   0.00000, 0.00000, -178.74011);
   	CreateDynamicObject(3174, 2088.82397, -1579.06970, 12.13078,   0.00000, 0.00000, -179.70004);
	CreateDynamicObject(3253, 2102.23071, -1599.01672, 13.18833,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(3362, 2118.02002, -1601.24304, 12.94190,   0.00000, -1.00000, -19.00000);
	CreateDynamicObject(1457, 2108.14111, -1596.11975, 13.72519,   0.00000, 0.00000, 91.85997);
	CreateDynamicObject(1457, 2113.54614, -1601.76733, 13.72519,   0.00000, 0.00000, -109.74001);
	CreateDynamicObject(1328, 2083.11792, -1592.03906, 13.02804,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1328, 2098.41382, -1601.92493, 13.02804,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1328, 2097.08716, -1579.48584, 12.71480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1328, 2097.03418, -1566.64624, 12.56849,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1327, 2087.00000, 603.00000, -1549.00000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1327, 2088.30469, -1552.86316, 12.31443,   -1.62000, 92.94001, 0.00000);
	CreateDynamicObject(1327, 2086.89014, -1552.84253, 12.55168,   -27.29998, 74.88009, 69.30000);
	CreateDynamicObject(3783, 2063.43213, -1585.30066, 14.77471,   0.00000, 0.00000, -90.66001);
	CreateDynamicObject(3783, 2077.91968, -1585.35962, 14.74997,   0.00000, 0.00000, -90.12002);
	CreateDynamicObject(3783, 2070.09326, -1549.58179, 14.77471,   0.00000, 0.00000, -180.35997);
	CreateDynamicObject(3783, 2070.08130, -1563.98572, 14.51556,   0.00000, 0.00000, -180.35997);
	CreateDynamicObject(1358, 2053.81494, -1579.63684, 13.65139,   0.00000, 0.00000, -89.58006);
	CreateDynamicObject(1358, 2056.70264, -1570.92261, 13.62950,   0.00000, 0.00000, -89.58006);
	CreateDynamicObject(2677, 2070.12891, -1569.81372, 12.83505,   -0.36000, 0.66000, 0.00000);
	CreateDynamicObject(2677, 2086.02661, -1599.36389, 12.83505,   -0.36000, 0.66000, 0.00000);
	CreateDynamicObject(1440, 2096.70386, -1598.35938, 12.86344,   0.00000, 0.00000, -92.16003);
	CreateDynamicObject(1440, 2096.70874, -1601.16638, 12.86344,   0.00000, 0.00000, -90.78003);
	CreateDynamicObject(1264, 2064.48291, -1597.26050, 12.91551,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1344, 2063.04614, -1597.43750, 13.13801,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1264, 2061.69751, -1597.33398, 12.92768,   3.14159, 0.00000, -71.14930);
	CreateDynamicObject(2971, 2079.10229, -1598.10864, 12.45808,   0.00000, 0.00000, -179.81978);
	CreateDynamicObject(2971, 2075.63818, -1598.08472, 12.45808,   0.00000, 0.00000, -179.81978);
	CreateDynamicObject(854, 2104.10034, -1595.93884, 12.80355,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1344, 2105.79663, -1579.49414, 13.20891,   0.00000, 0.00000, 88.91999);
	CreateDynamicObject(1344, 2105.92041, -1566.60425, 13.13802,   0.00000, 0.00000, 88.91999);
	CreateDynamicObject(1439, 2101.70947, -1593.63110, 12.59348,   0.00000, 0.00000, -90.06001);
	CreateDynamicObject(3052, 2110.56470, -1586.73291, 12.61303,   0.00000, 0.00000, 164.46002);
	CreateDynamicObject(935, 2105.58008, -1585.46143, 13.03749,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(935, 2105.75903, -1586.20166, 13.03749,   0.00000, 0.00000, -24.53999);
	CreateDynamicObject(1368, 2121.82739, -1595.25854, 14.00376,   0.00000, 0.00000, -357.00024);
	CreateDynamicObject(19996, 2120.90869, -1598.00830, 13.09841,   0.00000, 0.00000, 128.51999);
	CreateDynamicObject(19997, 2110.76831, -1586.21655, 12.46095,   0.00000, 0.00000, 72.66000);
	CreateDynamicObject(2121, 2109.03833, -1586.95813, 12.98998,   0.00000, 0.00000, 110.22011);
	CreateDynamicObject(18874, 2110.79468, -1586.31250, 13.29470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1486, 2110.70654, -1585.82849, 13.43660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1486, 2111.00488, -1586.50037, 13.43660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1486, 2110.60376, -1585.98108, 13.43658,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(336, 2109.78467, -1589.84058, 13.29953,   84.00000, 4.00000, 0.00000);
	CreateDynamicObject(1440, 2100.96021, -1602.01416, 13.00323,   0.00000, 0.00000, -184.38005);
	CreateDynamicObject(335, 2121.20337, -1598.23254, 13.33582,   -3.78001, 185.21991, 84.30000);
	CreateDynamicObject(1413, 2123.87476, -1599.01135, 14.41671,   0.30000, 2.46000, -110.45993);
	CreateDynamicObject(1413, 2122.06812, -1603.99402, 14.19091,   1.38000, 4.02000, -110.33994);
	CreateDynamicObject(1413, 2127.60474, -1589.19128, 14.45051,   0.00000, 0.00000, -110.45993);
	CreateDynamicObject(1413, 2125.71753, -1594.10474, 14.50278,   0.00000, 0.00000, -110.45993);
	CreateDynamicObject(1413, 2128.81616, -1585.91138, 14.48107,   0.00000, 0.00000, -110.45993);
	CreateDynamicObject(1368, 2110.46362, -1592.07056, 13.23497,   0.00000, 0.00000, -180.30006);
	CreateDynamicObject(18659, 2102.21289, -1593.66785, 19.48640,   0.00000, 0.00000, 0.18000);
	CreateDynamicObject(1368, 2113.20337, -1592.02173, 13.23497,   0.00000, 0.00000, -180.30006);
	CreateDynamicObject(1413, 2101.92627, -1549.87817, 13.62028,   0.00000, 0.00000, -109.19994);
	CreateDynamicObject(1442, 2119.86084, -1594.99060, 13.49451,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1413, 2124.38672, -1592.44824, 14.41807,   0.00000, 0.00000, -294.54007);
	CreateDynamicObject(1413, 2132.15625, -1581.55603, 14.48107,   0.00000, 0.00000, -109.49995);
	CreateDynamicObject(1413, 2132.24121, -1584.40173, 14.48107,   0.00000, 0.00000, -200.81993);
	CreateDynamicObject(1413, 2133.91040, -1579.38098, 14.48107,   0.00000, 0.00000, -199.07999);
	CreateDynamicObject(1413, 2132.40137, -1576.08411, 14.48107,   0.00000, 0.00000, -109.91994);
	CreateDynamicObject(1413, 2134.23828, -1571.17688, 14.48107,   0.00000, 0.00000, -109.91994);
	CreateDynamicObject(1358, 2133.71680, -1582.10278, 14.42987,   0.00000, 0.00000, -109.56007);
	CreateDynamicObject(1308, 2137.22974, -1563.68066, 11.93490,   356.85840, 0.00000, -3.14159);
	CreateDynamicObject(1358, 2132.09692, -1568.32715, 13.72739,   0.06000, -0.66000, -17.75999);
	CreateDynamicObject(1358, 2128.39453, -1567.18384, 13.61149,   0.06000, -0.66000, -18.36000);
	CreateDynamicObject(1413, 2116.78662, -1590.17310, 13.63470,   0.00000, 0.00000, -470.22018);
	CreateDynamicObject(3783, 2126.19653, -1579.95642, 15.57830,   0.00000, 0.00000, -110.04004);
	CreateDynamicObject(1413, 2134.87207, -1562.47925, 13.78566,   0.00000, 0.00000, -22.31995);
	CreateDynamicObject(1413, 2125.47046, -1558.09875, 13.79150,   0.78000, -1.02000, -25.43996);
	CreateDynamicObject(1413, 2130.10278, -1560.30298, 13.79150,   0.78000, -1.02000, -27.17996);
	CreateDynamicObject(3783, 2124.09497, -1579.56323, 14.67177,   0.00000, 0.00000, -110.04004);
	CreateDynamicObject(1344, 2125.00000, 8306.00000, -1566.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(910, 2126.02393, -1566.71997, 13.54039,   0.00000, 0.00000, -108.42000);
	CreateDynamicObject(1413, 2136.08423, -1566.25830, 13.87368,   0.00000, 0.00000, -109.91994);
	CreateDynamicObject(1412, 2136.09595, -1566.26697, 14.49791,   356.85840, 0.00000, -111.77248);
	CreateDynamicObject(1440, 2077.71118, -1573.06738, 12.88290,   0.00000, 0.00000, -181.02010);
	CreateDynamicObject(1440, 2099.57715, -1549.42188, 12.95745,   0.00000, 0.00000, -374.46002);
	CreateDynamicObject(1440, 2096.70264, -1548.75684, 12.95745,   0.00000, 0.00000, -374.46002);
	CreateDynamicObject(1440, 2092.40210, -1547.90051, 12.95745,   0.00000, 0.00000, -374.46002);
	CreateDynamicObject(1437, 2082.68701, -1548.43872, 13.53485,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3167, 2115.58911, -1578.86890, 12.36588,   0.00000, 0.00000, -196.08005);
	CreateDynamicObject(3167, 2113.58276, -1567.85132, 12.36588,   0.00000, 0.00000, -375.66010);
	CreateDynamicObject(3066, 2116.44458, -1556.12292, 13.11793,   0.00000, 0.00000, 70.20003);
	CreateDynamicObject(944, 2103.58008, -1550.56189, 13.24190,   0.00000, 0.00000, -20.54000);
	CreateDynamicObject(1232, 2122.74194, -1562.66882, 14.87815,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(944, 2121.69824, -1558.02026, 13.25816,   0.00000, 0.00000, 70.19999);
	CreateDynamicObject(944, 2121.69824, -1558.02026, 14.67009,   0.00000, 0.00000, 70.19999);
	CreateDynamicObject(1264, 2077.33203, -1597.46436, 12.91551,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1264, 2077.32495, -1598.54285, 12.91551,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(1264, 2076.70801, -1599.28577, 12.91551,   3.14159, 0.00000, 2.53073);
	CreateDynamicObject(2677, 2079.43604, -1597.52283, 12.83505,   -0.36000, 0.66000, 0.00000);
	CreateDynamicObject(3014, 2108.47290, -1590.67188, 12.71066,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2110, 2109.41602, -1590.05176, 12.51207,   0.00000, 0.00000, -0.72000);
	CreateDynamicObject(1486, 2109.26074, -1589.81128, 13.45730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2670, 2110.22266, -1579.63367, 12.55554,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2670, 2109.28320, -1588.97668, 12.61628,   0.00000, 0.00000, -34.20001);
	CreateDynamicObject(3119, 2114.56958, -1591.27197, 12.84777,   0.00000, 0.00000, -196.43999);
	CreateDynamicObject(12957, 2110.97070, -1563.76343, 12.97414,   0.00000, 0.00000, -15.78000);
	CreateDynamicObject(851, 2110.56372, -1568.39783, 12.63358,   0.00000, 0.00000, -147.59990);
	CreateDynamicObject(851, 2110.49023, -1569.38037, 12.63358,   0.00000, 0.00000, -139.67998);
	CreateDynamicObject(1369, 2105.82397, -1572.55750, 12.91772,   0.00000, 0.00000, 89.16000);
	CreateDynamicObject(1442, 2109.94287, -1573.55408, 13.02470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1442, 2111.91797, -1576.25830, 13.02470,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2670, 2127.43628, -1564.73413, 12.61628,   0.00000, 0.00000, -34.20001);
	CreateDynamicObject(2670, 2127.93530, -1564.18506, 12.61628,   0.00000, 0.00000, -115.38002);
	CreateDynamicObject(2670, 2127.09961, -1562.86523, 12.61628,   0.00000, 0.00000, -34.20001);
	CreateDynamicObject(1442, 2123.19604, -1562.33911, 12.91502,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1442, 2118.63989, -1573.04102, 13.04329,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(854, 2117.93677, -1568.47144, 12.64356,   -0.36000, 0.84000, 44.16000);
	CreateDynamicObject(2121, 2112.15698, -1590.11646, 12.98998,   0.00000, 0.00000, 260.22003);
	CreateDynamicObject(1575, 2110.41211, -1589.97644, 13.28300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1413, 2103.66113, -1552.73315, 13.62030,   0.00000, 0.00000, -6.00000);
	CreateDynamicObject(1232, 2106.29858, -1552.90112, 14.87815,   356.85840, 0.00000, 3.14159);

	//Objetos móviles
	LSPrisonGatesObject[0] = CreateObject(19795, 1824.318481, -1534.731201, 14.296878 - 0.01, 0, 0, 343.0);
    LSPrisonGatesObject[1] = CreateObject(19795, 1822.407592, -1540.949951, 14.296878 - 0.01, 0, 0, 163.0);
    
    LSPrisonGatesObject[2] = CreateObject(19796, 1752.004150, -1591.186523, 14.267195 - 0.01, 0, 0, 77.0);
    LSPrisonGatesObject[3] = CreateObject(19796, 1756.914062, -1592.316284, 14.267195 - 0.01, 0, 0, 257.0);

	lspdpuerta1 = CreateDynamicObject(968,1544.6999500,-1630.8000500,13.3000000,0.0000000,90.0000000,90.0000000); //object(barrierturn) (1)
	lspdpuerta2 = CreateDynamicObject(975,1589.0595700,-1638.1992200,14.0300000,0.0000000,0.0000000,0.0000000); //object(columbiangate) (1)
	lspdpuerta3 = CreateDynamicObject(3089,1582.6169400,-1637.9000200,13.5400000,0.0000000,0.0000000,0.0000000); //object(ab_casdorlok) (1)
	lspdpuerta4 = CreateDynamicObject(2930,213.8999900,124.9300000,1000.6500200,0.0000000,0.0000000,90.0000000); //object(chinatgate) (2)
	lspdpuerta5 = CreateDynamicObject(3089,253.1992200,109.8193400,1003.5000000,0.0000000,0.0000000,270.0000000); //object(ab_casdorlok) (1)
	lspdpuerta6 = CreateDynamicObject(3089,239.5996100,118.3496100,1003.5000000,0.0000000,0.0000000,270.0000000); //object(ab_casdorlok) (1)
	lspdpuerta7 = CreateDynamicObject(2930,258.89999390,91.50000000,1004.09997559,0.00000000,0.00000000,0.00000000); //object(chinatgate) (3)
	Celda1 = CreateDynamicObject(19303, 266.25, 78.46, 1001.29, 0.00, 0.00, 90.00);
	Celda2 = CreateDynamicObject(19303, 266.25, 82.95, 1001.29, 0.00, 0.00, 90.00);
	Celda3 = CreateDynamicObject(19303, 266.25, 87.46, 1001.29, 0.00, 0.00, 90.00);
	lspddeposito = CreateDynamicObject(980,1620.6500244,-1861.5996094,15.3000002,0.0000000,0.0000000,179.9945068); //object(airportgate) (3)
	puertaprision = CreateDynamicObject(2930,2527.2000000,-1294.1300000,1049.9000000,0.0000000,0.0000000,90.0000000); //object(chinatgate) (2)
	puertaprision2 = CreateDynamicObject(2930,2531.7000000,-1283.8740000,1049.9000000,0.0000000,0.0000000,90.0000000); //object(chinatgate) (2)
	
	puertaceldaprision1 = CreateDynamicObject(1495,2555.7200000,-1304.1000000,1043.1000000,0.0000000,0.0000000,0.0000000); //object(gen_doorext01) (1)
	puertaceldaprision2 = CreateDynamicObject(1495,2559.6199000,-1304.0996000,1043.1000000,0.0000000,0.0000000,0.0000000); //object(gen_doorext01) (2)
	puertaceldaprision3 = CreateDynamicObject(1495,2551.8210000,-1304.0996000,1043.1000000,0.0000000,0.0000000,0.0000000); //object(gen_doorext01) (3)
	puertaceldaprision4 = CreateDynamicObject(1495,2547.9224000,-1304.0996000,1043.1000000,0.0000000,0.0000000,0.0000000); //object(gen_doorext01) (5)
	puertaceldaprision5 = CreateDynamicObject(1495,2544.0237000,-1304.0996000,1043.1000000,0.0000000,0.0000000,0.0000000); //object(gen_doorext01) (6)
	puertaceldaprision6 = CreateDynamicObject(1495,2540.1243000,-1304.0996000,1043.1000000,0.0000000,0.0000000,0.0000000); //object(gen_doorext01) (7)
	puertaceldaprision7 = CreateDynamicObject(1495,2536.2253000,-1304.0996000,1043.1000000,0.0000000,0.0000000,0.0000000); //object(gen_doorext01) (8)
	puertaceldaprision8 = CreateDynamicObject(1495,2532.3264000,-1304.0996000,1043.1000000,0.0000000,0.0000000,0.0000000); //object(gen_doorext01) (9)
	puertaceldaprision9 = CreateDynamicObject(1495,2561.6799300,-1283.6899400,1043.0999800,0.0000000,0.0000000,180.0000000); //object(gen_doorext01) (10)
	puertaceldaprision10 = CreateDynamicObject(1495,2557.7798000,-1283.6895000,1043.1000000,0.0000000,0.0000000,180.0000000); //object(gen_doorext01) (11)
	puertaceldaprision11 = CreateDynamicObject(1495,2553.8799000,-1283.6895000,1043.1000000,0.0000000,0.0000000,180.0000000); //object(gen_doorext01) (12)
	puertaceldaprision12 = CreateDynamicObject(1495,2549.9800000,-1283.6895000,1043.1000000,0.0000000,0.0000000,180.0000000); //object(gen_doorext01) (13)
	puertaceldaprision13 = CreateDynamicObject(1495,2546.0798000,-1283.6895000,1043.1000000,0.0000000,0.0000000,180.0000000); //object(gen_doorext01) (14)
	puertaceldaprision14 = CreateDynamicObject(1495,2542.1799000,-1283.6895000,1043.1000000,0.0000000,0.0000000,180.0000000); //object(gen_doorext01) (15)
	puertaceldaprision15 = CreateDynamicObject(1495,2538.2798000,-1283.6895000,1043.1000000,0.0000000,0.0000000,180.0000000); //object(gen_doorext01) (16)
	
	puertapatioprision = CreateDynamicObject(971,2571.3999000,-1304.8300000,1043.0000000,0.0000000,0.0000000,90.0000000); //object(subwaygate) (1)
	
	PuertaEstudio1 = CreateDynamicObject(1506, 1065.92737, 55.30130, 800.03748,   0.00000, 0.00000, 90.00000);
	PuertaEstudio2 = CreateDynamicObject(1506, 1065.95374, 46.16650, 800.03748,   0.00000, 0.00000, 90.00000);

	LSNpuerta1 = CreateDynamicObject(969,781.8000000,-1384.8000000,12.7000000,0.0000000,0.0000000,180.2500000); //object(electricgate) (3)
	LSNpuerta2 = CreateDynamicObject(969,781.8000000,-1330.3000000,12.7000000,0.0000000,0.0000000,178.7470000); //object(electricgate) (5)
	PressBancaBarraObjeto[0] = CreateDynamicObject(2913, barbell_pos[ 0 ][ 0 ], barbell_pos[ 0 ][ 1 ], barbell_pos[ 0 ][ 2 ], barbell_pos[ 0 ][ 3 ], barbell_pos[ 0 ][ 4 ], barbell_pos[ 0 ][ 5 ] );
	PressBancaBarraObjeto[1] = CreateDynamicObject(2913, barbell_pos[ 1 ][ 0 ], barbell_pos[ 1 ][ 1 ], barbell_pos[ 1 ][ 2 ], barbell_pos[ 1 ][ 3 ], barbell_pos[ 1 ][ 4 ], barbell_pos[ 1 ][ 5 ] );
	PressBancaBarraObjeto[2] = CreateDynamicObject(2913, barbell_pos[ 2 ][ 0 ], barbell_pos[ 2 ][ 1 ], barbell_pos[ 2 ][ 2 ], barbell_pos[ 2 ][ 3 ], barbell_pos[ 2 ][ 4 ], barbell_pos[ 2 ][ 5 ] );


	/* ------- AEROPUERTO -------- */
	PuertaAero[0] = CreateDynamicObject(988, 1958.78625, -2189.82690, 13.54420,   0.00000, 0.00000, 180.00000);
	PuertaAero[1] = CreateDynamicObject(988, 1964.28125, -2189.82690, 13.54420,   0.00000, 0.00000, 180.00000);

	/* -------- CONTROL LS -> SF ----------- */
	Peaje[0] = CreateDynamicObject(968, 50.51134, -1534.63757, 4.72510,   0.00000, -90.00000, 82.12010);
	Peaje[1] = CreateDynamicObject(968, 51.38313, -1528.17712, 4.72510,   0.00000, 90.00000, 81.00000);
	CreateDynamicObject(4642, 50.73458, -1532.51648, 5.86960,   0.00000, 0.00000, 173.19980);
	CreateDynamicObject(4642, 51.06216, -1530.34119, 5.86960,   0.00000, 0.00000, 351.58011);
	CreateDynamicObject(966, 51.40155, -1528.11243, 3.99370,   0.00000, 0.00000, -99.00000);
	CreateDynamicObject(966, 50.50586, -1534.77063, 3.99370,   0.00000, 0.00000, 82.14006);
	CreateDynamicObject(1237, 49.66439, -1542.85437, 4.09203,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(1237, 52.60709, -1520.41797, 4.09203,   0.00000, 0.00000, 79.55999);
	
	/* ------- CONTROL LS -> LV  ----------- */
	Peaje[2] = CreateDynamicObject(968, 2879.31592, -800.00293, 10.55326,   0.00000, -90.00000, 0.00000);
	Peaje[3] = CreateDynamicObject(968, 2839.97876, -799.64868, 10.63055,   0.00000, 90.00000, 0.00000);
	Peaje[4] = CreateDynamicObject(968, 2889.98730, -799.98901, 10.63055,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(4642, 2850.90186, -798.67621, 11.59230,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(966, 2839.99316, -799.64172, 9.85690,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1237, 2871.64966, -799.91052, 9.86217,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 2834.62720, -806.61322, 10.72051,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 2903.00952, -800.22583, 10.73450,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1237, 2899.02002, -799.79889, 9.87170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4642, 2880.68506, -798.53528, 11.55770,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(983, 2866.31836, -800.30023, 10.77159,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 2884.54199, -797.12396, 10.54730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(966, 2890.04688, -799.99451, 9.85686,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1237, 2897.59790, -799.79889, 9.87175,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2849.13403, -799.62689, 9.86220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 2884.54199, -800.20538, 10.54730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 2859.85596, -800.30408, 10.76712,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(4642, 2888.61255, -798.53430, 11.55772,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(4642, 2838.46729, -798.63660, 11.55770,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(966, 2879.19775, -800.02063, 9.85690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2870.14868, -799.91052, 9.86220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2847.56958, -799.62689, 9.86220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2836.58984, -799.57483, 9.86220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2835.16772, -799.57483, 9.86220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 2853.41187, -800.30554, 10.76712,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(984, 2912.64136, -800.22333, 10.68440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(984, 2834.61621, -819.39978, 10.72051,   0.00000, 0.00000, 0.00000);

	/* -------- CONTROL LV -> LS --------- */
	Peaje[5] = CreateDynamicObject(968, 1712.20898, 404.11877, 30.36735,   0.00000, -90.00000, -18.24000);
	Peaje[6] = CreateDynamicObject(968, 1686.43152, 415.80704, 30.42270,   0.00000, 90.00000, -18.84000);
	CreateDynamicObject(4642, 1684.42419, 414.97983, 31.02125,   0.00000, 0.00000, 70.19999);
	CreateDynamicObject(966, 1686.51184, 415.78503, 29.64240,   0.00000, 0.00000, 161.16011);
	CreateDynamicObject(1237, 1704.43530, 406.68628, 29.59031,   0.00000, 0.00000, -20.94001);
	CreateDynamicObject(1237, 1702.56958, 407.35919, 29.59030,   0.00000, 0.00000, -17.28000);
	CreateDynamicObject(1237, 1700.65723, 407.99088, 29.59030,   0.00000, 0.00000, -13.25999);
	CreateDynamicObject(4642, 1714.19775, 404.68594, 31.02125,   0.00000, 0.00000, -110.75999);
	CreateDynamicObject(966, 1712.03687, 404.16537, 29.64240,   0.00000, 0.00000, -18.24001);
	CreateDynamicObject(1237, 1694.06238, 413.02454, 29.59030,   0.00000, 0.00000, -18.53999);
	CreateDynamicObject(1237, 1695.85669, 412.39948, 29.59030,   0.00000, 0.00000, -18.53999);
	CreateDynamicObject(1237, 1697.71399, 411.77347, 29.59030,   0.00000, 0.00000, -18.53999);
	CreateDynamicObject(979, 1685.16577, 421.13321, 30.50640,   0.00000, 2.50000, -81.48000);
	CreateDynamicObject(979, 1681.49060, 409.33640, 30.31340,   0.00000, 0.50000, -131.16010);
	CreateDynamicObject(979, 1713.19348, 398.55908, 30.41835,   0.00000, 0.00000, -265.26001);
	CreateDynamicObject(979, 1717.50000, 410.05801, 30.64720,   0.00000, -2.00000, -314.52011);

	/* -------- PRODUCTOS CAMELLO ------------ */
	CreateDynamicObject(1516, 2471.90845, -957.96875, 79.26708,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2121, 2472.88306, -958.30835, 79.62930,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1579, 2471.68311, -958.29272, 79.76950,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1579, 2471.68311, -958.29272, 79.93400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1578, 2471.68311, -957.76068, 79.76950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3044, 2472.23438, -957.73785, 79.81620,   -7.50000, 0.00000, 135.72000);
	CreateDynamicObject(3052, 2472.19238, -958.15222, 79.90690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2048, 2472.22681, -958.65039, 81.00903,   0.00000, 0.00000, 177.53999);


	/* --------- PARADERO ----------- */
	CreateDynamicObject(1257, 1809.90576, -1905.85034, 13.81839,   0.00000, 0.00000, 0.00000); // UNITY STATION.
	CreateDynamicObject(1229, 1806.79163, -1901.69788, 14.08051,   0.00000, 0.00000, 0.00000); // UNITY STATION.
	
	CreateDynamicObject(3578, 2220.62598, -2005.90515, 11.53990,   0.00000, 0.00000, 112.62000); // BARRERA BASUREROS
	CreateDynamicObject(3578, 2218.67529, -1996.10107, 11.53990,   0.00000, 0.00000, 90.00000); // BARRERA BASUREROS
	
	CreateDynamicObject(3578, 2580.94067, -2397.02930, 13.17188,   3.14159, 0.00000, -45.05999); // BARRERA OCEAN DOCKS
	CreateDynamicObject(3578, 2588.24292, -2404.35132, 13.17190,   3.14160, 0.00000, -45.06000); // BARRERA OCEAN DOCKS
	CreateDynamicObject(3578, 2595.55371, -2411.68213, 13.17190,   3.14160, 0.00000, -45.06000); // BARRERA OCEAN DOCKS
	CreateDynamicObject(3578, 2602.84692, -2419.00781, 13.17190,   3.14160, 0.00000, -45.06000); // BARRERA OCEAN DOCKS



	/* --------- Cajeros automáticos --------- */
	CreateDynamicObject(2942, 1776.28784, -1867.30005, 13.21350,   0.00000, 0.00000, 180.00000); // Unity Station
	CreateDynamicObject(2942, 1928.56470, -1770.75854, 13.17990,   0.00000, 0.00000, 90.00000); // Gasolinera Idlewood
	CreateDynamicObject(2942, 1154.89526, -1428.33105, 15.42200,   0.00000, 0.00000, -90.00000); // Centro comercial
	CreateDynamicObject(2942, 1012.91772, -928.88678, 41.94710,   0.00000, 0.00000, 6.18000); // Gasolinera Vinewood
	CreateDynamicObject(2942, 1465.03186, -1749.92493, 15.05050,   0.00000, 0.00000, 180.00000); // Ayuntamiento
	CreateDynamicObject(2942, 1796.74963, -1583.58313, 13.07850,   0.00000, 0.00000, 40.37998); // Prisión federal.
	
	CreateDynamicObject(3352, 1560.56580, -1690.09705, 6.17610,   0.00000, 0.00000, 90.00000); // PUERTA GARAGE LSPD
	
	CreateDynamicObject(16773, -1630.59070, 688.44391, 8.68930,   0.00000, 0.00000, 0.00000); // Garage int LSPD
	CreateDynamicObject(16773, -1645.23267, 688.44391, 8.68930,   0.00000, 0.00000, 0.00000); // Garage int LSPD
	CreateDynamicObject(2949, -1621.95813, 692.97778, 6.18390,   0.00000, 0.000000, 1.74000); // Garage int LSPD
	CreateDynamicObject(19392, -1621.89819, 692.23431, 7.92315,   0.00000, 0.00000, 1.74000); // Garage int LSPD
	
	CreateDynamicObject(3578, 2371.10840, -2316.52905, 13.21090,   0.00000, 0.00000, 44.89623); // Repartidor de cajas
	CreateDynamicObject(3578, 2378.47241, -2309.19263, 13.21090,   0.00000, 0.00000, 44.89620); // Repartidor de cajas
	CreateDynamicObject(3578, 2385.84863, -2301.86255, 13.21090,   0.00000, 0.00000, 44.89620); // Repartidor de cajas

	//----------------------    |INICIO VEHÍCULOS PUBLICOS|    ----------------------//
	// COCHES POlICIACOS
	LSPD[0] = AddStaticVehicleEx(596,1595.4663000,-1710.8828000,5.6763000,0.0000000,-1,-1,60000); //Police Car (LSPD)
	LSPD[1] = AddStaticVehicleEx(596,1591.4663000,-1710.8828000,5.6763000,0.0000000,-1,-1,60000); //Police Car (LSPD)
	LSPD[2] = AddStaticVehicleEx(596,1587.4663000,-1710.8828000,5.6763000,0.0000000,-1,-1,60000); //Police Car (LSPD)
	LSPD[3] = AddStaticVehicleEx(596,1583.4663000,-1710.8828000,5.6763000,0.0000000,-1,-1,60000); //Police Car (LSPD)
	LSPD[4] = AddStaticVehicleEx(596,1578.4663000,-1710.8828000,5.6763000,0.0000000,-1,-1,60000); //Police Car (LSPD)
	LSPD[5] = AddStaticVehicleEx(596,1574.4122000,-1710.8828000,5.6763000,0.0000000,-1,-1,60000); //Police Car (LSPD)
	LSPD[6] = AddStaticVehicleEx(596,1570.4122000,-1710.8828000,5.6763000,0.0000000,-1,-1,60000); //Police Car (LSPD)
	LSPD[7] = AddStaticVehicleEx(596,1566.4122000,-1710.8828000,5.6763000,0.0000000,-1,-1,60000); //Police Car (LSPD)
	LSPD[8] = AddStaticVehicleEx(596,1562.4122000,-1710.8828000,5.6763000,0.0000000,-1,-1,60000); //Police Car (LSPD)
	LSPD[9] = AddStaticVehicleEx(596,1558.9122000,-1710.8828000,5.6763000,0.0000000,-1,-1,60000); //Police Car (LSPD)
	LSPD[10] = AddStaticVehicleEx(523,1582.3511000,-1680.6814000,5.3490000,-22.0000000,-1,-1,60000); //HPV1000
	LSPD[11] = AddStaticVehicleEx(523,1583.8511000,-1680.6814000,5.3490000,-22.0000000,-1,-1,60000); //HPV1000
	LSPD[12] = AddStaticVehicleEx(523,1585.3511000,-1680.6814000,5.3490000,-22.0000000,-1,-1,60000); //HPV1000
	LSPD[13] = AddStaticVehicleEx(523,1586.8511000,-1680.6814000,5.3490000,-22.0000000,-1,-1,60000); //HPV1000
	LSPD[14] = AddStaticVehicleEx(523,1588.3511000,-1680.6814000,5.3490000,-22.0000000,-1,-1,60000); //HPV1000
	LSPD[15] = AddStaticVehicleEx(521,1582.4237000,-1674.9753000,5.4079000,-90.0000000,0, 0,60000); //FCR-900
	LSPD[16] = AddStaticVehicleEx(521,1585.4237000,-1674.9753000,5.4079000,-90.0000000,0, 0,60000); //FCR-900
	LSPD[17] = AddStaticVehicleEx(468,1585.4237000,-1676.4753000,5.9079000,-90.0000000,0, 0,60000); //Sanchez
	LSPD[18] = AddStaticVehicleEx(468,1582.4237000,-1676.4753000,5.9079000,-90.0000000,0, 0,60000); //Sanchez
	LSPD[19] = AddStaticVehicleEx(599,1584.7526000,-1671.6266000,6.5095000,-90.0000000,-1,-1,60000); //Police Ranger
	LSPD[20] = AddStaticVehicleEx(599,1584.7526000,-1667.3986000,6.5095000,-90.0000000,-1,-1,60000); //Police Ranger
	LSPD[21] = AddStaticVehicleEx(598,1601.9518000,-1704.1730000,5.5931000,90.0000000,-1,-1,60000); //Police Car (LVPD)
	LSPD[22] = AddStaticVehicleEx(598,1601.9518000,-1700.1270000,5.5931000,90.0000000,-1,-1,60000); //Police Car (LVPD)
	LSPD[23] = AddStaticVehicleEx(598,1601.9518000,-1696.0811000,5.5931000,90.0000000,-1,-1,60000); //Police Car (LVPD)
	LSPD[24] = AddStaticVehicleEx(597,1601.9518000,-1692.0352000,5.5931000,90.0000000,-1,-1,60000); //Police Car (SFPD)
	LSPD[25] = AddStaticVehicleEx(597,1601.9518000,-1687.9893000,5.5931000,90.0000000,-1,-1,60000); //Police Car (SFPD)
	LSPD[26] = AddStaticVehicleEx(597,1601.9518000,-1683.9434000,5.5931000,90.0000000,-1,-1,60000); //Police Car (SFPD)
	LSPD[27] = AddStaticVehicleEx(596,-1616.7908000000,732.89860,-4.58180,359.85480, 0,0, 60000); //Police Car (LSPD BLACK)
	LSPD[28] = AddStaticVehicleEx(596,-1612.4191000000,732.88730,-4.58280,359.85480, 0,0, 60000); //Police Car (LSPD BLACK)
	LSPD[29] = AddStaticVehicleEx(563, 1870.3971, -2284.6182, 16.9520, -90.0000, 0, 0, 60000); // Raidance
	LSPD[30] = AddStaticVehicleEx(525, 1556.2982, -1606.5571, 13.4909, 180.0000, 0, 0, 60000); // TowTruck
	LSPD[31] = AddStaticVehicleEx(525, 1562.7982, -1606.5571, 13.4909, 180.0000, 0, 0, 60000); // TowTruck
	LSPD[32] = AddStaticVehicleEx(596, -2064.2737, -83.8048, 34.9173, 180.0000, 1, 1, 60000);  //Entrenamiento SF
	LSPD[33] = AddStaticVehicleEx(596, -2068.7737, -83.8048, 34.9173, 180.0000, 1, 1, 60000);  //Entrenamiento SF
	LSPD[34] = AddStaticVehicleEx(596, -2072.7737, -83.8048, 34.9173, 180.0000, 0, 0, 60000);  //Entrenamiento SF
	LSPD[35] = AddStaticVehicleEx(560,1545.5316000,-1684.5037000,6.3813000,90.0000000,0,0,60000); //Sultan
	LSPD[36] = AddStaticVehicleEx(560,1545.5316000,-1680.5037000,6.3813000,90.0000000,0,0,60000); //Sultan
	LSPD[37] = AddStaticVehicleEx(560,1545.5316000,-1676.5037000,6.3813000,90.0000000,0,0,60000); //Sultan
	LSPD[38] = AddStaticVehicleEx(402,1545.5316000,-1663.0037000,6.3813000,90.0000000,0,0,60000); //Buffalo
	LSPD[39] = AddStaticVehicleEx(402,1545.5316000,-1659.0037000,6.3813000,90.0000000,0,0,60000); //Buffalo
	LSPD[40] = AddStaticVehicleEx(415,1528.5706000,-1683.9810000,6.3822000,-90.0000000,0,0,60000); //Cheetah
	LSPD[41] = AddStaticVehicleEx(415,1528.5706000,-1687.9810000,6.3822000,-90.0000000,0,0,60000); //Cheetah
	LSPD[42] = AddStaticVehicleEx(426, -1573.3490, 742.7370, -4.3808, 90.0000, 0,0, 60000,1); // Encubierto (GARAGE)
	LSPD[43] = AddStaticVehicleEx(426, -1573.3490, 738.7370, -4.3808, 90.0000, 0,0, 60000,1); // Encubierto (GARAGE)
	LSPD[44] = AddStaticVehicleEx(426, -1573.3490, 734.7370, -4.3808, 90.0000, 0,0, 60000,1); // Encubierto (GARAGE)
	LSPD[45] = AddStaticVehicleEx(579, -1573.3639, 726.4721, -4.1509, 90.0000, 0,0, 60000);   // Encubierto (GARAGE)
	LSPD[46] = AddStaticVehicleEx(579, -1573.3639, 722.4721, -4.1509, 90.0000, 0,0, 60000);   // Encubierto (GARAGE)
	LSPD[47] = AddStaticVehicleEx(566, -1584.0389, 749.4466, -4.4286, 180.0000, 0,0, 60000);  // Encubierto (GARAGE)
	LSPD[48] = AddStaticVehicleEx(547, -1588.1989, 749.4466, -4.4286, 180.0000, 0,0, 60000);  // Encubierto (GARAGE)
	LSPD[49] = AddStaticVehicleEx(507, -1592.1989, 749.4466, -4.4286, 180.0000, 0,0, 60000);  // Encubierto (GARAGE)
	LSPD[50] = AddStaticVehicleEx(517, -1596.1989, 749.4466, -4.4286, 180.0000, 0,0, 60000);  // Encubierto (GARAGE)
	LSPD[51] = AddStaticVehicleEx(418, -1600.4639, 749.4466, -4.1029, 180.0000, 0,0, 60000);  // Encubierto (GARAGE)
    LSPD[52] = AddStaticVehicleEx(482,-1600.1138000,693.2328000,-2.1324000,180.0000000,0,0,60000,1); //Burrito
	LSPD[53] = AddStaticVehicleEx(482,-1604.1138000,693.2328000,-2.1324000,180.0000000,0,0,60000,1); //Burrito
	LSPD[54] = AddStaticVehicleEx(490,-1616.6566000,692.9672000,-2.2279000,180.0000000,0,0,60000); //FBI Rancher
	LSPD[55] = AddStaticVehicleEx(490,-1612.5886000,692.9672000,-2.2279000,180.0000000,0,0,60000); //FBI Rancher
	LSPD[56] = AddStaticVehicleEx(490,-1620.7766000,692.9672000,-2.2279000,180.0000000,0,0,60000); //FBI Rancher
	LSPD[57] = AddStaticVehicleEx(601,-1595.8799000,676.1490000,-4.7460000,0.0000000,0,0,60000); //S.W.A.T. Van
	LSPD[58] = AddStaticVehicleEx(601,-1600.1598000,676.1490000,-4.7460000,0.0000000,0,0,60000); //S.W.A.T. Van
	LSPD[59] = AddStaticVehicleEx(528,-1639.2144000,686.2703000,-2.0045000,-90.0000000,0,0,60000); //FBI Truck
	LSPD[60] = AddStaticVehicleEx(528,-1639.2144000,682.2703000,-2.0045000,-90.0000000,0,0,60000); //FBI Truck
	LSPD[61] = AddStaticVehicleEx(427,-1638.9606000,674.0995000,-3.7458000,-90.0000000,-1,-1,60000); //Enforcer
	LSPD[62] = AddStaticVehicleEx(427,-1638.9606000,669.9390000,-3.7458000,-90.0000000,-1,-1,60000); //Enforcer
	LSPD[63] = AddStaticVehicleEx(609,-1622.5142000,649.5235000,-3.1110000,90.0000000,0,0,60000); //Boxville
	LSPD[64] = AddStaticVehicleEx(431,1601.7003,-1628.0675,13.6340,90.00000,0,0,60000,1); //Bus
	LSPD[65] = AddStaticVehicleEx(430, 719.9216, -1631.0591, 0.4952, 180.00,1,1, 60000); // Predator
	LSPD[66] = AddStaticVehicleEx(430, 2356.0071, -2512.5952, 0.1553, 0.0, 1, 1, 60000); // Predator
	LSPD[67] = AddStaticVehicleEx(497, 1562.6174, -1654.2982, 31.5723, 90.0000, 0, 1, 60000); // Polmav
	LSPD[68] = AddStaticVehicleEx(497, 1562.6481, -1696.7133, 31.5722, 90.0000, 0, 1, 60000); // Polmav 69
    //======LSN======//
	LSN[0] = AddStaticVehicleEx(582,1573.2576,-1318.0697,16.5353,180.2055,116,1,3600); //Newsvan
	LSN[1] = AddStaticVehicleEx(582,1578.3724,-1318.0697,16.5348,181.2603,116,1,3600); //Newsvan
	LSN[2] = AddStaticVehicleEx(488,1543.4662,-1353.2036,332.6517,270,-1,-1,3600); //News Chopper 72
    //======Permiso conducción======//
    AutoEscuela[0] = AddStaticVehicleEx(401,2052.5447,-1903.7300,13.3264,180.0000000,1,1,600); //Bravura
    AutoEscuela[1] = AddStaticVehicleEx(401,2055.9919,-1903.7300,13.3264,180.0000000,1,1,600); //Bravura
    AutoEscuela[2] = AddStaticVehicleEx(401,2059.4391,-1903.7300,13.3264,180.0000000,1,1,600); //Bravura 75
    //======Permiso aviación======//
    Aviacion = AddStaticVehicleEx(593,1991.5916,-2286.5642,14.0084,90.0000000,0,0,600); //Dodo 76
    //======Permiso navegación======//
    Navegacion = AddStaticVehicleEx(473,2944.3000000,-1561.9000000,0.0000000,260.0000000,1,1,600); //Dinghy 77
	//======Job barrendero======//
	AddStaticVehicleEx(574, 2504.0220, -1463.6489, 24.5184, 0.0000, 1, -1, 600); //Sweeper
	AddStaticVehicleEx(574, 2499.5220, -1463.6489, 24.5184, 0.0000, 1, -1, 600); //Sweeper
	AddStaticVehicleEx(574, 2508.6594, -1466.4419, 24.5184, -90.0000, 1, -1, 600); //Sweeper
	AddStaticVehicleEx(574, 2508.6594, -1470.9419, 24.5184, -90.0000, 1, -1, 600); //Sweeper
	AddStaticVehicleEx(574, 2508.7454, -1456.1885, 24.5184, 180.0000, 1, -1, 600); //Sweeper 82
	//======Job cosechador======//
	AddStaticVehicleEx(532,-371.73156738,-1464.68566895,26.83628082,270.00000000,-1,-1,600); //Combine
	AddStaticVehicleEx(532,-372.02117920,-1476.42980957,26.83628082,270.00000000,-1,-1,600); //Combine
	AddStaticVehicleEx(532,-369.85134888,-1489.54174805,26.83628082,288.00000000,-1,-1,600); //Combine 85
	//======Job pizzero======//
	PizzaMoto[0] = AddStaticVehicleEx(448, 2125.1692, -1794.2579, 13.0757, -90.0000, 3,1, 60000); //Pizzaboy
	PizzaMoto[0] = AddStaticVehicleEx(448, 2125.1692, -1796.2579, 13.0757, -90.0000, 3,1, 60000); //Pizzaboy
	PizzaMoto[0] = AddStaticVehicleEx(448, 2125.1692, -1798.2579, 13.0757, -90.0000, 3,1, 60000); //Pizzaboy 88
	//======Job fumigador aéreo======//
	AddStaticVehicleEx(512,-427.8985,-1745.2548,7.5919,301.5764,3,1,600); //Cropduster 89
	//======Job taxista======//
	AddStaticVehicleEx(420, 981.0750, -1306.7712, 13.3077, 0.0000, 6,1, 60000); // Taxi
	AddStaticVehicleEx(420, 985.5750, -1306.7712, 13.3077, 0.0000, 6,1, 60000); // Taxi
	AddStaticVehicleEx(420, 990.0750, -1306.7712, 13.3077, 0.0000, 6,1, 60000); // Taxi
	AddStaticVehicleEx(420, 994.5862, -1306.7877, 13.3077, 0.0000, 6,1, 60000); // Taxi
	AddStaticVehicleEx(420, 999.0862, -1306.7877, 13.3077, 0.0000, 6,1, 60000); // Taxi
	AddStaticVehicleEx(420, 1003.5862, -1306.7877, 13.3077, 0.0000, 6,1, 60000); // Taxi 95
	//======Job pescador======//
	AddStaticVehicleEx(453,2967.8000000,-1525.9000000,0.0000000,260.0000000,1,1,600); //Reefer
	AddStaticVehicleEx(453,2966.3999000,-1534.0000000,0.0000000,260.0000000,1,1,600); //Reefer 97
    //======Coches LSFD======//
	LSFD[0] = AddStaticVehicleEx(552,1751.8241,-1132.5984,23.7942,180.0000000000000000,3,3,60000,1); //Utility
	LSFD[1] = AddStaticVehicleEx(416,1750.9009000000000000,-1103.7605,24.2276,359.8226,3,3,60000); // ambulancia
	LSFD[2] = AddStaticVehicleEx(525,1763.2374,-1104.3503,23.9619,0.000000000000000000,3,3,60000); //Tow Truck
	LSFD[3] = AddStaticVehicleEx(407,1725.2061,-1104.5006,24.3165,179.8467000000000000000,3,1,60000); // firetruck
	LSFD[4] = AddStaticVehicleEx(407,1725.1630,-1114.2878,24.2608,180.000000000000000,3,1,60000); // firetruck
	LSFD[5] = AddStaticVehicleEx(407,1725.1595,-1124.2880,24.2613,180.0461000000000000000,3,1,60000); // firetruck
	LSFD[6] = AddStaticVehicleEx(544,1707.1934,-1135.4011,24.3234,180.6922,3,3,60000,1); // firetruck
	LSFD[7] = AddStaticVehicleEx(544,1711.5282,-1135.4039,24.3167,181.1102,3,3,60000,1); // firetruck
	LSFD[8] = AddStaticVehicleEx(573,1716.6683,-1133.9772,24.730200000000,180.0000000,3,3,60000,1); //Duneride
	LSFD[9] = AddStaticVehicleEx(490,1733.9218000,-1129.7792000,24.1717000,140.0000000,3,1,60000); //FBI Rancher
	LSFD[10] = AddStaticVehicleEx(490,1734.1681000,-1122.7131000,24.1717000,140.0000000,3,1,60000); //FBI Rancher
	LSFD[11] = AddStaticVehicleEx(490,1733.6895000,-1116.5469000,24.1717000,140.0000000,3,1,60000); //FBI Rancher
	LSFD[12] = AddStaticVehicleEx(490,1733.6810000,-1110.4471000,24.1717000,140.0000000,3,1,60000); //FBI Rancher
	LSFD[13] = AddStaticVehicleEx(416,1746.3953,-1103.7267,24.2282,0.5626,3,3,60000); // ambulancia
	LSFD[14] = AddStaticVehicleEx(416,1741.8340,-1103.5983,24.2247,359.3799,3,3,60000); // ambulancia
	LSFD[15] = AddStaticVehicleEx(416,1741.8795,-1133.1699,24.2254,179.5281,3,3,6000); // ambulancia
	LSFD[16] = AddStaticVehicleEx(417,1730.1121000,-1110.3677000,46.7684000,180.0000000,1,1,60000); //Leviathan
	LSFD[17] = AddStaticVehicleEx(563,1715.7551000,-1131.6536000,47.1491000,-45.0000000,-1,-1,60000); //Raindance
	LSFD[18] = AddStaticVehicleEx(525,1758.8899000,-1104.430700000,23.970100000,0.0000000,3,3,60000); //Tow Truck
	LSFD[19] = AddStaticVehicleEx(495,1767.5505,-1104.7263,24.423100000000,0.0000000,3,1,60000,1); //Sandking
	LSFD[20] = AddStaticVehicleEx(416,1746.5314,-1133.0961,24.2275,180.0398,3,3,60000); // ambulancia 119
	//Cargado de vehículos privados
	LoadCar();
	//Contador de total de vehículos creados
	for(new i = 1; i < MAX_VEHICLES; i++)
	{
	    if(!IsValidVehicle(i)){break;}
	  	TotalVeh++;
	}
    //Loop vehículos
    for(new i = 1; i <= TotalVeh; i++)
    {
	    //Vehículos en depósito
	    if(CocheInfo[i][cEnDeposito] == 1) //Desguace
	    {
	        SetVehicleVirtualWorld(i, i+1);
	    }
	    //Sistema arranque de vehiculos
	    if(!IsABike(i))
		{
			new alarm,doors,bonnet,boot,objective;
    		SetVehicleParamsEx(i,0,0,alarm,doors,bonnet,boot,objective);
    	}
    	if(IsABike(i))
   	 	{
    		new alarm,doors,bonnet,boot,objective;
    		SetVehicleParamsEx(i,1,0,alarm,doors,bonnet,boot,objective);
    	}
	    //Vehículos LSN
	    if(CocheLSTV(i)){DirectoLSNCoche[i] = NOEXISTE;}
	    //Gasolina 100 para coches scripteados
	    if(i <= MAX_VEHPUBLICO)
	    {
			CocheInfo[i][cGas] = 100;
	    }
	    //Matrículas
	    SetVehicleMatricula(i);
	    //Maleteros vehículos de facciones
	    if(CocheLSPD(i) || CocheLSFD(i) || CocheLSTV(i))
	    {
	        CocheInfo[i][cMaxMaletero] = EspaciosMaletero(GetVehicleModel(i));
	    }
	    if(CocheLSTV(i))
	    {
	        CocheInfo[i][cMaletero][0] = 128; // Cámara fotográfica profesional
         	CocheInfo[i][cMaleteroCant][0] = 500; //
         	CocheInfo[i][cMaletero][1] = 128; // Cámara fotográfica profesional
         	CocheInfo[i][cMaleteroCant][1] = 500; //
	    }
	    if(CocheLSPD(i))
	    {
	        //new Modelo = GetVehicleModel(i);
	        if(GetVehicleModel(i) == 596 || GetVehicleModel(i) == 599) // LSPD y Rancher
	        {
	            CocheInfo[i][cMaletero][0] = 22; // Escopeta
	            CocheInfo[i][cMaleteroCant][0] = 8; //
		        CocheInfo[i][cMaletero][1] = 50; // Cartuchos
		        CocheInfo[i][cMaleteroCant][1] = 8; //
		        CocheInfo[i][cMaletero][2] = 50; // Cartuchos
		        CocheInfo[i][cMaleteroCant][2] = 8; //
	        }
			else if(GetVehicleModel(i) == 597 || GetVehicleModel(i) == 598) // SFPD y LVPD
	        {
	            CocheInfo[i][cMaletero][0] = 22; // Escopeta
	            CocheInfo[i][cMaleteroCant][0] = 8; //
		        CocheInfo[i][cMaletero][1] = 50; // Cartuchos
		        CocheInfo[i][cMaleteroCant][1] = 8; //
		        CocheInfo[i][cMaletero][2] = 50; // Cartuchos
		        CocheInfo[i][cMaleteroCant][2] = 8; //
                CocheInfo[i][cMaletero][3] = 28; // M4
	            CocheInfo[i][cMaleteroCant][3] = 50; //
		        CocheInfo[i][cMaletero][4] = 45; // Cargador M4
		        CocheInfo[i][cMaleteroCant][4] = 50; //
		        CocheInfo[i][cMaletero][5] = 45; // Cargador M4
		        CocheInfo[i][cMaleteroCant][5] = 50; //

	        }
	        else if(GetVehicleModel(i) == 601 || GetVehicleModel(i) == 528 || GetVehicleModel(i) == 427) // Enforcer, Blindado y SWAT
	        {
	            CocheInfo[i][cMaletero][0] = 17; // Granada de Humo
	            CocheInfo[i][cMaleteroCant][0] = 1; //
	            CocheInfo[i][cMaletero][1] = 17; // Granada de Humo
	            CocheInfo[i][cMaleteroCant][1] = 1; //
	            CocheInfo[i][cMaletero][2] = 17; // Granada de Humo
	            CocheInfo[i][cMaleteroCant][2] = 1; //
	            CocheInfo[i][cMaletero][3] = 17; // Granada de Humo
	            CocheInfo[i][cMaleteroCant][3] = 1; //
	        }
	        else if(GetVehicleModel(i) == 482) // Burrito
	        {
	            CocheInfo[i][cMaletero][0] = 28; // M4
	            CocheInfo[i][cMaleteroCant][0] = 0; //
	            CocheInfo[i][cMaletero][1] = 28; // M4
	            CocheInfo[i][cMaleteroCant][1] = 0; //
	            CocheInfo[i][cMaletero][2] = 28; // M4
	            CocheInfo[i][cMaleteroCant][2] = 0; //
	            CocheInfo[i][cMaletero][3] = 28;//  M4
	            CocheInfo[i][cMaleteroCant][3] = 0; //
	        }
	        else if(GetVehicleModel(i) == 490) // Burrito
	        {
	            CocheInfo[i][cMaletero][0] = 26; // MP5
	            CocheInfo[i][cMaleteroCant][0] = 0; //
	            CocheInfo[i][cMaletero][1] = 26; // MP5
	            CocheInfo[i][cMaleteroCant][1] = 0; //
	            CocheInfo[i][cMaletero][2] = 26; // MP5
	            CocheInfo[i][cMaleteroCant][2] = 0; //
	            CocheInfo[i][cMaletero][3] = 26;//  MP5
	            CocheInfo[i][cMaleteroCant][3] = 0; //
	        }
	        else if(GetVehicleModel(i) == 497) // Helicóptero de policia
	        {
	            CocheInfo[i][cMaletero][0] = 31; // Francotirador
	            CocheInfo[i][cMaleteroCant][0] = 10; //
		        CocheInfo[i][cMaletero][1] = 46; // Cargador Rifle
		        CocheInfo[i][cMaleteroCant][1] = 10; //
		        CocheInfo[i][cMaletero][2] = 46; // Cargador Rifle
		        CocheInfo[i][cMaleteroCant][2] = 10; //
                CocheInfo[i][cMaletero][3] = 28; // M4
	            CocheInfo[i][cMaleteroCant][3] = 50; //
		        CocheInfo[i][cMaletero][4] = 45; // Cargador M4
		        CocheInfo[i][cMaleteroCant][4] = 50; //
		        CocheInfo[i][cMaletero][5] = 45; // Cargador M4
		        CocheInfo[i][cMaleteroCant][5] = 50; //
	        }
	        else if(GetVehicleModel(i) == 426) // Premier gris SWAT
		 	{
			    CocheInfo[i][cMaletero][0] = 22; // Escopeta
	      		CocheInfo[i][cMaleteroCant][0] = 8; //
			    CocheInfo[i][cMaletero][1] = 50; // Cartuchos
			    CocheInfo[i][cMaleteroCant][1] = 8; //
			    CocheInfo[i][cMaletero][2] = 50; // Cartuchos
			    CocheInfo[i][cMaleteroCant][2] = 8; //
	        	CocheInfo[i][cMaletero][3] = 28; // M4
	         	CocheInfo[i][cMaleteroCant][3] = 50; //
	        	CocheInfo[i][cMaletero][4] = 45; // Cargador M4
		        CocheInfo[i][cMaleteroCant][4] = 50; //
		        CocheInfo[i][cMaletero][5] = 45; // Cargador M4
		        CocheInfo[i][cMaleteroCant][5] = 50; //
			}
		}
	    if(CocheLSFD(i)) // Si es coche de LSFD
	    {
	        CocheInfo[i][cMaletero][0] = 35; // Extintor
	        CocheInfo[i][cMaletero][1] = 35; // Extintor
	        CocheInfo[i][cMaletero][2] = 15; // Palanca
	        CocheInfo[i][cMaletero][3] = 6; // Pala
	        CocheInfo[i][cMaletero][4] = 6; // Pala
	        CocheInfo[i][cMaletero][5] = 9; // Motosierra
	        CocheInfo[i][cMaletero][6] = 9; // Motosierra
	        CocheInfo[i][cMaleteroCant][0] = 1000; // Extintor cant
	        CocheInfo[i][cMaleteroCant][1] = 1000; // Extintor cant
	        CocheInfo[i][cMaleteroCant][2] = 1; // Palanca cant
	        CocheInfo[i][cMaleteroCant][3] = 1; // Pala cant
	        CocheInfo[i][cMaleteroCant][4] = 1; // Pala cant
	        CocheInfo[i][cMaleteroCant][5] = 1; // Motosierra cant
	        CocheInfo[i][cMaleteroCant][6] = 1; // Motosierra cant
	    }
    }
    
    //Cargado características vehículos comprados
    for(new i = MAX_VEHPUBLICO+1; i <= TotalVeh; i++)
	{
		if(!IsABike(i))
		{
			new engine,lights,alarm,bonnet,boot,objective;
    		SetVehicleParamsEx(i,engine,lights,alarm,CocheInfo[i][cCerrado],bonnet,boot,objective);
    	}
    }
    
    //Cargado de casas y 3DTextLabels de casas
    CargarCasas();
	
	//Cargado de negocios y 3DTextLabels de negocios
	CargarNegocios();
	
	for(new n = 1; n <= TotalNegs; n++)
	{
	    if(NegocioInfo[n][nEntradaX] != 0.0)
	    {
			pickupnego[n] = CreateDynamicPickup(1273, 23, NegocioInfo[n][nEntradaX], NegocioInfo[n][nEntradaY], NegocioInfo[n][nEntradaZ]);
			//NegocioInfo[n][nPickup] = CreateDynamic3DTextLabel("",Verde,NegocioInfo[n][nEntradaX], NegocioInfo[n][nEntradaY], NegocioInfo[n][nEntradaZ],10.0,INVALID_PLAYER_ID,INVALID_VEHICLE_ID,1,NegocioInfo[n][nVirtualWorld2],NegocioInfo[n][nInterior2]);
			UpdateNegocioLabel(n);
		}
	}
	
	//Cargado facciones
	LoadFaccs();
	
	//Cargado de plantaciones
	LoadPlantacion();
	
	for(new i = 0; i < MAX_VEHICLES; i++) { vehicleInfo[i][useAttach] = false; }
	
    return 1;
}

public OnGameModeExit()
{

    if(IsValidObject(LSPrisonWallsObject)) { DestroyObject(LSPrisonWallsObject); }
	if(IsValidObject(LSPrisonGatesObject[0])) { DestroyObject(LSPrisonGatesObject[0]); }
	if(IsValidObject(LSPrisonGatesObject[1])) { DestroyObject(LSPrisonGatesObject[1]); }
	if(IsValidObject(LSPrisonGatesObject[2])) { DestroyObject(LSPrisonGatesObject[2]); }
	if(IsValidObject(LSPrisonGatesObject[3])) { DestroyObject(LSPrisonGatesObject[3]); }

    new cuenta;
	for(new idx=MAX_VEHPUBLICO+1; idx <= TotalVeh; idx++)
	{
		SaveCar(idx);
		cuenta++;
	}
	printf("Coches guardados: %d", cuenta);
	
	cuenta = 0;
	for(new x=1; x<=TotalCasas; x++)
    {
    	GuardarCasa(x); //Guardado de casas
    	cuenta++;
    }
    printf("Casas guardadas: %d (MAX: %d)", cuenta, MAX_HOUSES);
    
    cuenta = 0;
    for(new x=1; x<=TotalNegs; x++)
    {
    	GuardarNegocio(x); //Guardado de negocios
    	cuenta++;
    }
    printf("Negocios guardados: %d (MAX: %d)", cuenta, MAX_NEGS);
    
    cuenta = 0;
    for(new x=1; x<=TotalFaccs; x++)
    {
    	SaveFacc(x); //Guardado de facciones
    	cuenta++;
    }
    printf("Facciones guardadas: %d (MAX: %d)", cuenta, MAX_FACCS);
    
    cuenta = 0;
    for(new x=0; x<=CodigoPlantacion; x++)
    {
        if(strlen(PlantaInfo[x][plPlantador]))
        {
	    	SavePlantacion(x); //Guardado de plantaciones
	    	cuenta++;
    	}
    }
    printf("Plantaciones guardadas: %d (MAX: %d)", cuenta, MAX_PLANTACIONES);
    
    new panels, doors, lights, tires;
    for(new i=0; i<GetVehiclePoolSize(); i++)
    {
    	KillTimer(FlashTime[i]);
     	GetVehicleDamageStatus(i, panels, doors, lights, tires);
        UpdateVehicleDamageStatus(i, panels, doors, 0, tires);
    }
 	Seifader_OnExit();
    return 1;
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle )
{
	printf("[ERROR] ID: %d - Error: %s - Callback - %s - Query: %s", errorid, error, callback, query);
    return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(JugadorRegistrado[playerid] == 1) //Si está registrado, loguear.
	{
		if(JugadorLogueado[playerid] == 0)
		{
			new string[100];
			LimpiarChat(playerid, 20);
			SendClientMessage(playerid, COLOR_PIEL, "Bienvenido(a) a Siglo XXI - RolePlay, la versión actual es: BETA");
			format(string, sizeof(string), "Bienvenido de vuelta, %s\n\nIntroduce tu contraseña para continuar.", NombreJugador(playerid));
			ShowPlayerDialog(playerid,0,DIALOG_STYLE_PASSWORD,"Inicio de sesión",string,"Entrar","Salir");

			SetTimerEx("LoginKick", 60000, false, "i", playerid);
			
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid,0);
			TogglePlayerControllable(playerid, 0);
			new Random = random(sizeof(RandLogin));
			SetPlayerCameraPos(playerid, RandLogin[Random][0],RandLogin[Random][1],RandLogin[Random][2]);
			SetPlayerCameraLookAt(playerid, RandLogin[Random][3],RandLogin[Random][4],RandLogin[Random][5]);
			SetPlayerPos(playerid, RandLogin[Random][6],RandLogin[Random][7],RandLogin[Random][8]);
		}
		else SpawnPlayer(playerid); //Si está logueado, spawnear.
	}
	if(JugadorRegistrado[playerid] == 0) //Si no está registrado, expulsar.
	{
		LimpiarChat(playerid, 12);
		SendClientMessage(playerid, Rojo, "Tú cuenta no esta registrada en nuestra base de datos. Para poder jugar necesitas registrar tú cuenta en https://www.siglo-21.net/register");
		Expulsar(playerid);
	}
	return 1;
}

public OnPlayerConnect(playerid)
{
	if(ConectadoBaseDatos == 0){SendClientMessage(playerid, COLOR_ROJO, "¡No se ha establecido conexión con la base de datos!, contacta con un administrador."); Expulsar(playerid);}

    SetPlayerTime(playerid,Hour,Minute);
    
	//
	vvel[playerid] = CreatePlayerTextDraw(playerid,325.000000, 402.000000, "~b~Km/h:~w~ 100");
	PlayerTextDrawAlignment(playerid,vvel[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,vvel[playerid], 255);
	PlayerTextDrawFont(playerid,vvel[playerid], 2);
	PlayerTextDrawLetterSize(playerid,vvel[playerid], 0.449999, 1.000000);
	PlayerTextDrawColor(playerid,vvel[playerid], -1);
	PlayerTextDrawSetOutline(playerid,vvel[playerid], 1);
	PlayerTextDrawSetProportional(playerid,vvel[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,vvel[playerid], 0);

    fuel[playerid] = CreatePlayerTextDraw(playerid,325.000000, 412.000000, "~b~Gasolina:~w~ 100");
	PlayerTextDrawAlignment(playerid,fuel[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,fuel[playerid], 255);
	PlayerTextDrawFont(playerid,fuel[playerid], 2);
	PlayerTextDrawLetterSize(playerid,fuel[playerid], 0.449999, 1.000000);
	PlayerTextDrawColor(playerid,fuel[playerid], -1);
	PlayerTextDrawSetOutline(playerid,fuel[playerid], 1);
	PlayerTextDrawSetProportional(playerid,fuel[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,fuel[playerid], 0);

    WebUrl[playerid] = CreatePlayerTextDraw(playerid,86.000000, 424.000000, "www.siglo-21.net");
	PlayerTextDrawAlignment(playerid,WebUrl[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,WebUrl[playerid], 255);
	PlayerTextDrawFont(playerid,WebUrl[playerid], 1);
	PlayerTextDrawLetterSize(playerid,WebUrl[playerid], 0.330000, 1.000000);
	PlayerTextDrawColor(playerid,WebUrl[playerid], -1);
	PlayerTextDrawSetOutline(playerid,WebUrl[playerid], 0);
	PlayerTextDrawSetProportional(playerid,WebUrl[playerid], 1);
	PlayerTextDrawSetShadow(playerid,WebUrl[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,WebUrl[playerid], 0);
	
	Pantallazo[playerid] = CreatePlayerTextDraw(playerid,740.000000, -70.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Pantallazo[playerid], 255);
	PlayerTextDrawFont(playerid,Pantallazo[playerid], 1);
	PlayerTextDrawLetterSize(playerid,Pantallazo[playerid], 2.499999, 60.000000);
	PlayerTextDrawColor(playerid,Pantallazo[playerid], -1);
	PlayerTextDrawSetOutline(playerid,Pantallazo[playerid], 0);
	PlayerTextDrawSetProportional(playerid,Pantallazo[playerid], 1);
	PlayerTextDrawSetShadow(playerid,Pantallazo[playerid], 1);
	PlayerTextDrawUseBox(playerid,Pantallazo[playerid], 1);
	PlayerTextDrawBoxColor(playerid,Pantallazo[playerid], -167771970);
	PlayerTextDrawTextSize(playerid,Pantallazo[playerid], -90.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,Pantallazo[playerid], 0);

	/*
	SetPlayerMapIcon(playerid, 1, 1128.7759,-1438.1123,15.7969, 17, 0, MAPICON_LOCAL); // Centro Comercial
	SetPlayerMapIcon(playerid, 2, 1729.1732,-1126.2689,24.0859, 20, 0, MAPICON_LOCAL); // LSFD
	SetPlayerMapIcon(playerid, 3, 2059.5784,-1912.0635,13.5469, 36, 0, MAPICON_LOCAL); // Autoescuela
	SetPlayerMapIcon(playerid, 4, 1571.1857,-1336.7592,16.4844, 48, 0, MAPICON_LOCAL); // LSRTV
	SetPlayerMapIcon(playerid, 5, 1172.7678,-1323.3112,15.4009, 22, 0, MAPICON_LOCAL); // Hospital All Saints
	SetPlayerMapIcon(playerid, 6, 1555.1526,-1675.6384,16.1953, 30, 0, MAPICON_LOCAL); // Comisaría Pershing
	SetPlayerMapIcon(playerid, 8, 992.3314,-1300.4020,13.38280, 56, 0, MAPICON_LOCAL); // Taxistas
	SetPlayerMapIcon(playerid, 9, 2494.074,-1464.3805,24.02520, 56, 0, MAPICON_LOCAL); // Barrenderos
	SetPlayerMapIcon(playerid, 10, 2370.325,-2301.146,13.54600, 56, 0, MAPICON_LOCAL); // Camioneros
	SetPlayerMapIcon(playerid, 11, 2826.7869,936.3105,13.77070, 51, 0, MAPICON_LOCAL); // Entrega camiones
	*/

    ResetPlayerVars(playerid); //Resetea todas las variables del jugador
    Delete3DTextLabel(Yo3DText[playerid]);
    Delete3DTextLabel(Heridas[playerid]);
    Disparos[playerid] = 0;
    RecibioHeadShot[playerid] = 0; RecibioDisparo[playerid] = 0;
    
    new Nombre[MAX_PLAYER_NAME]; //Comprueba si la cuenta está registrada
	GetPlayerName(playerid, Nombre, sizeof(Nombre));
    if(CheckAccountExists(Nombre) != 0){JugadorRegistrado[playerid] = 1;}
  
    SetPlayerColor(playerid,Invisible); //Cambia el color del jugador a transparente
    SetPlayerTeam(playerid, 5); // Mismo team, no daños.

	// Repartidor de cajas
    RemoveBuildingForPlayer(playerid, 3578, 2375.0000, -2300.4141, 13.2109, 0.25);

	// Rejas aeropuerto
	RemoveBuildingForPlayer(playerid, 1412, 1996.8281, -2227.3828, 13.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1991.5547, -2227.4141, 13.7578, 0.25);

	// Gasolinera Idlewood (estacionamiento pobre)
	RemoveBuildingForPlayer(playerid, 1412, 1917.3203, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1927.8516, -1797.4219, 13.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1922.5859, -1797.4219, 13.8125, 0.25);
	
    ////////////////////////////////////////////Siglo XXI mapeos///////////////////////////////////////////////
    
	RemoveBuildingForPlayer(playerid, 3669, 1669.9141, -2126.1563, 15.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 3669, 1695.4844, -2131.1094, 15.0000, 0.25);
    RemoveBuildingForPlayer(playerid, 3670, 1713.8672, -2136.1953, 15.1719, 0.25);
    RemoveBuildingForPlayer(playerid, 3670, 1668.7266, -2096.1953, 15.1875, 0.25);
    RemoveBuildingForPlayer(playerid, 1413, 1658.9141, -2120.2813, 13.6797, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 1658.8359, -2114.9609, 13.6797, 0.25);
    RemoveBuildingForPlayer(playerid, 1413, 1658.8359, -2109.6875, 13.6797, 0.25);
    RemoveBuildingForPlayer(playerid, 1413, 1658.8359, -2104.4063, 13.6797, 0.25);
    RemoveBuildingForPlayer(playerid, 3634, 1669.9141, -2126.1563, 15.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 3635, 1668.7266, -2096.1953, 15.1875, 0.25);
    RemoveBuildingForPlayer(playerid, 1308, 1676.2813, -2118.0938, 12.7500, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 1682.1406, -2102.3516, 11.7813, 0.25);
    RemoveBuildingForPlayer(playerid, 1535, 1684.0078, -2097.7734, 12.9141, 0.25);
    RemoveBuildingForPlayer(playerid, 3634, 1695.4844, -2131.1094, 15.0000, 0.25);
    RemoveBuildingForPlayer(playerid, 3635, 1713.8672, -2136.1953, 15.1719, 0.25);
    RemoveBuildingForPlayer(playerid, 5025, 1728.0703, -2125.8047, 21.1797, 0.25);
    RemoveBuildingForPlayer(playerid, 5060, 1690.8750, -2090.2266, 14.9453, 0.25);
    RemoveBuildingForPlayer(playerid, 5061, 1698.9063, -2088.7422, 14.1406, 0.25);

	//Unity
	/*RemoveBuildingForPlayer(playerid, 4975, 1891.7422, -1872.2813, 14.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 4976, 1931.0000, -1871.3906, 15.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 3668, 1852.8047, -1909.7969, 16.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3668, 1871.0313, -1907.3203, 16.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3668, 1890.6953, -1909.9297, 16.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3668, 1912.2500, -1907.4375, 16.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3668, 1927.3984, -1911.4375, 16.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3668, 1943.0078, -1910.1016, 16.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 5041, 1845.7891, -1855.6484, 15.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1531, 1850.0078, -1876.8359, 14.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 5059, 1841.1094, -1856.0469, 14.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 1268, 1841.3359, -1836.4609, 18.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1774.7578, -1931.3125, 16.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1774.7578, -1901.5391, 16.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1844.4219, -1922.5469, 11.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1868.0859, -1921.5313, 11.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1887.4453, -1926.8203, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1880.4766, -1919.4609, 11.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 1307, 1891.3672, -1922.3438, 12.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1913.6563, -1926.7656, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1915.4063, -1922.4922, 11.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1939.0703, -1922.3828, 11.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1919.3203, -1919.1719, 14.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1560, 1834.1797, -1844.0781, 12.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1561, 1834.1797, -1841.0625, 12.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1834.3125, -1879.5547, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1839.5859, -1879.5547, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1836.7188, -1898.8984, 13.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1259, 1841.3359, -1836.4609, 18.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 3587, 1852.8047, -1909.7969, 16.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1843.7656, -1875.8672, 16.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1844.8672, -1879.5547, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1850.1406, -1879.5547, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1855.4141, -1879.5547, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 5043, 1843.3672, -1856.3203, 13.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 5040, 1845.7891, -1855.6484, 15.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 5042, 1850.5703, -1855.6797, 14.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 4981, 1898.3984, -1913.4063, 20.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 5084, 1898.3984, -1913.4063, 20.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 3587, 1890.6953, -1909.9297, 16.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3587, 1871.0313, -1907.3203, 16.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1869.0547, -1876.6328, 11.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 4858, 1891.7422, -1872.2813, 14.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1915.0547, -1890.4531, 11.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 3587, 1912.2500, -1907.4375, 16.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3587, 1927.3984, -1911.4375, 16.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1951.7344, -1913.2656, 11.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 3587, 1943.0078, -1910.1016, 16.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1969.4766, -1875.8906, 12.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1946.4766, -1877.1094, 11.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 4848, 1931.0000, -1871.3906, 15.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 4983, 1961.0313, -1871.4063, 23.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1931.8750, -1863.4609, 16.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1915.7422, -1863.4609, 16.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1952.0313, -1862.9297, 11.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 5525, 2029.5000, -1819.2734, 14.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 5417, 2029.5000, -1819.2734, 14.3359, 0.25);*/
	
    
    //Puente richman
    RemoveBuildingForPlayer(playerid, 714, 1292.8281, -588.7734, 98.3125, 0.25);
    RemoveBuildingForPlayer(playerid, 13752, 1210.7031, -625.6172, 78.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 13876, 1210.7031, -625.6172, 78.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 705, 1145.2500, -646.6797, 101.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 1288.0313, -598.9766, 102.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 709, 1106.7344, -597.6406, 103.7188, 0.25);
	
    //pasillos
    RemoveBuildingForPlayer(playerid, 3669, 1669.9141, -2126.1563, 15.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 3669, 1695.4844, -2131.1094, 15.0000, 0.25);
    RemoveBuildingForPlayer(playerid, 3670, 1713.8672, -2136.1953, 15.1719, 0.25);
    RemoveBuildingForPlayer(playerid, 3670, 1668.7266, -2096.1953, 15.1875, 0.25);
    RemoveBuildingForPlayer(playerid, 1413, 1658.9141, -2120.2813, 13.6797, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 1658.8359, -2114.9609, 13.6797, 0.25);
    RemoveBuildingForPlayer(playerid, 1413, 1658.8359, -2109.6875, 13.6797, 0.25);
    RemoveBuildingForPlayer(playerid, 1413, 1658.8359, -2104.4063, 13.6797, 0.25);
    RemoveBuildingForPlayer(playerid, 3634, 1669.9141, -2126.1563, 15.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 3635, 1668.7266, -2096.1953, 15.1875, 0.25);
    RemoveBuildingForPlayer(playerid, 1308, 1676.2813, -2118.0938, 12.7500, 0.25);
    RemoveBuildingForPlayer(playerid, 620,  1682.1406, -2102.3516, 11.7813, 0.25);
    RemoveBuildingForPlayer(playerid, 1535, 1684.0078, -2097.7734, 12.9141, 0.25);
    RemoveBuildingForPlayer(playerid, 3634, 1695.4844, -2131.1094, 15.0000, 0.25);
    RemoveBuildingForPlayer(playerid, 3635, 1713.8672, -2136.1953, 15.1719, 0.25);
    RemoveBuildingForPlayer(playerid, 5025, 1728.0703, -2125.8047, 21.1797, 0.25);
    RemoveBuildingForPlayer(playerid, 5060, 1690.8750, -2090.2266, 14.9453, 0.25);
    RemoveBuildingForPlayer(playerid, 5061, 1698.9063, -2088.7422, 14.1406, 0.25);
    
    //mapa 03
    RemoveBuildingForPlayer(playerid, 3669, 1734.6875, -2135.6328, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 1468, 1729.2969, -2122.9297, 13.7578, 0.25);
    RemoveBuildingForPlayer(playerid, 712,  1733.2422, -2125.8438, 21.9141, 0.25);
    RemoveBuildingForPlayer(playerid, 1468, 1734.5781, -2122.9297, 13.7578, 0.25);
    RemoveBuildingForPlayer(playerid, 3634, 1734.6875, -2135.6328, 15.2109, 0.25);
    RemoveBuildingForPlayer(playerid, 1468, 1739.8516, -2122.9297, 13.7578, 0.25);

	//Mapeo 04
	RemoveBuildingForPlayer(playerid, 3670, 1759.9375, -2136.1953, 15.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1751.1484, -2126.3984, 11.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1308, 1757.3438, -2122.7500, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 3635, 1759.9375, -2136.1953, 15.1719, 0.25);
	
	//canchas
	RemoveBuildingForPlayer(playerid, 762, 2446.5547, -1681.0703, 12.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 3562, 2232.3984, -1464.7969, 25.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 3562, 2247.5313, -1464.7969, 25.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 3562, 2263.7188, -1464.7969, 25.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 3562, 2243.7109, -1401.7813, 25.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 3562, 2230.6094, -1401.7813, 25.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 3562, 2256.6641, -1401.7813, 25.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 713, 2275.3906, -1438.6641, 22.5547, 0.25);
    RemoveBuildingForPlayer(playerid, 1297, 2260.8672, -1413.1641, 26.3906, 0.25);
    RemoveBuildingForPlayer(playerid, 1297, 2235.6953, -1413.1641, 26.3906, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 2229.0234, -1411.6406, 22.9609, 0.25);
    RemoveBuildingForPlayer(playerid, 1308, 2223.0938, -1410.1172, 23.3125, 0.25);
    RemoveBuildingForPlayer(playerid, 1264, 2224.9844, -1408.9063, 23.3984, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 2265.6172, -1410.3359, 21.7734, 0.25);
    RemoveBuildingForPlayer(playerid, 1221, 2253.2188, -1409.8906, 23.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 2216.9141, -1402.0859, 26.5781, 0.25);
    RemoveBuildingForPlayer(playerid, 1264, 2224.1250, -1408.8359, 23.3984, 0.25);
    RemoveBuildingForPlayer(playerid, 1221, 2226.8516, -1404.7422, 23.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 1283, 2213.0938, -1395.5938, 26.0703, 0.25);
    RemoveBuildingForPlayer(playerid, 1230, 2225.8516, -1394.6328, 23.3047, 0.25);
    RemoveBuildingForPlayer(playerid, 1220, 2224.8594, -1393.9609, 23.3047, 0.25);
    RemoveBuildingForPlayer(playerid, 1220, 2222.8750, -1396.1250, 23.3047, 0.25);
    RemoveBuildingForPlayer(playerid, 1230, 2223.8750, -1396.7969, 23.3047, 0.25);
    RemoveBuildingForPlayer(playerid, 1221, 2223.4688, -1396.0938, 23.3750, 0.25);
    RemoveBuildingForPlayer(playerid, 3582, 2230.6094, -1401.7813, 25.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 1308, 2227.8672, -1394.4141, 23.0547, 0.25);
    RemoveBuildingForPlayer(playerid, 1224, 2225.9844, -1396.6797, 23.5313, 0.25);
    RemoveBuildingForPlayer(playerid, 1221, 2227.9531, -1396.8516, 23.3750, 0.25);
    RemoveBuildingForPlayer(playerid, 3582, 2243.7109, -1401.7813, 25.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 645, 2237.5313, -1395.4844, 23.0391, 0.25);
    RemoveBuildingForPlayer(playerid, 3582, 2256.6641, -1401.7813, 25.6406, 0.25);
    RemoveBuildingForPlayer(playerid, 1308, 2252.5859, -1394.4141, 23.0547, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 2274.5781, -1398.4922, 22.5078, 0.25);
    RemoveBuildingForPlayer(playerid, 1308, 2280.4688, -1395.7578, 23.0547, 0.25);
    RemoveBuildingForPlayer(playerid, 1283, 2259.7500, -1385.1172, 26.2500, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 2201.7109, -1485.5938, 24.1172, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 2216.9141, -1466.7578, 26.5781, 0.25);
    RemoveBuildingForPlayer(playerid, 1220, 2222.9609, -1469.7422, 23.1953, 0.25);
    RemoveBuildingForPlayer(playerid, 1308, 2224.4219, -1473.0391, 22.8047, 0.25);
    RemoveBuildingForPlayer(playerid, 1230, 2223.6328, -1468.7500, 23.1953, 0.25);
    RemoveBuildingForPlayer(playerid, 1307, 2225.4219, -1456.3906, 23.1172, 0.25);
    RemoveBuildingForPlayer(playerid, 1220, 2225.1328, -1471.7266, 23.1953, 0.25);
    RemoveBuildingForPlayer(playerid, 1221, 2225.0938, -1471.1328, 23.2734, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 2183.7031, -1441.4844, 23.1094, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 2201.7109, -1441.4844, 24.1172, 0.25);
    RemoveBuildingForPlayer(playerid, 645, 2200.8203, -1447.3438, 23.8125, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 2201.0781, -1421.6172, 24.1172, 0.25);
    RemoveBuildingForPlayer(playerid, 1224, 2225.6797, -1468.6172, 23.4297, 0.25);
    RemoveBuildingForPlayer(playerid, 1230, 2225.7969, -1470.7266, 23.1953, 0.25);
    RemoveBuildingForPlayer(playerid, 1221, 2225.8516, -1466.6484, 23.2734, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 2238.1172, -1479.6094, 26.4609, 0.25);
    RemoveBuildingForPlayer(playerid, 645, 2239.5703, -1468.8047, 22.6875, 0.25);
    RemoveBuildingForPlayer(playerid, 3582, 2232.3984, -1464.7969, 25.6484, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 2241.8906, -1458.9297, 22.9609, 0.25);
    RemoveBuildingForPlayer(playerid, 1297, 2228.6094, -1454.4219, 26.3906, 0.25);
    RemoveBuildingForPlayer(playerid, 1308, 2258.6328, -1473.0391, 22.8047, 0.25);
    RemoveBuildingForPlayer(playerid, 3582, 2247.5313, -1464.7969, 25.5469, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 2267.4688, -1470.1953, 21.7188, 0.25);
    RemoveBuildingForPlayer(playerid, 3582, 2263.7188, -1464.7969, 25.4375, 0.25);
    RemoveBuildingForPlayer(playerid, 1307, 2272.6797, -1459.1875, 22.0547, 0.25);
    RemoveBuildingForPlayer(playerid, 1221, 2251.2891, -1461.8281, 23.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 1297, 2253.7813, -1454.4219, 26.3906, 0.25);
    RemoveBuildingForPlayer(playerid, 1220, 2256.6563, -1456.8984, 22.8594, 0.25);
    RemoveBuildingForPlayer(playerid, 1230, 2255.9844, -1457.9063, 22.8594, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 2227.2031, -1444.5000, 22.9609, 0.25);
    RemoveBuildingForPlayer(playerid, 5682, 2241.4297, -1433.6719, 31.2813, 0.25);
    RemoveBuildingForPlayer(playerid, 700, 2226.5156, -1426.7656, 23.1172, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 2243.5703, -1423.6094, 22.9609, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 2256.4063, -1444.5078, 23.1016, 0.25);
    RemoveBuildingForPlayer(playerid, 1297, 2266.0859, -1442.0703, 26.3906, 0.25);
    RemoveBuildingForPlayer(playerid, 3593, 2261.7734, -1441.1016, 23.5000, 0.25);
    RemoveBuildingForPlayer(playerid, 1297, 2267.3672, -1425.8750, 26.3906, 0.25);
    RemoveBuildingForPlayer(playerid, 3593, 2265.0781, -1424.4766, 23.5000, 0.25);
    RemoveBuildingForPlayer(playerid, 1297, 2273.6406, -1434.1484, 26.3906, 0.25);
    RemoveBuildingForPlayer(playerid, 3645, 2069.6172, -1556.7031, 15.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 3645, 2070.7578, -1586.0156, 15.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 1490, 2066.4297, -1652.4766, 14.2813, 0.25);
    RemoveBuildingForPlayer(playerid, 1490, 2102.1953, -1648.7578, 13.5859, 0.25);
    RemoveBuildingForPlayer(playerid, 5633, 2089.3594, -1643.9297, 18.2188, 0.25);
    RemoveBuildingForPlayer(playerid, 1524, 2074.1797, -1579.1484, 14.0313, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 2058.0547, -1602.2266, 13.7656, 0.25);
    RemoveBuildingForPlayer(playerid, 1308, 2055.3594, -1602.2344, 12.7813, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 2055.2656, -1599.5000, 13.7656, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 2055.2656, -1594.2266, 13.7656, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 2063.3281, -1602.2266, 13.7656, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 2065.8594, -1608.1172, 16.3906, 0.25);
    RemoveBuildingForPlayer(playerid, 1283, 2070.1484, -1612.9219, 15.6094, 0.25);
    RemoveBuildingForPlayer(playerid, 1283, 2083.8047, -1611.7500, 15.6094, 0.25);
    RemoveBuildingForPlayer(playerid, 1283, 2103.8359, -1612.7266, 15.6016, 0.25);
    RemoveBuildingForPlayer(playerid, 1226, 2131.7734, -1616.8906, 16.3516, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 2164.2656, -1614.1719, 12.5703, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 2131.0938, -1606.9453, 12.9375, 0.25);
    RemoveBuildingForPlayer(playerid, 1283, 2092.9922, -1604.1563, 15.6016, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 2083.7656, -1602.2266, 13.7656, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 2078.4922, -1602.2266, 13.7656, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 2115.3438, -1605.1328, 13.7656, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 2113.8359, -1601.9297, 13.7656, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 2086.4609, -1599.5938, 13.7656, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 2116.0156, -1597.0938, 13.7656, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 2086.4609, -1594.3203, 13.7656, 0.25);
    RemoveBuildingForPlayer(playerid, 1308, 2086.5313, -1591.5938, 12.7813, 0.25);
    RemoveBuildingForPlayer(playerid, 3644, 2070.7578, -1586.0156, 15.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 2120.4219, -1587.9219, 13.8125, 0.25);
    RemoveBuildingForPlayer(playerid, 1308, 2133.1484, -1581.3828, 13.6641, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 2122.5781, -1583.1016, 13.8125, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 2124.7344, -1578.2813, 13.8125, 0.25);
    RemoveBuildingForPlayer(playerid, 1308, 2172.4844, -1596.8359, 13.6641, 0.25);
    RemoveBuildingForPlayer(playerid, 3644, 2069.6172, -1556.7031, 15.0625, 0.25);
    RemoveBuildingForPlayer(playerid, 620, 2135.8672, -1566.7109, 12.5703, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 2129.0391, -1568.6484, 13.8125, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 2126.8828, -1573.4688, 13.8125, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 2134.6797, -1562.3516, 13.8125, 0.25);
    RemoveBuildingForPlayer(playerid, 1412, 2131.1953, -1563.8359, 13.8125, 0.25);
    RemoveBuildingForPlayer(playerid, 673, 2091.3125, -1489.4844, 8.5625, 0.25);
	
	// Bloques liverpool
	RemoveBuildingForPlayer(playerid, 3695, 2239.9297, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3695, 2282.9922, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3695, 2314.8203, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3695, 2352.7188, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 3695, 2387.8203, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2229.0469, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1807.3281, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1801.8672, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2230.4141, -1815.1484, 11.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2234.4844, -1817.9297, 12.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1791.0000, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1796.4531, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2239.9297, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1775.5078, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1780.9844, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2228.6719, -1767.2734, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2226.1641, -1770.0469, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 2254.7266, -1827.4375, 12.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2259.9453, -1796.0703, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2258.3438, -1804.7422, 12.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2259.2656, -1773.2422, 11.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 17886, 2264.0391, -1789.2578, 20.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1791.0000, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1796.4531, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1807.3281, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1801.8672, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1770.0469, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1775.5078, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2265.2969, -1780.9844, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2275.3906, -1820.7266, 12.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2268.1875, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2273.6953, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2282.9922, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2267.8125, -1767.2734, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2273.3359, -1767.3438, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2271.6484, -1772.3984, 8.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2285.7578, -1762.1250, 12.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2297.3828, -1798.5391, 8.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2297.1484, -1775.8750, 8.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2305.0625, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1807.3281, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1801.8672, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1791.0000, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1796.4531, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2314.8203, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1775.5078, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1770.0469, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2302.1719, -1780.9844, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2304.7813, -1767.3828, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2332.8281, -1817.7109, 12.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2341.7578, -1810.0313, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1807.3281, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2341.7578, -1817.7266, 8.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1801.8672, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 2335.6484, -1796.6328, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1791.0000, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1796.4531, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2334.7109, -1785.0625, 12.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1775.5078, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1780.9844, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 17887, 2343.6094, -1784.5078, 20.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2338.8672, -1770.0469, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2341.3828, -1767.2734, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 669, 2329.1875, -1765.5234, 12.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2349.6172, -1763.3438, 11.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2352.7188, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2367.6484, -1802.7969, 8.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2367.6484, -1780.7734, 11.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 2378.3359, -1818.7266, 8.3594, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1800.4688, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1805.9297, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2376.9922, -1813.9297, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1811.3828, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1780.9844, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1789.6016, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1795.0547, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2376.6172, -1767.2734, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1770.0469, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1408, 2374.1016, -1775.5078, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2399.9766, -1815.9922, 11.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 3584, 2387.8203, -1790.6953, 17.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 2398.5781, -1782.7734, 10.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 645, 2387.0234, -1763.6406, 12.1797, 0.25);

 	// Cancha el Corona
 	RemoveBuildingForPlayer(playerid, 1413, 1935.1328, -2074.8672, 13.7266, 0.25);

	// PRISION
	RemoveBuildingForPlayer(playerid, 4080, 1787.1328, -1565.6797, 11.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 4000, 1787.1328, -1565.6797, 11.9688, 0.25);

	// LSFD
	RemoveBuildingForPlayer(playerid, 717, 1703.9922, -1150.1484, 23.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1707.0625, -1159.1016, 25.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 717, 1721.2344, -1150.1484, 23.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1294, 1734.9531, -1156.9922, 27.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 717, 1738.7813, -1150.1484, 23.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1760.3203, -1153.4297, 24.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1767.8984, -1154.6484, 23.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1765.7813, -1154.0547, 24.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1771.7813, -1154.8359, 24.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 1264, 1784.4141, -1148.3906, 23.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 1227, 1786.2109, -1148.2969, 23.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1788.0625, -1148.4453, 23.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1227, 1800.4531, -1148.2969, 23.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1227, 1789.7734, -1116.0625, 23.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 1227, 1789.9063, -1112.6406, 23.8906, 0.25);
	// Cruzes
	RemoveBuildingForPlayer(playerid, 1290, 2878.0078, -1132.1797, 15.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 917.3281, -1780.3047, 18.2266, 0.25);
	// Sector 1
	RemoveBuildingForPlayer(playerid, 1284, 639.4844, -1745.4063, 15.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1284, 639.4844, -1745.4063, 15.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1284, 611.7422, -1728.8438, 16.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1284, 633.9609, -1720.7891, 16.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 456.7891, -1604.1641, 27.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 1284, 323.8828, -1595.6016, 35.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 432.7109, -1594.7422, 27.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 133.6484, -1581.1328, 13.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 311.9531, -1586.3516, 35.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 346.6484, -1576.1094, 35.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 132.2891, -1565.1953, 12.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 153.6719, -1547.0234, 12.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 162.5234, -1569.9297, 14.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 1284, 337.1953, -1570.3906, 35.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 93.2109, -1517.6328, 7.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 438.6406, -1571.1016, 27.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 463.2031, -1577.0938, 27.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 1284, 470.7813, -1307.2656, 17.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 485.2813, -1309.9766, 17.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1284, 489.0469, -1293.0938, 17.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 1284, 513.1406, -1260.3594, 18.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 311.6641, -1641.5156, 35.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 1284, 333.3516, -1631.8906, 35.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 346.1172, -1643.9219, 35.3203, 0.25);
	// Sector 2
	RemoveBuildingForPlayer(playerid, 1315, 838.6016, -875.8906, 70.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 889.6328, -764.8828, 98.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 1288.0313, -598.9766, 102.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 343.4141, -136.1016, 0.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 1248.7969, 184.3203, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 143.1953, -136.0938, 0.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 293.6406, -136.1016, 0.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 321.9375, -147.6406, 0.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 221.5156, -77.5234, 0.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 243.6875, -66.1641, 0.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 288.5469, -82.4453, 0.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 221.5156, -27.6953, 0.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 238.3203, 37.7266, 1.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 692.2891, -594.4297, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 670.8984, -605.9375, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 647.6641, -540.8359, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 687.2422, -540.7578, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 710.8672, -535.9375, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 676.0703, -519.3125, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 732.2578, -524.4297, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 687.5625, -495.8125, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 635.8281, -474.7109, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 797.8047, -540.8047, 15.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 1244.6875, 257.5156, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 1334.1484, 240.6797, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 1380.2266, 220.3125, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 1364.4609, 281.1328, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 1227.1719, 341.6094, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 1270.9063, 345.2344, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 1325.9297, 358.0781, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 1376.7734, 432.8047, 18.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 214.0703, -292.0703, 0.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 188.6563, -222.2344, 0.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 176.7734, -201.0625, 0.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 126.6172, -201.0625, 0.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 238.5000, -222.2344, 0.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 226.6172, -201.0625, 0.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1351, 276.7422, -201.0625, 0.4609, 0.25);
	// Sector 3
	RemoveBuildingForPlayer(playerid, 1283, 1193.1328, -1851.4688, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1174.1016, -1835.5000, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1411.2188, -1872.9297, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1405.1563, -1871.6016, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1373.4609, -1872.2266, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1388.3906, -1855.6719, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1427.3047, -1890.2891, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1442.9375, -1871.4219, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1518.8047, -1873.3828, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1345.7656, -1740.6172, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1325.7109, -1732.8281, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1335.1953, -1731.7813, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1357.5156, -1732.9375, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1376.5156, -1731.8516, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1388.3594, -1745.4453, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1441.8594, -1733.0078, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1403.3672, -1733.0078, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1414.4141, -1731.4297, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1430.1719, -1719.4688, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1513.2344, -1732.9219, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1516.1641, -1591.6563, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1530.8828, -1883.2344, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1553.9844, -1873.0703, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1539.9297, -1871.6406, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1568.9297, -1855.1094, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1585.6797, -1871.6719, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1568.8828, -1745.4766, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1545.7656, -1731.6719, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1530.1172, -1717.0078, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1582.6719, -1733.1328, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1528.9531, -1605.8594, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1544.6250, -1593.0313, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1453.5391, -1307.4688, 15.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1462.6328, -1296.7578, 15.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1447.5313, -1238.5391, 15.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1452.5078, -1248.1719, 15.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1453.2578, -1168.8672, 25.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1463.3984, -1159.5156, 25.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1488.9531, -1162.4219, 26.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1479.9297, -1152.8438, 26.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1479.3047, -1042.0781, 25.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1575.4688, -1152.5859, 26.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1585.8828, -1162.0313, 26.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1490.2969, -1031.6641, 25.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 927.9766, -1768.5781, 12.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1041.4844, -1800.2813, 12.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1029.6016, -1789.5469, 12.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1042.8359, -1722.5313, 12.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1047.8984, -1706.7891, 12.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1032.1484, -1701.7266, 12.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1066.8906, -1863.7813, 12.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1071.4063, -1847.0781, 12.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1139.7266, -1717.4609, 12.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1286.2578, -1718.2500, 12.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1160.5391, -1706.7734, 12.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1144.7891, -1701.7109, 12.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1291.8359, -1702.4609, 12.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1139.5000, -1577.2734, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1155.6016, -1582.5469, 12.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1184.5938, -1577.5938, 12.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1286.6797, -1577.9297, 12.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1163.9922, -1566.7578, 12.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1190.1719, -1561.8047, 12.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1206.2734, -1567.0781, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1292.2578, -1562.1484, 12.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 928.1406, -1484.1328, 12.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1038.7891, -1499.1172, 12.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1047.6406, -1485.4297, 12.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 1053.1484, -1505.6016, 12.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 756.3438, -1596.5469, 12.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 743.2266, -1591.8359, 12.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 760.0000, -1591.9141, 12.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 765.5938, -1576.3281, 12.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 781.7344, -1581.3984, 12.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 799.7734, -1680.3984, 12.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 804.8438, -1664.8359, 12.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 815.6563, -1682.5938, 12.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 834.5859, -1624.7188, 12.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 826.5391, -1610.2656, 12.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 841.1641, -1602.6484, 12.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 922.9063, -1500.0938, 12.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 912.2656, -1478.6094, 12.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 749.6328, -1753.6328, 11.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 762.7422, -1760.2031, 11.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 804.6641, -1759.1953, 11.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 820.5859, -1763.8828, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1350, 912.0547, -1762.9297, 12.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 918.0078, -1337.7813, 15.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 927.9453, -1327.8750, 15.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 907.9766, -1319.5469, 15.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 942.9219, -1309.7969, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 951.4453, -1327.9531, 15.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1043.1094, -1319.6406, 15.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1053.0234, -1309.7813, 15.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1063.0703, -1336.6875, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1063.3984, -1291.4063, 15.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1068.1172, -1275.0938, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1043.0781, -1220.1406, 18.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1053.2344, -1231.1953, 18.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 796.5156, -1162.9922, 25.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 941.9375, -1159.1484, 25.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 932.3828, -1149.8594, 25.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 796.5156, -1130.3672, 25.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 807.7031, -1139.5859, 25.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 954.6719, -1149.8594, 25.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1053.1641, -1159.7031, 25.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 961.9219, -1130.4531, 25.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 973.1094, -1140.2422, 25.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1045.6094, -1140.1641, 25.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1072.2578, -1140.1953, 25.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1083.3906, -1130.2734, 25.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1093.0703, -1140.2500, 25.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 963.0625, -1049.6875, 32.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 962.0000, -1032.0781, 32.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 973.1328, -1039.7266, 32.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 952.3828, -963.7656, 41.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 961.7266, -984.2891, 40.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 972.4922, -971.8750, 41.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1072.7109, -948.5547, 44.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1085.1641, -969.2188, 44.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1140.8984, -1280.1172, 15.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1161.5859, -1281.3594, 15.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1182.6484, -1280.0781, 15.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1150.5078, -1269.9375, 15.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1244.0391, -1406.5313, 15.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1194.7969, -1290.8516, 15.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1216.3203, -1281.4141, 15.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1216.8516, -1270.7656, 15.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1245.7266, -1281.3359, 15.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1171.6328, -1149.8828, 25.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1152.2734, -1140.1406, 25.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1168.2344, -1135.2500, 25.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1215.6719, -1159.8672, 25.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1226.8594, -1150.0469, 25.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1206.4844, -1140.2969, 25.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1250.4531, -1389.7500, 15.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1270.8516, -1394.6797, 15.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1261.3594, -1291.1797, 15.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1269.5469, -1280.3203, 15.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1354.9063, -1291.3906, 15.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1332.0625, -1281.4609, 15.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1345.1641, -1269.2578, 16.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1275.8125, -1149.7734, 25.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1252.6094, -1140.2266, 25.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1096.9453, -957.1797, 44.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1263.2891, -1130.7578, 25.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1249.0078, -938.6875, 44.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1260.3906, -946.7266, 44.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1271.0469, -934.8516, 44.3516, 0.25);
	// Sector 4
	RemoveBuildingForPlayer(playerid, 1283, 2104.4766, -1751.8281, 15.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1688.9141, -1826.5078, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1690.0938, -1796.8516, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1702.9141, -1813.1094, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1762.7891, -1732.8281, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1736.5313, -1731.7969, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1750.2656, -1719.6328, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1810.3125, -2170.2891, 15.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1835.6563, -2162.6719, 15.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1819.5000, -2154.6094, 15.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2228.0859, -2506.7734, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2213.9297, -2498.3984, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2222.1875, -2484.6094, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2274.1016, -2304.6719, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2289.7813, -2301.0078, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1284, 2294.8984, -2278.1719, 15.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2283.7188, -2254.6953, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1284, 2303.2969, -2252.3984, 15.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2216.8281, -1983.3750, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2302.5859, -1975.3516, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2402.5078, -1975.4844, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2410.7656, -1998.8047, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2416.6641, -1983.8672, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2416.6641, -2020.9688, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2210.9297, -1961.2109, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2084.5313, -1905.4922, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2092.9141, -1891.3750, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2078.6328, -1883.3281, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2225.2109, -1969.2500, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2329.5469, -1969.9688, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2311.2266, -1954.4531, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2410.7656, -1961.7031, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2416.6641, -1943.3281, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1284, 2701.7734, -2168.9297, 13.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 1284, 2725.9375, -2156.6406, 13.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2425.0469, -2006.8438, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2425.0469, -1929.2031, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2505.4375, -1935.1484, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2513.6953, -1921.3594, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2527.9766, -1929.3984, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2711.1641, -2144.5625, 13.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2702.9063, -2007.2969, 15.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2717.0703, -2015.6719, 15.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2711.1641, -1983.3828, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2725.4453, -1991.4297, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2812.1484, -2052.0156, 13.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2820.3359, -2038.5938, 13.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1822.5703, -1763.2578, 15.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1962.6016, -1823.5234, 15.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1972.9922, -1811.4531, 15.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1960.6094, -1802.0078, 15.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1930.3750, -1753.1016, 15.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1832.8359, -1751.5078, 15.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1952.5156, -1751.3750, 15.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1820.8359, -1741.1484, 15.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1940.9063, -1741.1484, 15.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1990.6094, -1752.8438, 15.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2013.2891, -1751.7656, 15.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2001.0391, -1740.8125, 15.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2070.2109, -1812.8828, 15.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2080.9375, -1800.9453, 15.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2082.2734, -1823.9141, 15.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2069.2578, -1752.9141, 15.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2081.1719, -1740.8984, 15.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2535.6406, -1738.6016, 15.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2520.0313, -1729.1875, 15.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2633.2813, -1739.7578, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2645.6797, -1723.5234, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2218.7891, -1760.0078, 15.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2221.9531, -1725.0156, 15.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2335.3203, -1726.4922, 15.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2407.5703, -1756.6406, 15.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2421.0703, -1738.6016, 15.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2423.7188, -1726.3516, 15.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2444.7109, -1729.4531, 15.9688, 0.25);
	// Sector 5
	RemoveBuildingForPlayer(playerid, 1283, 1690.2813, -1607.8438, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1664.9063, -1593.1250, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1646.6016, -1591.6875, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1658.5313, -1583.3203, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1676.7813, -1591.6094, 15.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1657.6016, -1449.5781, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1646.4375, -1441.4531, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1667.4688, -1441.3672, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1703.9063, -1593.6719, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1744.4922, -1598.3359, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1700.8672, -1440.3203, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1715.4453, -1428.4766, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1731.2188, -1441.3281, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1753.4453, -1610.8281, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1765.0781, -1604.1875, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1767.8359, -1455.5859, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1762.8047, -1443.7578, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1781.3906, -1450.5625, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1597.0938, -1296.7969, 19.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1611.7344, -1311.2734, 19.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1716.8672, -1169.8672, 25.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1707.0625, -1159.1016, 25.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1852.5938, -1351.9844, 15.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1862.7188, -1340.1953, 15.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1976.1328, -1341.8125, 26.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1846.2422, -1329.1094, 15.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1987.8672, -1352.6172, 26.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1999.0781, -1340.0625, 26.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2055.7188, -1341.5000, 26.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2066.1641, -1329.9688, 26.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2072.4531, -1351.8672, 26.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2072.4219, -1312.1641, 26.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2082.8906, -1300.2656, 26.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2066.3594, -1290.2578, 26.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2072.3984, -1271.7031, 26.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2055.3516, -1261.4453, 26.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2066.2578, -1249.8047, 26.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2072.6172, -1232.4609, 26.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2066.1406, -1210.5625, 26.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2082.3672, -1220.2344, 26.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1871.6563, -1147.4063, 26.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1878.4141, -1131.1016, 26.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1862.1094, -1123.4922, 26.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2055.3516, -1136.6875, 26.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2066.0781, -1124.8359, 25.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2058.2813, -1085.2969, 26.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2072.7422, -1146.7344, 26.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2072.5313, -1103.0938, 26.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2084.3359, -1095.1250, 27.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2001.9219, -1683.6172, 15.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2001.3594, -1665.5391, 15.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2013.0703, -1671.8672, 15.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2030.6875, -1612.9063, 15.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2038.7266, -1601.0625, 15.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2053.9297, -1611.4375, 15.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1975.1328, -1466.7109, 15.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1986.2188, -1449.5000, 15.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1998.3438, -1460.2891, 15.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2129.9453, -1397.0234, 26.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2113.2578, -1395.6484, 25.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2101.1563, -1384.8438, 26.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2123.5703, -1384.0859, 25.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2139.3047, -1383.5781, 26.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2155.6875, -1384.9219, 26.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2178.2422, -1383.9141, 26.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2166.2109, -1373.1094, 26.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2213.0938, -1395.5938, 26.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2201.1797, -1385.0781, 26.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2224.1328, -1383.7813, 26.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2259.7500, -1385.1172, 26.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2270.1797, -1373.1250, 26.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2282.3750, -1382.2734, 26.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2260.1484, -1301.6484, 26.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2270.0625, -1289.6875, 26.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2271.7734, -1311.8203, 26.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2176.4141, -1132.4453, 26.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2166.2734, -1119.2266, 27.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2187.0625, -1120.8125, 26.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2190.4688, -1105.7188, 27.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2200.8203, -1127.6641, 27.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2225.6563, -1129.9297, 27.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2218.2656, -1112.5234, 27.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2259.9063, -1221.7734, 26.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2259.9063, -1145.8359, 29.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2272.1484, -1231.4844, 26.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2269.9844, -1209.3516, 26.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2271.9453, -1160.8906, 28.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2282.1641, -1148.2578, 28.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2082.0313, -1683.6719, 15.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2070.3438, -1672.7344, 15.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2081.2109, -1660.9453, 15.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2082.2656, -1623.8828, 15.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2070.1484, -1612.9219, 15.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2083.8047, -1611.7500, 15.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2103.8359, -1612.7266, 15.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2092.9922, -1604.1563, 15.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2113.5703, -1477.6953, 26.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2100.9688, -1466.7188, 26.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2111.7578, -1449.9922, 26.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2639.9141, -1667.8438, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2653.3438, -1659.9219, 13.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2720.3516, -1647.4297, 15.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2716.7266, -1632.4922, 15.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2815.7578, -1651.8516, 13.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2716.8594, -1514.9766, 32.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2743.2578, -1481.8203, 32.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2221.8359, -1659.1172, 17.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2235.1719, -1659.2813, 17.6094, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2236.0391, -1650.4219, 17.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2335.3828, -1653.2891, 15.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2350.1641, -1664.6875, 15.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2349.9609, -1570.2109, 26.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2334.9609, -1557.7969, 26.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2347.9297, -1516.7969, 25.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2336.8203, -1491.3516, 26.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2420.5781, -1526.9688, 26.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2436.7422, -1496.9922, 26.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2295.9844, -1378.2813, 26.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2310.0547, -1376.9453, 26.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2349.8047, -1390.0469, 26.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2364.0859, -1378.8125, 26.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2308.9531, -1293.3281, 26.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2360.6484, -1303.5938, 26.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2373.6953, -1268.0313, 26.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2438.1563, -1450.0234, 26.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2443.6641, -1438.8281, 26.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2504.9219, -1438.8281, 30.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2518.5781, -1262.1484, 37.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2376.7969, -1249.2031, 26.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2310.4844, -1158.8203, 29.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2316.3672, -1147.4297, 29.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2382.1094, -1167.7109, 29.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2378.4375, -1159.5156, 29.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2458.5078, -1189.5938, 38.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2636.4531, -1451.8516, 32.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2648.3984, -1397.3984, 32.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2636.7813, -1263.8516, 52.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2648.5234, -1248.6563, 52.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2864.1406, -1393.1875, 13.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2578.3516, -1189.7266, 64.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2648.2734, -1063.7500, 71.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 1315, 2717.0078, -1190.6484, 71.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 2856.9844, -1140.8672, 13.1016, 0.25);
	/* --------- Cámaras LSRTV ---------- */
	RemoveBuildingForPlayer(playerid, 729, 1631.7656, -1345.7500, 16.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 728, 1589.3906, -1377.1016, 15.4844, 0.25);
	/* --------- Interior prisión LSPD ---------*/
	RemoveBuildingForPlayer(playerid, 1499, 2522.3516, -1303.4063, 1047.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2522.3359, -1300.3984, 1047.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 2605, 2526.1641, -1299.0859, 1047.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2607, 2527.0156, -1299.0859, 1047.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2530.8359, -1304.1484, 1047.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2530.8516, -1307.1563, 1047.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2543.0781, -1304.5000, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2551.1250, -1304.5000, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2543.0781, -1302.5625, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 936, 2543.0703, -1301.0000, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2551.1250, -1302.5625, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 936, 2551.1172, -1301.0000, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2559.1016, -1304.5000, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2559.1016, -1302.5625, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 936, 2559.0938, -1301.0000, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2571.3359, -1300.3984, 1043.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2571.3516, -1303.4063, 1043.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 942, 2574.6563, -1306.2266, 1045.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 923, 2576.6016, -1301.7734, 1044.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 922, 2577.0234, -1298.8750, 1044.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2608, 2522.8203, -1297.1797, 1048.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 2605, 2526.1641, -1297.1094, 1047.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2607, 2527.0156, -1297.1094, 1047.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 922, 2572.1641, -1296.7891, 1044.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2200, 2522.7500, -1295.6328, 1047.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2609, 2530.2188, -1295.2109, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2609, 2530.2188, -1295.6797, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 14451, 2526.5938, -1293.9219, 1051.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2609, 2530.2188, -1294.7500, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2610, 2530.2188, -1294.2578, 1048.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 941, 2544.1484, -1294.9141, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 941, 2541.7578, -1294.9141, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 941, 2553.5625, -1294.9141, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 941, 2558.2891, -1294.9141, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 941, 2555.9141, -1294.9141, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 923, 2572.5156, -1293.9141, 1044.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2607, 2526.1719, -1290.8672, 1047.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2605, 2527.0234, -1290.8594, 1047.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2608, 2522.8203, -1290.9375, 1048.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 2609, 2530.2188, -1290.7422, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2610, 2530.2188, -1290.2500, 1048.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 2609, 2530.2188, -1289.7656, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 934, 2543.1953, -1293.4141, 1044.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 941, 2544.1484, -1291.9766, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 941, 2541.7578, -1291.9766, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 934, 2553.4375, -1293.4141, 1044.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 941, 2553.5625, -1291.9766, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 941, 2558.2891, -1291.9766, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 941, 2555.9141, -1291.9766, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 934, 2558.6875, -1293.4141, 1044.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 922, 2565.6250, -1292.9609, 1044.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2577.8516, -1291.4063, 1043.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 2608, 2522.8203, -1289.0313, 1048.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 2609, 2530.2188, -1289.3047, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2607, 2527.0156, -1288.8828, 1047.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2607, 2526.1719, -1288.8906, 1047.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2200, 2522.7500, -1287.5469, 1047.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2200, 2522.7500, -1285.2656, 1047.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2607, 2526.1719, -1282.9063, 1047.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2605, 2527.0234, -1282.8984, 1047.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2200, 2530.4453, -1284.3750, 1047.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2676, 2538.0625, -1281.7969, 1043.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 14435, 2541.0938, -1285.8984, 1052.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 936, 2543.1016, -1286.3125, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2543.1250, -1284.7500, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2543.1250, -1282.8125, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2551.1016, -1282.8125, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2551.1016, -1284.7500, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 936, 2551.1016, -1286.3125, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 936, 2559.1250, -1286.3125, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2559.1094, -1284.7500, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 937, 2559.1094, -1282.8125, 1043.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 14445, 2562.8828, -1287.1563, 1049.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 942, 2572.7031, -1282.5234, 1045.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 939, 2572.7500, -1287.7344, 1045.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 1499, 2577.8359, -1288.3984, 1043.1172, 0.25);
	
	/* --------- Estacionamiento alhambra ---------*/
	RemoveBuildingForPlayer(playerid, 712, 1929.5781, -1736.9063, 21.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1931.0391, -1726.3281, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1931.0391, -1702.2891, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1929.5781, -1694.4609, 21.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1931.0391, -1667.0313, 10.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1931.0391, -1637.8984, 10.8047, 0.25);
	
	/* --------- Avenida ayuntamiento ---------*/
	RemoveBuildingForPlayer(playerid, 713, 1304.7734, -1753.5859, 12.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1304.7734, -1729.9375, 12.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1304.7734, -1780.1094, 12.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1304.7734, -1808.4922, 12.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1304.7734, -1839.8672, 12.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1304.1172, -1696.7969, 12.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1305.0078, -1702.3828, 18.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1308.3281, -1539.3203, 18.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1316.6563, -1519.2734, 18.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1329.7109, -1498.6797, 18.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1341.3516, -1476.6016, 18.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 1290, 1348.0078, -1447.9219, 18.2266, 0.25);
	
	
	/* ______________________NO QUITAR ESTOS_________________________ */
	RemoveBuildingForPlayer(playerid, 3631, 2149.1406, -2266.9063, 12.8750, 0.25); //Interior desguace
	RemoveBuildingForPlayer(playerid, 5260, 2161.3438, -2264.9141, 14.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 3631, 2161.8516, -2264.0938, 16.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 3631, 2163.3750, -2262.6875, 16.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 3633, 2142.9141, -2256.3359, 13.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 3632, 2144.2969, -2258.1484, 13.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 3631, 2142.3047, -2255.8984, 12.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 5262, 2152.7109, -2256.7813, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 3633, 2158.0078, -2257.2656, 16.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3633, 2167.6641, -2256.7813, 12.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 3633, 2167.6641, -2256.7813, 13.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 3633, 2167.6641, -2256.7813, 14.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 3632, 2167.8047, -2257.3516, 16.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 3632, 2167.1719, -2257.1250, 16.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3577, 2170.0781, -2257.6641, 16.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 3632, 2169.3516, -2258.0703, 17.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 3632, 2168.8281, -2257.5234, 17.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 3633, 2140.3828, -2254.1016, 13.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 3632, 2150.6641, -2251.5547, 12.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 3632, 2150.2813, -2250.8516, 12.7656, 0.25);
	RemoveBuildingForPlayer(playerid, 3633, 2150.6953, -2252.9141, 16.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 3632, 2149.8125, -2253.3672, 16.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 5261, 2152.2578, -2239.4609, 14.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 5269, 2146.3750, -2248.7969, 14.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 3633, 2153.7734, -2253.0859, 14.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 3633, 2154.5078, -2254.4766, 14.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 3632, 2158.5703, -2251.0156, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 3632, 2158.0469, -2250.5078, 15.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 5132, 2163.2891, -2251.6094, 14.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 5259, 2168.8438, -2246.7813, 13.9375, 0.25);
	RemoveBuildingForPlayer(playerid, 3577, 2160.5625, -2234.8047, 14.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 3577, 2160.5781, -2234.8203, 13.0234, 0.25);
	//LSN
	RemoveBuildingForPlayer(playerid, 1689, 745.5859, -1381.1094, 25.8750, 0.25); //Respiraderos helipuerto
	RemoveBuildingForPlayer(playerid, 1689, 751.3359, -1368.0313, 25.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 778.8594, -1391.1563, 16.3125, 0.25); //Farola parking
	//Puertas Pay'n'Spray y garajes bomba
	RemoveBuildingForPlayer(playerid, 5043, 1843.3672, -1856.3203, 13.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 5422, 2071.4766, -1831.4219, 14.5625, 0.25);
	RemoveBuildingForPlayer(playerid, 5856, 1024.9844, -1029.3516, 33.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 5779, 1041.3516, -1025.9297, 32.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 6400, 488.2813, -1734.6953, 12.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 13028, 720.0156, -462.5234, 16.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 5340, 2644.8594, -2039.2344, 14.0391, 0.25);
	//Arboles zona fumigación aerea
	RemoveBuildingForPlayer(playerid, 785, -617.3047, -1408.3906, 13.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -614.4922, -1344.0156, 15.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -608.4922, -1280.5156, 15.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -445.6875, -1517.4688, 13.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -652.4688, -1201.7734, 14.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -535.4766, -1851.0703, 8.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 785, -473.2578, -1842.7266, 5.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 790, -607.0469, -1467.2344, 15.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -617.3047, -1408.3906, 13.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -614.4922, -1344.0156, 15.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -608.4922, -1280.5156, 15.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 790, -488.1172, -1441.3750, 17.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 790, -448.0938, -1442.9531, 23.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 735, -461.9766, -1459.5703, 15.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 790, -425.9531, -1432.7813, 25.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 735, -420.5547, -1459.5703, 21.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -652.4688, -1201.7734, 14.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 790, -303.1953, -1196.6250, 22.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 693, -274.2734, -1189.9922, 16.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 790, -270.8828, -1214.6797, 9.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -535.4766, -1851.0703, 8.8125, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -473.2578, -1842.7266, 5.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 731, -474.2188, -1799.6953, 10.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 731, -493.0078, -1781.6328, 6.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 731, -473.2266, -1748.6016, 11.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 733, -512.1172, -1769.7266, 25.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 727, -462.6250, -1770.7266, 6.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 730, -439.5391, -1741.8359, 5.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 732, -452.8828, -1742.6484, 6.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 726, -427.0938, -1671.5234, 13.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 733, -461.0391, -1690.5781, 7.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 735, -372.7500, -1758.1172, 5.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 731, -382.3594, -1735.4766, 11.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 734, -410.9219, -1720.9141, 8.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 727, -388.6094, -1687.1719, 17.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 734, -342.2969, -1761.5156, 12.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 734, -331.0625, -1736.1172, 12.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 734, -348.6563, -1738.5391, 11.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 733, -322.9922, -1717.7031, 14.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 733, -313.2500, -1662.5391, 17.1875, 0.25);
	RemoveBuildingForPlayer(playerid, 733, -510.2734, -1606.4609, 3.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 733, -479.1484, -1645.2266, 5.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 726, -420.4453, -1654.6016, 10.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 726, -441.4453, -1645.3281, 10.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 727, -390.4141, -1638.7734, 21.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 670, -604.3906, -1517.5391, 11.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 791, -445.6875, -1517.4688, 13.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 735, -410.7031, -1520.8203, 20.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 693, -601.3125, -1494.3516, 17.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 790, -396.6484, -1482.0078, 29.6484, 0.25);
	//Motel jefferson
	RemoveBuildingForPlayer(playerid, 14511, 2219.7031, -1189.8438, 1029.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 14521, 2247.1641, -1162.1094, 1029.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2744, 1721.6172, -1655.6641, 21.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2756, 1712.5938, -1655.6016, 21.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2756, 1730.5000, -1655.5078, 21.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2759, 1715.7266, -1655.6016, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2759, 1727.3672, -1655.5078, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2757, 1715.6719, -1655.6016, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2757, 1727.4219, -1655.5078, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2761, 1716.3438, -1655.6016, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2761, 1726.7500, -1655.5078, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2758, 1715.6250, -1655.6016, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2758, 1727.4688, -1655.5078, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2760, 1715.8125, -1655.6016, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2760, 1727.2813, -1655.5078, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2756, 1730.5469, -1647.6484, 21.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2759, 1727.4141, -1647.6484, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2757, 1727.4688, -1647.6484, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2761, 1726.7969, -1647.6484, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2758, 1727.5156, -1647.6484, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2760, 1727.3281, -1647.6484, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2756, 1712.5469, -1663.4688, 21.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2757, 1715.6250, -1663.4688, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2758, 1715.5781, -1663.4688, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2759, 1715.6797, -1663.4688, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2760, 1715.7656, -1663.4688, 21.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2761, 1716.2969, -1663.4688, 21.1563, 0.25);
	//Meses interior puticlub 2 Brothel 2
	RemoveBuildingForPlayer(playerid, 2024, 960.2500, -58.0625, 1000.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 2118, 960.8672, -45.6484, 1000.5234, 0.25);
	//Planta taxis unity
	RemoveBuildingForPlayer(playerid, 5024, 1748.8438, -1883.0313, 14.1875, 0.25);
	//Desguace afueras de LS
	RemoveBuildingForPlayer(playerid, 1438, -88.1094, -1598.7188, 1.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -86.5703, -1595.1406, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3173, -93.0938, -1593.5234, 1.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1462, -93.6797, -1588.0781, 1.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 3174, -75.1719, -1596.3047, 1.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -79.2578, -1593.4688, 1.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -72.4141, -1596.7734, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -74.1875, -1583.9922, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3175, -101.8203, -1577.6875, 1.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1457, -91.0156, -1576.6250, 3.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -100.8203, -1580.4219, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -93.2109, -1569.4844, 1.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3175, -77.9375, -1581.3125, 1.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1472, -75.5859, -1581.0703, 2.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 727, -73.8203, -1569.1719, 1.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 3173, -90.6406, -1562.9375, 1.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -77.0625, -1542.6016, 1.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 1457, -71.0000, -1574.0859, 3.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 3175, -64.3828, -1572.2109, 1.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -62.2734, -1569.2891, 1.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -61.6641, -1573.4609, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 1438, -56.0625, -1575.6563, 1.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -64.0000, -1550.2578, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3175, -55.2813, -1557.4531, 1.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -56.1563, -1560.4609, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 727, -49.3984, -1560.0078, 1.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 3174, -44.2891, -1561.3125, 1.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1370, -43.7422, -1563.6875, 2.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3173, -67.2344, -1544.2188, 1.5547, 0.25);
	//Pay spray LV
	RemoveBuildingForPlayer(playerid, 3294, -1420.5469, 2591.1563, 57.7422, 0.25);
    return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	if(EnvieDuda[playerid] == 1)
	{
	    for(new i=0; i<MAX_DUDAS; i++)
		{
		    if(Duda[i][dPlayer] == playerid)
		    {
				Duda[i][dEstado] = 0;
				Duda[i][dPlayer] = 0;
			}
		}
	}
	Disparos[playerid] = 0;
    PlayerTextDrawHide(playerid,WebUrl[playerid]);
    Mascara[playerid] = 0;
    new Nombre[MAX_PLAYER_NAME], salida[100 + MAX_PLAYER_NAME];
    format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
    
    for(new i; i < MAX_INFORMES; i++)
	{
		if(Informes[i][iPaciente] == playerid && Informes[i][iEstado] == 1)
		{
			KillTimer(Informes[i][iTimer]);
			Informes[i][iEstado] = 0;
			break;
		}
		else if(Informes[i][iPaciente] == playerid && Informes[i][iEstado] == 2)
		{
			KillTimer(Informes[i][iTimer]);
			DisablePlayerCheckpoint(Informes[i][iMedico]);
			SendClientMessage(Informes[i][iMedico], Naranja, "Informe cancelado");
			Informes[i][iEstado] = 0;
			Informes[i][iMedico] = NOEXISTE;
			break;
		}
	}
    
	if(JugadorInfo[playerid][pMuerto] != 0)
	{
	    for(new i = 0; i < MAX_PLAYERS; i++)
     	{
	    	if(JugadorInfo[i][pAdmin] >= 1 || JugadorInfo[i][pFaccion] == 1 || JugadorInfo[i][pFaccion] == 2)
			{
			    new string[128];
	       		format(string, sizeof(string), "[Aviso] El jugador %s (SQLID: %d) ha desconectado en estado de muerte. Posible evasión de rol.", NombreJugador(playerid), JugadorInfo[playerid][pSQLID]);
				SendClientMessage(i, 0xF63A37FF, string);
			}
		}
	}
    if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
    {
    	if(reason == 0){format(salida, sizeof(salida),      "(( %s (%s) ha crasheado del servidor. ))", NombreJugadorProxy(playerid), Nombre); ProxDetector(30.0, playerid, salida, Gris,Gris,Gris,Gris,Gris); printf("%s", salida);}
    	else if(reason == 1){format(salida, sizeof(salida), "(( %s (%s) ha desconectado voluntariamente. ))", NombreJugadorProxy(playerid), Nombre); ProxDetector(30.0, playerid, salida, Gris,Gris,Gris,Gris,Gris); printf("%s", salida);}
    	else if(reason == 2){format(salida, sizeof(salida), "(( %s (%s) ha sido expulsado/baneado del servidor. ))", NombreJugadorProxy(playerid), Nombre); ProxDetector(30.0, playerid, salida, Gris,Gris,Gris,Gris,Gris); printf("%s", salida);}
	}

    for(new x=0; x<MAX_PLAYERS; x++) //Sistema RECON
    {
        if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && JugadorInfo[x][pSpecID] == playerid)
        AdvanceSpectate(x);
    }
    
    for(new i=0; i<MAX_PLAYERS; i++) //Sistema multas
    {
        if(Multador[i] == playerid){Multador[i] = NOEXISTE, MultaPrecio[i] = 0;}
    }
    
    for(new i=0; i<MAX_PLAYERS; i++) //Job taxista
    {
        if(TaxiConductor[i] == playerid){TaxiConductor[i] = NOEXISTE;}
        if(TaxiPasajero[i] == playerid){TaxiPasajero[i] = NOEXISTE;}
    }
    
    for(new i=0; i<MAX_PLAYERS; i++) //Job mecánico
    {
        if(ReparacionMeca[i] == playerid){ReparacionMeca[i] = NOEXISTE; ReparacionTipo[i] = 0; ReparacionPrecio[i] = 0;}
    }
    
    for(new i=0; i<MAX_PLAYERS; i++) //Job mecánico
    {
        if(RepintadoMeca[i] == playerid){RepintadoMeca[i] = NOEXISTE; RepintadoColor1[i] = 0; RepintadoColor2[playerid] = 0; RepintadoPrecio[i] = 0;}
    }

	for(new i=0; i<MAX_PLAYERS; i++) //Taller mecánico
    {
        if(Contratador[i] == playerid){Contratador[i] = NOEXISTE; Contrato[i] = 0;}
    }
    
    KillTimer(ToqueLlamadaTimer[playerid]); //Sistema teléfono
    if(PersonaEnLlamada[playerid] != NOEXISTE)KillTimer(ToqueLlamadaTimer[PersonaEnLlamada[playerid]]);
    if(EnLlamada[playerid] == 3)
	{
		KillTimer(CostoLlamadaTimer[playerid]);
		JugadorInfo[playerid][pDineroBanco] -= CosteTotalLlamada[playerid];
		CosteTotalLlamada[playerid] = 0;
	}
	if(PersonaEnLlamada[playerid] != NOEXISTE)
	{
	    if(EnLlamada[PersonaEnLlamada[playerid]] == 3)
		{
		    new string[128];
			KillTimer(CostoLlamadaTimer[PersonaEnLlamada[playerid]]);
			format(string, sizeof(string), "Coste de la llamada: %d$", CosteTotalLlamada[PersonaEnLlamada[playerid]]);
			SendClientMessage(PersonaEnLlamada[playerid], RojoIntenso, string);
			JugadorInfo[PersonaEnLlamada[playerid]][pDineroBanco] -= CosteTotalLlamada[PersonaEnLlamada[playerid]];
			CosteTotalLlamada[PersonaEnLlamada[playerid]] = 0;
		}
	}
    for(new i=0; i<MAX_PLAYERS; i++)
    {
        if(PersonaEnLlamada[i] == playerid){SendClientMessage(i, Gris, "La conexión telefónica se ha caído."); EnLlamada[i] = 0; PersonaEnLlamada[i] = NOEXISTE; break;}
    }
    
    for(new i=0; i<MAX_PLAYERS; i++) //Sistema venta de vehículos a otras personas
    {
        if(VenderVehAVendedor[i] == playerid){VenderVehAVendedor[i] = NOEXISTE, VenderVehAPrecio[i] = 0, VenderVehALlave[i] = 0;}
    }
    
    if(JugadorInfo[playerid][pMuerto] > 0) //Sistema muerte
    {
	    KillTimer(MuertoTimer[playerid]);
		KillTimer(MuertoFlashTimer[playerid]);
    }
    
    if(MatriculasActivadas[playerid] == 1) //Sistema matrículas
    {
	    for(new i; i < MAX_VEHICLES; i++)
		{
			DeletePlayer3DTextLabel(playerid, MatriculasCoches[playerid][i]);
		}
	}
    
    KillTimer(AFKTimer[playerid]); //Sistema anti afk

    PlayerSave(playerid); //Guardar stats
    if(reason == 0) //Si se le cae la conexión
    {
	    //ResetPlayerVars(playerid); //Resetea todas las variables del jugador
	    Delete3DTextLabel(Yo3DText[playerid]);
	    Delete3DTextLabel(Heridas[playerid]);
    	RecibioHeadShot[playerid] = 0; RecibioDisparo[playerid] = 0;

	    SetPlayerColor(playerid,Invisible); //Cambia el color del jugador a transparente
    }
    return 1;
}

public OnPlayerSpawn(playerid)
{
    if(JugadorLogueado[playerid] == 0 || !IsPlayerConnected(playerid)){Kick(playerid); return 1;}
    CargarAgenda(playerid); //Cargar agenda
    Disparos[playerid] = 0;
    SetPlayerTime(playerid,Hour,Minute);
    
    KillTimer(TAFK[playerid]);
	if(JugadorInfo[playerid][pAdmin] == 0) TAFK[playerid] = SetTimerEx("ComprobarAFK", TIEMPO_AFK, 0, "i", playerid); // Si no es admin.

    if(JugadorInfo[playerid][pPrimerLogueo] == 0) //Primera vez que loguea
    {
        LimpiarChat(playerid, 100);
	    SetPlayerVirtualWorld(playerid, 0);
	    JugadorInfo[playerid][pDineroBanco] = 0;
	    ResetPlayerMoneyAC(playerid);
	    GivePlayerMoneyAC(playerid, 8000);
	    JugadorInfo[playerid][pPrimerLogueo] = 1;
	    new textomensaje[128]; format(textomensaje, 128, "¡Bienvenido(a) por primera vez a Siglo XXI, %s!", NombreJugador(playerid)); SendClientMessage(playerid, -1, textomensaje);
		SendClientMessage(playerid, COLOR_PIEL, "El comando '/ayuda' para ver todos los comandos. Usa '/duda' si necesitas ayuda o '/reportar' para recibir soporte técnico.");
        SetPlayerFacingAngle(playerid, 270);
		SetPlayerPos(playerid, 1089.3743,-1490.7974,22.7622);
	    SetCameraBehindPlayer(playerid);
	    SetPlayerInterior(playerid,0);
	    JugadorInfo[playerid][pMascaraID] = random(90000) + 10000;
	    SetPlayerVirtualWorld(playerid,0);
	    TogglePlayerControllable(playerid, 1);
	    PrimerSpawn[playerid] = 1;
	    if(JugadorInfo[playerid][pSexo] == 1) {SetPlayerSkin(playerid, 26);}
        else if(JugadorInfo[playerid][pSexo] == 2) {SetPlayerSkin(playerid, 90);}
	    JugadorInfo[playerid][pNivel] = 1;
        for(new x = 0; x<MAX_SLOTS_INV; x++)
	    {
		    JugadorInfo[playerid][pBol][x] = 0;
		    JugadorInfo[playerid][pBolCant][x] = 0;
	    }
	    JugadorInfo[playerid][pManoIzq] = 0;
	    JugadorInfo[playerid][pManoIzqCant] = 0;
	    JugadorInfo[playerid][pManoDer] = 0;
	    JugadorInfo[playerid][pManoDerCant] = 0;
	    JugadorInfo[playerid][pEspalda] = 0;
	    JugadorInfo[playerid][pEspaldaCant] = 0;
	    
		JugadorInfo[playerid][pFuerza] = 1;
		
		TogglePlayerControllable(playerid, 1);
		SetCameraBehindPlayer(playerid);
		
		CambioSkin(playerid);
    }
    else if(JugadorInfo[playerid][pPrimerLogueo] != 0) //No es primera vez que loguea
    {
        SetPlayerPos(playerid, 1128.9801,-1490.0947,22.7690); //Spawnea en hospital de Jefferson
	    if(PrimerSpawn[playerid] == 0) //Primera vez que spawnea tras loguear
	    {
            SetPlayerInterior(playerid, JugadorInfo[playerid][pInterior]);
	        SetPlayerVirtualWorld(playerid, JugadorInfo[playerid][pVirtualWorld]);
	        new Float:PosX, Float:PosY, Float:PosZ;
	        PosX = JugadorInfo[playerid][pPosX]; PosY = JugadorInfo[playerid][pPosY]; PosZ = JugadorInfo[playerid][pPosZ];
	        SetPlayerPos(playerid,PosX, PosY, PosZ);
	        SetPlayerHealth(playerid, JugadorInfo[playerid][pVida]);
	        SetPlayerArmour(playerid, JugadorInfo[playerid][pChaleco]);
	        new ManoDer = JugadorInfo[playerid][pManoDer];
	        new ManoIzq = JugadorInfo[playerid][pManoIzq];
	        new Espalda = JugadorInfo[playerid][pEspalda];
	        if(ManoDer > 0) //Si tiene algo en la mano derecha
			{
				PonerObjeto(playerid, 1, ManoDer);
				if(ObjetoInfo[ManoDer][IDArma] > 0) //Es un arma
				{
					GivePlayerWeapon(playerid, ObjetoInfo[ManoDer][IDArma], JugadorInfo[playerid][pManoDerCant]); //Le da el arma
				}
			}
	        if(ManoIzq > 0){PonerObjeto(playerid, 2, ManoIzq);} //Si tiene algo en la mano izquierda
	        if(Espalda > 0){PonerObjeto(playerid, 3, Espalda);} //Si tiene algo en la espalda
	        PrimerSpawn[playerid] = 1;
	        TogglePlayerControllable(playerid, 0);
	        //SetCameraBehindPlayer(playerid);
			SetTimerEx("Descongelar", 5000, false, "i", playerid);
	    }
	    if(JugadorInfo[playerid][pEncarcelado] == 3) //Si está jail OOC
		{
		    JailPlayerOOC(playerid);
		}
		// ---------------------------
		if(HeridasInfo[playerid][pHerido] == 2)
		{
   		    new Float:X, Float:Y, Float:Z; GetPlayerPos(playerid, X, Y, Z);
   		    Delete3DTextLabel(Heridas[playerid]);
	       	new string[128]; format(string, 128, "Este jugador ha muerto. /heridas %d", playerid);
		    Heridas[playerid] = Create3DTextLabel(string, 0xAA3333FF, X, Y, Z, 10.0, 1);
		    Attach3DTextLabelToPlayer(Heridas[playerid], playerid, 0.0, 0.0, 0.4);
   		}
		else if(HeridasInfo[playerid][pHerido] == 1)
		{
		    new Float:X, Float:Y, Float:Z; GetPlayerPos(playerid, X, Y, Z);
			Delete3DTextLabel(Heridas[playerid]);
	    	new string[128]; format(string, 128, "Este jugador está herido. /heridas %d", playerid);
			Heridas[playerid] = Create3DTextLabel(string, 0xAA3333FF, X, Y, Z, 10.0, 1);
	   		Attach3DTextLabelToPlayer(Heridas[playerid], playerid, 0.0, 0.0, 0.4);
     	}
     	// ---------------------------
		if(JugadorInfo[playerid][pMuerto] > 0)
		{
  			TogglePlayerControllable(playerid, 0);
		    ApplyAnimation(playerid,"WUZI","CS_Dead_Guy",4.1,1,1,1,0,0,1);

	   	 	AhoraMorirTimer[playerid] = SetTimerEx("AhoraMorir", 300000, false, "i", playerid);
	   	 	
	   	 	if(JugadorInfo[playerid][pMuerto] > 0)
			{
            	SetPlayerPos(playerid, MuertoX[playerid], MuertoY[playerid], MuertoZ[playerid]);
   				SetPlayerInterior(playerid, MuertoInt[playerid]), SetPlayerVirtualWorld(playerid, MuertoVW[playerid]);
   				
                if(JugadorInfo[playerid][pEncarcelado] == 0)
				{
				    if(RecibioHeadShot[playerid] == 0) { SendClientMessage(playerid, 0xF63A37FF, "Ahora tienes dos posibilidades: usar el comando '/morir' o esperar a que llegue un médico a salvarte."); }
					else { SendClientMessage(playerid, 0xF73A37FF, "Tu personaje ha muerto y ya nada puede salvarte: podrás usar '/morir' para reaparecer dentro 5 minutos."); }
				}

   				if(GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
			    {
			        new medicoconectado;
				    for(new x=0; x<MAX_PLAYERS; x++)
				    {
				        if(IsPlayerConnected(x) && x != INVALID_PLAYER_ID && JugadorInfo[x][pFaccion] == 2 && JugadorInfo[x][pServicioFD] > 0){medicoconectado = 1; break;}
				    }
				    if(medicoconectado == 1)
				    {
						ShowPlayerDialog(playerid, AVISARPD, DIALOG_STYLE_MSGBOX, "Responde según tu situación", "Considerando el rol de entorno, ¿deseas llamar a los servicios de emergencia?", "Sí", "No");
					}
					else
					{
					    PuedeMorir[playerid] = 1;
					    ForzoMuerte[playerid] = 1;
					    KillTimer(AhoraMorirTimer[playerid]);
						SendClientMessage(playerid, Azulito, "No hay médicos que puedan atenderte o no estás en su jurisdicción. Puedes usar /morir para forzar la muerte de tu personaje.");
					}
				}
				else
				{
				    PuedeMorir[playerid] = 1;
				    KillTimer(AhoraMorirTimer[playerid]);
					SendClientMessage(playerid, Azulito, "No hay médicos que puedan atenderte o no estás en su jurisdicción. Puedes usar /morir para forzar la muerte de tu personaje.");
				}
			}
			if(ObjetoInfo[JugadorInfo[playerid][pManoDer]][IDArma] > 0) //Es un arma
			{
			    GivePlayerWeapon(playerid, ObjetoInfo[JugadorInfo[playerid][pManoDer]][IDArma], BalasActual[playerid]); //Le da el arma
		    }
			// /morir
			SetPlayerArmour(playerid, ChalecoActual[playerid]);
		}
		if(Muerte[playerid] == 1) //Si murió ponerlo en Centro Comercial.
		{
			SetPlayerPos(playerid, 1128.9801,-1490.0947,22.7690);
			SetPlayerFacingAngle(playerid, 360);
			Muerte[playerid] = 0;
		    JailPlayerIC(playerid);
		}
		if(Muerte[playerid] == 2) //Si murió ponerlo en Centro Comercial.
		{
			SetPlayerPos(playerid, 1128.9801,-1490.0947,22.7690);
			SetPlayerFacingAngle(playerid, 360);
			Muerte[playerid] = 0;
		   	JailPlayerIC(playerid);
		}
    }
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 1000);
    
    if(JugadorInfo[playerid][pServicioPD] > 0) { if(JugadorInfo[playerid][pUniformePD] > 0) { SetPlayerSkin(playerid, JugadorInfo[playerid][pUniformePD]); } else { SetPlayerSkin(playerid, JugadorInfo[playerid][pSkin]); } } else { SetPlayerSkin(playerid, JugadorInfo[playerid][pSkin]); }

	SetTimerEx("SpawnBug", 1000, false, "i", playerid);
    
    PonerObjeto(playerid, 1, JugadorInfo[playerid][pManoDer]);
    PonerObjeto(playerid, 2, JugadorInfo[playerid][pManoIzq]);
    PonerObjeto(playerid, 3, JugadorInfo[playerid][pEspalda]);
    if(JugadorInfo[playerid][pFaccion] != 1){if(JugadorInfo[playerid][pServicioPD] > 0){JugadorInfo[playerid][pServicioPD] = 0;}}
	return LoadToys(playerid),1;
}

forward ComprobarAFK(playerid);
public ComprobarAFK(playerid)
{
    GetPlayerPos(playerid, Posiciones[playerid][0], Posiciones[playerid][1], Posiciones[playerid][2]);
	if((Posiciones[playerid][0] == Posiciones[playerid][3] && Posiciones[playerid][1] == Posiciones[playerid][4] && Posiciones[playerid][2] == Posiciones[playerid][5]))
    {
		KillTimer(TAFK[playerid]);
		SendClientMessage(playerid, Rojo, "La normativa se aplicó en su personaje. No está permitido quedarse 'AFK' en el juego, para evitar abusos.");
		Expulsar(playerid);
		print("por afk");
		return 1;
	}
	else
	{
	    Posiciones[playerid][3] = Posiciones[playerid][0];
		Posiciones[playerid][4] = Posiciones[playerid][1];
		Posiciones[playerid][5] = Posiciones[playerid][2];
		KillTimer(TAFK[playerid]);
	    if(JugadorInfo[playerid][pAdmin] == 0) TAFK[playerid] = SetTimerEx("ComprobarAFK", TIEMPO_AFK, 0, "i", playerid);
	    return 1;
	}
}


forward AhoraMorir(playerid); public AhoraMorir(playerid)
{
	if(JugadorInfo[playerid][pMuerto] >= 1)
	{
    	PuedeMorir[playerid] = 1;
    	SendClientMessage(playerid, Azulito, "Ya pasaron los 5 minutos establecidos. Usa el comando '/morir' para forzar la muerte de tu personaje.");
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
    Anims_OnPlayerDeath(playerid);
	new string[128];
	
	RemovePlayerColorFade(playerid); //Para seifader include
	
	GivePlayerMoneyAC(playerid, 100); //Le da los 100$ que pierde al morir
	
    reclutarfaccion[playerid] = 0; //Comando /reclutar
    reclutarlider[playerid] = 0;
    
    Esposado[playerid] = 0; //Esposas
    
    RemovePlayerAttachedObject(playerid, 4); //Esposas
    
    PizzaRepartida[playerid] = 0; //Job pizzero
    SolicitaPizza[playerid] = 0;
    
    CalleBarrida[playerid] = 0; //Job barrendero
    
    Cosechado[playerid] = 0; //Job cosechador
    
    Fumigado[playerid] = 0; //Job fumigador
    
    TaxiConductor[playerid] = NOEXISTE; //Job taxista
	TaxiPasajero[playerid] = NOEXISTE;
	TaxiCoste[playerid] = 0;
	SolicitaTaxi[playerid] = 0;
	
	for(new i=0; i<MAX_PLAYERS; i++) //Job taxista
    {
        if(TaxiConductor[i] == playerid){TaxiConductor[i] = NOEXISTE;}
        if(TaxiPasajero[i] == playerid){TaxiPasajero[i] = NOEXISTE;}
    }
    
    ReparacionTipo[playerid] = 0; //Job mecánico
	ReparacionMeca[playerid] = NOEXISTE;
	ReparacionPrecio[playerid] = 0;
	
	for(new i=0; i<MAX_PLAYERS; i++) //Job mecánico
    {
        if(ReparacionMeca[i] == playerid){ReparacionMeca[i] = NOEXISTE; ReparacionTipo[i] = 0; ReparacionPrecio[i] = 0;}
    }
    RepintadoColor1[playerid] = 0; //Job mecánico
    RepintadoColor2[playerid] = 0;
	RepintadoMeca[playerid] = NOEXISTE;
	RepintadoPrecio[playerid] = 0;
	
    for(new i=0; i<MAX_PLAYERS; i++) //Job mecánico
    {
        if(RepintadoMeca[i] == playerid){RepintadoMeca[i] = NOEXISTE; RepintadoColor1[i] = 0; RepintadoColor2[playerid] = 0; RepintadoPrecio[i] = 0;}
    }
    Contratador[playerid] = NOEXISTE;
	Contrato[playerid] = 0;
	
	for(new i=0; i<MAX_PLAYERS; i++) //Taller mecánico
    {
        if(Contratador[i] == playerid){Contratador[i] = NOEXISTE; Contrato[i] = 0;}
    }
    
    Robando[playerid] = 0;//Job ladrón
    KillTimer(RoboTimer[playerid]);
    Puenteando[playerid] = 0;
    KillTimer(PuenteTimer[playerid]);
    
    PescaRecogida[playerid] = 0; //Job pescador
    DineroPesca[playerid] = 0;
    
    MisionEncargada[playerid] = 0; //Sistema de misiones de pandillas
	RealizandoMision[playerid] = 0;
	MuroAPintar[playerid] = NOEXISTE;
	
	HaciendoPressBanca[playerid] = 0; //Comando /Entrenar
    RepeticionesPressBanca[playerid] = 0;
    
    PrestadorCoche[playerid] = NOEXISTE; // /PrestarLlave
    LlavePrestada[playerid] = NOEXISTE;
    
    EnLlamada[playerid] = 0; //Sistema teléfono
    ToqueLlamada[playerid] = 0;
   	KillTimer(ToqueLlamadaTimer[playerid]);
    if(PersonaEnLlamada[playerid] != NOEXISTE)KillTimer(ToqueLlamadaTimer[PersonaEnLlamada[playerid]]);
    if(EnLlamada[playerid] == 3)
	{
		KillTimer(CostoLlamadaTimer[playerid]);
		format(string, sizeof(string), "Coste de la llamada: %d$", CosteTotalLlamada[playerid]);
		SendClientMessage(playerid, RojoIntenso, string);
		JugadorInfo[playerid][pDineroBanco] -= CosteTotalLlamada[playerid];
		CosteTotalLlamada[playerid] = 0;
	}
	if(PersonaEnLlamada[playerid] != NOEXISTE)
	{
	    if(EnLlamada[PersonaEnLlamada[playerid]] == 3)
		{
			KillTimer(CostoLlamadaTimer[PersonaEnLlamada[playerid]]);
			format(string, sizeof(string), "Coste de la llamada: %d$", CosteTotalLlamada[PersonaEnLlamada[playerid]]);
			SendClientMessage(PersonaEnLlamada[playerid], RojoIntenso, string);
			JugadorInfo[PersonaEnLlamada[playerid]][pDineroBanco] -= CosteTotalLlamada[PersonaEnLlamada[playerid]];
			CosteTotalLlamada[PersonaEnLlamada[playerid]] = 0;
		}
	}
    if(PersonaEnLlamada[playerid] != NOEXISTE)SendClientMessage(playerid, COLOR_GREEN2, "Se cayó la línea");
    for(new i=0; i<MAX_PLAYERS; i++)
    {
        if(PersonaEnLlamada[i] == playerid){SendClientMessage(i, COLOR_GREEN2, "Se cayó la línea"); EnLlamada[i] = 0; PersonaEnLlamada[i] = NOEXISTE; break;}
    }
    PersonaEnLlamada[playerid] = NOEXISTE;
    
    for(new x=0; x<MAX_PLAYERS; x++) //Sistema RECON
    {
        if(GetPlayerState(x) == PLAYER_STATE_SPECTATING && JugadorInfo[x][pSpecID] == playerid)
        AdvanceSpectate(x);
    }
    
    Yo[playerid] = 0; //Comando /yo
    Delete3DTextLabel(Yo3DText[playerid]);
    CinturonPuesto[playerid] = 0; //Comando /Cinturón

    
    for(new x=0; x<5; x++) //Drogas
	{
	    JugadorInfo[playerid][pDrConsumida][x] = 0;
	}
	
	if(JugadorInfo[playerid][pEncarcelado] == 0) //Aviso muerte facciones publicas
    {
		new Float:pos[3];
		GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
        for(new x=0; x<MAX_PLAYERS; x++)
        {
            if(JugadorInfo[x][pServicioPD] > 0 && JugadorInfo[x][pFaccion] == 1 && x != playerid && GetPlayerVirtualWorld(playerid) == 0 && GetPlayerInterior(playerid) == 0)
            {
                // Aviso muerte PD.
            }
        }
    }
    
    if(JugadorInfo[playerid][pEncarcelado] == 1) //Prisión LSPD
    {
        for(new x=0; x<MAX_PLAYERS; x++)
        {
            if(JugadorInfo[x][pServicioPD] > 0 && JugadorInfo[x][pFaccion] == 1)
            {
		        SendClientMessage(playerid, Azulito, "Estás en prisión, estás fuera de la jurisdicción de los médicos.");
            }
        }
    }
    if(JugadorInfo[playerid][pEncarcelado] == 2) //Prisión federal
    {
        for(new x=0; x<MAX_PLAYERS; x++)
        {
            if(JugadorInfo[x][pServicioPD] > 0 && JugadorInfo[x][pFaccion] == 1)
            {
                SendClientMessage(playerid, Azulito, "Estás en prisión, estás fuera de la jurisdicción de los médicos.");
            }
        }
    }
    
    if(JugadorInfo[playerid][pMuerto] > 0) //Sistema muerte
    {
	    KillTimer(MuertoTimer[playerid]);
		KillTimer(MuertoFlashTimer[playerid]);
    }
    
    if(JugadorInfo[playerid][pMuerto] == 0 && AdminDuty[playerid] == 0) //Sistema de muerte
	{
	    GetPlayerPos(playerid, MuertoX[playerid], MuertoY[playerid], MuertoZ[playerid]);
	    MuertoInt[playerid] = GetPlayerInterior(playerid), MuertoVW[playerid] = GetPlayerVirtualWorld(playerid);

	    if(GetDistance(MuertoX[playerid], MuertoY[playerid], MuertoZ[playerid], 1182.8728, -1323.5931, 13.5783) < GetDistance(MuertoX[playerid], MuertoY[playerid], MuertoZ[playerid], 2002.5728, -1445.3669, 13.5616))
	    {
	    	JugadorInfo[playerid][pMuerto] = 1;
	    }
	    else
		{
			JugadorInfo[playerid][pMuerto] = 2;
		}
	}
	Streamer_Update(playerid);
    return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	new string[128];
	if(weaponid >= 22 && weaponid <= 34 && weaponid != 23) //Armas de fuego exceptuando la silenciada
	{
	    Disparos[playerid] += 1;
	    
        BalasActual[playerid] = GetPlayerAmmo(playerid);
	
		if(GetPlayerAmmo(playerid) == 1)
		{
			SendClientMessage(playerid, 0xD900D300, "¡Te has quedado sin balas!");
		}
		if(JugadorInfo[playerid][pManoDer] == 0) // Disparo con nada en la mano
		{
		    format(string, sizeof(string), "[Siglo-XXI]: %s ha sido expulsado del servidor. Razón: Software no aceptado.", NombreJugador(playerid));
    		SendClientMessageToAll(Rojo, string);
			format(string, sizeof(string), "[Anti-CHEAT]: El jugador %s (SQLID: %d) ha spawneado un arma. Expulsado.", NombreJugador(playerid), JugadorInfo[playerid][pSQLID]);
			SendAdminMessage(Naranja,string);
	       	Expulsar(playerid);
		}
	}
	if(JugadorInfo[playerid][pManoDer] == 38 && weaponid == 23){TaserRecarga[playerid] = 1; SetTimerEx("RecargarTaser", 5000, false, "i", playerid);} //Sistema de recarga de taser
    return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid, bodypart)
{
	BalasActual[playerid] = GetPlayerAmmo(playerid);
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid, bodypart)
{

    if(weaponid != 25 && BalasDeGoma[issuerid] > 0) { BalasDeGoma[issuerid] = 0; } // Arreglar bug escopeta
    new Float:health, Float:armour, Float:damage, calibre, string[128], impactochaleco;
    GetPlayerHealth(playerid, health);
    GetPlayerArmour(playerid, armour);
	if(!IsPlayerConnected(playerid)){return 1;}
	if(AdminDuty[playerid] == 1){return 1;}
	if(JugadorInfo[playerid][pMuerto] != 0){return 1;} // Daño a los muertos.
    if(weaponid == 54) //Caida
    {
    	damage = amount*5;
    }
    if(issuerid != INVALID_PLAYER_ID)
    {
        if(weaponid == 0) //Puños
        {
        	damage = 1;
            HeridasInfo[playerid][pGolpeado] += 1; // Va subiendo el daño
        }
        if(weaponid == 3 || weaponid == 11 || weaponid == 12 || weaponid == 13 || weaponid == 2 || weaponid == 5 || weaponid == 6 || weaponid == 7 || weaponid == 9) // porra y dildos
		{
		    damage = 5;
		}
		if(weaponid == 1) // manopla
		{
		    damage = 3;
		}
		if(weaponid == 7) // cuchillo
		{
		    damage = 10;
		    HeridasInfo[playerid][pCortado] += 1; // Va subiendo el daño
		}
		if(weaponid == 8)
		{
		    damage = 19;
		}
		if(weaponid == 24) // desert eagle
		{
		    damage = 33;
		    calibre = 2;
		}
		if(weaponid == 22) // pistola 9mm
		{
		    damage = 25;
		    calibre = 1;
		}
		if(weaponid == 29)
		{
		    damage = 19;
		    calibre = 5;
		}
		if(weaponid == 28) // uzi
		{
		    damage = 17;
		    calibre = 1;
		}
		if(weaponid == 32) // tec9
		{
		    damage = 19;
		    calibre = 1;
		}
		if(weaponid == 27) // spas
		{
		    damage = 18;
		}
		if(weaponid == 26) // recortada
		{
		    damage = 41;
		}
		if(weaponid == 31) // m4
		{
		    damage = 15;
		    calibre = 3;
		}
		if(weaponid == 30) // AK 47
		{
		    damage = 19;
		    calibre = 4;
		}
		if(weaponid == 33) // rifle
		{
		    damage = 26;
		    calibre = 7;
		}
		if(weaponid == 34) // francotirador
		{
		    damage = 41;
		    calibre = 7;
		}
        if(weaponid == 23 && JugadorInfo[issuerid][pManoDer] == 38 && !IsPlayerInAnyVehicle(playerid)) //Táser
        {
            if(!GetPlayersProx(10.0, issuerid, playerid)){return 1;}
			if(IsPlayerInAnyVehicle(playerid)){return 1;}
	        damage = 1;
            TogglePlayerControllable(playerid, 0);
			Taseado[playerid] = 1;
            PlayerPlaySound(playerid, 6003, 0.0, 0.0, 0.0);
            PlayerPlaySound(issuerid, 6003, 0.0, 0.0, 0.0);
            format(string, sizeof(string), "%s ha taseado con 10.000 voltios a %s.", NombreJugadorProxy(issuerid), NombreJugadorProxy(playerid));
 	    	ProxDetector(20.0, issuerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
        }
        if(JugadorInfo[issuerid][pManoDer] == 4) // Cuchillo
		{
		    damage = 10;
		    HeridasInfo[playerid][pCortado] += 1; // Va subiendo el daño
		    if(HeridasInfo[playerid][pCortado] == 4)
			{
			    if(HeridasInfo[playerid][pHerido] != 2) {HeridasInfo[playerid][pHerido] = 1;}
				format(string, 128, "¡Has sido herido de gravedad! (/heridas %d)", playerid);
				SendClientMessage(playerid, COLOR_ROJO, string);
				ActualizarHeridas(playerid);
			}
        }
        if(JugadorInfo[issuerid][pManoDer] == 5 || JugadorInfo[issuerid][pManoDer] == 6) // Bate y Pala
		{
		    damage = 10;
		    HeridasInfo[playerid][pGolpeado] += 5; // Va subiendo el daño
		    if(HeridasInfo[playerid][pGolpeado] == 10)
			{
			    if(HeridasInfo[playerid][pHerido] != 2) {HeridasInfo[playerid][pHerido] = 1;}
				format(string, 128, "¡Has sido herido de gravedad! (/heridas %d)", playerid);
				SendClientMessage(playerid, COLOR_ROJO, string);
				ActualizarHeridas(playerid);
			}
        }
        // Fin de daño armas, comienza daño distancia.
        if(GetPlayersProx(1.0, issuerid, playerid)) // Si está super cerca del jugador (1 metro)
		{
		    if(weaponid >= 22 && weaponid <= 34 && weaponid != 23) //Armas de fuego exceptuando la silenciada
			{
		    	damage += 15;
			}
		}
		else if(GetPlayersProx(10.0, issuerid, playerid)) // Si está cerca del jugador (10 metros)
		{
		    if(weaponid >= 22 && weaponid <= 34 && weaponid != 23) //Armas de fuego exceptuando la silenciada
			{
		    	damage += 10;
			}
		}
		else if(GetPlayersProx(30.0, issuerid, playerid)) // Si está a distancia mediana del jugador (30 metros)
		{
		    if(weaponid >= 22 && weaponid <= 34 && weaponid != 23) //Armas de fuego exceptuando la silenciada
			{
		    	damage += 5;
			}
		}
		else if(GetPlayersProx(50.0, issuerid, playerid)) // Si está a distancia larga del jugador (50 metros)
		{
		    if(weaponid >= 22 && weaponid <= 34 && weaponid != 23) //Armas de fuego exceptuando la silenciada
			{
		    	damage -= 5;
			}
		}
		if(weaponid == 25 && BalasDeGoma[issuerid] > 0) // escopeta
		{
		    if(IsPlayerInAnyVehicle(playerid)){return 1;}
	        damage = 1;
			BaleadoGoma[playerid] = 1;
			ApplyAnimation(playerid,"SWEET", "Sweet_injuredloop", 4.1,0,1,1,1,0);
			SetTimerEx("QuitarGoma", 1000*4, false, "i", playerid);
            format(string, sizeof(string), "le disparó un cartucho de goma a %s.", NombreJugadorProxy(playerid));
			AutoRol(issuerid, string);
		}
		else if(weaponid == 25 && BalasDeGoma[issuerid] == 0)
		{
			damage += 50;
			calibre = 6;
		}
		// Fin daño armas y de distancia, comienza mensaje de impactos.
        if(weaponid >= 22 && weaponid <= 34 && weaponid != 23) //Armas de fuego exceptuando la silenciada
		{
			switch(bodypart)
			{
			    case 9:
			    {
			        if(BalasDeGoma[issuerid] == 0)
		   			{
		   			    if(IsPlayerInAnyVehicle(playerid)) // Si está subido a un vehículo
						{
			            	new car = GetPlayerVehicleID(playerid);
    						if(IsABike(car) || IsAMBike(car) || IsABoat(car)){damage = 100;}

						}
						else damage = 100;
					}
			    }
			}
		}
    }
    if(weaponid == 0)
    {
        damage = 1;
    }
    // quitado de daño
	if(armour > 0)
	{
	    if(weaponid >= 22 && weaponid <= 34 && weaponid != 23) //Armas de fuego exceptuando la silenciada
		{
	     	if(damage > 0)
			{
				if(armour > damage) // el chaleco es mayor al daño y es impacto en torso
				{
				    if(bodypart == 3)
				    {
					    new randomm = random(5);
					    switch(randomm)
					    {
							case 0,1,2: // Le impactó.
			    			{
			       				SetPlayerArmour(playerid, armour-20);
								GameTextForPlayer(playerid, "~g~Impacto en el chaleco!", 3700, 4);
								impactochaleco = 1;
						    }
			   				case 3,4: // No le impactó en el chaleco y le quitó vida.
							{
							    SetPlayerHealth(playerid, health-damage);
								GameTextForPlayer(playerid, "~g~El impacto atraveso el chaleco!", 3700, 4);
								impactochaleco = 0;
							}
				  		}
				  	}
				  	else
				  	{
				  	    SetPlayerArmour(playerid, armour);
					    SetPlayerHealth(playerid, health-damage);
					}
				}
				else
				{
				    SetPlayerArmour(playerid, 0);
				    SetPlayerHealth(playerid, health-damage);
				}
			}
		}
		else
		{
		    SetPlayerHealth(playerid, health-damage);
		}
	}
	else
	{
	    SetPlayerArmour(playerid, 0);
	    SetPlayerHealth(playerid, health-damage);
	}
	/* FIN SISTEMA DE DAÑO TRADICIONAL, COMIENZA SISTEMA DE /HERIDAS. */
	if(weaponid >= 22 && weaponid <= 34 && weaponid != 23 && impactochaleco == 0) //Armas de fuego exceptuando la silenciada
	{
	    if(BalasDeGoma[issuerid] == 0)
	    {
			switch(bodypart)
			{
			    case 3:
			    {
			        SendClientMessage(playerid, COLOR_ROJO, "¡Has recibido un balazo en el torso!");
				}
			    case 4:
			    {
					SendClientMessage(playerid, COLOR_ROJO, "¡Has recibido un balazo en la entrepierna!");
			    }
			    case 5:
			    {
	      			ImpactoBrazos(playerid);
					SendClientMessage(playerid, COLOR_ROJO, "¡Has recibido un balazo en el brazo izquierdo y pierdes habilidad con tus armas!");
			    }
			    case 6:
			    {
	      			ImpactoBrazos(playerid);
					SendClientMessage(playerid, COLOR_ROJO, "¡Has recibido un balazo en el brazo derecho y pierdes habilidad con tus armas!");
			    }
			    case 7:
			    {
					SendClientMessage(playerid, COLOR_ROJO, "¡Has recibido un balazo en la pierna izquierda!");
				}
			    case 8:
			    {
					SendClientMessage(playerid, COLOR_ROJO, "¡Has recibido un balazo en la pierna derecha!");
			    }
			    case 9:
			    {
       				HeridasInfo[playerid][pHerido] = 2;
  				 	SendClientMessage(playerid, COLOR_ROJO, "¡Has recibido un balazo en la cabeza y te has muerto!");
                    ActualizarHeridas(playerid);
				}
			} // Solo recibirá pantallazo rojo con balazos.
			SetPlayerDrunkLevel(playerid, 8000);
	    	PlayerTextDrawBoxColor(playerid, Pantallazo[playerid], 0xF60000FF);
	    	PlayerTextDrawShow(playerid, Pantallazo[playerid]);
	    	SetTimerEx("QuitarFlash", 500, 0, "d", playerid);
	    	SetTimerEx("QuitarDrunk", 3000, 0, "d", playerid);
		}
    }
	if(RecibioDisparo[playerid] > 0)
	{
        if(IsPlayerRunning(playerid))
		{
		    ApplyAnimation(playerid,"ped","FALL_collapse",4.0,0,1,1,0,200,1);
			ApplyAnimation(playerid,"ped","FALL_collapse",4.0,0,1,1,0,200,1);
		}
    }
    BalasActual[issuerid] = GetPlayerAmmo(issuerid);
    BalasActual[playerid] = GetPlayerAmmo(playerid);
    GetPlayerArmour(issuerid,ChalecoActual[issuerid]);
    GetPlayerArmour(playerid,ChalecoActual[playerid]);
	if(calibre > 0) { calibre = 0; } // Me dió pereza sacar la variable.

    // Heridas
	if(weaponid >= 22 && weaponid <= 34 && weaponid != 23 && impactochaleco == 0) //Armas de fuego exceptuando la silenciada
    {
        if(BalasDeGoma[issuerid] == 0)
        {
		    for(new hit = 0; hit < MAX_HERIDAS; hit++)
			{
			    if(HeridasInfo[playerid][pHerida][hit] > 0)
			    {
			        if(HeridasInfo[playerid][pCalibre] == weaponid && HeridasInfo[playerid][pBody] == bodypart)
			        {
			            if(HeridasInfo[playerid][pHerido] != 2) {HeridasInfo[playerid][pHerido] = 1;}
                        HeridasInfo[playerid][pHerida][hit] += 1;
                        ActualizarHeridas(playerid);
                        return 1;
					}
			    }
				else if(HeridasInfo[playerid][pHerida][hit] == 0) // No tiene la herida ocupada.
				{
				    if(HeridasInfo[playerid][pHerido] != 2) {HeridasInfo[playerid][pHerido] = 1;}
				    HeridasInfo[playerid][pHerida][hit] = 1; // Está herido.
				    HeridasInfo[playerid][pCalibre][hit] = weaponid; // Calibre del arma.
				    HeridasInfo[playerid][pBody][hit] = bodypart; // Zona del cuerpo.
				    ActualizarHeridas(playerid);
					return 1;
				}
			}
			// Texto arriba de la cabeza.
			ActualizarHeridas(playerid);
		}
	}
	return 1;
}

stock ActualizarHeridas(playerid)
{
    if(HeridasInfo[playerid][pHerido] == 2)
	{
 	    new Float:X, Float:Y, Float:Z; GetPlayerPos(playerid, X, Y, Z);
   	    Delete3DTextLabel(Heridas[playerid]);
	   	new string[128]; format(string, 128, "Este jugador ha muerto. /heridas %d", playerid);
	    Heridas[playerid] = Create3DTextLabel(string, 0xAA3333FF, X, Y, Z, 10.0, 1);
	    Attach3DTextLabelToPlayer(Heridas[playerid], playerid, 0.0, 0.0, 0.4);
	}
	else if(HeridasInfo[playerid][pHerido] == 1)
	{
	    new Float:X, Float:Y, Float:Z; GetPlayerPos(playerid, X, Y, Z);
		Delete3DTextLabel(Heridas[playerid]);
    	new string[128]; format(string, 128, "Este jugador está herido. /heridas %d", playerid);
		Heridas[playerid] = Create3DTextLabel(string, 0xAA3333FF, X, Y, Z, 10.0, 1);
  		Attach3DTextLabelToPlayer(Heridas[playerid], playerid, 0.0, 0.0, 0.4);
 	}
 	else if(HeridasInfo[playerid][pHerido] == 0)
 	{
 	    Delete3DTextLabel(Heridas[playerid]);
 	}
	return 1;
}
forward QuitarGoma(playerid); public QuitarGoma(playerid)
{
	BaleadoGoma[playerid] = 0;
	ClearAnimations(playerid, 1);
    TogglePlayerControllable(playerid, 1);
  	ApplyAnimation(playerid, "ped", "getup_front", 4.000000, 0, 0, 0, 0, 0);
	return 1;
}
forward ImpactoBrazos(playerid); public ImpactoBrazos(playerid)
{
    SetTimerEx("BrazosRecuperar", 1000*15, false, "i", playerid);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 0);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 0);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 0);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 0);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 0);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 0);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 0);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 0);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 0);
	return 1;
}

forward BrazosRecuperar(playerid); public BrazosRecuperar(playerid)
{
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 1000);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 1000);
	return 1;
}
    
forward QuitarDrunk(playerid); public QuitarDrunk(playerid)
{
	SetPlayerDrunkLevel(playerid, 0);
}

forward QuitarFlash(playerid); public QuitarFlash(playerid)
{
    PlayerTextDrawHide(playerid, Pantallazo[playerid]);
}

public OnVehicleSpawn(vehicleid)
{
	new carid = vehicleid;
	
	if(CocheInfo[vehicleid][cBaulRoto] == 1)
	{
	    DestruirBaul(vehicleid);
	}

	if(CocheInfo[vehicleid][cCapoRoto] == 1)
	{
	    DestruirCapo(vehicleid);
	}
	
    if(vehicleInfo[vehicleid][useAttach]) { DestroyObject(vehicleInfo[vehicleid][attachObject]); }
	
	if(respawnx[carid] != 0 && respawny[carid] != 0 && respawnz[carid] != 0)
	{
     	if(vehicleid > MAX_VEHPUBLICO)
		{
    		SetVehiclePos(carid, respawnx[carid], respawny[carid], respawnz[carid]);
			SetVehicleZAngle(carid, respawnrot[carid]);
			SetVehicleParamsEx(carid,resengine[carid],reslights[carid],resalarm[carid],resdoors[carid],resbonnet[carid],resboot[carid],resobjective[carid]);
			SetVehicleVirtualWorld(carid, virtualworldres[carid]);
		}
	}
	CocheInfo[vehicleid][cRadioStatus] = 0;
	DestroyDynamicObject(SirenaCoche[vehicleid]);
	DestroyObject(LuzSS[0][vehicleid]);
	DestroyObject(LuzSS[1][vehicleid]);
	DestroyObject(LuzSS[2][vehicleid]);
	DestroyObject(Sirena[vehicleid]);
	DestroyObject(Bombilla[vehicleid]);
	SinSonido[vehicleid] = 0;
    return 1;
}


public OnVehicleDeath(vehicleid, killerid)
{
    if(vehicleInfo[vehicleid][useAttach]) { DestroyObject(vehicleInfo[vehicleid][attachObject]); }
        
    new veh = GetPlayerVehicleID(vehicleid);
    new lights,alarm,doors,bonnet,boot,objective;
    Delete3DTextLabel(veicolo_callsign_testo[veh]);
    veicolo_callsign_status[veh] = 0;
    DestroyObject(LuzSS[0][vehicleid]);
	DestroyObject(LuzSS[1][vehicleid]);
	DestroyObject(LuzSS[2][vehicleid]);
	DestroyObject(Sirena[vehicleid]);
	DestroyObject(Bombilla[vehicleid]);
	SinSonido[vehicleid] = 0;
	SetVehicleParamsEx(vehicleid,0,lights,alarm,doors,bonnet,boot,objective);

	if(vehicleid > MAX_VEHPUBLICO)
	{
		MotorFeo[vehicleid] = 1;
		virtualworldres[vehicleid] = GetVehicleVirtualWorld(vehicleid);
		GetVehiclePos(vehicleid, respawnx[vehicleid], respawny[vehicleid], respawnz[vehicleid]);
		GetVehicleZAngle(vehicleid, respawnrot[vehicleid]);
		GetVehicleParamsEx(vehicleid,resengine[vehicleid],reslights[vehicleid],resalarm[vehicleid],resdoors[vehicleid],resbonnet[vehicleid],resboot[vehicleid],resobjective[vehicleid]);
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
	new string[128];
	printf("%s dice: %s", NombreJugador(playerid), text); //Se guarda en el chatlog
    if(CocheLSTV(GetPlayerVehicleID(playerid)) && DirectoLSNCoche[GetPlayerVehicleID(playerid)] != NOEXISTE)
    {
        format(string, sizeof(string), "[DIRECTO LSRTV] %s: %s", NombreJugador(playerid), text);
        NoticiasLSN(AmarilloClaro, string);
        return 0;
    }
    if(EstaEnEstudio(playerid) && DirectoLSNEstudio == 1 && JugadorInfo[playerid][pFaccion] == 4)
    {
        format(string, sizeof(string), "[ESTUDIO LSRTV] %s: %s", NombreJugador(playerid), text);
        NoticiasLSN(AmarilloClaro, string);
        return 0;
    }
    if(EnLlamada[playerid] == 444) //Anuncios
    {
        anunciotiempo = 1200;
        ColgarTelefono(playerid);
    }
    if(EnLlamada[playerid] == 2 || EnLlamada[playerid] == 3 || EnLlamada[playerid] == 912) //Teléfono llamada normal o emergencias
	{
	    new lenguaje[10];
        switch(Idioma[playerid])
        {
            case 0: lenguaje = "";
            case 1: lenguaje = "[ESP] ";
            case 2: lenguaje = "[ALE] ";
            case 3: lenguaje = "[JAP] ";
            case 4: lenguaje = "[ITA] ";
            case 5: lenguaje = "[RUS] ";
            case 6: lenguaje = "[ARA] ";
            case 7: lenguaje = "[FRA] ";
            case 8: lenguaje = "[CHI] ";
            case 9: lenguaje = "[POR] ";
        }
        
        if(strlen(text) > 70)
	    {
	        new text1[91],text2[91];
	        strmid(text2, text, 70, 128);
	        strmid(text1, text, 0, 70);

	        format(string, sizeof(string), "%s[Teléfono: %d] %s...", lenguaje, JugadorInfo[playerid][pTelefono],text1);
			SendClientMessage(PersonaEnLlamada[playerid], COLOR_PIEL, string);
			format(string, sizeof(string), "%s%s por teléfono: %s...", lenguaje, NombreJugadorProxy(playerid), text1);
			ProxDetector(15.0, playerid,string,Chat1,Chat2,Chat3,Chat4,Chat5);
	        format(string, sizeof(string), "%s", text2);
			SendClientMessage(PersonaEnLlamada[playerid], COLOR_PIEL, string);
			format(string, sizeof(string), "%s", text2);
			ProxDetector(15.0, playerid,string,Chat1,Chat2,Chat3,Chat4,Chat5);
	    }
	    else
		{
		 	format(string, sizeof(string), "%s[Teléfono: %d] %s", lenguaje, JugadorInfo[playerid][pTelefono],text);
			SendClientMessage(PersonaEnLlamada[playerid], COLOR_PIEL, string);
			format(string, sizeof(string), "%s%s por teléfono: %s", lenguaje, NombreJugadorProxy(playerid), text);
			ProxDetector(15.0, playerid,string,Chat1,Chat2,Chat3,Chat4,Chat5);
		}
		return 0;
	}
    //Sistema de chat general
    if(ChatNormal)
    {
        new lenguaje[10];
        switch(Idioma[playerid])
        {
            case 0: lenguaje = "";
            case 1: lenguaje = "[ESP] ";
            case 2: lenguaje = "[ALE] ";
            case 3: lenguaje = "[JAP] ";
            case 4: lenguaje = "[ITA] ";
            case 5: lenguaje = "[RUS] ";
            case 6: lenguaje = "[ARA] ";
            case 7: lenguaje = "[FRA] ";
            case 8: lenguaje = "[CHI] ";
            case 9: lenguaje = "[POR] ";
        }
        new prefijo[30];
        switch(Idioma[playerid])
        {
            case 0: prefijo = "dice";
            case 1: prefijo = "dice"; // Español
            case 2: prefijo = "gesagt"; // Aleman
            case 3: prefijo = "san"; // Japonés
            case 4: prefijo = "ditto"; // Italiano
            case 5: prefijo = "govorit"; // Ruso
            case 6: prefijo = "yqwl"; // Arabe
            case 7: prefijo = "dit"; // Frances
            case 8: prefijo = "shuo"; // Chino
            case 9: prefijo = "dito"; // Portugues
        }
	    if(strlen(text) > 88)
	    {
	        new text1[91],text2[91];
	        strmid(text2, text, 88, 128);
	        strmid(text1, text, 0, 88);
	        format(string, 128, "%s%s %s: %s...", lenguaje, NombreJugadorProxy(playerid), prefijo, text1);
	        ProxDetector(15.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
	        format(string, 128, "%s", text2);
	        ProxDetector(15.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
	    }
	    else
		{
		 	format(string, 128, "%s%s %s: %s", lenguaje, NombreJugadorProxy(playerid), prefijo, text);
		 	ProxDetector(15.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
		}
	    return 0;
	}
    return 1;
}

forward DetenerAnim(playerid);
public DetenerAnim(playerid)
{
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0, 1);
}

public OnPlayerCommandText(playerid, cmdtext[])
{
if(Anims_OnPlayerCommandText(playerid, cmdtext)) return 1;
new string[256];
new cmd[256];
new tmp[256];
new errorcmd[128];
new idx;
new playerid2;
new Nombre2[MAX_PLAYER_NAME];
new Nombre[MAX_PLAYER_NAME];
cmd = strtok(cmdtext, idx);

//----------COMANDOS ADMIN----------//

if(strcmp(cmd, "/crearcuenta", true) == 0) //Comando para crear cuentas directamente
{
    if(JugadorInfo[playerid][pAdmin] == 5 && IsPlayerAdmin(playerid))
    {
        new length = strlen(cmdtext);
        while ((idx < length) && (cmdtext[idx] <= ' '))
        {
            idx++;
        }
        new offset = idx;
        new result[MAX_PLAYER_NAME];
        while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
        {
            result[idx - offset] = cmdtext[idx];
            idx++;
        }
        result[idx - offset] = EOS;
        if(!strlen(result))
        {
            SendClientMessage(playerid, Gris, "USO: /crearcuenta [nombre] (La contraseña de la cuenta creada será 123)");
            return 1;
        }
        format(string,sizeof(string),"INSERT INTO usuarios (Nombre, Contra, Registrado, Certificado) VALUES ('%s','123', '1', '1')",result);
        mysql_query(1, string);
        format(string, sizeof(string), "[Siglo-XXI]: %s ha creado una cuenta con el nombre de %s.", NombreJugador(playerid), result);
		SendAdminMessage(COLOR_YELLOW, string);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/gotonego", true) == 0) //Comando para ir a la entrada de un negocio
{
    if(JugadorInfo[playerid][pAdmin] < 5){return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Gris, "USO: /gotonego [ID]");
		return 1;
	}
	new n = strval(tmp);
	if(!strlen(NegocioInfo[n][nNombre])){SendClientMessage(playerid, Rojo, "Negocio no encontrado."); return 1;}
	SetPlayerPos(playerid, NegocioInfo[n][nEntradaX], NegocioInfo[n][nEntradaY], NegocioInfo[n][nEntradaZ]);
	SetPlayerVirtualWorld(playerid, NegocioInfo[n][nVirtualWorld2]);
	SetPlayerInterior(playerid, NegocioInfo[n][nInterior2]);
	format(string, sizeof(string), "Teleportado a la entrada del negocio %d.", n);
	SendClientMessage(playerid, Azulito, string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/getnegoid", true) == 0) //Comando paraconseguir la id de un negocio
{
    if(JugadorInfo[playerid][pAdmin] < 1){return 1;}
    new i = GetPlayerFueraPuertaNego(playerid);
	if(i == 0){SendClientMessage(playerid, Rojo, "No se ha detectado ningún negocio a tu alrededor."); return 1;}
	format(string, sizeof(string), "Negocio ID: %d", i);
	SendClientMessage(playerid, Azulito, string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------
if(strcmp(cmd, "/almacenes", true) == 0) //Comando para editar características de un negocio
{
	for(new x=0; x<=TotalNegs; x++)
	{
	    NegocioInfo[x][nMaxAlmacen] = 10;
	    GuardarNegocio(x);
	}
}

if(strcmp(cmd, "/editarnego", true) == 0) //Comando para editar características de un negocio
{
    if(JugadorInfo[playerid][pAdmin] <= 4){return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Gris, "USO: /editarnego <entrada - valor - interior - vw - nombre - comprado - cerrado - tipo - maxalmacen>");
		return 1;
	}
	new i = GetPlayerFueraPuertaNego(playerid);
	if(strcmp(tmp, "Entrada", true) == 0)
	{
	    if(EditNegoPos[playerid] == 0)
	    {
	        if(i == 0){SendClientMessage(playerid, Rojo, "No se ha detectado ningún negocio a tu alrededor."); return 1;}
		    format(string, sizeof(string), "Editando la entrada del negocio #%d. Vuelve a escribir este comando para confirmar la posición.", i);
		    SendClientMessage(playerid, Amarillo, string);
		    EditNegoPos[playerid] = i;
		    return 1;
	    }
	    else
	    {
	        i = EditNegoPos[playerid];
	        new Float:ppos[3];
	        GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);
	        format(string, sizeof(string), "Entrada del negocio #%d cambiada a X:%f Y:%f Z:%f.", i, ppos[0], ppos[1], ppos[2]);
		    SendClientMessage(playerid, Amarillo, string);
		    EditNegoPos[playerid] = 0;
			NegocioInfo[i][nEntradaX] = ppos[0];
			NegocioInfo[i][nEntradaY] = ppos[1];
			NegocioInfo[i][nEntradaZ] = ppos[2];
			UpdateNegocioLabel(i);
			GuardarNegocio(i);
		    return 1;
	    }
	}
	if(strcmp(tmp, "Comprado", true) == 0)
	{
	    if(i == 0){SendClientMessage(playerid, Rojo, "No se ha detectado ningún negocio a tu alrededor."); return 1;}
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /editarnego Comprado [0 En Venta | 1 Comprado | 2 Clausurado]");
			return 1;
		}
		new var;
		var = strval(tmp);
		NegocioInfo[i][nComprado] = var;
		UpdateNegocioLabel(i);
		GuardarNegocio(i);
	    return 1;
	}
	if(strcmp(tmp, "Cerrado", true) == 0)
	{
	    if(i == 0){SendClientMessage(playerid, Rojo, "No se ha detectado ningún negocio a tu alrededor."); return 1;}
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /editarnego Cerrado [0 Abierto | 1 Cerrado]");
			return 1;
		}
		new var;
		var = strval(tmp);
		NegocioInfo[i][nCerrado] = var;
		UpdateNegocioLabel(i);
		GuardarNegocio(i);
	    return 1;
	}
	if(strcmp(tmp, "MaxAlmacen", true) == 0)
	{
	    if(i == 0){SendClientMessage(playerid, Rojo, "No se ha detectado ningún negocio a tu alrededor."); return 1;}
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /editarnego MaxAlmacen [Slots]");
			return 1;
		}
		new var;
		var = strval(tmp);
		if(var < 1 || var > 25){SendClientMessage(playerid, Rojo, "El máximo de slots debe estar entre 1 y 25."); return 1;}
		NegocioInfo[i][nMaxAlmacen] = var;
		GuardarNegocio(i);
	    return 1;
	}
	if(strcmp(tmp, "Valor", true) == 0)
	{
	    if(i == 0){SendClientMessage(playerid, Rojo, "No se ha detectado ningún negocio a tu alrededor."); return 1;}
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /editarnego Valor [Precio]");
			return 1;
		}
		new precio;
		precio = strval(tmp);
		NegocioInfo[i][nValor] = precio;
		UpdateNegocioLabel(i);
		GuardarNegocio(i);
		return 1;
	}
	if(strcmp(tmp, "VW", true) == 0)
	{
	    if(i == 0){SendClientMessage(playerid, Rojo, "No se ha detectado ningún negocio a tu alrededor."); return 1;}
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /editarnego VW [Virtual World]");
			return 1;
		}
		new vw;
		vw = strval(tmp);
		NegocioInfo[i][nVirtualWorld] = vw;
		GuardarNegocio(i);
		return 1;
	}
	if(strcmp(tmp, "Nombre", true) == 0)
	{
	    if(i == 0){SendClientMessage(playerid, Rojo, "No se ha detectado ningún negocio a tu alrededor."); return 1;}
		new length = strlen(cmdtext);
	    while ((idx < length) && (cmdtext[idx] <= ' '))
	    {
	        idx++;
	    }
	    new offset = idx;
	    new result[MAX_PLAYER_NAME];
	    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	    {
	        result[idx - offset] = cmdtext[idx];
	        idx++;
	    }
	    result[idx - offset] = EOS;
	    if(!strlen(result))
	    {
	        SendClientMessage(playerid, Gris, "USO: /editarnego Nombre [texto]");
	        return 1;
	    }
	    new string2[250];
	    format(NegocioInfo[i][nNombre], sizeof(result), "%s", result);
	    format(string2, sizeof(string2), "Nombre negocio %d: %s", i, result);
	    SendClientMessage(playerid, Verde, string2);
	    UpdateNegocioLabel(i);
	    GuardarNegocio(i);
		return 1;
	}
 	if(strcmp(tmp, "Tipo", true) == 0)
	{
	    if(i == 0){SendClientMessage(playerid, Rojo, "No se ha detectado ningún negocio a tu alrededor."); return 1;}
	    tmp = strtok(cmdtext, idx);
 		if(!strlen(tmp))
  		{
  		    SendClientMessage(playerid, Gris, "USO: /editarnego Tipo [opción]");
  		    SendClientMessage(playerid, Amarillo, "1 Restaurante | 2 Bar | 3 Comida rápida | 4 Discoteca | 5 Puticlub");
			SendClientMessage(playerid, Amarillo, "6 Mecánico | 7 Tienda de armas | 8 24/7 | 9 Tienda de deportes | 10 Ferretería");
			SendClientMessage(playerid, Amarillo, "11 Tienda de ropa | 12 Tienda electrónica | 13 Almacén (NO INT) | 14 Oficina (NO INT) | 15 Casino (PROH)");
			SendClientMessage(playerid, Amarillo, "16 Casa de apuestas | 17 Casa de empeño (NO INT) | 18 Estanco | 19 Licorería | 20 Gimnasio");
			format(string, sizeof(string), "Tipo de negocio actual: %d", NegocioInfo[i][nTipo]);
			SendClientMessage(playerid, Naranja, string);
			return 1;
		}
		new id;
		id = strval(tmp);
		NegocioInfo[i][nTipo] = id;
		GuardarNegocio(i);
		return 1;
	}
	if(strcmp(tmp, "Interior", true) == 0)
	{
	    if(i == 0){SendClientMessage(playerid, Rojo, "No se ha detectado ningún negocio a tu alrededor."); return 1;}
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /editarnego Interior [opción]");
			SendClientMessage(playerid, Amarillo, "[TIPO 1] 1 Rest A | 2 Rest Chino | 3 Rest B | 4 Rest C (BUG) | 5 Rest Lib City"); //Restaurante
			SendClientMessage(playerid, Amarillo, "[TIPO 2] 1 Bar Sureño | 2 Bar OVNI | 3 Bar Ten Bottles"); //Bar
			SendClientMessage(playerid, Amarillo, "[TIPO 3] 1 Pizzería Idl | 2 Tienda donuts | 3 Burguer Shot | 4 Cucklin Bell"); //Comidas rápidas
			SendClientMessage(playerid, Amarillo, "[TIPO 4] 1 Disco Alhambra"); //Discotecas
			SendClientMessage(playerid, Amarillo, "[TIPO 5] 1 Puti pequeño | 2 Puti grande | 3 Pig Pen | 4 Jizzy club"); //Puticlubs
			SendClientMessage(playerid, Amarillo, "[TIPO 6] 1 Taller A | 2 Taller B | 3 Taller C"); //Talleres
			SendClientMessage(playerid, Amarillo, "[TIPO 7] 1 Ammu A | 2 Ammu B"); //Ammus
			SendClientMessage(playerid, Amarillo, "[TIPO 8] (1 al 6) 24/7"); //24-7
			SendClientMessage(playerid, Amarillo, "[TIPO 9] 1 Tienda deportiva"); //Tienda deporte
			
			SendClientMessage(playerid, Amarillo, "[TIPO 11] 1 Binco | 2 Zip | 3 Didier Sanch | 4 Victim | 5 Suburban | 6 Prolaps"); //Tiendas ropa
			
			
			
			
			SendClientMessage(playerid, Amarillo, "[TIPO 16] 1 Casa apuestas grande | 2 Casa apuestas pequeña"); //Casa apuestas
			
			
			
			SendClientMessage(playerid, Amarillo, "[TIPO 20] 1 Gym LS | 2 Gym Sf | 3 Gym LV"); //Gimnasios
			return 1;
		}
		new inter;
		inter = strval(tmp);
		
        if(NegocioInfo[i][nTipo] == 1) //Restaurante
        {
            switch(inter)
            {
                case 1:
                {
					NegocioInfo[i][nSalidaX] = 459.0624;
		        	NegocioInfo[i][nSalidaY] = -110.9772;
		        	NegocioInfo[i][nSalidaZ] = 999.4406;
		        	NegocioInfo[i][nInterior] = 5;
				}
				case 2:
                {
					NegocioInfo[i][nSalidaX] = 2264.8516;
		        	NegocioInfo[i][nSalidaY] = 1615.3269;
		        	NegocioInfo[i][nSalidaZ] = 1637.9478;
		        	NegocioInfo[i][nInterior] = 1;
				}
				case 3:
                {
					NegocioInfo[i][nSalidaX] = 460.0901;
		        	NegocioInfo[i][nSalidaY] = -88.6293;
		        	NegocioInfo[i][nSalidaZ] = 999.5547;
		        	NegocioInfo[i][nInterior] = 4;
				}
				case 4:
                {
					NegocioInfo[i][nSalidaX] = 442.1236;
		        	NegocioInfo[i][nSalidaY] = -50.0158;
		        	NegocioInfo[i][nSalidaZ] = 999.7260;
		        	NegocioInfo[i][nInterior] = 6;
				}
				case 5:
                {
					NegocioInfo[i][nSalidaX] = -795.0060;
		        	NegocioInfo[i][nSalidaY] = 489.9904;
		        	NegocioInfo[i][nSalidaZ] = 1376.1953;
		        	NegocioInfo[i][nInterior] = 1;
				}
            }
        }
        else if(NegocioInfo[i][nTipo] == 2) //Bar
        {
            switch(inter)
            {
                case 1: //Bar sureño
                {
					NegocioInfo[i][nSalidaX] = 681.4940;
		        	NegocioInfo[i][nSalidaY] = -446.8011;
		        	NegocioInfo[i][nSalidaZ] = -25.6098;
		        	NegocioInfo[i][nInterior] = 1;
				}
                case 2: //Bar ovnis
                {
					NegocioInfo[i][nSalidaX] = -228.8182;
		        	NegocioInfo[i][nSalidaY] = 1401.2648;
		        	NegocioInfo[i][nSalidaZ] = 27.7656;
		        	NegocioInfo[i][nInterior] = 18;
				}
				case 3: //Bar ganton
                {
					NegocioInfo[i][nSalidaX] = 501.9390;
		        	NegocioInfo[i][nSalidaY] = -68.1167;
		        	NegocioInfo[i][nSalidaZ] = 998.7578;
		        	NegocioInfo[i][nInterior] = 11;
				}
            }
		}
		else if(NegocioInfo[i][nTipo] == 3) //Comida rápida
		{
		    switch(inter)
            {
                case 1: //Pizzería idlewood
                {
					NegocioInfo[i][nSalidaX] = 372.3232;
		        	NegocioInfo[i][nSalidaY] = -133.0604;
		        	NegocioInfo[i][nSalidaZ] = 1001.4922;
		        	NegocioInfo[i][nInterior] = 5;
				}
				case 2: //Tienda donuts
                {
					NegocioInfo[i][nSalidaX] = 377.0908;
		        	NegocioInfo[i][nSalidaY] = -192.9837;
		        	NegocioInfo[i][nSalidaZ] = 1000.6401;
		        	NegocioInfo[i][nInterior] = 17;
				}
				case 3: //Burguer shot
                {
					NegocioInfo[i][nSalidaX] = 363.1602;
		        	NegocioInfo[i][nSalidaY] = -74.8537;
		        	NegocioInfo[i][nSalidaZ] = 1001.5078;
		        	NegocioInfo[i][nInterior] = 10;
				}
				case 4: //Cucklin Bell
                {
					NegocioInfo[i][nSalidaX] = 364.9234;
		        	NegocioInfo[i][nSalidaY] = -11.3165;
		        	NegocioInfo[i][nSalidaZ] = 1001.8516;
		        	NegocioInfo[i][nInterior] = 9;
				}
            }
		}
		else if(NegocioInfo[i][nTipo] == 4) //Discoteca
        {
            switch(inter)
            {
                case 1: //Alhambra
                {
					NegocioInfo[i][nSalidaX] = 493.4477;
		        	NegocioInfo[i][nSalidaY] = -24.3666;
		        	NegocioInfo[i][nSalidaZ] = 1000.6797;
		        	NegocioInfo[i][nInterior] = 17;
				}
            }
		}
		else if(NegocioInfo[i][nTipo] == 5) //Puticlub
		{
		    switch(inter)
            {
                case 1: //Puti pequeño
                {
					NegocioInfo[i][nSalidaX] = 1212.1301;
		        	NegocioInfo[i][nSalidaY] = -26.5189;
		        	NegocioInfo[i][nSalidaZ] = 1000.9531;
		        	NegocioInfo[i][nInterior] = 3;
				}
				case 2: //Puti grande
                {
					NegocioInfo[i][nSalidaX] = 965.2302;
		        	NegocioInfo[i][nSalidaY] = -53.1638;
		        	NegocioInfo[i][nSalidaZ] = 1001.1246;
		        	NegocioInfo[i][nInterior] = 3;
				}
				case 3: //Pig pen
                {
					NegocioInfo[i][nSalidaX] = 1204.7584;
		        	NegocioInfo[i][nSalidaY] = -13.4269;
		        	NegocioInfo[i][nSalidaZ] = 1000.9219;
		        	NegocioInfo[i][nInterior] = 2;
				}
				case 4: //Jizzy club
                {
					NegocioInfo[i][nSalidaX] = -2636.6060;
		        	NegocioInfo[i][nSalidaY] = 1402.9683;
		        	NegocioInfo[i][nSalidaZ] = 906.4609;
		        	NegocioInfo[i][nInterior] = 3;
				}
            }
		}
		else if(NegocioInfo[i][nTipo] == 6) //Mecánico
		{
		    switch(inter)
            {
                case 1: //Taller A
                {
					NegocioInfo[i][nSalidaX] = 610.0402;
		        	NegocioInfo[i][nSalidaY] = -125.1073;
		        	NegocioInfo[i][nSalidaZ] = 997.9922;
		        	NegocioInfo[i][nTallerSX] = 614.5264;
		        	NegocioInfo[i][nTallerSY] = -125.0522;
		        	NegocioInfo[i][nTallerSZ] = 997.9922;
		        	NegocioInfo[i][nTallerSRotZ] = 270;
		        	NegocioInfo[i][nInterior] = 3;
				}
				case 2: //Taller B
                {
					NegocioInfo[i][nSalidaX] = 609.7927;
		        	NegocioInfo[i][nSalidaY] = -76.6099;
		        	NegocioInfo[i][nSalidaZ] = 997.9922;
		        	NegocioInfo[i][nTallerSX] = 614.0005;
		        	NegocioInfo[i][nTallerSY] = -74.8299;
		        	NegocioInfo[i][nTallerSZ] = 997.9922;
		        	NegocioInfo[i][nTallerSRotZ] = 270;
		        	NegocioInfo[i][nInterior] = 2;
				}
				case 3: //Taller C
                {
					NegocioInfo[i][nSalidaX] = 605.7258;
		        	NegocioInfo[i][nSalidaY] = -1.5417;
		        	NegocioInfo[i][nSalidaZ] = 1000.8956;
		        	NegocioInfo[i][nTallerSX] = 610.8098;
		        	NegocioInfo[i][nTallerSY] = -1.7114;
		        	NegocioInfo[i][nTallerSZ] = 1000.9219;
		        	NegocioInfo[i][nTallerSRotZ] = 270;
		        	NegocioInfo[i][nInterior] = 1;
				}
            }
		}
		else if(NegocioInfo[i][nTipo] == 7) //Tienda de armas
		{
		    switch(inter)
            {
                case 1: //Ammu A
                {
					NegocioInfo[i][nSalidaX] = 285.6895;
		        	NegocioInfo[i][nSalidaY] = -85.9533;
		        	NegocioInfo[i][nSalidaZ] = 1001.5229;
		        	NegocioInfo[i][nInterior] = 4;
				}
				case 2: //Ammu B
                {
					NegocioInfo[i][nSalidaX] = 296.8696;
		        	NegocioInfo[i][nSalidaY] = -111.6349;
		        	NegocioInfo[i][nSalidaZ] = 1001.5156;
		        	NegocioInfo[i][nInterior] = 6;
				}
            }
		}
		else if(NegocioInfo[i][nTipo] == 8) //24/7
		{
		    switch(inter)
		    {
		        case 1:
		        {
		            NegocioInfo[i][nSalidaX] = 6.0092;
                	NegocioInfo[i][nSalidaY] = -31.6645;
                	NegocioInfo[i][nSalidaZ] = 1003.55;
                	NegocioInfo[i][nInterior] = 10;
                }
                case 2:
                {
                    NegocioInfo[i][nSalidaX] = -25.884498;
                	NegocioInfo[i][nSalidaY] = -185.868988;
                	NegocioInfo[i][nSalidaZ] = 1003.546875;
                	NegocioInfo[i][nInterior] = 17;
                }
                case 3:
                {
                    NegocioInfo[i][nSalidaX] = -30.946699;
                	NegocioInfo[i][nSalidaY] = -89.609596;
                	NegocioInfo[i][nSalidaZ] = 1003.546875;
                	NegocioInfo[i][nInterior] = 18;
                }
                case 4:
				{
				    NegocioInfo[i][nSalidaX] = 663.3172;
					NegocioInfo[i][nSalidaY] = -573.3005;
					NegocioInfo[i][nSalidaZ] = 16.3359;
					NegocioInfo[i][nInterior] = 0;
				}
				case 5:
				{
				    NegocioInfo[i][nSalidaX] = -25.132598;
					NegocioInfo[i][nSalidaY] = -140.066986;
					NegocioInfo[i][nSalidaZ] = 1003.546875;
					NegocioInfo[i][nInterior] = 16;
				}
				case 6:
				{
				    NegocioInfo[i][nSalidaX] = -26.691598;
				    NegocioInfo[i][nSalidaY] = -56.714897;
				    NegocioInfo[i][nSalidaZ] = 1003.546875;
				    NegocioInfo[i][nInterior] = 6;
				}
			}
		}
		else if(NegocioInfo[i][nTipo] == 9) //Tienda de deportes
		{
            switch(inter)
		    {
		        case 1:
		        {
		            NegocioInfo[i][nSalidaX] = -1751.5190;
                	NegocioInfo[i][nSalidaY] = 775.8152;
                	NegocioInfo[i][nSalidaZ] = 167.6844;
                	NegocioInfo[i][nInterior] = 1;
                }
			}
		}
		else if(NegocioInfo[i][nTipo] == 10) //Ferretería
		{
            switch(inter)
		    {
		        case 1:
		        {
		            NegocioInfo[i][nSalidaX] = -2326.8789;
                	NegocioInfo[i][nSalidaY] = 921.6152;
                	NegocioInfo[i][nSalidaZ] = 59.7178;
                	NegocioInfo[i][nInterior] = 1;
                }
			}
		}
		else if(NegocioInfo[i][nTipo] == 11) //Tienda de ropa
		{
	 		switch(inter)
			{
				case 1: // Binco
				{
					NegocioInfo[i][nSalidaX] = 207.737991;
		        	NegocioInfo[i][nSalidaY] = -109.019996;
		        	NegocioInfo[i][nSalidaZ] = 1005.132812;
		        	NegocioInfo[i][nInterior] = 15;
				}
				case 2: // Zip
				{
					NegocioInfo[i][nSalidaX] = 161.6299;
		        	NegocioInfo[i][nSalidaY] = -96.1142;
		        	NegocioInfo[i][nSalidaZ] = 1001.8047;
		        	NegocioInfo[i][nInterior] = 18;
				}
				case 3: // Didier sachs
				{
					NegocioInfo[i][nSalidaX] = 	204.332992;
		        	NegocioInfo[i][nSalidaY] = -166.694992;
		        	NegocioInfo[i][nSalidaZ] = 1000.523437;
		        	NegocioInfo[i][nInterior] = 14;
				}
				case 4: // Victim
				{
					NegocioInfo[i][nSalidaX] = 226.293991;
		        	NegocioInfo[i][nSalidaY] = -7.431529;
		        	NegocioInfo[i][nSalidaZ] = 1002.210937;
		        	NegocioInfo[i][nInterior] = 5;
				}
				case 5: // Suburban
				{
					NegocioInfo[i][nSalidaX] = 203.777999;
		        	NegocioInfo[i][nSalidaY] = -48.492397;
		        	NegocioInfo[i][nSalidaZ] = 1001.804687;
		        	NegocioInfo[i][nInterior] = 1;
				}
				case 6: // Prolaps
				{
					NegocioInfo[i][nSalidaX] = 207.054992;
		        	NegocioInfo[i][nSalidaY] = -138.80499;
		        	NegocioInfo[i][nSalidaZ] = 1003.507812;
		        	NegocioInfo[i][nInterior] = 3;
				}
			}
		}
		else if(NegocioInfo[i][nTipo] == 12) //Tienda electrónica
		{
			switch(inter)
		    {
		        case 1:
		        {
		            NegocioInfo[i][nSalidaX] = 1004.2385;
                	NegocioInfo[i][nSalidaY] = 52.1937;
                	NegocioInfo[i][nSalidaZ] = 55.3221;
                	NegocioInfo[i][nInterior] = 1;
                }
			}
		}
		else if(NegocioInfo[i][nTipo] == 13) //Almacén
		{

		}
		else if(NegocioInfo[i][nTipo] == 14) //Oficina
		{

		}
		else if(NegocioInfo[i][nTipo] == 15) //Casino
		{

		}
		else if(NegocioInfo[i][nTipo] == 16) //Casa de apuestas
		{
		    switch(inter)
            {
                case 1: //Casa apuestas grande
                {
					NegocioInfo[i][nSalidaX] = 834.0502;
		        	NegocioInfo[i][nSalidaY] = 7.4026;
		        	NegocioInfo[i][nSalidaZ] = 1004.1797;
		        	NegocioInfo[i][nInterior] = 3;
				}
                case 2: //Casa apuestas pequeña
                {
					NegocioInfo[i][nSalidaX] = -2158.5920;
		        	NegocioInfo[i][nSalidaY] = 642.8459;
		        	NegocioInfo[i][nSalidaZ] = 1052.3750;
		        	NegocioInfo[i][nInterior] = 1;
				}
            }
		}
		else if(NegocioInfo[i][nTipo] == 17) //Casa de empeño
		{

		}
		else if(NegocioInfo[i][nTipo] == 18) //Estanco
		{
            switch(inter)
		    {
		        case 1:
		        {
		            NegocioInfo[i][nSalidaX] = 682.7808;
                	NegocioInfo[i][nSalidaY] = -665.9598;
                	NegocioInfo[i][nSalidaZ] = -46.3000;
                	NegocioInfo[i][nInterior] = 1;
                }
			}
		}
		else if(NegocioInfo[i][nTipo] == 19) //Licorería
		{
            switch(inter)
		    {
		        case 1:
		        {
		            NegocioInfo[i][nSalidaX] = 682.7808;
                	NegocioInfo[i][nSalidaY] = -665.9598;
                	NegocioInfo[i][nSalidaZ] = -46.3000;
                	NegocioInfo[i][nInterior] = 1;
                }
			}
		}
		else if(NegocioInfo[i][nTipo] == 20) //Gimnasio
		{
		    switch(inter)
            {
                case 1: //Gym LS
                {
					NegocioInfo[i][nSalidaX] = 772.3455;
		        	NegocioInfo[i][nSalidaY] = -4.6714;
		        	NegocioInfo[i][nSalidaZ] = 1000.7290;
		        	NegocioInfo[i][nInterior] = 5;
				}
				case 2: //Gym SF
                {
					NegocioInfo[i][nSalidaX] = 774.0042;
		        	NegocioInfo[i][nSalidaY] = -49.5956;
		        	NegocioInfo[i][nSalidaZ] = 1000.5859;
		        	NegocioInfo[i][nInterior] = 6;
				}
				case 3: //Gym LV
                {
					NegocioInfo[i][nSalidaX] = 773.9090;
		        	NegocioInfo[i][nSalidaY] = -77.9487;
		        	NegocioInfo[i][nSalidaZ] = 1000.6615;
		        	NegocioInfo[i][nInterior] = 7;
				}
			}
		}
		GuardarNegocio(i);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/editarttaller", true) == 0) //Comando para editar características de un taller (negocio)
{
    if(JugadorInfo[playerid][pAdmin] < 4){return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Gris, "USO: /editarttaller [ID] [TallerEntrada]");
		return 1;
	}
	new n = strval(tmp);
	if(NegocioInfo[n][nTipo] != 6){SendClientMessage(playerid, Rojo, "Ese negocio no es un taller."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Gris, "USO: /editarttaller [ID] [TallerEntrada]");
		return 1;
	}
	if(strcmp(tmp, "TallerEntrada", true) == 0)
	{
	    if(!IsPlayerInAnyVehicle(playerid)){SendClientMessage(playerid, Rojo, "Debes estar en un vehículo."); return 1;}
	    new Float:ppos[3];
	    GetPlayerPos(playerid, ppos[0], ppos[1], ppos[2]);
	    NegocioInfo[n][nTallerEX] = ppos[0];
	    NegocioInfo[n][nTallerEY] = ppos[1];
	    NegocioInfo[n][nTallerEZ] = ppos[2];
     	GetVehicleZAngle(GetPlayerVehicleID(playerid), NegocioInfo[n][nTallerERotZ]);
	    format(string, sizeof(string), "Entrada al taller %d cambiada a X:%f Y:%f Z:%f", n, ppos[0], ppos[1], ppos[2]);
	    SendClientMessage(playerid, Azulito, string);
	    format(string, sizeof(string), "RotZ vehículos de salida: ", NegocioInfo[n][nTallerERotZ]);
	    SendClientMessage(playerid, Azulito, string);
	    GuardarNegocio(n);
	    return 1;
	}
}


//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/gotocasa", true) == 0) //Comando para ir a la entrada de una casa
{
    if(JugadorInfo[playerid][pAdmin] < 5){return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Gris, "USO: /gotocasa [ID]");
		return 1;
	}
	new h = strval(tmp);
	if(!strlen(CasaInfo[h][hBarrio])){SendClientMessage(playerid, Rojo, "Casa no encontrada."); return 1;}
	SetPlayerPos(playerid, CasaInfo[h][hEntradaX], CasaInfo[h][hEntradaY], CasaInfo[h][hEntradaZ]);
	SetPlayerVirtualWorld(playerid, CasaInfo[h][hVirtualWorld2]);
	SetPlayerInterior(playerid, CasaInfo[h][hInterior2]);
	format(string, sizeof(string), "Teleportado a la entrada de la casa %d.", h);
	SendClientMessage(playerid, Azulito, string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/getcasaid", true) == 0) //Comando para conseguir la id de una casa
{
    if(JugadorInfo[playerid][pAdmin] < 1){return 1;}
    new i = GetPlayerFueraPuertaCasa(playerid);
	if(i == 0){SendClientMessage(playerid, Rojo, "No se ha detectado ningúna casa a tu alrededor."); return 1;}
	format(string, sizeof(string), "Casa ID: %d", i);
	SendClientMessage(playerid, Azulito, string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp("/crearcoche", cmd, true) == 0) //Comprar vehículos
{
    if(JugadorInfo[playerid][pAdmin] <= 4){return 1;}
    
    new Float:pos[3];
	GetPlayerPos(playerid, pos[0], pos[1], pos[2]);
	
	cmd = strtok(cmdtext,idx);
 	if(!strlen(cmd))
	{
		SendClientMessage(playerid, COLOR_YELLOW, "USO: /crearcoche [modelid] [color1] [color2]");
	    return 1;
	}
	new tmpcar;
	tmpcar = strval(cmd);

	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "USO: /comprarveh [modelid] [color1] [color2]");
	    return 1;
	}
	new color1;
	color1 = strval(tmp);

	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "USO: /comprarveh [modelid] [color1] [color2]");
	    return 1;
	}
	new color2;
	color2 = strval(tmp);

    for(new x; x < 5; x++)
	{
		if(JugadorInfo[playerid][pLlaveCoche][x] == 0)
		{
			JugadorInfo[playerid][pLlaveCoche][x] = CodigoLlave;
			break;
		}
	}
	new Coche = CreateVehicle(datacar[tmpcar][dcIDModel], pos[0], pos[1], pos[2], 30.0, color1, color2, 3000000);
	CocheInfo[Coche][cID] = Coche;
	CocheInfo[Coche][cLlave] = CodigoLlave;
	CocheInfo[Coche][cModelo] = datacar[tmpcar][dcIDModel];
	CocheInfo[Coche][cPosX] = pos[0];
	CocheInfo[Coche][cPosY] = pos[1];
	CocheInfo[Coche][cPosZ] = pos[2];
	CocheInfo[Coche][cZAngle] = 30.0;
	CocheInfo[Coche][cColor1] = color1;
	CocheInfo[Coche][cColor2] = color2;
	CocheInfo[Coche][cComprado] = 1;
	format(CocheInfo[Coche][cDueno], MAX_PLAYER_NAME, "Admin");
	format(CocheInfo[Coche][cNombreModelo], MAX_PLAYER_NAME, "%s", datacar[tmpcar][dcNombre]);
	CocheInfo[Coche][cValor] = datacar[tmpcar][dcPrecio];
	CocheInfo[Coche][cGas] = 100;
	CocheInfo[Coche][cMaxMaletero] = EspaciosMaletero(GetVehicleModel(Coche));
	VehMaletero[Coche] = 0;

	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(Coche,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(Coche,1,lights,alarm,doors,bonnet,boot,objective);

	SetVehicleMatricula(Coche);

	format(string,sizeof(string),"INSERT INTO vehiculos (Llave, Modelo) VALUES ('%d','%d')",CocheInfo[Coche][cLlave],CocheInfo[Coche][cModelo]);
    mysql_query(1, string);

	new ccount;
	new sql[80], row[512];
    format(sql, sizeof(sql), "SELECT SQLID FROM vehiculos ORDER BY SQLID DESC");
	mysql_query(1, sql);
	mysql_store_result();
	mysql_fetch_row(row);
	ccount = strval(row);
	mysql_free_result();

	CocheInfo[Coche][cSQLID] = ccount;

	SaveCar(Coche);

	CodigoLlave ++;
	TotalVeh ++;
	return 1;
}

if(strcmp(cmd, "/crearcasa", true) == 0) //Comando para editar características de una casa
{
    if(JugadorInfo[playerid][pAdmin] <= 4){return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
	{
		SendClientMessage(playerid, COLOR_YELLOW, "USO: /crearcasa [interior] [precio]");
		SendClientMessage(playerid, COLOR_YELLOW, "Pequeño: 1-6 | Mediano: 7-15 | Grande: 16-28 | Habitación: 29-38 | Caravana: 39");
		return 1;
	}
	for(new i; i < MAX_HOUSES; i++)
	{
	    if(CasaInfo[i][hEntradaX] == 0)
	    {
	        new inter;
			inter = strval(tmp);
			switch(inter)
			{
		 		case 1: CasaInfo[i][hSalidaX]=-68.8769, CasaInfo[i][hSalidaY]=1351.6051, CasaInfo[i][hSalidaZ]=1080.2109, CasaInfo[i][hInterior]= 6;
				case 2: CasaInfo[i][hSalidaX]=-42.5718, CasaInfo[i][hSalidaY]=1405.4707, CasaInfo[i][hSalidaZ]=1084.4297, CasaInfo[i][hInterior]= 8;
				case 3: CasaInfo[i][hSalidaX]=223.1618, CasaInfo[i][hSalidaY]=1287.1193, CasaInfo[i][hSalidaZ]=1082.1406, CasaInfo[i][hInterior]= 1;
				case 4: CasaInfo[i][hSalidaX]=221.8276, CasaInfo[i][hSalidaY]=1140.5168, CasaInfo[i][hSalidaZ]=1082.6094, CasaInfo[i][hInterior]= 4;
				case 5: CasaInfo[i][hSalidaX]=328.1076, CasaInfo[i][hSalidaY]=1477.8431, CasaInfo[i][hSalidaZ]=1084.4375, CasaInfo[i][hInterior]= 15;
				case 6: CasaInfo[i][hSalidaX]=22.9175, CasaInfo[i][hSalidaY]=1403.5530, CasaInfo[i][hSalidaZ]=1084.4297, CasaInfo[i][hInterior]= 5;
				case 7: CasaInfo[i][hSalidaX]=2365.0168, CasaInfo[i][hSalidaY]=-1135.3094, CasaInfo[i][hSalidaZ]=1050.8750, CasaInfo[i][hInterior]= 8;
				case 8: CasaInfo[i][hSalidaX]=2270.3882, CasaInfo[i][hSalidaY]=-1210.2815, CasaInfo[i][hSalidaZ]=1047.5625, CasaInfo[i][hInterior]= 10;
				case 9: CasaInfo[i][hSalidaX]=-260.5417, CasaInfo[i][hSalidaY]=1456.2577, CasaInfo[i][hSalidaZ]=1084.3672, CasaInfo[i][hInterior]= 4;
				case 10: CasaInfo[i][hSalidaX]=2333.2151, CasaInfo[i][hSalidaY]=-1077.3209, CasaInfo[i][hSalidaZ]=1049.0234, CasaInfo[i][hInterior]= 6;
				case 11: CasaInfo[i][hSalidaX]=260.8665, CasaInfo[i][hSalidaY]=1284.5745, CasaInfo[i][hSalidaZ]=1080.2578, CasaInfo[i][hInterior]= 4;
				case 12: CasaInfo[i][hSalidaX]=260.5428, CasaInfo[i][hSalidaY]=1237.2369, CasaInfo[i][hSalidaZ]=1084.2578, CasaInfo[i][hInterior]= 9;
				case 13: CasaInfo[i][hSalidaX]=386.9386, CasaInfo[i][hSalidaY]=1471.8782, CasaInfo[i][hSalidaZ]=1080.1875, CasaInfo[i][hInterior]= 15;
				case 14: CasaInfo[i][hSalidaX]=226.6141, CasaInfo[i][hSalidaY]=1240.0334, CasaInfo[i][hSalidaZ]=1082.1406, CasaInfo[i][hInterior]= 2;
				case 15: CasaInfo[i][hSalidaX]=23.9293, CasaInfo[i][hSalidaY]=1340.2648, CasaInfo[i][hSalidaZ]=1084.3750, CasaInfo[i][hInterior]= 10;
				case 16: CasaInfo[i][hSalidaX]=2324.1143, CasaInfo[i][hSalidaY]=-1149.5406, CasaInfo[i][hSalidaZ]=1050.710, CasaInfo[i][hInterior]= 12;
				case 17: CasaInfo[i][hSalidaX]=235.4422, CasaInfo[i][hSalidaY]=1186.7810, CasaInfo[i][hSalidaZ]=1080.2578, CasaInfo[i][hInterior]= 3;
				case 18: CasaInfo[i][hSalidaX]=490.9660, CasaInfo[i][hSalidaY]=1398.7607, CasaInfo[i][hSalidaZ]=1080.2578, CasaInfo[i][hInterior]= 2;
				case 19: CasaInfo[i][hSalidaX]=234.4409, CasaInfo[i][hSalidaY]=1064.2129, CasaInfo[i][hSalidaZ]=1084.2115, CasaInfo[i][hInterior]= 6;
				case 20: CasaInfo[i][hSalidaX]=226.5535, CasaInfo[i][hSalidaY]=1114.1012, CasaInfo[i][hSalidaZ]=1080.9943, CasaInfo[i][hInterior]= 5;
				case 21: CasaInfo[i][hSalidaX]=140.2069, CasaInfo[i][hSalidaY]=1366.1321, CasaInfo[i][hSalidaZ]=1083.8594, CasaInfo[i][hInterior]= 5;
				case 22: CasaInfo[i][hSalidaX]=225.7627, CasaInfo[i][hSalidaY]=1021.7071, CasaInfo[i][hSalidaZ]=1084.0170, CasaInfo[i][hInterior]= 7;
				case 23: CasaInfo[i][hSalidaX]=2317.4592, CasaInfo[i][hSalidaY]=-1026.3820, CasaInfo[i][hSalidaZ]=1050.2178, CasaInfo[i][hInterior]= 9;
				case 24: CasaInfo[i][hSalidaX]=446.8984, CasaInfo[i][hSalidaY]=1397.0696, CasaInfo[i][hSalidaZ]=1084.3047, CasaInfo[i][hInterior]= 2;
				case 25: CasaInfo[i][hSalidaX]=295.2993, CasaInfo[i][hSalidaY]=1472.5591, CasaInfo[i][hSalidaZ]=1080.2578, CasaInfo[i][hInterior]= 15;
				case 26: CasaInfo[i][hSalidaX]=83.3735, CasaInfo[i][hSalidaY]=1322.2920, CasaInfo[i][hSalidaZ]=1083.8662, CasaInfo[i][hInterior]= 9;
				case 27: CasaInfo[i][hSalidaX]=376.7856, CasaInfo[i][hSalidaY]=1417.3190, CasaInfo[i][hSalidaZ]=1081.328, CasaInfo[i][hInterior]= 15;
				case 28: CasaInfo[i][hSalidaX]=2496.3818,CasaInfo[i][hSalidaY]=-1694.3456,CasaInfo[i][hSalidaZ]=1014.7422,CasaInfo[i][hInterior]= 3;
		        case 29: CasaInfo[i][hSalidaX]=2218.2944, CasaInfo[i][hSalidaY]=-1076.0085, CasaInfo[i][hSalidaZ]=1050.4844, CasaInfo[i][hInterior]=1;
		        case 30: CasaInfo[i][hSalidaX]=2233.5474, CasaInfo[i][hSalidaY]=-1114.8636, CasaInfo[i][hSalidaZ]=1050.8828, CasaInfo[i][hInterior]=5;
		        case 31: CasaInfo[i][hSalidaX]=2365.2593, CasaInfo[i][hSalidaY]=-1135.2416, CasaInfo[i][hSalidaZ]=1050.8750, CasaInfo[i][hInterior]=8;
		        case 32: CasaInfo[i][hSalidaX]=2237.2478, CasaInfo[i][hSalidaY]=-1081.6407, CasaInfo[i][hSalidaZ]=1049.0234, CasaInfo[i][hInterior]=2;
		        case 33: CasaInfo[i][hSalidaX]=2282.8762, CasaInfo[i][hSalidaY]=-1140.2819, CasaInfo[i][hSalidaZ]=1050.8984, CasaInfo[i][hInterior]=11;
		        case 34: CasaInfo[i][hSalidaX]=243.7287, CasaInfo[i][hSalidaY]=305.4619, CasaInfo[i][hSalidaZ]=999.1484, CasaInfo[i][hInterior]=1;
		        case 35: CasaInfo[i][hSalidaX]=2317.8538, CasaInfo[i][hSalidaY]=-1026.7557, CasaInfo[i][hSalidaZ]=1050.2178, CasaInfo[i][hInterior]=9;
		        case 36: CasaInfo[i][hSalidaX]=2308.6167, CasaInfo[i][hSalidaY]=-1212.9283, CasaInfo[i][hSalidaZ]=1049.0234, CasaInfo[i][hInterior]=6;
		        case 37: CasaInfo[i][hSalidaX]=2270.2515, CasaInfo[i][hSalidaY]=-1210.3717, CasaInfo[i][hSalidaZ]=1047.5625, CasaInfo[i][hInterior]=10;
		        case 38: CasaInfo[i][hSalidaX]=266.5029, CasaInfo[i][hSalidaY]=304.8156, CasaInfo[i][hSalidaZ]=999.1484, CasaInfo[i][hInterior]=2;
				case 39: CasaInfo[i][hSalidaX]=2513.2227, CasaInfo[i][hSalidaY]=-1729.0717, CasaInfo[i][hSalidaZ]=778.6371, CasaInfo[i][hInterior]=1;
				default: return SendClientMessage(playerid, -1, "Pequeño: 1-6 | Mediano: 7-15 | Grande: 16-28 | Habitación: 29-38 | Caravana: 39"), 1;
			}
			new precio;
			precio = strval(tmp);
			if(precio <= 3000) { return SendClientMessage(playerid, COLOR_ROJO, "El precio debe ser mayor a 3000$"), 1;}
			CasaInfo[i][hValor] = precio;
			format(string, 128, "Casa llave %d creada [Interior: %d | Precio: %d$]", i, precio, inter);
			CasaInfo[i][hVirtualWorld] = i;
			CasaInfo[i][hComprada] = 0;
			CasaInfo[i][hCerrada] = 1;
			format(CasaInfo[i][hBarrio], 128, "%s", GetPlayerZona(playerid));
			GuardarCasa(i);
			return 1;
	    }
	}
	return 1;
}

if(strcmp(cmd, "/editarcasa", true) == 0) //Comando para editar características de una casa
{
    if(JugadorInfo[playerid][pAdmin] <= 4){return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Gris, "USO: /editarcasa <valor - interior - vw - barrio - comprada - precioalquiler>");
		return 1;
	}
	new i = GetPlayerFueraPuertaCasa(playerid);
	if(i == 0){SendClientMessage(playerid, Rojo, "No se ha detectado ninguna casa a tu alrededor."); return 1;}
	if(strcmp(tmp, "Comprada", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /editarcasa Comprada [-1 Hotel | 0 En Venta | 1 Comprada]");
			return 1;
		}
		new var;
		var = strval(tmp);
		CasaInfo[i][hComprada] = var;
		//UpdateHouseLabel(i);
		GuardarCasa(i);
	    return 1;
	}
	if(strcmp(tmp, "Cerrada", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /editarcasa Cerrada [0 Abierta | 1 Cerrada]");
			return 1;
		}
		new var;
		var = strval(tmp);
		CasaInfo[i][hCerrada] = var;
	    //UpdateHouseLabel(i);
		GuardarCasa(i);
	    return 1;
	}
	if(strcmp(tmp, "PrecioAlquiler", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /editarcasa PrecioAlquiler [Precio]");
			return 1;
		}
		new var;
		var = strval(tmp);
		CasaInfo[i][hPAlquiler] = var;
		//UpdateHouseLabel(i);
		GuardarCasa(i);
	    return 1;
	}
	if(strcmp(tmp, "Barrio", true) == 0)
	{
		new length = strlen(cmdtext);
	    while ((idx < length) && (cmdtext[idx] <= ' '))
	    {
	        idx++;
	    }
	    new offset = idx;
	    new result[MAX_PLAYER_NAME];
	    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	    {
	        result[idx - offset] = cmdtext[idx];
	        idx++;
	    }
	    result[idx - offset] = EOS;
	    if(!strlen(result))
	    {
	        SendClientMessage(playerid, Gris, "USO: /editarcasa Barrio [texto]");
	        return 1;
	    }
	    format(CasaInfo[i][hBarrio], sizeof(result), "%s", result);
	    format(string, sizeof(string), "Barrio casa %d: %s", i, result);
	    SendClientMessage(playerid, Verde, string);
	    //UpdateHouseLabel(i);
	    GuardarCasa(i);
		return 1;
	}
	if(strcmp(tmp, "Valor", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /editarcasa Valor [Precio]");
			return 1;
		}
		new precio;
		precio = strval(tmp);
		CasaInfo[i][hValor] = precio;
		//UpdateHouseLabel(i);
		GuardarCasa(i);
		return 1;
	}
	if(strcmp(tmp, "VW", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /editarcasa VW [Virtual World]");
			return 1;
		}
		new vw;
		vw = strval(tmp);
		CasaInfo[i][hVirtualWorld] = vw;
		GuardarCasa(i);
		return 1;
	}
	if(strcmp(tmp, "Interior", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /editarcasa Interior [P. 1-6 | M. 7-15 | G. 16-28 | Hab. 29-38 | Caravana. 39]");
			return 1;
		}
		new inter;
		inter = strval(tmp);
		switch(inter)
		{
		    //Interiores pequeños
            case 1: CasaInfo[i][hSalidaX]=-68.8769, CasaInfo[i][hSalidaY]=1351.6051, CasaInfo[i][hSalidaZ]=1080.2109, CasaInfo[i][hInterior]= 6;
			case 2: CasaInfo[i][hSalidaX]=-42.5718, CasaInfo[i][hSalidaY]=1405.4707, CasaInfo[i][hSalidaZ]=1084.4297, CasaInfo[i][hInterior]= 8;
			case 3: CasaInfo[i][hSalidaX]=223.1618, CasaInfo[i][hSalidaY]=1287.1193, CasaInfo[i][hSalidaZ]=1082.1406, CasaInfo[i][hInterior]= 1;
			case 4: CasaInfo[i][hSalidaX]=221.8276, CasaInfo[i][hSalidaY]=1140.5168, CasaInfo[i][hSalidaZ]=1082.6094, CasaInfo[i][hInterior]= 4;
			case 5: CasaInfo[i][hSalidaX]=328.1076, CasaInfo[i][hSalidaY]=1477.8431, CasaInfo[i][hSalidaZ]=1084.4375, CasaInfo[i][hInterior]= 15;
			case 6: CasaInfo[i][hSalidaX]=22.9175, CasaInfo[i][hSalidaY]=1403.5530, CasaInfo[i][hSalidaZ]=1084.4297, CasaInfo[i][hInterior]= 5;
			//Interiores medianos
			case 7: CasaInfo[i][hSalidaX]=2365.0168, CasaInfo[i][hSalidaY]=-1135.3094, CasaInfo[i][hSalidaZ]=1050.8750, CasaInfo[i][hInterior]= 8;
			case 8: CasaInfo[i][hSalidaX]=2270.3882, CasaInfo[i][hSalidaY]=-1210.2815, CasaInfo[i][hSalidaZ]=1047.5625, CasaInfo[i][hInterior]= 10;
			case 9: CasaInfo[i][hSalidaX]=-260.5417, CasaInfo[i][hSalidaY]=1456.2577, CasaInfo[i][hSalidaZ]=1084.3672, CasaInfo[i][hInterior]= 4;
			case 10: CasaInfo[i][hSalidaX]=2333.2151, CasaInfo[i][hSalidaY]=-1077.3209, CasaInfo[i][hSalidaZ]=1049.0234, CasaInfo[i][hInterior]= 6;
			case 11: CasaInfo[i][hSalidaX]=260.8665, CasaInfo[i][hSalidaY]=1284.5745, CasaInfo[i][hSalidaZ]=1080.2578, CasaInfo[i][hInterior]= 4;
			case 12: CasaInfo[i][hSalidaX]=260.5428, CasaInfo[i][hSalidaY]=1237.2369, CasaInfo[i][hSalidaZ]=1084.2578, CasaInfo[i][hInterior]= 9;
			case 13: CasaInfo[i][hSalidaX]=386.9386, CasaInfo[i][hSalidaY]=1471.8782, CasaInfo[i][hSalidaZ]=1080.1875, CasaInfo[i][hInterior]= 15;
			case 14: CasaInfo[i][hSalidaX]=226.6141, CasaInfo[i][hSalidaY]=1240.0334, CasaInfo[i][hSalidaZ]=1082.1406, CasaInfo[i][hInterior]= 2;
			case 15: CasaInfo[i][hSalidaX]=23.9293, CasaInfo[i][hSalidaY]=1340.2648, CasaInfo[i][hSalidaZ]=1084.3750, CasaInfo[i][hInterior]= 10;
			//Interiores grandes
			case 16: CasaInfo[i][hSalidaX]=2324.1143, CasaInfo[i][hSalidaY]=-1149.5406, CasaInfo[i][hSalidaZ]=1050.710, CasaInfo[i][hInterior]= 12;
			case 17: CasaInfo[i][hSalidaX]=235.4422, CasaInfo[i][hSalidaY]=1186.7810, CasaInfo[i][hSalidaZ]=1080.2578, CasaInfo[i][hInterior]= 3;
			case 18: CasaInfo[i][hSalidaX]=490.9660, CasaInfo[i][hSalidaY]=1398.7607, CasaInfo[i][hSalidaZ]=1080.2578, CasaInfo[i][hInterior]= 2;
			case 19: CasaInfo[i][hSalidaX]=234.4409, CasaInfo[i][hSalidaY]=1064.2129, CasaInfo[i][hSalidaZ]=1084.2115, CasaInfo[i][hInterior]= 6;
			case 20: CasaInfo[i][hSalidaX]=226.5535, CasaInfo[i][hSalidaY]=1114.1012, CasaInfo[i][hSalidaZ]=1080.9943, CasaInfo[i][hInterior]= 5;
			case 21: CasaInfo[i][hSalidaX]=140.2069, CasaInfo[i][hSalidaY]=1366.1321, CasaInfo[i][hSalidaZ]=1083.8594, CasaInfo[i][hInterior]= 5;
			case 22: CasaInfo[i][hSalidaX]=225.7627, CasaInfo[i][hSalidaY]=1021.7071, CasaInfo[i][hSalidaZ]=1084.0170, CasaInfo[i][hInterior]= 7;
			case 23: CasaInfo[i][hSalidaX]=2317.4592, CasaInfo[i][hSalidaY]=-1026.3820, CasaInfo[i][hSalidaZ]=1050.2178, CasaInfo[i][hInterior]= 9;
			case 24: CasaInfo[i][hSalidaX]=446.8984, CasaInfo[i][hSalidaY]=1397.0696, CasaInfo[i][hSalidaZ]=1084.3047, CasaInfo[i][hInterior]= 2;
			case 25: CasaInfo[i][hSalidaX]=295.2993, CasaInfo[i][hSalidaY]=1472.5591, CasaInfo[i][hSalidaZ]=1080.2578, CasaInfo[i][hInterior]= 15;
			case 26: CasaInfo[i][hSalidaX]=83.3735, CasaInfo[i][hSalidaY]=1322.2920, CasaInfo[i][hSalidaZ]=1083.8662, CasaInfo[i][hInterior]= 9;
			case 27: CasaInfo[i][hSalidaX]=376.7856, CasaInfo[i][hSalidaY]=1417.3190, CasaInfo[i][hSalidaZ]=1081.328, CasaInfo[i][hInterior]= 15;
			case 28: CasaInfo[i][hSalidaX]=2496.3818,CasaInfo[i][hSalidaY]=-1694.3456,CasaInfo[i][hSalidaZ]=1014.7422,CasaInfo[i][hInterior]= 3;
            //Interiores hoteles
            case 29: CasaInfo[i][hSalidaX]=2218.2944, CasaInfo[i][hSalidaY]=-1076.0085, CasaInfo[i][hSalidaZ]=1050.4844, CasaInfo[i][hInterior]=1;
            case 30: CasaInfo[i][hSalidaX]=2233.5474, CasaInfo[i][hSalidaY]=-1114.8636, CasaInfo[i][hSalidaZ]=1050.8828, CasaInfo[i][hInterior]=5;
            case 31: CasaInfo[i][hSalidaX]=2365.2593, CasaInfo[i][hSalidaY]=-1135.2416, CasaInfo[i][hSalidaZ]=1050.8750, CasaInfo[i][hInterior]=8;
            case 32: CasaInfo[i][hSalidaX]=2237.2478, CasaInfo[i][hSalidaY]=-1081.6407, CasaInfo[i][hSalidaZ]=1049.0234, CasaInfo[i][hInterior]=2;
            case 33: CasaInfo[i][hSalidaX]=2282.8762, CasaInfo[i][hSalidaY]=-1140.2819, CasaInfo[i][hSalidaZ]=1050.8984, CasaInfo[i][hInterior]=11;
            case 34: CasaInfo[i][hSalidaX]=243.7287, CasaInfo[i][hSalidaY]=305.4619, CasaInfo[i][hSalidaZ]=999.1484, CasaInfo[i][hInterior]=1;
            case 35: CasaInfo[i][hSalidaX]=2317.8538, CasaInfo[i][hSalidaY]=-1026.7557, CasaInfo[i][hSalidaZ]=1050.2178, CasaInfo[i][hInterior]=9;
            case 36: CasaInfo[i][hSalidaX]=2308.6167, CasaInfo[i][hSalidaY]=-1212.9283, CasaInfo[i][hSalidaZ]=1049.0234, CasaInfo[i][hInterior]=6;
            case 37: CasaInfo[i][hSalidaX]=2270.2515, CasaInfo[i][hSalidaY]=-1210.3717, CasaInfo[i][hSalidaZ]=1047.5625, CasaInfo[i][hInterior]=10;
            case 38: CasaInfo[i][hSalidaX]=266.5029, CasaInfo[i][hSalidaY]=304.8156, CasaInfo[i][hSalidaZ]=999.1484, CasaInfo[i][hInterior]=2;
			case 39: CasaInfo[i][hSalidaX]=2513.2227, CasaInfo[i][hSalidaY]=-1729.0717, CasaInfo[i][hSalidaZ]=778.6371, CasaInfo[i][hInterior]=1;
		}
		//UpdateHouseLabel(i);
		GuardarCasa(i);
	    return 1;
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------


if(strcmp(cmd, "/listafaccs", true) == 0) //Ver todas las facciones de la DB
{
    if(JugadorInfo[playerid][pAdmin] < 4){return 1;}
    SendClientMessage(playerid, Amarillo, "Facciones creadas:");
    for(new x=1; x<=TotalFaccs; x++)
    {
        format(string, sizeof(string), "[%d] %s", x, FamiliaInfo[x][fNombre]);
        SendClientMessage(playerid, AmarilloClaro, string);
    }
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/editarcoche", true) == 0) //Comando para editar características de un vehículo
{
    if(JugadorInfo[playerid][pAdmin] <= 4){return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Gris, "USO: /editarcoche [VehID] [Opcion]");
		SendClientMessage(playerid, COLOR_GREY, "Opciones: Llave, Comprado, Dueño, NombreModelo, Valor, Cerrado");
		SendClientMessage(playerid, COLOR_GREY, "Opciones: EnDeposito, MaxMaletero, Gas, MaxMaletero, MalAbierto, Pintura");
		return 1;
	}
	new coche = strval(tmp);
	if(!IsValidVehicle(coche)){SendClientMessage(playerid, Rojo, "ID inválida, vehículo no encontrado."); return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, COLOR_GREY, "Opciones: Llave, Comprado, Dueño, NombreModelo, Valor, Cerrado");
		SendClientMessage(playerid, COLOR_GREY, "Opciones: EnDeposito, MaxMaletero, Gas, MaxMaletero, MalAbierto, Pintura");
		return 1;
	}
	if(strcmp(tmp, "Llave", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Gris, "USO: /editarcoche Llave [Llave]");
			return 1;
		}
		new llave = strval(tmp);
		if(llave < 1000){SendClientMessage(playerid, Rojo, "La llave no puede estar por debajo de 1000."); return 1;}
		CocheInfo[coche][cLlave] = llave;
		format(string,sizeof(string),"Has seteado la llave del coche %d a SA-%d.", coche, llave);
		SendClientMessage(playerid, Naranja, string);
		SaveCar(coche);
		return 1;
	}
	if(strcmp(tmp, "Comprado", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Gris, "USO: /editarcoche Comprado [Llave]");
			return 1;
		}
		new comprado = strval(tmp);
		if(comprado != 0 && comprado != 1){SendClientMessage(playerid, Rojo, "El valor debe estar entre 0 y 1."); return 1;}
		CocheInfo[coche][cComprado] = comprado;
		format(string,sizeof(string),"Has seteado el valor comprado del coche %d a %d.", coche, comprado);
		SendClientMessage(playerid, Naranja, string);
		SaveCar(coche);
		return 1;
	}
	if(strcmp(tmp, "Dueño", true) == 0)
	{
    	tmp = strtok(cmdtext, idx);
        new length = strlen(cmdtext);
	    while ((idx < length) && (cmdtext[idx] <= ' '))
	    {
	        idx++;
	    }
	    new offset = idx;
	    new result[MAX_PLAYER_NAME];
	    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	    {
	        result[idx - offset] = cmdtext[idx];
	        idx++;
	    }
	    result[idx - offset] = EOS;
	    if(!strlen(result))
	    {
	        SendClientMessage(playerid, Gris, "USO: /editarcoche Dueño [texto]");
	        return 1;
	    }
	    format(CocheInfo[coche][cDueno], sizeof(result), "%s", result);
		format(string,sizeof(string),"Has seteado el dueño del coche %d a '%s'", coche, result);
		SendClientMessage(playerid, Naranja, string);
		SaveCar(coche);
		return 1;
	}
	if(strcmp(tmp, "NombreModelo", true) == 0)
	{
    	tmp = strtok(cmdtext, idx);
        new length = strlen(cmdtext);
	    while ((idx < length) && (cmdtext[idx] <= ' '))
	    {
	        idx++;
	    }
	    new offset = idx;
	    new result[MAX_PLAYER_NAME];
	    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	    {
	        result[idx - offset] = cmdtext[idx];
	        idx++;
	    }
	    result[idx - offset] = EOS;
	    if(!strlen(result))
	    {
	        SendClientMessage(playerid, Gris, "USO: /editarcoche NombreModelo [texto]");
	        return 1;
	    }
	    format(CocheInfo[coche][cNombreModelo], sizeof(result), "%s", result);
		format(string,sizeof(string),"Has seteado el modelo del coche %d a '%s'", coche, result);
		SendClientMessage(playerid, Naranja, string);
		SaveCar(coche);
		return 1;
	}
	if(strcmp(tmp, "Valor", true) == 0)
	{
        tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Gris, "USO: /editarcoche Valor [Cantidad]");
			return 1;
		}
		new valor = strval(tmp);
	    if(valor < 0){SendClientMessage(playerid, Rojo, "La cantidad no puede ser menor a 0."); return 1;}
		CocheInfo[coche][cValor] = valor;
		format(string,sizeof(string),"Has seteado el precio del coche %d a %d$", coche, valor);
		SendClientMessage(playerid, Naranja, string);
		SaveCar(coche);
		return 1;
	}
	if(strcmp(tmp, "Cerrado", true) == 0)
	{
        tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Gris, "USO: /editarcoche Cerrado [Cantidad]");
			return 1;
		}
		new cerrado = strval(tmp);
	    if(cerrado != 0 && cerrado != 1){SendClientMessage(playerid, Rojo, "El valor no puede ser diferente de 0 y 1."); return 1;}
		CocheInfo[coche][cCerrado] = cerrado;
		new engine,lights,alarm,doors,bonnet,boot,objective;
	    GetVehicleParamsEx(coche,engine,lights,alarm,doors,bonnet,boot,objective);
		SetVehicleParamsEx(coche,engine,lights,alarm,cerrado,bonnet,boot,objective);
		format(string,sizeof(string),"Has seteado el seguro del coche %d a %d.", coche, cerrado);
		SendClientMessage(playerid, Naranja, string);
		SaveCar(coche);
		return 1;
	}
	if(strcmp(tmp, "EnDeposito", true) == 0)
	{
        tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Gris, "USO: /editarcoche EnDeposito [Cantidad]");
			return 1;
		}
		new endeposito = strval(tmp);
		CocheInfo[coche][cEnDeposito] = endeposito;
		format(string,sizeof(string),"Has seteado el EnDeposito del coche %d a %d.", coche, endeposito);
		SendClientMessage(playerid, Naranja, string);
		SaveCar(coche);
		return 1;
	}
	if(strcmp(tmp, "MaxMaletero", true) == 0)
	{
        tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Gris, "USO: /editarcoche MaxMaletero [Cantidad]");
			return 1;
		}
		new maxmaletero = strval(tmp);
		CocheInfo[coche][cMaxMaletero] = maxmaletero;
		format(string,sizeof(string),"Has seteado el MaxMaletero del coche %d a %d.", coche, maxmaletero);
		SendClientMessage(playerid, Naranja, string);
		SaveCar(coche);
		return 1;
	}
	if(strcmp(tmp, "MalAbierto", true) == 0)
	{
        tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Gris, "USO: /editarcoche MalAbierto [Valor]");
			return 1;
		}
		new valor = strval(tmp);
		if(valor != 0 && valor != 1){SendClientMessage(playerid, Rojo, "El valor no puede ser diferente de 0 y 1."); return 1;}
		new engine,lights,alarm,doors,bonnet,boot,objective;
	    GetVehicleParamsEx(coche,engine,lights,alarm,doors,bonnet,boot,objective);
	    SetVehicleParamsEx(coche,engine,lights,alarm,doors,bonnet,valor,objective);
		format(string,sizeof(string),"Has seteado el MalAbierto del coche %d a %d.", coche, valor);
		SendClientMessage(playerid, Naranja, string);
 	    VehMaletero[coche] = valor;
		SaveCar(coche);
		return 1;
	}
	if(strcmp(tmp, "Gas", true) == 0)
	{
        tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Gris, "USO: /editarcoche Gas [Cantidad]");
			return 1;
		}
		new gas = strval(tmp);
	    if(gas < 0 || gas > 100){SendClientMessage(playerid, Rojo, "La cantidad de combustible debe estar entre 0 y 100."); return 1;}
		CocheInfo[coche][cGas] = gas;
		format(string,sizeof(string),"Has seteado el combustible del coche %d a %d litros.", coche, gas);
		SendClientMessage(playerid, Naranja, string);
		SaveCar(coche);
		return 1;
	}
	if(strcmp(tmp, "MaxMaletero", true) == 0)
	{
        tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Gris, "USO: /editarcoche MaxMaletero [Cantidad]");
			return 1;
		}
		new maxm = strval(tmp);
		if(maxm < 0 || maxm > 7){SendClientMessage(playerid, Rojo, "El máximo de slots del maletero debe estar entre 0 y 7."); return 1;}
		CocheInfo[coche][cMaxMaletero] = maxm;
		format(string,sizeof(string),"Has seteado el máximo de slots del maletero del coche %d a %d.", coche, maxm);
		SendClientMessage(playerid, Naranja, string);
		SaveCar(coche);
		return 1;
	}
	if(strcmp(tmp, "Pintura", true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Gris, "USO: /editarcoche Pintura [Color1] [Color2]");
			return 1;
		}
		new color1 = strval(tmp);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Gris, "USO: /editarcoche Pintura [Color1] [Color2]");
			return 1;
		}
		new color2 = strval(tmp);
		ChangeVehicleColor(coche, color1, color2);
		CocheInfo[coche][cColor1] = color1;
		CocheInfo[coche][cColor2] = color2;
		format(string,sizeof(string),"Has seteado los colores del coche %d a '%d - %d'", coche, color1, color2);
		SendClientMessage(playerid, Naranja, string);
		SaveCar(coche);
		return 1;
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

/*if(strcmp(cmd, "/giveplayeradmin", true) == 0) //Hacer admin
{
    tmp = strtok(cmdtext, idx);
    if(!IsPlayerAdmin(playerid)){SendClientMessage(playerid, COLOR_ROJO, "¡No estás autorizado!"); return 1;}
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /giveplayeradmin [IdJugador/ParteDelNombre] [0/1/2/3/4/5]");
        return 1;
    }
    new level;
    playerid2 = ReturnUser(tmp);
    tmp = strtok(cmdtext, idx);
    level = strval(tmp);
    if(IsPlayerConnected(playerid2))
    {
    	if(playerid2 != INVALID_PLAYER_ID)
        {
	        format(Nombre2, sizeof(Nombre2),"%s", NombreJugador(playerid2));
	        format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
	        JugadorInfo[playerid2][pAdmin] = level;
	        printf("'%s´ promovió a %s´ para el nivel %d de admin.", Nombre, Nombre2, level);
	        format(string, sizeof(string), "El administrador %d te ha colocado el nivel admin en %d.", Nombre, level);
	        SendClientMessage(playerid2, Naranja, string);
	        format(string, sizeof(string), "Le has dado a %s el nivel administrativo '%d'", Nombre2,level);
	        SendClientMessage(playerid, Naranja, string);
        }
	}
    return 1;
}*/


if(strcmp(cmd, "/haceradmin", true) == 0) //Hacer admin
{
    tmp = strtok(cmdtext, idx);
    if(JugadorInfo[playerid][pAdmin] >= 5 || !IsPlayerAdmin(playerid)){SendClientMessage(playerid, COLOR_ROJO, "¡No estás autorizado!"); return 1;}
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /haceradmin [IdJugador/ParteDelNombre] [0/1/2/3/4]");
        return 1;
    }
    new level;
    playerid2 = ReturnUser(tmp);
    tmp = strtok(cmdtext, idx);
    level = strval(tmp);
    if(JugadorInfo[playerid][pAdmin] >= 5)
    {
        if(IsPlayerConnected(playerid2))
        {
            if(playerid2 != INVALID_PLAYER_ID)
            {
	            format(Nombre2, sizeof(Nombre2),"%s", NombreJugador(playerid2));
	            format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
	            JugadorInfo[playerid2][pAdmin] = level;
	            printf("'%s´ promovió a %s´ para el nivel %d de admin.", Nombre, Nombre2, level);
	            format(string, sizeof(string), "El administrador %s te ha colocado el nivel admin en %d.", Nombre, level);
	            SendClientMessage(playerid2, Naranja, string);
	            format(string, sizeof(string), "Le has dado a %s el nivel administrativo '%d'", Nombre2,level);
	            SendClientMessage(playerid, Naranja, string);
            }
        }
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/adminhelp", true) == 0 || strcmp(cmd, "/ah", true) == 0) //Ayuda admin
{
    if(JugadorInfo[playerid][pAdmin] < 1) { return 1; }
    new pagina;
    if(JugadorInfo[playerid][pAdmin] >= 5) pagina = 5;
    else pagina = JugadorInfo[playerid][pAdmin];
    switch(pagina)
    {
	    case 1:
	    {
            SendClientMessage(playerid, Gris, "[COLABORADOR] (/e)quipo - /desbug - /setskin - /dudas - /atenderduda");
	    }
	    case 2:
	    {
            SendClientMessage(playerid, Gris, "[MODERADOR] (/e)quipo - /desbug - /setskin - /dudas - /atenderduda - /togadmin - /reconear - /reconoff");
		}
		case 3:
		{
		   	SendClientMessage(playerid, Gris, "[MODERADOR] (/e)quipo - (/a)dmin - /desbug - /setskin - /dudas - /atenderduda - /togadmin - /darpuntorol - /quitarpuntorol");
       	    SendClientMessage(playerid, Gris, "[MODERADOR] /limpiardudas - /reconear - /reconoff - /limpiarchat - /kick - /atenderreporte - /reportes");
		}
		case 4:
		{
		    SendClientMessage(playerid, Gris, "[ADMINISTRADOR] /oocservicio - /slap - /ajail - /desbug - /kick - /mark - /gotomark - /go - /gotopos - /torreadmin");
			SendClientMessage(playerid, Gris, "[ADMINISTRADOR] /ir - /traer - /setint - /setvw - /(con)gelar - /(descon)gelar - /(adm)inistracion - /(e)quipo");
			SendClientMessage(playerid, Gris, "[ADMINISTRADOR] /(a)dmin - /norte - /sur - /este - /oeste - /arriba - /abajo - /recon - /reconoff - /check - /checkinv - /setskin");
			SendClientMessage(playerid, Gris, "[ADMINISTRADOR] /nombreadmin - /gotojob - /gotoconce - /gotocasa - /getcasaid - /gotonego - /getnegoid - /ircar - /gotocarllave");
			SendClientMessage(playerid, Gris, "[ADMINISTRADOR] /ban - /bloquear - /sethp - /setarmour - /limpiarchat - /fixveh - /repararveh - /repararmotor");
			SendClientMessage(playerid, Gris, "[ADMINISTRADOR] /desban - /desbanip - /resfaccionarios - /respawncoche (o /rc) - /traercar - /getcarllave - /amotor - /revivir - /atenderreporte");
			SendClientMessage(playerid, Gris, "[ADMINISTRADOR] /reportes - /hacerlider - /hacermiembro - /darpuntorol - /quitarpuntorol - /banck - /desconocidos - /limpiarreportes");
			SendClientMessage(playerid, Gris, "[ADMINISTRADOR] /editarttaller - /editarfam - /listafaccs - /editarcasa - /infocasa - /editarnego - /infonego - /editarcoche - /infocoche");
			SendClientMessage(playerid, Gris, "[ADMINISTRADOR] /ponerobjeto - /quitarobjeto - /objetos - /tiempo - /setstat - /eliminarobjeto - /verobjeto - /desarmar");
		}
		case 5:
		{
		    SendClientMessage(playerid, Gris, "[ADMINISTRADOR] /oocservicio - /slap - /ajail - /desbug - /kick - /mark - /gotomark - /go - /gotopos - /torreadmin");
			SendClientMessage(playerid, Gris, "[ADMINISTRADOR] /ir - /traer - /setint - /setvw - /(con)gelar - /(descon)gelar - /(adm)inistracion - /(e)quipo");
			SendClientMessage(playerid, Gris, "[ADMINISTRADOR] /(a)dmin - /norte - /sur - /este - /oeste - /arriba - /abajo - /recon - /reconoff - /check - /checkinv - /setskin");
			SendClientMessage(playerid, Gris, "[ADMINISTRADOR] /nombreadmin - /gotojob - /gotoconce - /gotocasa - /getcasaid - /gotonego - /getnegoid - /ircar - /gotocarllave");
			SendClientMessage(playerid, Gris, "[ADMINISTRADOR] /ban - /bloquear - /sethp - /setarmour - /limpiarchat - /fixveh - /repararveh - /repararmotor");
			SendClientMessage(playerid, Gris, "[ADMINISTRADOR] /desban - /desbanip - /resfaccionarios - /respawncoche (o /rc) - /traercar - /getcarllave - /amotor - /revivir - /atenderreporte");
			SendClientMessage(playerid, Gris, "[ADMINISTRADOR] /reportes - /hacerlider - /hacermiembro - /darpuntorol - /quitarpuntorol - /banck - /desconocidos - /limpiarreportes");
			SendClientMessage(playerid, Gris, "[ADMINISTRADOR] /editarttaller - /editarfam - /listafaccs - /editarcasa - /infocasa - /editarnego - /infonego - /editarcoche - /infocoche");
			SendClientMessage(playerid, Gris, "[ADMINISTRADOR] /ponerobjeto - /quitarobjeto - /objetos - /tiempo - /setstat - /eliminarobjeto - /verobjeto - /desarmar");
			SendClientMessage(playerid, Gris, "[ADMINISTRADOR] /bloquearsql - /crearcuenta - /guardardatos - /reiniciarmanual - /haceradmin");
		}
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------
if(strcmp(cmd, "/desarmar", true) == 0)
{
    if(IsPlayerConnected(playerid))
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /desarmar [IdJugador/ParteDelNombre]");
	        return 1;
	    }
	    playerid2 = ReturnUser(tmp);

        if(JugadorInfo[playerid][pAdmin] <= 3) { return 1; }
    	for(new x = 0; x<MAX_SLOTS_INV; x++)
		{
		    if(JugadorInfo[playerid2][pBol][x] <= 53 && JugadorInfo[playerid2][pBol][x] >= 39)
		    {
			    JugadorInfo[playerid2][pBol][x] = 0, JugadorInfo[playerid2][pBolCant][x] = 0;
		    }
		}
		for(new x = 0; x<MAX_SLOTS_INV; x++)
		{
		    if(ObjetoInfo[JugadorInfo[playerid2][pBol][x]][IDArma] > 0)
		    {
			    JugadorInfo[playerid2][pBol][x] = 0, JugadorInfo[playerid2][pBolCant][x] = 0;
		    }
		}

		if(ObjetoInfo[JugadorInfo[playerid2][pManoDer]][IDArma] > 0)
  		{
		    JugadorInfo[playerid2][pManoDer] = 0, JugadorInfo[playerid2][pManoDerCant] = 0;
  		}

  		if(ObjetoInfo[JugadorInfo[playerid2][pManoIzq]][IDArma] > 0)
  		{
		    JugadorInfo[playerid2][pManoIzq] = 0, JugadorInfo[playerid2][pManoIzqCant] = 0;
  		}

		format(string, sizeof(string), "[Siglo-XXI]: %s ha desarmado a %s (ID: %d).", NombreJugador(playerid), NombreJugador(playerid2), playerid2);
    	SendAdminMessage(COLOR_YELLOW, string);

  		format(string, sizeof(string), "Has desarmado a %s completamente.", NombreJugadorProxy(playerid2));
	    SendClientMessage(playerid, Azulito, string);

	    SendClientMessage(playerid2, COLOR_PIEL, "Un administrador te ha desarmado. Si no sabes las razones acude al /reportar.");
	}
	return 1;
}

if(strcmp(cmd, "/oocservicio", true) == 0) //Ponerse o quitarse de servicio admin
{
    if(IsPlayerConnected(playerid))
	{
	    if(JugadorInfo[playerid][pAdmin] <= 3) { return 1; }
        if(AdminDuty[playerid] == 0)
        {
        
            format(string, sizeof(string), "[Siglo-XXI]: %s está de servicio como administrador de juego.", NombreJugador(playerid));
			SendAdminMessage(COLOR_YELLOW, string);
			SendClientMessage(playerid, Gris, "Ahora estás de servicio administrativo.");
            SetPlayerColor(playerid, Invisible);
			AdminDuty[playerid] = 1;
            MascaraGas[playerid] = 1;
			GetPlayerHealth(playerid,JugadorInfo[playerid][pVida]);
	        GetPlayerArmour(playerid,JugadorInfo[playerid][pChaleco]);
            SetPlayerHealth(playerid, 999999);
            SetPlayerArmour(playerid, 999999);
            GodMode[playerid] = 1;
            printf("%s se ha puesto de servicio.", NombreJugador(playerid));
			return 1;
        }
        else if(AdminDuty[playerid] == 1)
        {
            format(string, sizeof(string), "[Siglo-XXI]: %s dejó de estar de servicio como operador de juego.", NombreJugador(playerid));
			SendAdminMessage(COLOR_YELLOW, string);
            SendClientMessage(playerid, Gris, "Ya no estás de servicio administrativo.");
            GodMode[playerid] = 0;
            MascaraGas[playerid] = 0;
            SetPlayerColor(playerid, Invisible);
			AdminDuty[playerid] = 0;
            SetPlayerArmour(playerid, JugadorInfo[playerid][pChaleco]);
            SetPlayerHealth(playerid, JugadorInfo[playerid][pVida]);
			printf("%s deja de estar de servicio.", NombreJugador(playerid));
			return 1;
        }
    }
	return 1;
}

//---------------------------------------------------------------------------------------------------------------
	
if(strcmp(cmd, "/tiempo", true) == 0) //Cambiar el tiempo del servidor
{
	if(JugadorInfo[playerid][pAdmin] < 4) { return 1; }
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Gris, "USO: /tiempo [weatherid]");
		return 1;
	}
	new tiempo = strval(tmp);
	SetPlayerWeather(playerid, tiempo);
	SetWeather(tiempo);
	DefaultWeather = tiempo;
	format(string, sizeof(string), "[Siglo-XXI]: %s ha establecido el clima a %d.", NombreJugador(playerid), tiempo);
	SendAdminMessage(COLOR_YELLOW, string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/gotoconce", true) == 0) //Ir a un concesionario
{
	if(JugadorInfo[playerid][pAdmin] <= 3) { return 1; }
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Gris, "USO: /gotoconce [concesionario]");
		return 1;
	}
	new conce = strval(tmp);
	SetPlayerPos(playerid, Concesionarios[conce][cX], Concesionarios[conce][cY], Concesionarios[conce][cZ]);
	return 1;
}

if(strcmp(cmd, "/gotojob", true) == 0) //Ir a un concesionario
{
	if(JugadorInfo[playerid][pAdmin] <= 3) { return 1; }
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Gris, "USO: /gotojob [idtrabajo]");
		return 1;
	}
	new job = strval(tmp);
	SetPlayerPos(playerid, Jobs[job+1][Jx], Jobs[job+1][Jy], Jobs[job+1][Jz]);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/amotor", true) == 0) //Encender un vehiculo por admin
{
	if(JugadorInfo[playerid][pAdmin] < 4) { return 1; }
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER){SendClientMessage(playerid, Rojo, "No estás en un vehículo como conductor."); return 1;}
	new car = GetPlayerVehicleID(playerid);
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(car,1,lights,alarm,doors,bonnet,boot,objective);
    SendClientMessage(playerid, Azulito, "Motor encendido.");
    format(string, sizeof(string), "[Siglo-XXI]: %s ha forzado el encendido del motor del vehículo %d.", NombreJugador(playerid), car);
	SendAdminMessage(COLOR_YELLOW, string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/crearobjeto", true) == 0) //Crea un objeto (sistema de inventario)
{
    if(JugadorInfo[playerid][pAdmin] < 4) { return 1; }
    if(AdminDuty[playerid] != 1)
	{
	    if(JugadorInfo[playerid][pAdmin] != 5)
	    {
	    	SendClientMessage(playerid, Rojo ,"No estás de servicio, el comando no te da ningún resultado.");
			return 1;
		}
	}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Gris, "USO: /crearobjeto [ObjetoID] [Cantidad]");
		return 1;
    }
    new item = strval(tmp);
    if(item <= 0){SendClientMessage(playerid, Rojo, "La ID del objeto no puede ser nula o negativa."); return 1;}
    if(!strlen(ObjetoInfo[item][NombreObjeto])){SendClientMessage(playerid, Rojo, "No existe un objeto con esa ID."); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Gris, "USO: /Crearobjeto [ObjetoID] [Cantidad]");
		return 1;
    }
    new cant = strval(tmp);
    if(cant <= 0){SendClientMessage(playerid, Rojo, "La cantidad no puede ser nula o negativa."); return 1;}
    if(JugadorInfo[playerid][pManoDer] > 0 && JugadorInfo[playerid][pManoIzq] > 0){SendClientMessage(playerid, Rojo, "Debes tener una mano vacía."); return 1;}
    if(JugadorInfo[playerid][pManoDer] == 0)
    {
	    JugadorInfo[playerid][pManoDer] = item;
	    JugadorInfo[playerid][pManoDerCant] = cant;
	    PonerObjeto(playerid, 1, item);
	    if(ObjetoInfo[item][IDArma] > 0){GivePlayerWeapon(playerid, ObjetoInfo[item][IDArma], cant);}
    }
    else if(JugadorInfo[playerid][pManoDer] != 0)
    {
        JugadorInfo[playerid][pManoIzq] = item;
	    JugadorInfo[playerid][pManoIzqCant] = cant;
	    PonerObjeto(playerid, 2, item);
    }
	if(JugadorInfo[playerid][pAdmin] != 5)
	{
    	format(string, sizeof(string), "[Siglo-XXI]: %s ha creado un %s en su mano derecha.", NombreJugador(playerid), ObjetoInfo[item][NombreObjeto]);
		SendAdminMessage(COLOR_YELLOW, string);
	}
    format(string, 128, "Entregado en mano derecha %s.", ObjetoInfo[item][NombreObjeto]);
	SendClientMessage(playerid, COLOR_GREEN2, string);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/limpiarventana", true) == 0) //Limpia el chat general
{
	LimpiarChat(playerid, 100);
	return 1;
}

if(strcmp(cmd, "/limpiarchat", true) == 0) //Limpia el chat general
{
    if(JugadorInfo[playerid][pAdmin] < 3){ return 1; }
	for(new i; i < MAX_PLAYERS; i++)
	{
		LimpiarChat(i, 100);
		SendClientMessage(i, -1, "Se ha limpiado el chat");
	}
	format(string, sizeof(string), "[Siglo-XXI]: %s ha borrado la ventana del chat a todos los jugadores.", NombreJugador(playerid));
	SendAdminMessage(COLOR_YELLOW, string);
	printf("%s ha limpiado el chat general de todos los jugadores.", NombreJugador(playerid));
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/check", true) == 0) //Inspecciona los stats de un jugador
{
    if(JugadorInfo[playerid][pAdmin] < 4){ return 1; }
    tmp = strtok(cmdtext, idx);
   	if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Gris, "USO: /check [IdJugador/ParteDelNombre]");
	    return 1;
	}
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
    {
		ShowStats(playerid, playerid2);
	}
	else
	{
        SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado");
	}
	return 1;
}

if(strcmp(cmd, "/heridas", true) == 0) //Inspecciona los stats de un jugador
{
    tmp = strtok(cmdtext, idx);
   	if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Gris, "USO: /heridas [IdJugador/ParteDelNombre]");
	    return 1;
	}
    playerid2 = ReturnUser(tmp);
    if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, COLOR_ROJO,"No estás cerca"); return 1;}
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
    {
		MostrarHeridas(playerid, playerid2);
	}
	else SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado");
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/checkinv", true) == 0) //Inspecciona el inventario de un jugador
{
    if(JugadorInfo[playerid][pAdmin] < 4){ return 1; }
    tmp = strtok(cmdtext, idx);
   	if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Gris, "USO: /checkinv [IdJugador/ParteDelNombre]");
	    return 1;
	}
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
    {
        format(string, sizeof(string), "[Siglo-XXI]: %s está mirando el inventario de %s.", NombreJugador(playerid), NombreJugador(playerid2));
		SendAdminMessage(COLOR_YELLOW, string);
		
        format(string, 128, "|__________ Inventario de %s __________|", NombreJugador(playerid2));
		SendClientMessage(playerid, -1, string);
		for(new x = 0; x<MAX_SLOTS_INV; x++)
		{
		    if(JugadorInfo[playerid2][pBol][x] >= 1)
		    {
		    	format(string, sizeof(string), "[Bolsillo] %s (%d uds.)", ObjetoInfo[JugadorInfo[playerid2][pBol][x]][NombreObjeto], JugadorInfo[playerid2][pBolCant][x]);
		    	SendClientMessage(playerid, COLOR_YELLOW, string);
			}
		}
		if(JugadorInfo[playerid2][pServicioPD] != 0)
		{
			for(new x = 0; x<MAX_SLOTS_CT; x++)
			{
			    if(JugadorInfo[playerid2][pCint][x] >= 1)
			    {
			    	format(string, sizeof(string), "[Cinturón] %s (%d uds.)", ObjetoInfo[JugadorInfo[playerid2][pCint][x]][NombreObjeto], JugadorInfo[playerid2][pCintCant][x]);
			    	SendClientMessage(playerid, COLOR_YELLOW, string);
				}
			}
		}
		if(JugadorInfo[playerid2][pManoDer] >= 1)
		{
		   	format(string, sizeof(string), "Mano derecha: %s (%d uds.)", ObjetoInfo[JugadorInfo[playerid2][pManoDer]][NombreObjeto], JugadorInfo[playerid2][pManoDerCant]);
		   	SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		if(JugadorInfo[playerid2][pManoIzq] >= 1)
		{
		   	format(string, sizeof(string), "Mano izquierda: %s (%d uds.)", ObjetoInfo[JugadorInfo[playerid2][pManoIzq]][NombreObjeto], JugadorInfo[playerid2][pManoIzqCant]);
		   	SendClientMessage(playerid, COLOR_YELLOW, string);
		}
	}
	else
	{
        SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/slap", true) == 0) //Dar hostias a los jugadores
{
    if(JugadorInfo[playerid][pAdmin] < 4){ return 1; }
    tmp = strtok(cmdtext, idx);
   	if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Gris, "USO: /slap [IdJugador/ParteDelNombre] [Razón]");
	    return 1;
	}
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
    {
        new length = strlen(cmdtext);
        while ((idx < length) && (cmdtext[idx] <= ' '))
	    {
	        idx++;
	    }
	    new offset = idx;
	    new result[128];
	    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	    {
	        result[idx - offset] = cmdtext[idx];
    	    idx++;
    	}
    	result[idx - offset] = EOS;
    	if(!strlen(result))
    	{
	        SendClientMessage(playerid, Gris, "USO: /slap [IdJugador/ParteDelNombre] [Razón]");
			return 1;
	    }
        new Float:Health;
	    new Float:x, Float:y, Float:z;
		GetPlayerHealth(playerid2,Health);
		SetPlayerHealth(playerid2,Health-10);
		GetPlayerPos(playerid2,x,y,z);
		SetPlayerPos(playerid2,x,y,z+5);
		PlayerPlaySound(playerid,1190,0.0,0.0,0.0);
		PlayerPlaySound(playerid2,1190,0.0,0.0,0.0);
		format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
		format(Nombre2, sizeof(Nombre2),"%s", NombreJugador(playerid2));
		format(string, sizeof(string), "[Siglo-XXI]: %s ha golpeado a %s.", NombreJugador(playerid), NombreJugador(playerid2));
		SendAdminMessage(COLOR_YELLOW, string);
		format(string,sizeof(string),"Un administrador te ha golpeado. ¿no sabes el motivo? usa /reportar.", Nombre, (result));
		SendClientMessage(playerid2,COLOR_PIEL,string);
	}
	else
	{
        SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/sethp", true) == 0) //Setear vida
{
    if(JugadorInfo[playerid][pAdmin] < 4){ return 1; }
    tmp = strtok(cmdtext, idx);
   	if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Gris, "USO: /sethp [IdJugador/ParteDelNombre] [Cantidad]");
	    return 1;
	}
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
    {
        tmp = strtok(cmdtext, idx);
    	if(!IsNumeric(tmp) || !strlen(tmp))
    	{
	        SendClientMessage(playerid, Gris, "USO: /sethp [IdJugador/ParteDelNombre] [Cantidad]");
			return 1;
	    }
        new Health = strval(tmp);
		SetPlayerHealth(playerid2,Health);
		format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
		format(Nombre2, sizeof(Nombre2),"%s", NombreJugador(playerid2));
		format(string,sizeof(string),"[Siglo-XXI]: %s ha seteado la vida de %s a %d.", Nombre, Nombre2, Health);
		SendAdminMessage(COLOR_YELLOW,string);
		printf(string);
	}
	else
	{
        SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/setarmour", true) == 0) //Setear armadura
{
    if(JugadorInfo[playerid][pAdmin] < 4){ return 1; }
    tmp = strtok(cmdtext, idx);
   	if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Gris, "USO: /setarmour [IdJugador/ParteDelNombre] [Cantidad]");
	    return 1;
	}
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
    {
        tmp = strtok(cmdtext, idx);
    	if(!IsNumeric(tmp) || !strlen(tmp))
    	{
	        SendClientMessage(playerid, Gris, "USO: /setarmour [IdJugador/ParteDelNombre] [Cantidad]");
			return 1;
	    }
        new Armour = strval(tmp);
		SetPlayerArmour(playerid2,Armour);
		format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
		format(Nombre2, sizeof(Nombre2),"%s", NombreJugador(playerid2));
		format(string,sizeof(string),"[Siglo-XXI]: %s ha seteado la armadura de %s a %d.", Nombre, Nombre2, Armour);
		SendAdminMessage(COLOR_YELLOW,string);
		printf(string);
	}
	else
	{
        SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado");
	}
	return 1;
}
if(strcmp(cmd, "/hacerlider", true) == 0) //Hacer a un jugador líder de una facción
{
    tmp = strtok(cmdtext, idx);
    if(JugadorInfo[playerid][pAdmin] < 3){ return 1; }
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /hacerlider [IdJugador/ParteDelNombre] [Facción (0-36)]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
	new lider;
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /hacerlider [IdJugador/ParteDelNombre] [Facción (0-36)]");
		return 1;
	}
	lider = strval(tmp);
	if(lider > 36 || lider < 0) { SendClientMessage(playerid, Rojo, "La facción debe estar entre 1 y 36."); return 1; }
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
	{
		JugadorInfo[playerid2][pLider] = lider;
		JugadorInfo[playerid2][pFaccion] = lider;
		if(lider == 0)
		{
		    JugadorInfo[playerid2][pRango] = 0;
		}
		else
		{
		    JugadorInfo[playerid2][pRango] = 12;
		}
		if(lider == 0){JugadorInfo[playerid2][pRango] = 0;}
		format(string, sizeof(string), "[Siglo-XXI]: %s te ha hecho líder de la facción número %d.", NombreJugador(playerid), lider);
		SendClientMessage(playerid2, COLOR_YELLOW, string);
		format(string, sizeof(string), "Has hecho a %s líder de la facción número %d.", NombreJugador(playerid2), lider);
		SendClientMessage(playerid, COLOR_GREEN2, string);
	}
	else
	{
        SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado");
	}
	return 1;
}

//---------------------------------------------------------------------------------

if(strcmp(cmd, "/chapa", true) == 0) //Ir a un sitio concreto
{
	if(IsPlayerConnected(playerid))
	{
		if(JugadorInfo[playerid][pAdmin] >= 4)
		{
			new opcion[128];
			if(AdminDuty[playerid] != 1)
			{
			    if(JugadorInfo[playerid][pAdmin] != 5)
			    {
			    	SendClientMessage(playerid, Rojo ,"No estás de servicio, el comando no te da ningún resultado.");
					return 1;
				}
			}
			opcion = strtok(cmdtext, idx);
			if(!strlen(opcion))
			{
				SendClientMessage(playerid, Gris, "USO: /chapa [opción] ");
				SendClientMessage(playerid, -1, "Opciones: caporoto | capofix | baulroto | baulfix |");
				return 1;
			}
			if(strcmp(opcion,"caporoto",true) == 0) // FUNCIONA.
			{
			    if(GetPlayerState(playerid) == 2)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					DestruirCapo(vehicleid);
				}
			}
			if(strcmp(opcion, "capofix",true) == 0)
			{
			    if(GetPlayerState(playerid) == 2)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					RepararCapo(vehicleid);
				}
			}
			if(strcmp(opcion,"baulroto",true) == 0) // FUNCIONA.
			{
			    if(GetPlayerState(playerid) == 2)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					DestruirBaul(vehicleid);
				}
			}
			if(strcmp(opcion,"baulfix",true) == 0) // FUNCIONA.
			{
			    if(GetPlayerState(playerid) == 2)
				{
					new vehicleid = GetPlayerVehicleID(playerid);
					RepararBaul(vehicleid);
				}
			}
		}
	}
	return 1;
}
//---------------------------------------------------------------------------------

if(strcmp(cmd, "/fixveh", true) == 0) //Repara un vehículo
{
    if(JugadorInfo[playerid][pAdmin] < 4){ return 1; }
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /fixveh [IdJugador/ParteDelNombre]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid, Rojo, "ID inválida"); return 1;}
    if(IsPlayerInAnyVehicle(playerid2) && GetPlayerVehicleSeat(playerid2) == 0)
    {
		new coche = GetPlayerVehicleID(playerid2);
		format(string, sizeof(string), "[Siglo-XXI]: %s ha reparado el vehículo %d a %s.", NombreJugador(playerid), coche, NombreJugador(playerid2));
		SendAdminMessage(COLOR_YELLOW, string);
		SendClientMessage(playerid, Rojo, string);
		printf("%s", string);
		RepairVehicleEx(coche);
	}
	else
	{
        SendClientMessage(playerid,Rojo,"Ese jugador no está en un vehículo como conductor.");
	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/resfaccionarios", true) == 0 || strcmp(cmd, "/rf", true) == 0) //Respawnea todos los coches de facción y job
{
    if(JugadorInfo[playerid][pAdmin] < 4){ return 1; }
    for(new carid=0; carid <= MAX_VEHICLES; carid++)
 	{
		if(carid <= MAX_VEHPUBLICO)
	    {
	        SetVehicleToRespawn(carid);
	 	}
	}
    format(string, sizeof(string), "[Siglo-XXI]: %s ha respawneado todos los vehículos de facción y trabajo.", NombreJugador(playerid));
	SendAdminMessage(COLOR_YELLOW, string);
    return 1;
}

if(strcmp(cmd, "/respawncoche", true) == 0 || strcmp(cmd, "/rc", true) == 0) //Respawnea un vehículo
{
    if(JugadorInfo[playerid][pAdmin] < 4){ return 1; }
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0)
    {
		new coche = GetPlayerVehicleID(playerid);
		SetVehicleToRespawn(coche);
		SendClientMessage(playerid, Azulito, "Vehículo respawneado.");
		format(string, sizeof(string), "[Siglo-XXI]: %s ha respawneado el vehículo %d.", NombreJugador(playerid), coche);
		SendAdminMessage(COLOR_YELLOW, string);
		printf("%s", string);
	}
	else
	{
        SendClientMessage(playerid,Rojo,"No estás en un vehículo como conductor.");
	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/repararveh", true) == 0) //Repara la carrocería de un vehículo
{
    if(JugadorInfo[playerid][pAdmin] < 4){ return 1; }
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0)
    {
		new coche = GetPlayerVehicleID(playerid), Float:vida;
		SendClientMessage(playerid, Azulito, "Carrocería del vehículo reparada.");
		format(string, sizeof(string), "[Siglo-XXI]: %s ha reparado la carrocería del vehículo %d.", NombreJugador(playerid), coche);
		SendAdminMessage(COLOR_YELLOW, string);
		printf("%s", string);
		GetVehicleHealth(coche, vida);
		RepairVehicleEx(coche);
		SetVehicleHealth(coche, vida);
	}
	else
	{
        SendClientMessage(playerid,Rojo,"No estás en un vehículo como conductor.");
	}
    return 1;
}

//--------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/repararmotor", true) == 0) //Repara el motor de un vehículo
{
    if(JugadorInfo[playerid][pAdmin] < 4){ return 1; }
    if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleSeat(playerid) == 0)
    {
		new coche = GetPlayerVehicleID(playerid);
		SetVehicleHealth(coche, 1000);
		MotorFeo[coche] = 0;
		SendClientMessage(playerid, Azulito, "Motoría del vehículo reparado.");
		format(string, sizeof(string), "[Siglo-XXI]: %s ha reparado el motor del vehículo %d.", NombreJugador(playerid), coche);
		SendAdminMessage(COLOR_YELLOW, string);
		printf("%s", string);
	}
	else
	{
        SendClientMessage(playerid,Rojo,"No estás en un vehículo como conductor.");
	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/darpuntorol", true) == 0) //Dar un punto de rol
{
    tmp = strtok(cmdtext, idx);
    if(JugadorInfo[playerid][pAdmin] < 3){ return 1; }
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /darpuntorol [IdJugador/ParteDelNombre]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
	{
        JugadorInfo[playerid2][pPuntosRol] ++;
		format(string, sizeof(string), "[Siglo-XXI]: %s ha dado un punto de rol a %s.", NombreJugador(playerid), NombreJugador(playerid2));
		SendAdminMessage(COLOR_YELLOW, string);
		printf("%s", string);
		format(string, sizeof(string), "Sumados 1 puntos de rol a %s (ID: %d). Ahora tiene %d", NombreJugador(playerid), playerid,JugadorInfo[playerid2][pPuntosRol]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), "Recibes '1' puntos de rol. Ahora tienes %d", JugadorInfo[playerid2][pPuntosRol]);
		SendClientMessage(playerid2, COLOR_YELLOW, string);
	}
	else
	{
        SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado");
	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/quitarpuntorol", true) == 0) //Dar un punto de rol
{
    tmp = strtok(cmdtext, idx);
    if(JugadorInfo[playerid][pAdmin] < 3){ return 1; }
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /quitarpuntorol [IdJugador/ParteDelNombre]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
	{
        JugadorInfo[playerid2][pPuntosRolNo] ++;
		format(string, sizeof(string), "[Siglo-XXI]: %s ha dado un punto de rol negativo a %s.", NombreJugador(playerid), NombreJugador(playerid2));
		SendAdminMessage(COLOR_YELLOW, string);
		printf("%s", string);
		format(string, sizeof(string), "Sumados 1 puntos de rol negativos a %s (ID: %d). Ahora tiene -%d", NombreJugador(playerid), playerid,JugadorInfo[playerid2][pPuntosRolNo]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), "Recibes '1' puntos de rol negativo. Ahora tienes -%d", JugadorInfo[playerid2][pPuntosRol]);
		SendClientMessage(playerid2, COLOR_YELLOW, string);
	}
	else
	{
        SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado");
	}
    return 1;
}


//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/rotz", true) == 0) //Desvuelca un vehículo
{
	if(JugadorInfo[playerid][pAdmin] < 1){return 1;}
	if(!IsPlayerInAnyVehicle(playerid)){SendClientMessage(playerid, Rojo, "No estás en un vehículo."); return 1;}
	new carid = GetPlayerVehicleID(playerid);
	new Float:RotZ;
	GetVehicleZAngle(carid, RotZ);
	SetVehicleZAngle(carid, RotZ + 30);
	return 1;
}

if(strcmp(cmd, "/changename", true) == 0) //Cambia el nombre de un jugador
{
    if(JugadorInfo[playerid][pAdmin] <= 4 && !IsPlayerAdmin(playerid)){return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /changename [IdJugador/ParteDelNombre] [Nombre]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
	
	new length = strlen(cmdtext);
    while ((idx < length) && (cmdtext[idx] <= ' '))
    {
        idx++;
    }
    new offset = idx;
    new result[MAX_PLAYER_NAME];
    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
    {
        result[idx - offset] = cmdtext[idx];
        idx++;
    }
    result[idx - offset] = EOS;
    if(!strlen(result))
    {
        SendClientMessage(playerid, Gris, "USO: /changename [IdJugador/ParteDelNombre] [Nombre]");
        SendClientMessage(playerid, -1, "Nota: Solo puedes usar letras.");
        return 1;
    }
    if(SetPlayerName(playerid2, (result)) == -1)
	{
	    SendClientMessage(playerid, Rojo, "No puedes darle ese nombre a ese usuario.");
	    return 1;
	}
	new nombre[MAX_PLAYER_NAME];
	GetPlayerName(playerid2, nombre, sizeof(nombre));
	format(string, sizeof(string), "[Siglo-XXI]: %s ha cambiado del nombre del ID %d a '%s'.", NombreJugador(playerid), playerid2, (result));
	SendAdminMessage(COLOR_YELLOW, string);
	SendClientMessage(playerid2, COLOR_YELLOW, string);
	
	new query[170];
	format(query, sizeof(query), "UPDATE usuarios SET Nombre = '%s' WHERE Nombre = '%s'", (result), JugadorInfo[playerid2][pNombre]);
	mysql_query(1, query);
	
	SetPlayerName(playerid2, (result));
    format(JugadorInfo[playerid2][pNombre], sizeof((result)), (result));
	PlayerSave(playerid2);
	return 1;
}

if(strcmp(cmd, "/nombreadmin", true) == 0) //Cambia el nick de un jugador
{
    if(JugadorInfo[playerid][pAdmin] < 5){return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /nombreadmin [IdJugador/ParteDelNombre] [NombreAdmin]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);

	new length = strlen(cmdtext);
    while ((idx < length) && (cmdtext[idx] <= ' '))
    {
        idx++;
    }
    new offset = idx;
    new result[MAX_PLAYER_NAME];
    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
    {
        result[idx - offset] = cmdtext[idx];
        idx++;
    }
    result[idx - offset] = EOS;
    if(!strlen(result))
    {
        SendClientMessage(playerid, Gris, "USO: /nombreadmin [IdJugador/ParteDelNombre] [NombreAdmin]");
        SendClientMessage(playerid, -1, "Nota: Solo puedes usar letras.");
        return 1;
    }
	format(string, sizeof(string), "[Siglo-XXI]: %s ha cambiado el nickname de %s a '%s'.", NombreJugador(playerid), NombreJugador(playerid2), (result));
	SendAdminMessage(COLOR_YELLOW, string);
    format(JugadorInfo[playerid2][pAdminNombre], sizeof((result)), (result));
	PlayerSave(playerid2);
	return 1;
}


//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/setstat", true) == 0) //Modificar los parámetros de un jugador
{
    if(JugadorInfo[playerid][pAdmin] < 4){return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /setstat [IdJugador/ParteDelNombre] [Variable] [Cantidad]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
	
    new opcion[128];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Gris, "USO: /setstat [IdJugador/ParteDelNombre] [Variable] [Cantidad]");
		SendClientMessage(playerid, Amarillo, "Edad, Sexo, Nivel, Exp, Telefono, Trabajo, Contrato, EsperaTrabajar");
		SendClientMessage(playerid, NaranjaOscuro, "DineroBanco, Encarcelado, TiempoCarcel, Advertencias");
		SendClientMessage(playerid, Amarillo, "LlaveCoche[0-4], LlaveCochePrestado[0-4], ServicioPD");
		SendClientMessage(playerid, NaranjaOscuro, "MinPayDay, LicConduccion, LicNavegacion, LicAviacion, LicArmas, LicPesca, LicCaza");
		SendClientMessage(playerid, Amarillo, "Casa, CasaAlq, Negocio, Taller, HabMec, HabLad, TiempoRobo");
		SendClientMessage(playerid, NaranjaOscuro, "Adiccion[0-4], DrConsumida[0-4], Fuerza, CansancioEntrenar");
		return 1;
	}
	
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /setstat [IdJugador/ParteDelNombre] [Variable] [Cantidad]");
		return 1;
	}
	new cantidad = strval(tmp);

	if(strcmp(opcion,"Edad",true) == 0)
	{
	    JugadorInfo[playerid2][pEdad] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'Edad' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Sexo",true) == 0)
	{
	    JugadorInfo[playerid2][pSexo] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'Sexo' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Nivel",true) == 0)
	{
	    JugadorInfo[playerid2][pNivel] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'Nivel' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Exp",true) == 0)
	{
	    JugadorInfo[playerid2][pExp] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'Exp' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Telefono",true) == 0)
	{
	    JugadorInfo[playerid2][pTelefono] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'Telefono' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Trabajo",true) == 0)
	{
	    JugadorInfo[playerid2][pTrabajo] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'Trabajo' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Contrato",true) == 0)
	{
	    JugadorInfo[playerid2][pContrato] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'Contrato' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"EsperaTrabajar",true) == 0)
	{
	    JugadorInfo[playerid2][pEsperaTrabajar] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'EsperaTrabajar' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"DineroBanco",true) == 0)
	{
	    JugadorInfo[playerid2][pDineroBanco] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'DineroBanco' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Encarcelado",true) == 0)
	{
	    JugadorInfo[playerid2][pEncarcelado] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'Encarcelado' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"TiempoCarcel",true) == 0)
	{
	    JugadorInfo[playerid2][pTiempoCarcel] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'TiempoCarcel' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Advertencias",true) == 0)
	{
	    JugadorInfo[playerid2][pAdvertencias] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'Advertencias' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"ServicioPD",true) == 0)
	{
	    JugadorInfo[playerid2][pServicioPD] = cantidad;
	    JugadorInfo[playerid2][pServicioMD] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'ServicioPD' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LlaveCoche0",true) == 0)
	{
	    JugadorInfo[playerid2][pLlaveCoche][0] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'LlaveCoche0' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LlaveCoche1",true) == 0)
	{
	    JugadorInfo[playerid2][pLlaveCoche][1] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'LlaveCoche1' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LlaveCoche2",true) == 0)
	{
	    JugadorInfo[playerid2][pLlaveCoche][2] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'LlaveCoche2' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LlaveCoche3",true) == 0)
	{
	    JugadorInfo[playerid2][pLlaveCoche][3] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'LlaveCoche3' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LlaveCoche4",true) == 0)
	{
	    JugadorInfo[playerid2][pLlaveCoche][4] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'LlaveCoche4' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LlaveCochePrestado0",true) == 0)
	{
	    JugadorInfo[playerid2][pLlaveCochePrestado][0] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'LlaveCochePrestado0' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LlaveCochePrestado1",true) == 0)
	{
	    JugadorInfo[playerid2][pLlaveCochePrestado][1] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'LlaveCochePrestado1' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LlaveCochePrestado2",true) == 0)
	{
	    JugadorInfo[playerid2][pLlaveCochePrestado][2] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'LlaveCochePrestado2' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LlaveCochePrestado3",true) == 0)
	{
	    JugadorInfo[playerid2][pLlaveCochePrestado][3] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'LlaveCochePrestado3' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LlaveCochePrestado4",true) == 0)
	{
	    JugadorInfo[playerid2][pLlaveCochePrestado][4] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'LlaveCochePrestado4' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"MinPayDay",true) == 0)
	{
	    JugadorInfo[playerid2][pMinPayDay] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'LlaveCoche4' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LicConduccion",true) == 0)
	{
	    JugadorInfo[playerid2][pLicConduccion] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'LicConduccion' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LicNavegacion",true) == 0)
	{
	    JugadorInfo[playerid2][pLicNavegacion] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'LicNavegacion' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LicAviacion",true) == 0)
	{
	    JugadorInfo[playerid2][pLicAviacion] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'LicAviacion' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LicArmas",true) == 0)
	{
	    JugadorInfo[playerid2][pLicArmas] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'LicArmas' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LicPesca",true) == 0)
	{
	    JugadorInfo[playerid2][pLicPesca] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'LicPesca' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"LicCaza",true) == 0)
	{
	    JugadorInfo[playerid2][pLicCaza] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'LicCaza' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Casa",true) == 0)
	{
	    JugadorInfo[playerid2][pCasa] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'Casa' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"CasaAlq",true) == 0)
	{
	    JugadorInfo[playerid2][pCasaAlq] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'CasaAlq' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Negocio",true) == 0)
	{
	    JugadorInfo[playerid2][pNegocio] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'Negocio' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Taller",true) == 0)
	{
	    JugadorInfo[playerid2][pTaller] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'Taller' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"HabMec",true) == 0)
	{
	    JugadorInfo[playerid2][pHabMec] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'HabMec' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"HabLad",true) == 0)
	{
	    JugadorInfo[playerid2][pHabLad] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'HabLad' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"TiempoRobo",true) == 0)
	{
	    JugadorInfo[playerid2][pTiempoRobo] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'TiempoRobo' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Adiccion0",true) == 0)
	{
	    JugadorInfo[playerid2][pAdiccion][0] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'Adiccion0' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Adiccion1",true) == 0)
	{
	    JugadorInfo[playerid2][pAdiccion][1] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'Adiccion1' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Adiccion2",true) == 0)
	{
	    JugadorInfo[playerid2][pAdiccion][2] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'Adiccion2' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Adiccion3",true) == 0)
	{
	    JugadorInfo[playerid2][pAdiccion][3] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'Adiccion3' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Adiccion4",true) == 0)
	{
	    JugadorInfo[playerid2][pAdiccion][4] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'Adiccion4' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"DrConsumida0",true) == 0)
	{
	    JugadorInfo[playerid2][pDrConsumida][0] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'DrConsumida0' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"DrConsumida1",true) == 0)
	{
	    JugadorInfo[playerid2][pDrConsumida][1] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'DrConsumida1' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"DrConsumida2",true) == 0)
	{
	    JugadorInfo[playerid2][pDrConsumida][2] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'DrConsumida02' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"DrConsumida3",true) == 0)
	{
	    JugadorInfo[playerid2][pDrConsumida][3] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'DrConsumida3' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"DrConsumida4",true) == 0)
	{
	    JugadorInfo[playerid2][pDrConsumida][4] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'DrConsumida4' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"Fuerza",true) == 0)
	{
	    JugadorInfo[playerid2][pFuerza] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'Fuerza' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
	else if(strcmp(opcion,"CansancioEntrenar",true) == 0)
	{
	    JugadorInfo[playerid2][pCansancioEntrenar] = cantidad;
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha seteado 'CansancioEntrenar' a %s a %d.", NombreJugador(playerid), NombreJugador(playerid2), cantidad);
	    SendAdminMessage(Aguamarina, string);
	    SendClientMessage(playerid2, COLOR_YELLOW, string);
	    printf(string);
	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------
if(strcmp(cmd, "/reiniciarmanual", true) == 0)
{
    if(IsPlayerConnected(playerid))
	{
		if(JugadorInfo[playerid][pAdmin] <= 4){ return 1; }
		SendClientMessageToAll(Naranja,"[Siglo-XXI]: Se ha establecido un reinicio total del servidor. Todos los jugadores serán expulsados en 5 segundos.");
		ExpulsarTodosR();
	}
}

if(strcmp(cmd, "/guardarnegocios", true) == 0)
{
    for(new x=1; x<=TotalNegs; x++)
	{
	   	GuardarNegocio(x);
    }
    return 1;
}

if(strcmp(cmd, "/guardardatos", true) == 0)
{
    if(IsPlayerConnected(playerid))
	{
		if(JugadorInfo[playerid][pAdmin] <= 4){ return 1; }
		SendClientMessageToAll(Naranja,"[Siglo-XXI]: Se ha iniciado el proceso de guardado de datos manualmente. Posible lag temporal en el servidor.");
	    new cuenta;
		for(new x=MAX_VEHPUBLICO+1; x <= TotalVeh; x++)
		{
			SaveCar(x);
			cuenta++;
		}
		printf("Coches guardados: %d", cuenta);

		cuenta = 0;
		for(new x=1; x<=TotalCasas; x++)
	    {
	    	GuardarCasa(x); //Guardado de casas
	    	cuenta++;
	    }
	    printf("Casas guardadas: %d (MAX: %d)", cuenta, MAX_HOUSES);

	    cuenta = 0;
	    for(new x=1; x<=TotalNegs; x++)
	    {
	    	GuardarNegocio(x); //Guardado de negocios
	    	cuenta++;
	    }
	    printf("Negocios guardados: %d (MAX: %d)", cuenta, MAX_NEGS);

	    cuenta = 0;
	    for(new x=1; x<=TotalFaccs; x++)
	    {
	    	SaveFacc(x); //Guardado de facciones
	    	cuenta++;
	    }
	    printf("Facciones guardadas: %d (MAX: %d)", cuenta, MAX_FACCS);

	    cuenta = 0;
	    for(new x=0; x<=CodigoPlantacion; x++)
	    {
	        if(strlen(PlantaInfo[x][plPlantador]))
	        {
		    	SavePlantacion(x); //Guardado de plantaciones
		    	cuenta++;
	    	}
	    }
	    printf("Plantaciones guardadas: %d (MAX: %d)", cuenta, MAX_PLANTACIONES);
	}
	return 1;
}
if(strcmp(cmd, "/adm", true) == 0 || strcmp(cmd, "/administracion", true) == 0) //Dar mensajes generales como admin.
{
	if(IsPlayerConnected(playerid))
	{
		if(JugadorInfo[playerid][pAdmin] <= 2){ return 1; }
		format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[128];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, Gris, "USO: (/adm)inistracion [texto]");
			return 1;
		}
		if(strlen(result) > 90)
	    {
	        new text1[91],text2[91];
	        strmid(text2, result, 90, 128);
	        strmid(text1, result, 0, 90);
	        format(string, sizeof(string), "[Siglo-XXI]: %s",text1);
			SendClientMessageToAll(Naranja,string);
	        format(string, 128, "%s", text2);
	        SendClientMessageToAll(Naranja,string);
	    }
	    else
		{
			format(string, sizeof(string), "[Siglo-XXI]: %s",result);
			SendClientMessageToAll(Naranja,string);
		}
		printf("Mensaje por admin global %s: %s", Nombre, result);
	}
	return 1;
}

if(strcmp(cmd, "/anuncio", true) == 0) //Dar mensajes generales como facción.
{
	if(JugadorInfo[playerid][pLider] > 0)
	{
		if(IsPlayerConnected(playerid))
		{
			format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
			new offset = idx;
			new result[128];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, Gris, "USO: /anuncio [texto] (se mostrará a todos los jugadores).");
				return 1;
			}
			new rango[33];
		    switch(JugadorInfo[playerid][pRango])
		    {
	            case 1: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango1]);
	            case 2: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango2]);
	            case 3: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango3]);
	            case 4: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango4]);
	            case 5: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango5]);
	            case 6: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango6]);
	            case 7: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango7]);
	            case 8: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango8]);
	            case 9: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango9]);
	            case 10: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango10]);
	            case 11: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango11]);
	            case 12: format(rango, sizeof(rango), "%s", FamiliaInfo[JugadorInfo[playerid][pFaccion]][fRango12]);
	        }
	        
			if(strlen(result) > 80)
		    {
		        new text1[91],text2[91];

		        strmid(text2, result, 80, 128);
		        strmid(text1, result, 0, 80);
		        format(string, sizeof(string), "[ANUNCIO LSPD] %s %s: %s...",rango, NombreJugador(playerid), text1);
				SendClientMessageToAll(0x045FB4FF,string);
		        format(string, 128, "%s", text2);
		        SendClientMessageToAll(0x045FB4FF,string);
		    }
		    else
			{
				format(string, sizeof(string), "[ANUNCIO LSPD] %s %s: %s",rango, NombreJugador(playerid), result);
				SendClientMessageToAll(0x045FB4FF,string);
			}
		}
	}
	return 1;
}


//---------------------------------------------------------------------------------------------------------------


if(strcmp(cmd, "/togmp", true) == 0)
{
		if(ActivoPrivados[playerid] == 0)
		{
		    ActivoPrivados[playerid] = 1;
			SendClientMessage(playerid, Gris, "Desactivaste la mensajería privada.");
		}
		else
		{
		    ActivoPrivados[playerid] = 0;
		    SendClientMessage(playerid, Gris, "Activaste la mensajería privada.");
		}
		return 1;
}
if(strcmp(cmd, "/togfam", true) == 0)
{
		if(ActivoFamilia[playerid] == 0)
		{
		    ActivoFamilia[playerid] = 1;
			SendClientMessage(playerid, Gris, "Ahora ya no ves el chat de familia.");
		}
		else
		{
		    ActivoFamilia[playerid] = 0;
		    SendClientMessage(playerid, Gris, "Vuelves a ver el chat de familia.");
		}
		return 1;
}
if(strcmp(cmd, "/togstaff", true) == 0)
{
 	if(JugadorInfo[playerid][pAdmin] >= 2)
	{
		if(AdminOculto[playerid] == 0)
		{
		    AdminOculto[playerid] = 1;
			SendClientMessage(playerid, Gris, "Ahora tu nombre no aparece en la lista de administradores.");
		}
		else
		{
		    AdminOculto[playerid] = 0;
		    SendClientMessage(playerid, Gris, "Tu nombre vuelve ha aparecer en la lista de administradores.");
		}
	}
	return 1;
}
if(strcmp(cmd, "/togadmin", true) == 0)
{
 	if(JugadorInfo[playerid][pAdmin] >= 2)
	{
		if(ActivoAdmin[playerid] == 0)
		{
		    ActivoAdmin[playerid] = 1;
			SendClientMessage(playerid, Gris, "Ahora ya no ves el chat del equipo.");
		}
		else
		{
		    ActivoAdmin[playerid] = 0;
		    SendClientMessage(playerid, Gris, "Vuelves a ver el chat del equipo.");
		}
	}
	return 1;
}
if(strcmp(cmd, "/admin", true) == 0 || strcmp(cmd, "/a", true) == 0) //Chat admin
{
    if(IsPlayerConnected(playerid))
    {
        if(JugadorInfo[playerid][pAdmin] < 3){ return 1; }
		format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[90];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Gris, "USO: (/a)dmin [texto]");
	    	return 1;
		}
		format(string, sizeof(string), "[OOC | Admin %d |%d %s: %s", playerid, JugadorInfo[playerid][pAdmin], Nombre, result);
		SendAdminMessage(Chat2, string);
		printf("Admin %s: %s", Nombre, result);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/equipochat", true) == 0 || strcmp(cmd, "/e", true) == 0) //Chat admin
{
    if(IsPlayerConnected(playerid))
    {
        if(JugadorInfo[playerid][pAdmin] < 1){ return 1; }
		format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[90];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Gris, "USO: (/e)quipo [texto]");
	    	return 1;
		}
		format(string, sizeof(string), "[OOC | Equipo %d| %s: %s", playerid,Nombre, result);
		SendTesterMessage(0xF6D266FF, string);
		printf("Equipo %s: %s", Nombre, result);
    }
    return 1;
}
//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/kick", true) == 0) //Kickear
{
    if(JugadorInfo[playerid][pAdmin] <= 2){ return 1; }
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /kick [IdJugador/ParteDelNombre] [Razón]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2))
    {
        if(playerid2 != INVALID_PLAYER_ID)
        {
            format(Nombre2, sizeof(Nombre2),"%s", NombreJugador(playerid2));
            format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
            new length = strlen(cmdtext);
            while ((idx < length) && (cmdtext[idx] <= ' '))
            {
                idx++;
            }
            new offset = idx;
            new result[80];
            while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
            {
                result[idx - offset] = cmdtext[idx];
                idx++;
            }
            result[idx - offset] = EOS;
            if(!strlen(result))
            {
                SendClientMessage(playerid, Gris, "USO: /kick [IdJugador/ParteDelNombre] [Razón]");
                return 1;
            }
            new ano, mes, dia;
            getdate(ano, mes, dia);
            format(string, sizeof(string), "[Siglo-XXI]: %s ha expulsado a %s. Razón: %s (%d/%d/%d)", Nombre, Nombre2, (result), dia, mes, ano);
            SendClientMessageToAll(Rojo, string);
            printf(string);
            TogglePlayerControllable(playerid2,0);
            Expulsar(playerid2);
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, Rojo, "Jugador no encontrado");
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/ban", true) == 0) //Banear
{
    if(JugadorInfo[playerid][pAdmin] < 3){ return 1; }
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /ban [IdJugador/ParteDelNombre] [Razón]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2))
    {
        if(playerid2 != INVALID_PLAYER_ID)
        {
            format(Nombre2, sizeof(Nombre2),"%s", NombreJugador(playerid2));
            format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
            new length = strlen(cmdtext);
            while ((idx < length) && (cmdtext[idx] <= ' '))
            {
                idx++;
            }
            new offset = idx;
            new result[80];
            while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
            {
                result[idx - offset] = cmdtext[idx];
                idx++;
            }
            result[idx - offset] = EOS;
            if(!strlen(result))
            {
                SendClientMessage(playerid, Gris, "USO: /ban [IdJugador/ParteDelNombre] [Razón]");
                return 1;
            }
            new ano, mes, dia;
            getdate(ano, mes, dia);
            format(string, sizeof(string), "[Siglo-XXI]: %s ha baneado del servidor a %s. Razón: %s (%d/%d/%d)", Nombre, Nombre2, (result), dia, mes, ano);
            SendClientMessageToAll(Rojo, string);
            printf(string);
            TogglePlayerControllable(playerid2,0);
            BanL(playerid2);
            JugadorInfo[playerid2][pBloqueado] = 1;
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, Rojo, "Jugador no encontrado");
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/bloquearsql", true) == 0) //Bloquea cuenta pero no banea
{
    if(JugadorInfo[playerid][pAdmin] < 4){ return 1; }
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /bloquearsql [sqlid] [razón]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);

 	format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
    new length = strlen(cmdtext);
    while ((idx < length) && (cmdtext[idx] <= ' '))
    {
  		  idx++;
    }
    new offset = idx;
    new result[80];
    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
    {
	    result[idx - offset] = cmdtext[idx];
	    idx++;
    }
    result[idx - offset] = EOS;
    if(!strlen(result))
    {
	    SendClientMessage(playerid, Gris, "USO: /bloquearsql [sqlid] [Razón]");
	    return 1;
    }
    new ano, mes, dia;
    getdate(ano, mes, dia);
    format(string, sizeof(string), "[Siglo-XXI]: %s ha bloqueado la cuenta SQLID: %d . Razón: %s (%d/%d/%d)", Nombre, playerid2, (result), dia, mes, ano);
    SendClientMessageToAll(Rojo, string);
    printf(string);

	new query[250];
	format(query, sizeof(query), "UPDATE usuarios SET Bloqueado = 1 WHERE ID = '%d'", playerid2);
	mysql_query(1, query);
	return 1;
}

if(strcmp(cmd, "/bloquear", true) == 0) //Bloquea cuenta pero no banea
{
    if(JugadorInfo[playerid][pAdmin] < 3){ return 1; }
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /bloquear [IdJugador/ParteDelNombre] [Razón]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2))
    {
        if(playerid2 != INVALID_PLAYER_ID)
        {
            format(Nombre2, sizeof(Nombre2),"%s", NombreJugador(playerid2));
            format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
            new length = strlen(cmdtext);
            while ((idx < length) && (cmdtext[idx] <= ' '))
            {
                idx++;
            }
            new offset = idx;
            new result[80];
            while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
            {
                result[idx - offset] = cmdtext[idx];
                idx++;
            }
            result[idx - offset] = EOS;
            if(!strlen(result))
            {
                SendClientMessage(playerid, Gris, "USO: /bloquear [IdJugador/ParteDelNombre] [Razón]");
                return 1;
            }
            new ano, mes, dia;
            getdate(ano, mes, dia);
            format(string, sizeof(string), "[Siglo-XXI]: %s ha bloqueado permanentemente a %s. Razón: %s (%d/%d/%d)", Nombre, Nombre2, (result), dia, mes, ano);
            SendClientMessageToAll(Rojo, string);
            printf(string);
            TogglePlayerControllable(playerid2,0);
            JugadorInfo[playerid2][pBloqueado] = 1; PlayerSave(playerid2);
    		SetTimerEx("KickI", 200, false, "i", playerid2);
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, Rojo, "Jugador no encontrado");
    }
    return 1;
}

if(strcmp(cmd, "/banck", true) == 0) //Bloquea cuenta pero no banea
{
    if(JugadorInfo[playerid][pAdmin] < 3){ return 1; }
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /banck [IdJugador/ParteDelNombre] [Razón]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2))
    {
        if(playerid2 != INVALID_PLAYER_ID)
        {
            format(Nombre2, sizeof(Nombre2),"%s", NombreJugador(playerid2));
            format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
            new length = strlen(cmdtext);
            while ((idx < length) && (cmdtext[idx] <= ' '))
            {
                idx++;
            }
            new offset = idx;
            new result[80];
            while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
            {
                result[idx - offset] = cmdtext[idx];
                idx++;
            }
            result[idx - offset] = EOS;
            if(!strlen(result))
            {
                SendClientMessage(playerid, Gris, "USO: /banck [IdJugador/ParteDelNombre] [Razón]");
                return 1;
            }
            new ano, mes, dia;
            getdate(ano, mes, dia);
            JugadorInfo[playerid2][pBloqueado] = 2;
            format(string, sizeof(string), "[Siglo-XXI]: %s ha sido bloqueado por CK por %s. Razón: %s (%d/%d/%d)", Nombre2, Nombre, (result), dia, mes, ano);
            SendClientMessageToAll(Rojo, string);
            printf(string);
            TogglePlayerControllable(playerid2,0);
            
            JugadorInfo[playerid2][pBloqueado] = 2; PlayerSave(playerid2);
    		SetTimerEx("KickI", 200, false, "i", playerid2);
            return 1;
        }
    }
    else { SendClientMessage(playerid, Rojo, "Jugador no encontrado"); }
    return 1;
}


if(strcmp(cmd, "/desban", true) == 0) //Banear
{
    if(JugadorInfo[playerid][pAdmin] < 3){ return 1; }
    new length = strlen(cmdtext);
    while ((idx < length) && (cmdtext[idx] <= ' '))
    {
        idx++;
    }
    new offset = idx;
    new result[MAX_PLAYER_NAME];
    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
    {
        result[idx - offset] = cmdtext[idx];
        idx++;
    }
    result[idx - offset] = EOS;
    if(!strlen(result))
    {
        SendClientMessage(playerid, Gris, "USO: /desban [Nombre_Apellido]");
        return 1;
    }
	new query[250];
	format(query, sizeof(query), "UPDATE usuarios SET Bloqueado = 0 WHERE Nombre = '%s'", result);
	mysql_query(1, query);
	format(string, sizeof(string), "[Siglo-XXI]: %s ha desbaneado la cuenta de %s.", NombreJugador(playerid), result);
	SendAdminMessage(COLOR_YELLOW, string);
	printf(string);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/desbanip", true) == 0) //Banear
{
    if(JugadorInfo[playerid][pAdmin] < 3){ return 1; }
    new length = strlen(cmdtext);
    while ((idx < length) && (cmdtext[idx] <= ' '))
    {
        idx++;
    }
    new offset = idx;
    new result[MAX_PLAYER_NAME];
    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
    {
        result[idx - offset] = cmdtext[idx];
        idx++;
    }
    result[idx - offset] = EOS;
    if(!strlen(result))
    {
        SendClientMessage(playerid, Gris, "USO: /desbanIP [IP]");
        return 1;
    }
    format(string, sizeof(string), "unbanip %s", result);
    SendRconCommand(string);
    SendRconCommand("reloadbans");
	format(string, sizeof(string), "[Siglo-XXI]: %s ha desbaneado la IP [%s].", NombreJugador(playerid), result);
	SendAdminMessage(COLOR_YELLOW, string);
	printf(string);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/setvw", true) == 0) //Dar un Virual World a un jugador.
{
    if(JugadorInfo[playerid][pAdmin] < 4){ return 1; }
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /setVW [IdJugador/ParteDelNombre] [VW]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2))
    {
        if(playerid2 != INVALID_PLAYER_ID)
        {
            tmp = strtok(cmdtext, idx);
            new VW = strval(tmp);
			if(!strlen(tmp))
			{
                SendClientMessage(playerid, Gris, "USO: /setVW [IdJugador/ParteDelNombre] [VW]");
                return 1;
			}
            format(Nombre2, sizeof(Nombre2),"%s", NombreJugador(playerid2));
            format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
            format(string, sizeof(string), "%s ha cambiado tu Virtual World al %d.", Nombre, VW);
            SendClientMessage(playerid2, Azulito, string);
            format(string, sizeof(string), "Has cambiado el Virtual World de %s al %d.", Nombre2, VW);
            SendClientMessage(playerid, Azulito, string);
            SetPlayerVirtualWorld(playerid2, VW);
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, Rojo, "Jugador no encontrado");
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/setint", true) == 0) //Dar un interior a un jugador.
{
    if(JugadorInfo[playerid][pAdmin] < 4){ return 1; }
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /setint [IdJugador/ParteDelNombre] [Int]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2))
    {
        if(playerid2 != INVALID_PLAYER_ID)
        {
            tmp = strtok(cmdtext, idx);
            new Int = strval(tmp);
			if(!strlen(tmp))
			{
                SendClientMessage(playerid, Gris, "USO: /setint [IdJugador/ParteDelNombre] [Int]");
                return 1;
			}
            format(Nombre2, sizeof(Nombre2),"%s", NombreJugador(playerid2));
            format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
            format(string, sizeof(string), "%s ha cambiado tu interior al %d.", Nombre, Int);
            SendClientMessage(playerid2, Azulito, string);
            format(string, sizeof(string), "Has cambiado el interior de %s al %d.", Nombre2, Int);
            SendClientMessage(playerid, Azulito, string);
            SetPlayerInterior(playerid2, Int);
            return 1;
        }
    }
    else
    {
        SendClientMessage(playerid, Rojo, "Jugador no encontrado");
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/abajo", true) == 0) //Bajar 2 metros
{
    if(JugadorInfo[playerid][pAdmin] < 1){return 1;}
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    SetPlayerPos(playerid, x, y, z-2);
    return 1;
}
	
//---------------------------------------------------------------------------------------------------------------
	
if(strcmp(cmd, "/arriba", true) == 0) //Subir 2 metros
{
    if(JugadorInfo[playerid][pAdmin] < 1){return 1;}
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    SetPlayerPos(playerid, x, y, z+2);
    return 1;
}
	
//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/este", true) == 0) //2 metros a la derecha
{
    if(JugadorInfo[playerid][pAdmin] < 1){return 1;}
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    SetPlayerPos(playerid, x+2, y, z);
    return 1;
}
	
//---------------------------------------------------------------------------------------------------------------
	
if(strcmp(cmd, "/oeste", true) == 0) //2 metros a la izquierda
{
    if(JugadorInfo[playerid][pAdmin] < 1){return 1;}
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    SetPlayerPos(playerid, x-2, y, z);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/norte", true) == 0) //2 metros adelante
{
    if(JugadorInfo[playerid][pAdmin] < 1){return 1;}
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    SetPlayerPos(playerid, x, y+2, z);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------
	
if(strcmp(cmd, "/sur", true) == 0) //2 metros atrás
{
    if(JugadorInfo[playerid][pAdmin] < 1){return 1;}
    new Float:x, Float:y, Float:z;
    GetPlayerPos(playerid, x, y, z);
    SetPlayerPos(playerid, x, y-2, z);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/gotopos", true) == 0) //Ir a unas coordenadas
{
	if(JugadorInfo[playerid][pAdmin] <= 3) { return 1; }
	if(AdminDuty[playerid] != 1)
	{
	    if(JugadorInfo[playerid][pAdmin] != 5)
	    {
	    	SendClientMessage(playerid, Rojo ,"No estás de servicio, el comando no te da ningún resultado.");
			return 1;
		}
	}
	tmp = strtok(cmdtext,idx);
	if(!strlen(tmp))
	{
	    SendClientMessage(playerid, Gris, "USO: /gotopos [Coor:x] [Coor:y] [Coor:z] [interior]");
	    return 1;
	}
	new Float:int_x;
	int_x = floatstr(tmp);
	tmp = strtok(cmdtext,idx);
	if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Gris, "USO: /gotopos [Coor:x] [Coor:y] [Coor:z] [interior]");
	    return 1;
    }
	new Float:int_y;
	int_y = floatstr(tmp);
	tmp = strtok(cmdtext,idx);
	if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Gris, "USO: /gotopos [Coor:x] [Coor:y] [Coor:z] [interior]");
	    return 1;
    }
    new Float:int_z;
	int_z = floatstr(tmp);
	tmp = strtok(cmdtext,idx);
	if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Gris, "USO: /gotopos [Coor:x] [Coor:y] [Coor:z] [interior]");
	    return 1;
    }
	new interior;
	interior = strval(tmp);
	format(string, sizeof(string), "Teleportado a las coordenadas X: %1.5f, Y: %1.5f, Z: %1.5f, INT: %d",int_x, int_y, int_z, interior);
	SendClientMessage(playerid, Azulito, string);
	SetPlayerPos(playerid, int_x, int_y, int_z);
	SetPlayerInterior(playerid, interior);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------
if(strcmp(cmd, "/torreadmin", true) == 0)
{
    if(IsPlayerConnected(playerid))
	{
		if(JugadorInfo[playerid][pAdmin] >= 2)
		{
        	SetPlayerPos(playerid, 1411.2642,-1484.3036,125.3630);
			SendClientMessage(playerid, Azulito, "Teletransportado a la torre administrativa.");
		}
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/camaralogin", true) == 0) //Ir a un sitio concreto
{
	if(IsPlayerConnected(playerid))
	{
	    LimpiarChat(playerid, 100);
	    SetPlayerWeather(playerid, 0);
	    SendClientMessage(playerid, COLOR_YELLOW, "Tu cuenta está certificada. Pero aún no está terminada, ahora debes configurar la apariencia de tu personaje.");
		TogglePlayerControllable(playerid, 0);
		SetPlayerPos(playerid, 327.1449,154.6473,1014.1875);
	    SetPlayerFacingAngle(playerid, 237.6667);
	    SetPlayerCameraPos(playerid, 330.8092, 152.5201, 1014.6987);
		SetPlayerCameraLookAt(playerid, 330.0157, 153.1263, 1014.6564);
	}
	return 1;
}

if(strcmp(cmd, "/probaranim", true) == 0) //Ir a un sitio concreto
{
	if(IsPlayerConnected(playerid))
	{
		if(JugadorInfo[playerid][pAdmin] >= 2)
		{
			new opcion[128], opcion2[128];
			if(AdminDuty[playerid] != 1)
			{
			    if(JugadorInfo[playerid][pAdmin] != 5)
			    {
			    	SendClientMessage(playerid, Rojo ,"No estás de servicio, el comando no te da ningún resultado.");
					return 1;
				}
			}
			opcion = strtok(cmdtext, idx);
			opcion2 = strtok(cmdtext, idx);
			LoopingAnim(playerid,opcion,opcion2,4.1,0,1,1,1,1);
		}
	}
	return 1;
}
if(strcmp(cmd, "/go", true) == 0) //Ir a un sitio concreto
{
	if(IsPlayerConnected(playerid))
	{
		if(JugadorInfo[playerid][pAdmin] >= 2)
		{
			new opcion[128];
			if(AdminDuty[playerid] != 1)
			{
			    if(JugadorInfo[playerid][pAdmin] != 5)
			    {
			    	SendClientMessage(playerid, Rojo ,"No estás de servicio, el comando no te da ningún resultado.");
					return 1;
				}
			}
			opcion = strtok(cmdtext, idx);
			if(!strlen(opcion))
			{
				SendClientMessage(playerid, Gris, "USO: /go [opción] ");
				SendClientMessage(playerid, COLOR_GREY, "Ayunta, Unity, Aeropuerto, Parque, Estadio, Centro");
				SendClientMessage(playerid, COLOR_GREY, "Vinewood, Autoescuela, Noria, Dillimore");
				SendClientMessage(playerid, COLOR_GREY, "PalominoCreek, Montgomery, Blueberry");
				return 1;
			}
			if(strcmp(opcion, "ls",true) == 8)
			{
			    if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1479.4290,-1697.7177,14.0469);
				}
				else
				{
					SetPlayerPos(playerid, 1479.4290,-1697.7177,14.0469);
				}
			}
			if(strcmp(opcion,"Ayunta",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1479.8407,-1732.0394,13.3828);
				}
				else
				{
					SetPlayerPos(playerid, 1479.8407,-1732.0394,13.3828);
				}
			}
			if(strcmp(opcion,"Unity",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1814.1198,-1876.0316,13.5781);
				}
				else
				{
					SetPlayerPos(playerid, 1814.1198,-1876.0316,13.5781);
				}
			}
			if(strcmp(opcion,"Aeropuerto",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1957.5502,-2336.6917,13.5469);
				}
				else
				{
				SetPlayerPos(playerid, 1957.5502,-2336.6917,13.5469);
				}
			}
			if(strcmp(opcion,"Parque",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1967.7217,-1178.1401,20.0307);
				}
				else
				{
				SetPlayerPos(playerid, 1967.7217,-1178.1401,20.0307);
				}
			}
			if(strcmp(opcion,"Estadio",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 2817.1675,-1853.7288,11.1749);
				}
				else
				{
					SetPlayerPos(playerid, 2817.1675,-1853.7288,11.1749);
				}
			}
			if(strcmp(opcion,"Centro",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1537.3672,-1292.1428,15.9839);
				}
				else
				{
					SetPlayerPos(playerid, 1537.3672,-1292.1428,15.9839);
				}
			}
			if(strcmp(opcion,"Noria",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 376.0127,-2028.3690,7.8301);
				}
				else
				{
					SetPlayerPos(playerid, 376.0127,-2028.3690,7.8301);
				}
			}
			if(strcmp(opcion,"Vinewood",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1167.1160,-934.8107,43.2174);
				}
				else
				{
					SetPlayerPos(playerid, 1167.1160,-934.8107,43.2174);
				}
			}
			if(strcmp(opcion,"Autoescuela",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 2074.2122,-1899.7969,13.5469);
				}
				else
				{
					SetPlayerPos(playerid, 2074.2122,-1899.7969,13.5469);
				}
			}
			if(strcmp(opcion,"Dillimore",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 674.0398,-606.6791,16.3359);
				}
				else
				{
					SetPlayerPos(playerid, 674.0398,-606.6791,16.3359);
				}
			}
			if(strcmp(opcion,"Montgomery",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1286.0684,260.0658,19.5469);
				}
				else
				{
					SetPlayerPos(playerid, 1286.0684,260.0658,19.5469);
				}
			}
			if(strcmp(opcion,"PalominoCreek",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 2300.8948,41.3189,26.4844);
				}
				else
				{
					SetPlayerPos(playerid, 2300.8948,41.3189,26.4844);
				}
			}
			if(strcmp(opcion,"Blueberry",true) == 0)
			{
				if(GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 189.5701,-204.1178,1.5781);
				}
				else
				{
					SetPlayerPos(playerid, 189.5701,-204.1178,1.5781);
				}
			}
		}
		else  {   }
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/ir", true) == 0) //Teleportarse a la posición de un jugador
{
    tmp = strtok(cmdtext, idx);
    if(JugadorInfo[playerid][pAdmin] <= 3){return 1;}
    if(AdminDuty[playerid] != 1)
	{
	    if(JugadorInfo[playerid][pAdmin] != 5)
	    {
	    	SendClientMessage(playerid, Rojo ,"No estás de servicio, el comando no te da ningún resultado.");
			return 1;
		}
	}
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /ir [IdJugador/ParteDelNombre]");
        return 1;
    }
    new Float:x, Float:y, Float:z;
    playerid2 = ReturnUser(tmp);
    format(Nombre2, sizeof(Nombre2),"%s", NombreJugador(playerid2));
    if(IsPlayerConnected(playerid2))
    {
        if(playerid2 != INVALID_PLAYER_ID)
        {
            GetPlayerPos(playerid2, x, y, z);
            SetPlayerInterior(playerid,GetPlayerInterior(playerid2));
            SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(playerid2));
            if(GetPlayerState(playerid) == 2)
            {
                new tmpcar = GetPlayerVehicleID(playerid);
                SetVehiclePos(tmpcar, x, y+2, z);
            }
            else
            {
                SetPlayerPos(playerid, x, y+0.5, z+2);
            }
            format(string, sizeof(string), "Teleportado a la posición de %s.", Nombre2);
            SendClientMessage(playerid, Azulito, string);
        }
    }
    else  {  SendClientMessage(playerid, Rojo, "Jugador no encontrado");  }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/traer", true) == 0) //Traer un jugador a tu posición
{
    tmp = strtok(cmdtext, idx);
    if(JugadorInfo[playerid][pAdmin] <= 3){return 1;}
    if(AdminDuty[playerid] != 1)
	{
	    if(JugadorInfo[playerid][pAdmin] != 5)
	    {
	    	SendClientMessage(playerid, Rojo ,"No estás de servicio, el comando no te da ningún resultado.");
			return 1;
		}
	}
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /traer [IdJugador/ParteDelNombre]");
        return 1;
    }
    new Float:x, Float:y, Float:z;
    playerid2 = ReturnUser(tmp);
    format(Nombre2, sizeof(Nombre2),"%s", NombreJugador(playerid2));
    format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
    if(IsPlayerConnected(playerid2))
    {
        if(playerid2 != INVALID_PLAYER_ID)
        {
            GetPlayerPos(playerid, x, y, z);
            SetPlayerInterior(playerid2,GetPlayerInterior(playerid));
            SetPlayerVirtualWorld(playerid2,GetPlayerVirtualWorld(playerid));
            if(GetPlayerState(playerid2) == 2)
            {
                new tmpcar = GetPlayerVehicleID(playerid2);
                SetVehiclePos(tmpcar, x, y+2, z);
            }
            else
            {
                SetPlayerPos(playerid2, x, y+0.5, z+1);
            }
            format(string, sizeof(string), "Has traido a %s a tu posición.", Nombre2);
            SendClientMessage(playerid, Azulito, string);
            format(string, sizeof(string), "%s te ha llevado a su posición.", Nombre);
            SendClientMessage(playerid2, -1, string);
        }
    }
    else  {  SendClientMessage(playerid, Rojo, "Jugador no encontrado");  }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/ircar", true) == 0) //Teleportarse a la posición de un vehículo
{
    tmp = strtok(cmdtext, idx);
    if(JugadorInfo[playerid][pAdmin] <= 3){return 1;}
    if(AdminDuty[playerid] != 1)
	{
	    if(JugadorInfo[playerid][pAdmin] != 5)
	    {
	    	SendClientMessage(playerid, Rojo ,"No estás de servicio, el comando no te da ningún resultado.");
			return 1;
		}
	}
	if(!strlen(tmp) || !IsNumeric(tmp))
	{
        SendClientMessage(playerid, Gris, "USO: /ircar [ID]");
        return 1;
	}
	new carid = strval(tmp);
	if(!IsValidVehicle(carid))
	{
    	SendClientMessage(playerid, Rojo, "ID inválida, vehículo no encontrado.");
    	return 1;
	}
    new Float:cx,Float:cy,Float:cz;
    GetVehiclePos(carid, cx, cy, cz);
	if(GetPlayerState(playerid) == 2)
	{
        SetVehiclePos(GetPlayerVehicleID(playerid), cx, cy, cz);
	}
	else
	{
        SetPlayerPos(playerid, cx, cy, (cz + 4.0));
	}
	SetPlayerVirtualWorld(playerid, CocheInfo[carid][cVirtualWorld]);
	SetPlayerInterior(playerid, CocheInfo[carid][cInterior]);
	format(string, sizeof(string), "Teleportado a la posición del vehículo %d.", carid);
    SendClientMessage(playerid, Azulito, string);
    return 1;
}
	
//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/traercar", true) == 0) //Traer un vehículo
{
    tmp = strtok(cmdtext, idx);
    if(JugadorInfo[playerid][pAdmin] < 4){return 1;}
    if(AdminDuty[playerid] != 1)
	{
	    if(JugadorInfo[playerid][pAdmin] != 5)
	    {
	    	SendClientMessage(playerid, Rojo ,"No estás de servicio, el comando no te da ningún resultado.");
			return 1;
		}
	}
	if(!strlen(tmp) || !IsNumeric(tmp))
	{
        SendClientMessage(playerid, Gris, "USO: /traercar [ID]");
        return 1;
	}
	new carid = strval(tmp);
	if(!IsValidVehicle(carid))
	{
    	SendClientMessage(playerid, Rojo, "ID inválida, vehículo no encontrado.");
    	return 1;
	}
    new Float:cx,Float:cy,Float:cz;
    GetPlayerPos(playerid, cx, cy, cz);
    SetVehiclePos(carid, cx, cy, cz);
    SetVehicleVirtualWorld(carid, GetPlayerVirtualWorld(playerid));
    LinkVehicleToInteriorEx(carid, GetPlayerInterior(playerid));
    SetPlayerPos(playerid, cx, cy, (cz + 4.0));
	format(string, sizeof(string), "Has traido a tu posición el vehículo %d.", carid);
    SendClientMessage(playerid, Azulito, string);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/gotocarllave", true) == 0) //Teleportarse a la posición de un vehículo mediante su llave
{
    tmp = strtok(cmdtext, idx);
    if(JugadorInfo[playerid][pAdmin] <= 3){return 1;}
    if(AdminDuty[playerid] != 1)
	{
	    if(JugadorInfo[playerid][pAdmin] != 5)
	    {
	    	SendClientMessage(playerid, Rojo ,"No estás de servicio, el comando no te da ningún resultado.");
			return 1;
		}
	}
	if(!strlen(tmp) || !IsNumeric(tmp))
	{
        SendClientMessage(playerid, Gris, "USO: /gotocarllave [Llave]");
        return 1;
	}
	new llave = strval(tmp);
	new VehEncontrado;
	for(new x=0; x<=TotalVeh; x++)
	{
    	if(CocheInfo[x][cLlave] == llave){VehEncontrado = x; break;}
	}
	if(VehEncontrado == 0){SendClientMessage(playerid, Rojo, "Llave inválida, vehículo no encontrado."); return 1;}
    new Float:cx,Float:cy,Float:cz;
    GetVehiclePos(VehEncontrado, cx, cy, cz);
	if(GetPlayerState(playerid) == 2)
	{
        SetVehiclePos(GetPlayerVehicleID(playerid), cx, cy, cz);
	}
	else
	{
        SetPlayerPos(playerid, cx, cy, (cz + 2.0));
	}
	SetPlayerVirtualWorld(playerid, CocheInfo[VehEncontrado][cVirtualWorld]);
	SetPlayerInterior(playerid, CocheInfo[VehEncontrado][cInterior]);
	format(string, sizeof(string), "Teleportado a la posición del vehículo con llave %d.", llave);
    SendClientMessage(playerid, Azulito, string);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/getcarllave", true) == 0) //Traer un vehículo mediante su llave
{
    tmp = strtok(cmdtext, idx);
    if(JugadorInfo[playerid][pAdmin] < 4){return 1;}
    if(AdminDuty[playerid] != 1)
	{
	    if(JugadorInfo[playerid][pAdmin] != 5)
	    {
	    	SendClientMessage(playerid, Rojo ,"No estás de servicio, el comando no te da ningún resultado.");
			return 1;
		}
	}
	if(!strlen(tmp) || !IsNumeric(tmp))
	{
        SendClientMessage(playerid, Gris, "USO: /getcarllave [Llave]");
        return 1;
	}
	new llave = strval(tmp);
	new VehEncontrado;
	for(new x=0; x<=TotalVeh; x++)
	{
    	if(CocheInfo[x][cLlave] == llave){VehEncontrado = x; break;}
	}
	if(VehEncontrado == 0){SendClientMessage(playerid, Rojo, "Llave inválida, vehículo no encontrado."); return 1;}
    new Float:px,Float:py,Float:pz;
    GetPlayerPos(playerid, px, py, pz);
    SetVehiclePos(VehEncontrado, px, py, pz);
    SetVehicleVirtualWorld(VehEncontrado, GetPlayerVirtualWorld(playerid));
    LinkVehicleToInteriorEx(VehEncontrado, GetPlayerInterior(playerid));
    SetPlayerPos(playerid, px, py, (pz + 2.0));
	format(string, sizeof(string), "Has traido a tu posición el vehículo con llave %d.", llave);
    SendClientMessage(playerid, Azulito, string);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/congelar", true) == 0 || strcmp(cmd, "/con", true) == 0) //Congelar a un jugador
{
    tmp = strtok(cmdtext, idx);
    if(JugadorInfo[playerid][pAdmin] < 3){return 1;}
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: (/con)gelar [IdJugador/ParteDelNombre]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    format(Nombre2, sizeof(Nombre2),"%s", NombreJugador(playerid2));
    format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
    if(IsPlayerConnected(playerid2))
    {
        if(playerid2 != INVALID_PLAYER_ID)
        {
			TogglePlayerControllable(playerid2, 0);
            format(string, sizeof(string), "Has congelado a %s.", Nombre2);
            SendClientMessage(playerid, Azulito, string);
            format(string, sizeof(string), "Has sido congelado por %s.", Nombre);
            SendClientMessage(playerid2, Azulito, string);
        }
    }
    else  {  SendClientMessage(playerid, Rojo, "Jugador no encontrado");  }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/descongelar", true) == 0 || strcmp(cmd, "/descon", true) == 0) //Descongelar a un jugador
{
    tmp = strtok(cmdtext, idx);
    if(JugadorInfo[playerid][pAdmin] < 3){return 1;}
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: (/descon)gelar [IdJugador/ParteDelNombre]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    format(Nombre2, sizeof(Nombre2),"%s", NombreJugador(playerid2));
    format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
    if(IsPlayerConnected(playerid2))
    {
        if(playerid2 != INVALID_PLAYER_ID)
        {
			TogglePlayerControllable(playerid2, 1);
            format(string, sizeof(string), "Has descongelado a %s.", Nombre2);
            SendClientMessage(playerid, Azulito, string);
            format(string, sizeof(string), "Has sido descongelado por %s.", Nombre);
            SendClientMessage(playerid2, Azulito, string);
        }
    }
    else  {  SendClientMessage(playerid, Rojo, "Jugador no encontrado");  }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/recon", true) == 0) //Reconear a alguien
{
		if(JugadorInfo[playerid][pAdmin] <= 2 && !IsPlayerAdmin(playerid)){return 1;}
        tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp)){SendClientMessage(playerid, Gris, "USO: /recon [IdJugador/ParteDelNombre]"); return 1;}
    	new specplayerid;
        specplayerid = ReturnUser(tmp);
        if(IsPlayerConnected(specplayerid) && specplayerid != INVALID_PLAYER_ID)
		{
		    if(specplayerid == playerid)
			{ SendClientMessage(playerid, Rojo, "No te puedes reconear a tí mismo."); return 1; }
            if(GetPlayerState(specplayerid) == PLAYER_STATE_SPECTATING && JugadorInfo[playerid][pSpecID] != INVALID_PLAYER_ID)
			{ SendClientMessage(playerid, Rojo, "Este jugador está reconeando."); return 1; }
			if(GetPlayerState(specplayerid) != 1 && GetPlayerState(specplayerid) != 2 && GetPlayerState(specplayerid) != 3)
			{ SendClientMessage(playerid, Rojo, "Jugador no encontrado"); return 1; }
			if(GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && JugadorInfo[playerid][pSpecID] == INVALID_PLAYER_ID)
			{
				GetPlayerPos(playerid,RecPos[playerid][0],RecPos[playerid][1],RecPos[playerid][2]);
				GetPlayerPos(playerid,JugadorInfo[playerid][pPosX],JugadorInfo[playerid][pPosY],JugadorInfo[playerid][pPosZ]);
				GetPlayerFacingAngle(playerid,RecPos[playerid][3]);
				IntRec[playerid] = (GetPlayerInterior(playerid));
				VwRec[playerid] = (GetPlayerVirtualWorld(playerid));
				JugadorInfo[playerid][pInterior] = IntRec[playerid];
	            JugadorInfo[playerid][pVirtualWorld] = VwRec[playerid];
			}
            StartSpectate(playerid, specplayerid);
			format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
			format(Nombre2, sizeof(Nombre2),"%s", NombreJugador(specplayerid));
			printf("%s esta reconeando a %s.", Nombre, Nombre2);
			
			format(string,sizeof(string),"Recon en %d: %s. Dinero %d$. Nivel %d. Puntos Rol: +%d, -%d. Advertencias: %d.", specplayerid, Nombre2, JugadorInfo[specplayerid][pDineroMano], JugadorInfo[specplayerid][pNivel], JugadorInfo[specplayerid][pPuntosRol], JugadorInfo[specplayerid][pPuntosRolNo], JugadorInfo[specplayerid][pAdvertencias]);
	 	    SendClientMessage(playerid,COLOR_YELLOW,string);
		}
		else { SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); }
		return 1;
}
	
//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/reconoff", true) == 0) //Dejar de reconear
{
    if(JugadorInfo[playerid][pAdmin] < 2){return 1;}
	if(JugadorInfo[playerid][pSpecType] != ADMIN_SPEC_TYPE_NONE)
	{
		StopSpectate(playerid);
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("ReturnPosition",500,0,"d",playerid);
		SendClientMessage(playerid,-1,"Has dejado de reconear.");
	}
	else { SendClientMessage(playerid,Rojo,"No estás reconeando a nadie."); }
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/gotomark", true) == 0) //Ir a una posición guardada
{
    if(JugadorInfo[playerid][pAdmin] <= 3){return 1;}
    if(AdminDuty[playerid] != 1)
	{
	    if(JugadorInfo[playerid][pAdmin] != 5)
	    {
	    	SendClientMessage(playerid, Rojo ,"No estás de servicio, el comando no te da ningún resultado.");
			return 1;
		}
	}
    if(MarkVW[playerid] == 0 && MarkI[playerid] == 0 && MarkX[playerid] == 0 && MarkY[playerid] == 0 && MarkZ[playerid] == 0 && MarkA[playerid] == 0){SendClientMessage(playerid, Rojo ,"Utiliza antes el comando /mark para guardar una posición."); return 1;}
    SetPlayerVirtualWorld(playerid, MarkVW[playerid]);
    SetPlayerInterior(playerid, MarkI[playerid]);
    SetPlayerPos(playerid, MarkX[playerid], MarkY[playerid], MarkZ[playerid]);
    SetPlayerFacingAngle(playerid, MarkA[playerid]);
    SendClientMessage(playerid, Azulito, "Teleportado a la posición guardada.");
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/mark", true) == 0) //Guardar una posición
{
    if(JugadorInfo[playerid][pAdmin] <= 4){return 1;}
    GetPlayerPos(playerid, MarkX[playerid], MarkY[playerid], MarkZ[playerid]);
    GetPlayerFacingAngle(playerid, MarkA[playerid]);
    MarkI[playerid] = GetPlayerInterior(playerid);
    MarkVW[playerid] = GetPlayerVirtualWorld(playerid);
    SendClientMessage(playerid, Azulito, "Posición guardada.");
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/ajail", true) == 0) //Jailear jugadores
{
    if(JugadorInfo[playerid][pAdmin] <= 4){return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /ajail [IdJugador/ParteDelNombre] [Tiempo] [Razón]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    tmp = strtok(cmdtext, idx);
    new time = strval(tmp);
    if(!IsNumeric(tmp) && !strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /ajail [IdJugador/ParteDelNombre] [Tiempo] [Razón]");
        return 1;
    }
    if(time < 0){SendClientMessage(playerid, Rojo, "No puedes poner un tiempo negativo."); return 1;}
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
    {
        new length = strlen(cmdtext);
        while ((idx < length) && (cmdtext[idx] <= ' '))
        {
            idx++;
        }
        new offset = idx;
        new result[128];
        while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
        {
            result[idx - offset] = cmdtext[idx];
            idx++;
        }
        result[idx - offset] = EOS;
        if(!strlen(result))
        {
            SendClientMessage(playerid, Gris, "USO: /ajail [IdJugador/ParteDelNombre] [Tiempo] [Razón]");
            return 1;
        }
        format(Nombre2, sizeof(Nombre2),"%s", NombreJugador(playerid2));
        format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
        format(string, sizeof(string), "[Siglo-XXI]: %s ha encarcelado a %s por %d minutos. Motivo: %s", Nombre, Nombre2, time, (result));
        SendClientMessageToAll(Rojo, string);
        printf("%s ha encarcelado a %s %d minutos por: %s", Nombre, Nombre2, time, (result));
        JugadorInfo[playerid2][pEncarcelado] = 3;
        JugadorInfo[playerid2][pTiempoCarcel] = time;
        if(time <= 0){UnJailPlayerOOC(playerid2); return 1;}
        SetTimerEx("JailPlayerOOC",100,0,"d",playerid2);
    }
    else
    {
        SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado");
    }
    return 1;
}

if(strcmp(cmd, "/desbug", true) == 0) //Desbuguear jugadores
{
    if(JugadorInfo[playerid][pAdmin] < 4){return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /desbug [IdJugador/ParteDelNombre]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(IsPlayerConnected(playerid2) && playerid2 != INVALID_PLAYER_ID)
    {
        format(Nombre2, sizeof(Nombre2),"%s", NombreJugador(playerid2));
        format(Nombre, sizeof(Nombre),"%s", NombreJugador(playerid));
        format(string, sizeof(string), "Has desbugueado y envíado al Centro Comercial a %s.", Nombre2);
        SendClientMessage(playerid, Rojo, string);
        format(string, sizeof(string), "Has sido desbugueado y envíado al Centro Comercial por %s.", Nombre);
        SendClientMessage(playerid2, Rojo, string);
        printf("%s ha desbugueado a %s", Nombre, Nombre2);
		SetPlayerFacingAngle(playerid2, 270);
		SetPlayerVirtualWorld(playerid2, 0);
		SetPlayerInterior(playerid2, 0);
		SetPlayerPos(playerid2, 1089.3743,-1490.7974,22.7622);
		SetCameraBehindPlayer(playerid2);
		PlayerPlaySound(playerid2,1057,0.0,0.0,0.0);
	}
	else
    {
        SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado");
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/payday", true) == 0) //Fuerza el payday
{
    if(JugadorInfo[playerid][pAdmin] <= 4){return 1;}
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        JugadorInfo[i][pMinPayDay] = 21;
		PayDay(i);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/listaobjetos", true) == 0) //Lista de nombre de objetos
{
    if(JugadorInfo[playerid][pAdmin] < 1){return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
    	SendClientMessage(playerid, Gris, "USO: /listaobjetos [1: 0-50 | 2: 50-100 | 3: 100-150 | 4: 150-200]");
		return 1;
	}
	new indice = strval(tmp);
	switch(indice)
	{
	    case 1:
	    {
	        for(new i = 0; i <= 50; i++)
		    {
				format(string, sizeof(string), "%d: %s", i, ObjetoInfo[i][NombreObjeto]);
		        SendClientMessage(playerid, Amarillo, string);
		    }
	    }
	    case 2:
	    {
	        for(new i = 50; i <= 100; i++)
		    {
				format(string, sizeof(string), "%d: %s", i, ObjetoInfo[i][NombreObjeto]);
		        SendClientMessage(playerid, Amarillo, string);
		    }
	    }
	    case 3:
	    {
	        for(new i = 100; i <= 150; i++)
		    {
				format(string, sizeof(string), "%d: %s", i, ObjetoInfo[i][NombreObjeto]);
		        SendClientMessage(playerid, Amarillo, string);
		    }
	    }
	    case 4:
	    {
	        for(new i = 150; i <= sizeof(ObjetoInfo); i++)
		    {
				format(string, sizeof(string), "%d: %s", i, ObjetoInfo[i][NombreObjeto]);
		        SendClientMessage(playerid, Amarillo, string);
		    }
	    }
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/revivir", true) == 0)
{
	if(JugadorInfo[playerid][pAdmin] < 4){return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
    	SendClientMessage(playerid, Gris, "USO: /revivir [IdJugador/ParteDelNombre]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
	if((playerid2 == INVALID_PLAYER_ID) || !IsPlayerConnected(playerid2))
	{
		SendClientMessage(playerid, Rojo, "Jugador no encontrado");
		return 1;
	}
	if(JugadorInfo[playerid2][pMuerto] == 0){SendClientMessage(playerid, Rojo, "Este jugador no necesita ser reanimado."); return 1;}
    RemovePlayerFromVehicle(playerid2);
    SetCameraBehindPlayer(playerid2);
	format(string, sizeof(string), "[Siglo-XXI]: %s ha liberado a %s (ID: %d) de su estado de muerte.", NombreJugador(playerid), NombreJugador(playerid2), playerid2);
    SendAdminMessage(COLOR_YELLOW, string);
    format(string, sizeof(string), "Has liberado a %s (ID: %d) de su estado de muerte.", NombreJugador(playerid2), playerid2);
    SendClientMessage(playerid, COLOR_PIEL, string);
    format(string, sizeof(string), "El administrador %s te ha liberado de tu estado de muerte.", NombreJugador(playerid));
    SendClientMessage(playerid2, Azulito, string);
    printf(string);
	JugadorInfo[playerid2][pMuerto] = 0;
	KillTimer(MuertoTimer[playerid2]);
	KillTimer(AhoraMorirTimer[playerid2]);
	KillTimer(MuertoFlashTimer[playerid2]);
	ClearAnimations(playerid2, 1);
	TogglePlayerControllable(playerid2, 1);
	SetPlayerHealth(playerid2, 65);
	RemovePlayerColorFade(playerid2);
	Delete3DTextLabel(Yo3DText[playerid2]);
    RecibioHeadShot[playerid2] = 0; RecibioDisparo[playerid2] = 0;
    for(new i = 0; zInfo:i < zInfo; i++) { HeridasInfo[playerid2][zInfo:i] = 0; } // Reinicia todas las heridas a 0
    Delete3DTextLabel(Heridas[playerid2]);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/setskin", true) == 0) //Dar un skin a un jugador
{
    if(JugadorInfo[playerid][pAdmin] < 1){return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /setskin [IdJugador/ParteDelNombre] [skin]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /setskin [IdJugador/ParteDelNombre] [skin]");
        return 1;
    }
    new SkinID = strval(tmp);
    if(SkinID < 1 || SkinID >= 312){SendClientMessage(playerid, Rojo, "El skin debe estar entre 1 y 311."); return 1;}
    SetPlayerSkin(playerid2, SkinID);
    JugadorInfo[playerid2][pSkin] = SkinID;
	format(string, sizeof(string), "%s te ha dado el skin %d.", NombreJugador(playerid), SkinID);
	SendClientMessage(playerid2, Azulito, string);
	format(string, sizeof(string), "Has dado el skin %d a %s.", SkinID, NombreJugador(playerid2));
	SendClientMessage(playerid, Azulito, string);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

//----------COMANDOS VEHÍCULOS----------//

if(strcmp(cmd, "/carid", true) == 0) //Retorna la ID del vehículo
{
	if(!IsPlayerInAnyVehicle(playerid)){SendClientMessage(playerid, Rojo, "No estás en un vehículo."); return 1;}
	new carid = GetPlayerVehicleID(playerid);
	format(string, sizeof(string), "ID vehículo: %d.", carid);
	SendClientMessage(playerid, Naranja, string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/oldcar", true) == 0) //Retorna la ID del vehículo en el que subió
{
	format(string, sizeof(string), "ID último vehículo en el que montaste: %d.", oldcarid[playerid]);
	SendClientMessage(playerid, Naranja, string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/cinturon", true) == 0) //Pone/quita cinturón de seguridad
{
    if(!GetPlayerVehicleID(playerid)){SendClientMessage(playerid, Rojo, "No estás en un vehículo."); return 1;}
    new car = GetPlayerVehicleID(playerid);
    if(IsABike(car) || IsAMBike(car) || IsABoat(car)){SendClientMessage(playerid, Rojo, "Este vehículo no tiene cinturón."); return 1;}
    if(CinturonPuesto[playerid] == 0) //Ponerse cinturón
    {
        CinturonPuesto[playerid] = 1;
        format(string, sizeof(string), "%s se abrocha el cinturón de seguridad.", NombreJugadorProxy(playerid));
 	    ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
    }
    else //Quitarse cinturón
    {
        format(string, sizeof(string), "%s se desabrocha el cinturón de seguridad.", NombreJugadorProxy(playerid));
 	    ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
        CinturonPuesto[playerid] = 0;
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/encendermotor", true) == 0) //Encender motor de un vehículo
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER){SendClientMessage(playerid, Rojo, "No estás en un vehículo como conductor."); return 1;}
	new car = GetPlayerVehicleID(playerid);
	if(IsABike(car)){SendClientMessage(playerid, Rojo, "Este vehículo no tiene motor."); return 1;}
	EncenderMotorF(playerid, car);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/luces", true) == 0) //Encender luces de un vehículo
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER){SendClientMessage(playerid, Rojo, "No estás en un vehículo como conductor."); return 1;}
    new car = GetPlayerVehicleID(playerid);
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
    if(lights == 0)SetVehicleParamsEx(car,engine,1,alarm,doors,bonnet,boot,objective);
    else SetVehicleParamsEx(car,engine,0,alarm,doors,bonnet,boot,objective);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/prestarllave", true) == 0) //Prestar llave
{
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /prestarllave [IdJugador/ParteDelNombre] [1/2/3/4/5]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(playerid2 == playerid){SendClientMessage(playerid,Rojo,"No te puedes prestar la llave a tí mismo."); return 1;}
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /prestarllave [IdJugador/ParteDelNombre] [1/2/3/4/5]");
        return 1;
    }
    new slot = strval(tmp);
    if(slot < 1 || slot > 5){SendClientMessage(playerid, Rojo, "El slot debe estar entre 1 y 5."); return 1;}
	if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "Demasiado lejos."); return 1;}
	if(JugadorInfo[playerid][pLlaveCoche][slot-1] == 0){SendClientMessage(playerid, Rojo, "No tienes ninguna llave en ese slot."); return 1;}
	new tieneslotlibre = -1;
	for(new x=0; x<5; x++)
	{
	    if(JugadorInfo[playerid2][pLlaveCochePrestado][x] == 0){tieneslotlibre = x; break;}
	}
	if(tieneslotlibre == -1){SendClientMessage(playerid, Rojo, "Ese jugador tiene todas las llaves de vehículos prestados ocupados."); return 1;}
	
	new yatienellave = -1;
	for(new x=0; x<5; x++)
	{
	    if(JugadorInfo[playerid][pLlaveCoche][slot-1] != JugadorInfo[playerid2][pLlaveCochePrestado][x]){yatienellave = x;break;}
	}
	if(yatienellave == -1){SendClientMessage(playerid, Rojo, "Ese jugador ya tiene una llave prestada de ese vehículo."); return 1;}
	
	PrestadorCoche[playerid2] = playerid; // /PrestarLlave
    LlavePrestada[playerid2] = JugadorInfo[playerid][pLlaveCoche][slot-1];
    
	format(string, sizeof(string), "Has ofrecido la llave de tu vehículo SA-%d a %s. Espera una respuesta.", JugadorInfo[playerid][pLlaveCoche][slot-1], NombreJugador(playerid2));
	SendClientMessage(playerid, Amarillo, string);
	format(string, sizeof(string), "%s te ha ofrecido la llave de tu vehículo SA-%d. Escribe '/aceptar llave' para aceptarla.", NombreJugador(playerid), JugadorInfo[playerid][pLlaveCoche][slot-1]);
	SendClientMessage(playerid2, Amarillo, string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/tirarllave", true) == 0) //Tirar llave prestada
{
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /tirarllave [6/7/8/9/10]");
        return 1;
    }
    new slot = strval(tmp);
    if(slot < 6 || slot > 10){SendClientMessage(playerid, Rojo, "El slot debe estar entre 6 y 10."); return 1;}
	if(JugadorInfo[playerid][pLlaveCochePrestado][slot-6] == 0){SendClientMessage(playerid, Rojo, "No tienes ninguna llave en ese slot."); return 1;}

 	AutoRol(playerid, "tira la llave de su coche al suelo.");
	format(string, sizeof(string), "Has tirado la llave del vehículo SA-%d.", JugadorInfo[playerid][pLlaveCochePrestado][slot-6]);
	SendClientMessage(playerid, Amarillo, string);
	
	JugadorInfo[playerid][pLlaveCochePrestado][slot-6] = 0;
	return 1;
}
//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/bloqueo", true) == 0) //Abrir o cerrar vehículo
{
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /bloqueo [1/2/3/4/5|6/7/8/9/10]");
        return 1;
    }
    new slot = strval(tmp);
    if(slot < 1 || slot > 10){SendClientMessage(playerid, Rojo, "El número del slot debe estar entre 1 y 5."); return 1;}
    if(slot < 6)
    {
    	if(JugadorInfo[playerid][pLlaveCoche][slot-1] == 0){SendClientMessage(playerid, Rojo, "No tienes ninguna llave en ese slot."); return 1;}
    }
    else if(slot < 11)
    {
    	if(JugadorInfo[playerid][pLlaveCochePrestado][slot-6] == 0){SendClientMessage(playerid, Rojo, "No tienes ninguna llave en ese slot."); return 1;}
    }
	new car;
	if(slot < 6)
	{
		for(new x=MAX_VEHPUBLICO+1; x <= TotalVeh; x++)
		{
		    if(CocheInfo[x][cLlave] == JugadorInfo[playerid][pLlaveCoche][slot-1]){car = x; break;}
		}
	}
	else if(slot < 11)
	{
		for(new x=MAX_VEHPUBLICO+1; x <= TotalVeh; x++)
		{
		    if(CocheInfo[x][cLlave] == JugadorInfo[playerid][pLlaveCochePrestado][slot-6]){car = x; break;}
		}
	}
	new Float:vX, Float:vY, Float:vZ;
	GetVehiclePos(car, vX, vY, vZ);
	if(!IsPlayerInRangeOfPoint(playerid, 20, vX, vY, vZ)){SendClientMessage(playerid, Rojo, "Debes estar a menos de 20 metros."); return 1;}
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
    
    new nombre[128];
  	if(Mascara[playerid] == 0) { format(nombre, sizeof(nombre), "[ID: %i]", playerid); }
    else { format(nombre, sizeof(nombre), "%s", NombreJugadorProxy(playerid)); }
        
	if(CocheInfo[car][cCerrado] == 0 && !IsABike(car))
	{
		SetVehicleParamsEx(car,engine,lights,alarm,1,bonnet,boot,objective);
		CocheInfo[car][cCerrado] = 1;
		GameTextForPlayer(playerid, "~w~COCHE~r~ CERRADO", 3000, 3);
		format(string, sizeof(string), "%s saca el control remoto de su coche y cierra su %s.", NombreJugadorProxy(playerid), GetVehicleName(car));
		ProxDetector(15.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		format(string, sizeof(string), "%s * Twick, Twick *", nombre);
 	    ProxDetector(15.0, playerid, string,COLOR_GREENDO,COLOR_GREENDO,COLOR_GREENDO,COLOR_GREENDO,COLOR_GREENDO);
	}
    else
	{
	    if(!IsABike(car))
		{
			SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
			CocheInfo[car][cCerrado] = 0;
			GameTextForPlayer(playerid, "~w~COCHE~g~ ABIERTO", 3000, 3);
			format(string, sizeof(string), "%s saca el control remoto de su coche y abre su %s.", NombreJugadorProxy(playerid), GetVehicleName(car));
			ProxDetector(15.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
			format(string, sizeof(string), "%s * Twick, Twick *", nombre);
	 	    ProxDetector(15.0, playerid, string,COLOR_GREENDO,COLOR_GREENDO,COLOR_GREENDO,COLOR_GREENDO,COLOR_GREENDO);
		}
	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/gas", true) == 0) //Mirar combustible del vehículo
{
    if(!GetPlayerVehicleID(playerid)){SendClientMessage(playerid, Rojo, "No estás en un vehículo."); return 1;}
    new carid = GetPlayerVehicleID(playerid);
    format(string, sizeof(string), "Cantidad de combustible en el depósito: %dL.", CocheInfo[carid][cGas]);
    SendClientMessage(playerid, AmarilloClaro, string);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/usarlata", true) == 0)
{
    new Float:cx,Float:cy,Float:cz;
    for(new carid=0; carid <= MAX_VEHICLES; carid++)
    {
        GetVehiclePos(carid, cx, cy, cz);
    	if(IsPlayerInRangeOfPoint(playerid, 6.0, cx,cy,cz))
		{
            if(JugadorInfo[playerid][pManoDer] == 125)
			{
			    if(IsABike(carid)){SendClientMessage(playerid, Rojo, "Este vehículo no puede ser llenado."); return 1;}
				if(CocheInfo[carid][cGas] >= 100){SendClientMessage(playerid, Rojo, "Este vehículo tiene el depósito lleno."); return 1;}
			    if(JugadorInfo[playerid][pManoDerCant] < 1) { return 1; }
  				CocheInfo[carid][cGas] += JugadorInfo[playerid][pManoDerCant];
				AutoRol(playerid, "rellena el deposito del coche con su Lata de combustible.");
				JugadorInfo[playerid][pManoDerCant] = 0;
				return 1;
			}
			else SendClientMessage(playerid, Rojo, "No tienes lata de combustible");
		    return 1;
  		}
  	}
	return 1;
}

if(strcmp(cmd, "/llenarlata", true) == 0)
{
    if(IsPlayerInRangeOfPoint(playerid, 8.0, 1942.3715,-1772.8678,13.6406)){} //Si no está en una gasolinera
    else if(IsPlayerInRangeOfPoint(playerid, 8.0, 1004.0308,-937.5370,42.3281)){}
    else if(IsPlayerInRangeOfPoint(playerid, 8.0, 655.8026,-564.9006,16.3359)){}
    else if(IsPlayerInRangeOfPoint(playerid, 8.0, 1382.3381,460.1285,20.3452)){}
    else if(IsPlayerInRangeOfPoint(playerid, 8.0, -90.7019,-1168.8009,2.4183)){}
    else if(IsPlayerInRangeOfPoint(playerid, 8.0, 2485.1809,-2078.8872,13.5469)){}
    else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1715.4421,-1101.9237,23.8213)){}
    else{SendClientMessage(playerid, Rojo, "No estás en una gasolinera."); return 1;}
    if(GetPlayerMoney(playerid) < 50){SendClientMessage(playerid, Rojo, "No tienes cincuenta dólares"); return 1;}
	if(JugadorInfo[playerid][pManoDer] == 125)
	{
	    if(JugadorInfo[playerid][pManoDerCant] < 20)
	 	{
	 	    SendClientMessage(playerid, COLOR_GREEN, "Llenas tu lata de combustible");
			JugadorInfo[playerid][pManoDerCant] = 20;
			GivePlayerMoneyAC(playerid, -50);
	 	}
    }
	return 1;
}


if(strcmp(cmd, "/rellenar", true) == 0) //Llenar depósito de un vehículo
{
	if(LlenandoDeposito[playerid] == 1){SendClientMessage(playerid, Rojo, "Ya estás rellenando el depósito."); return 1;}
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER){SendClientMessage(playerid, Rojo, "No estás en un vehículo como conductor."); return 1;}
    new carid = GetPlayerVehicleID(playerid);
    if(IsABike(carid)){SendClientMessage(playerid, Rojo, "Este vehículo no puede ser llenado."); return 1;}
    if(CocheInfo[carid][cGas] >= 100){SendClientMessage(playerid, Rojo, "Este vehículo tiene el depósito lleno."); return 1;}
    if(IsPlayerInRangeOfPoint(playerid, 8.0, 1942.3715,-1772.8678,13.6406)){} //Si no está en una gasolinera
    else if(IsPlayerInRangeOfPoint(playerid, 8.0, 1004.0308,-937.5370,42.3281)){}
    else if(IsPlayerInRangeOfPoint(playerid, 8.0, 655.8026,-564.9006,16.3359)){}
    else if(IsPlayerInRangeOfPoint(playerid, 8.0, 1382.3381,460.1285,20.3452)){}
    else if(IsPlayerInRangeOfPoint(playerid, 8.0, -90.7019,-1168.8009,2.4183)){}
    else if(IsPlayerInRangeOfPoint(playerid, 8.0, 2485.1809,-2078.8872,13.5469)){}
    else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1715.4421,-1101.9237,23.8213)){}
    else{SendClientMessage(playerid, Rojo, "No estás en una gasolinera."); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /rellenar [Cantidad]");
        return 1;
    }
    new cantidad = strval(tmp);
    if(cantidad < 0 || cantidad > 100){SendClientMessage(playerid, Rojo, "La cantidad debe estar entre 1 y 100."); return 1;}
    new precio = (cantidad*1);
    if(GetPlayerMoney(playerid) < precio){format(string, sizeof(string), "No tienes suficiente dinero (%d$).", precio); SendClientMessage(playerid, Rojo, string); return 1;}
    TogglePlayerControllable(playerid, 0);
    if((100-CocheInfo[carid][cGas]) < cantidad)cantidad = (100-CocheInfo[carid][cGas]), precio = cantidad*1; //Si cantidad es mayor a capacidad del depósito, hacer la resta y ajustar precio
    CocheInfo[carid][cGas] += cantidad; //Dar combustible al coche
    SendClientMessage(playerid, COLOR_GREEN, "El funcionario de servicio se acercó a tu vehículo y empezó a llenarlo con gasolina.");
    CantidadLlenar[playerid] = cantidad;
	PrecioLlenar[playerid] = precio;
	GivePlayerMoneyAC(playerid, -precio);
	LlenandoDeposito[playerid] = 1;
	SetTimerEx("LlenarDeposito", 7000, false, "i", playerid);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/venderveh", true) == 0) //Vender vehículo al desguace
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER){SendClientMessage(playerid, Rojo, "No estás en un vehículo como conductor."); return 1;}
	if(GetPlayerVehicleID(playerid) <= MAX_VEHPUBLICO){SendClientMessage(playerid, Rojo, "No eres dueño de este vehículo."); return 1;}
	new EsPropietario;
	for(new x=0; x<5; x++)
	{
	    if(CocheInfo[GetPlayerVehicleID(playerid)][cLlave] == JugadorInfo[playerid][pLlaveCoche][x])EsPropietario = 1;
	}
    if(EsPropietario == 0){SendClientMessage(playerid, Rojo, "No eres dueño de este vehículo."); return 1;}
    new carid = GetPlayerVehicleID(playerid);
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, 2274.1028,-2345.5371,13.5469) && !IsPlayerInRangeOfPoint(playerid, 8.0, 2294.3999000,-2447.8000500,0.0000000))
	{
		if(!IsABoat(carid)){SetPlayerCheckpoint(playerid, 2274.1028,-2345.5371,13.5469, 4.0);}
		if(IsABoat(carid)){SetPlayerCheckpoint(playerid, 2294.3999,-2447.8000,0.0000, 4.0);}
		SendClientMessage(playerid, Rojo, "No estás en el desguace.");
		return 1;
	}
	new precio = (3*CocheInfo[carid][cValor]/5);
	if(VenderVeh[playerid] == 0)
	{
	    format(string, sizeof(string), "¿Estás seguro de que deseas vender tu %s al desguace? Recibirás 3/5 de su valor por él (%d$).", CocheInfo[carid][cNombreModelo], precio);
		SendClientMessage(playerid, Amarillo, string);
		SendClientMessage(playerid, Amarillo, "Escribe '/venderveh' de nuevo para realizar la venta.");
		VenderVeh[playerid] = 1;
	}
	else
	{
	    for(new x=0; x<5; x++)
		{
		    if(CocheInfo[carid][cLlave] == JugadorInfo[playerid][pLlaveCoche][x])JugadorInfo[playerid][pLlaveCoche][x] = 0;
		}
	    format(string, sizeof(string), "Recibes %d$ por tu %s.", precio, CocheInfo[carid][cNombreModelo]);
		SendClientMessage(playerid, Verde, string);
		DestroyVehicle(carid);
		CocheInfo[carid][cLlave] = 0;
		CocheInfo[idx][cModelo] = 0;
		CocheInfo[idx][cPosX] = 0;
		CocheInfo[idx][cPosY] = 0;
		CocheInfo[idx][cPosZ] = 0;
		CocheInfo[idx][cZAngle] = 0;
		CocheInfo[idx][cColor1] = 0;
		CocheInfo[idx][cColor2] = 0;
		CocheInfo[idx][cComprado] = 0;
		CocheInfo[idx][cDueno] = 0;
		CocheInfo[idx][cNombreModelo] = 0;
		CocheInfo[idx][cValor] = 0;
		CocheInfo[idx][cCerrado] = 0;
		CocheInfo[idx][cGas] = 0;
		CocheInfo[idx][cEnDeposito] = 0;
		for(new x=0; x<=CocheInfo[idx][cMaxMaletero]; x++)
		{
			CocheInfo[idx][cMaletero][x] = 0;
		}
		for(new x=0; x<=CocheInfo[idx][cMaxMaletero]; x++)
		{
			CocheInfo[idx][cMaleteroCant][x] = 0;
		}
		CocheInfo[idx][cMaxMaletero] = 0;
		GivePlayerMoneyAC(playerid, precio);
	    VenderVeh[playerid] = 0;
	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/venderveha", true) == 0) //Vender vehículo a otro jugador
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER){SendClientMessage(playerid, Rojo, "No estás en un vehículo como conductor."); return 1;}
	if(GetPlayerVehicleID(playerid) <= MAX_VEHPUBLICO){SendClientMessage(playerid, Rojo, "No eres dueño de este vehículo."); return 1;}
	new EsPropietario;
	for(new x=0; x<5; x++)
	{
	    if(CocheInfo[GetPlayerVehicleID(playerid)][cLlave] == JugadorInfo[playerid][pLlaveCoche][x])EsPropietario = 1;
	}
    if(EsPropietario == 0){SendClientMessage(playerid, Rojo, "No eres dueño de este vehículo."); return 1;}
    new carid = GetPlayerVehicleID(playerid);
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /venderveha [IdJugador/ParteDelNombre] [Precio]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(playerid2 == playerid){SendClientMessage(playerid,Rojo,"No te puedes vender el vehículo a tí mismo."); return 1;}
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
    if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "Demasiado lejos."); return 1;}
    new SlotDisponible = NOEXISTE;
    for(new x=0; x<5; x++)
    {
        if(JugadorInfo[playerid2][pLlaveCoche][x] == 0){SlotDisponible = x; break;}
    }
    if(SlotDisponible == NOEXISTE){SendClientMessage(playerid, Rojo, "Este jugador tiene todos los huecos de llaves ocupados."); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /venderveha [IdJugador/ParteDelNombre] [Precio]");
        return 1;
    }
    new precio = strval(tmp);
    if(precio < 1 || precio > CocheInfo[carid][cValor]){SendClientMessage(playerid, Rojo, "El precio debe estar entre 1$ y el valor neto del propio vehículo."); return 1;}
    if(JugadorInfo[playerid2][pNivel] == 1)
    {
        format(string, sizeof(string), "[ABUSOS] %s ha intentado vender su vehículo a %s por %d$. Venta cancelada.", NombreJugador(playerid),NombreJugador(playerid2), precio);
		SendAdminMessage(Naranja,string);
		SendClientMessage(playerid, COLOR_GREEN, "No puedes vender vehículos a un nivel 1. Venta cancelada. Equipo advertido.");
		SendClientMessage(playerid2, COLOR_GREEN, "No puedes comprar vehículos siendo nivel 1. Venta cancelada. Equipo advertido.");
        return 1;
    }
    if(JugadorInfo[playerid][pNivel] == 1)
    {
        format(string, sizeof(string), "[ABUSOS] %s ha intentado vender su vehículo a %s por %d$. Venta cancelada.", NombreJugador(playerid),NombreJugador(playerid2), precio);
		SendAdminMessage(Naranja,string);
		SendClientMessage(playerid, COLOR_GREEN, "No puedes vender vehículos siendo 1. Venta cancelada. Staff advertido.");
		SendClientMessage(playerid2, COLOR_GREEN, "No puedes comprar vehículos cuando el vendedor es nivel 1. Venta cancelada. Staff advertido.");
        return 1;
    }
    format(string, sizeof(string), "%s te ofrece su %s por %d$. Escribe '/aceptar compraveh' para comprárselo.", NombreJugador(playerid), CocheInfo[carid][cNombreModelo], precio);
    SendClientMessage(playerid2, Amarillo, string);
    format(string, sizeof(string), "Has ofrecido tu %s a %s por %d$. Espera a que responda.", CocheInfo[carid][cNombreModelo], NombreJugador(playerid2), precio);
    SendClientMessage(playerid, Amarillo, string);
    VenderVehAPrecio[playerid2] = precio;
	VenderVehAVendedor[playerid2] = playerid;
	VenderVehALlave[playerid2] = CocheInfo[carid][cLlave];
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/localizarveh", true) == 0) //Localizar un vehículo
{
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /localizarVeh [1/2/3/4/5]");
        return 1;
    }
    new slot = strval(tmp);
    if(slot < 1 || slot > 5){SendClientMessage(playerid, Rojo, "El número del slot debe estar entre 1 y 5."); return 1;}
    if(JugadorInfo[playerid][pLlaveCoche][slot-1] == 0){SendClientMessage(playerid, Rojo, "No tienes ninguna llave en ese slot."); return 1;}
	new car;
	for(new x=MAX_VEHPUBLICO+1; x <= TotalVeh; x++)
	{
	    if(CocheInfo[x][cLlave] == JugadorInfo[playerid][pLlaveCoche][slot-1]){car = x; break;}
	}
	if(!IsValidVehicle(car)){SendClientMessage(playerid, Rojo, "Vehículo no encontrado."); return 1;}
	if(CocheInfo[car][cEnDeposito] == 1) //Si está en desguace
	{
	    if(IsABoat(car)){SetPlayerCheckpoint(playerid, 2294.3999,-2447.8000,0.0000, 4.0);}
	    if(!IsABoat(car)){SetPlayerCheckpoint(playerid, 2274.1028,-2345.5371,13.5469, 4.0);}
	    SendClientMessage(playerid, Amarillo, "Tu vehículo se encuentra en el depósito de Ocean Docks.");
	    LocalizarVeh[playerid] = 1;
	    return 1;
	}
	if(CocheInfo[car][cEnDeposito] == 2) //Si está en depósito LSPD
	{
	    SetPlayerCheckpoint(playerid, 1621.5406,-1866.9160,13.5469, 4.0);
	    SendClientMessage(playerid, Amarillo, "Tu vehículo se encuentra en el depósito de LSPD.");
	    LocalizarVeh[playerid] = 1;
	    return 1;
	}
	new Float:vX, Float:vY, Float:vZ;
	GetVehiclePos(car, vX, vY, vZ);
	SetPlayerCheckpoint(playerid, vX,vY,vZ, 4.0);
	format(string, sizeof(string), "Encontramos tu %s, se encuentra en %s, el costo total es de 50$", GetVehicleName(car), GetVehicleZona(car));
	SendClientMessage(playerid, COLOR_GREEN2, string);
	JugadorInfo[playerid][pDineroBanco] -= 50;
	LocalizarVeh[playerid] = 1;
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/desembargar", true) == 0) //Sacar vehículo del depósito LSPD
{
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /desembargar [1/2/3/4/5]");
        return 1;
    }
    new slot = strval(tmp);
    if(slot < 1 || slot > 5){SendClientMessage(playerid, Rojo, "El número del slot debe estar entre 1 y 5."); return 1;}
    if(JugadorInfo[playerid][pLlaveCoche][slot-1] == 0){SendClientMessage(playerid, Rojo, "No tienes ninguna llave en ese slot."); return 1;}
	new car;
	for(new x=MAX_VEHPUBLICO+1; x <= TotalVeh; x++)
	{
	    if(CocheInfo[x][cLlave] == JugadorInfo[playerid][pLlaveCoche][slot-1]){car = x; break;}
	}
	
	if(CocheInfo[car][cEnDeposito] != 2){SendClientMessage(playerid, Rojo, "Este vehículo no se encuentra en el depósito de LSPD."); return 1;}
	
	if(!IsPlayerInRangeOfPoint(playerid, 7.0, 1621.5406,-1866.9160,13.5469))
	{
		SendClientMessage(playerid, Rojo, "No estás en el depósito de LSPD.");
		return 1;
	}
	
	new precio = (CocheInfo[car][cValor]/4);

	if(GetPlayerMoney(playerid) < precio)
	{
	    format(string, sizeof(string), "Necesitas %d$ para sacar este vehículo del depósito.", precio);
	    SendClientMessage(playerid, Rojo, string);
	    return 1;
	}
	
	for(new i=0; i <= TotalVeh; i++)
	{
		if(IsVehicleInRangeOfPoint(4.0, i, 1621.5406,-1866.9160,13.5469))
		{
			SendClientMessage(playerid, Rojo, "Hay un vehículo en el punto de entrega.");
			return 1;
		}
	}

 	GivePlayerMoneyAC(playerid, -precio);
	format(string, sizeof(string), "Has retirado tu %s del depósito de LSPD por %d$.", CocheInfo[car][cNombreModelo], precio);
    SendClientMessage(playerid, COLOR_GREEN, string);
    format(string, sizeof(string), "[Siglo-XXI]: %s ha sacado su %s del depósito por %d$.", NombreJugador(playerid), CocheInfo[car][cNombreModelo], precio);
    SendAdminMessage(COLOR_YELLOW, string);
    printf(string);
    CocheInfo[car][cEnDeposito] = 0;
    CocheInfo[car][cGas] = 15;
    SetVehiclePos(car, 1621.5406,-1866.9160,13.5469);
	SetVehicleZAngle(car, 90);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/sacardeposito", true) == 0) //Sacar vehículo del desguace
{
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /sacardeposito [1/2/3/4/5]");
        return 1;
    }
    new slot = strval(tmp);
    if(slot < 1 || slot > 5){SendClientMessage(playerid, Rojo, "El número del slot debe estar entre 1 y 5."); return 1;}
    if(JugadorInfo[playerid][pLlaveCoche][slot-1] == 0){SendClientMessage(playerid, Rojo, "No tienes ninguna llave en ese slot."); return 1;}
	new car;
	for(new x=MAX_VEHPUBLICO+1; x <= TotalVeh; x++)
	{
	    if(CocheInfo[x][cLlave] == JugadorInfo[playerid][pLlaveCoche][slot-1]){car = x; break;}
	}
	
	if(CocheInfo[car][cEnDeposito] != 1){SendClientMessage(playerid, Rojo, "Este vehículo no se encuentra en el depósito de Ocean Docks."); return 1;}
	
	if(!IsPlayerInRangeOfPoint(playerid, 4.0, 2274.1028,-2345.5371,13.5469) && !IsPlayerInRangeOfPoint(playerid, 8.0, 2286.8096,-2423.5090,3.0000))
	{
		SendClientMessage(playerid, Rojo, "No estás en el depósito de Ocean Docks.");
		return 1;
	}
	
	new precio = (CocheInfo[car][cValor]/8);
	
	if(GetPlayerMoney(playerid) < precio)
	{
	    format(string, sizeof(string), "Necesitas %d$ para sacar este vehículo del depósito.", precio);
	    SendClientMessage(playerid, Rojo, string);
	    return 1;
	}
	
	if(IsABoat(car) && !IsPlayerInRangeOfPoint(playerid, 4.0, 2286.8096,-2423.5090,3.0000))
	{
		SendClientMessage(playerid, Rojo, "Este vehículo es un barco. Ve al muelle de carga del depósito.");
		SetPlayerCheckpoint(playerid, 2286.8096,-2423.5090,3.0000, 4.0);
		return 1;
	}
	if(!IsABoat(car) && !IsPlayerInRangeOfPoint(playerid, 4.0, 2274.1028,-2345.5371,13.5469))
	{
	    SendClientMessage(playerid, Rojo, "Este vehículo no es un barco. Ve a la entrada principal del depósito.");
		SetPlayerCheckpoint(playerid, 2274.1028,-2345.5371,13.5469, 4.0);
		return 1;
 	}
 	
 	for(new i=0; i <= TotalVeh; i++)
	{
		if(!IsABoat(car) && IsVehicleInRangeOfPoint(4.0, i, 2274.1028,-2345.5371,13.5469) && GetVehicleVirtualWorld(i) == 0)
		{
			SendClientMessage(playerid, Rojo, "Hay un vehículo en el punto de entrega.");
			return 1;
		}
		if(IsABoat(car) && IsVehicleInRangeOfPoint(4.0, i, 2294.3999,-2447.8000,0.0000) && GetVehicleVirtualWorld(i) == 0)
		{
			SendClientMessage(playerid, Rojo, "Hay un vehículo en el punto de entrega.");
			return 1;
		}
	}
	
 	GivePlayerMoneyAC(playerid, -precio);
	format(string, sizeof(string), "Has retirado tu %s del depósito de Ocean Docks por %d$.", CocheInfo[car][cNombreModelo], precio);
    SendClientMessage(playerid, COLOR_GREEN, string);
    format(string, sizeof(string), "[Siglo-XXI]: %s ha sacado su %s del depósito (OCEAN DOCKS) por %d$.", NombreJugador(playerid), CocheInfo[car][cNombreModelo], precio);
    SendAdminMessage(COLOR_YELLOW, string);
    printf(string);
    SetVehicleVirtualWorld(car, 0);
    LinkVehicleToInteriorEx(car, 0);
    CocheInfo[car][cEnDeposito] = 0;
    CocheInfo[car][cGas] = 15;
    if(IsABoat(car)){SetVehiclePos(car, 2294.3999,-2447.8000,0.0000);}
    if(!IsABoat(car)){SetVehiclePos(car, 2274.1028,-2345.5371,13.5469);}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/capo", true) == 0) //Abrir capó del vehículo
{
	if(!IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) != 2){SendClientMessage(playerid, Rojo, "No estás en un vehículo como conductor."); return 1;}
	new car = GetPlayerVehicleID(playerid);
	if(IsABike(car) || IsAMBike(car) || IsABoat(car) || IsAPlane(car)){SendClientMessage(playerid, Rojo, "Este vehículo no tiene capó."); return 1;}
    new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
    if(VehCapo[car] == 1)
    {
        SetVehicleParamsEx(car,engine,lights,alarm,doors,0,boot,objective);
        format(string, sizeof(string), "%s cierra el capó de su %s.", NombreJugadorProxy(playerid),GetVehicleName(car));
 	    ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
 	    VehCapo[car] = 0;
    }
    else
    {
        SetVehicleParamsEx(car,engine,lights,alarm,doors,1,boot,objective);
        format(string, sizeof(string), "%s abre el capó de su %s.", NombreJugadorProxy(playerid), GetVehicleName(car));
 	    ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
 	    VehCapo[car] = 1;
    }
	return 1;
}

//---------------------------------------------------------------------------------------------------------------
if(strcmp(cmd, "/armas", true) == 0) //Abrir maletero del vehículo
{
	if(JugadorInfo[playerid][pFaccion] == 1 && JugadorInfo[playerid][pLider] == 1)
	{
  		if(IsPlayerInRangeOfPoint(playerid, 2.0, 312.2588,-165.6956,999.6010))
	 	{
	  		new cadena[450];
			strcat(cadena, "Pistola\n"); // Todos
			strcat(cadena, "Desert Eagle\n"); // Todos
			strcat(cadena, "Subfusil MP5\n"); // Todos
			strcat(cadena, "Rifle M4\n"); // Todos
			strcat(cadena, "Shotgun\n"); // Todos
			strcat(cadena, "Rifle de caza\n"); // Todos
			strcat(cadena, "Rifle francotirador\n"); // Todos
			strcat(cadena, "Granada lacrimógena\n"); // Todos
			ShowPlayerDialog(playerid, 35, 2, "Armeria policial", cadena,"Coger", "Salir");
			AutoRol(playerid, "abre la armeria.");
		}
	}
	return 1;
}

if(strcmp(cmd, "/vercoche", true) == 0)
{
    new vehicleid = GetPlayerVehicleID(playerid), Float:cvida;
    if(!IsPlayerInAnyVehicle(playerid)){return 1;}
    GetVehicleHealth(vehicleid, cvida);
    if(MotorFeo[vehicleid] == 1){SendClientMessage(playerid, COLOR_GREEN, "[*] El vehículo se encuentra con el motor dañado.");}
    if(cvida > 990){SendClientMessage(playerid, COLOR_GREEN, "[*] El vehículo tiene la pintura casi nueva, ¡perfectamente cuidada!");}
    else if(cvida > 900 && cvida < 990) {SendClientMessage(playerid, COLOR_GREEN, "[*] El vehículo tiene algunos raspones en su pintura.");}
    else if(cvida < 900){SendClientMessage(playerid, COLOR_GREEN, "[*] El vehículo posee numerosos raspones y abolladuras en su pintura.");}
    if(CocheInfo[vehicleid][cCapoRoto] > 0){SendClientMessage(playerid, COLOR_GREEN, "[*] El capó del vehículo se encuentra roto.");}
    if(CocheInfo[vehicleid][cBaulRoto] > 0){SendClientMessage(playerid, COLOR_GREEN, "[*] El baúl del vehículo se encuentra roto.");}
	return 1;
}
if(strcmp(cmd, "/guantera", true) == 0)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER){SendClientMessage(playerid, COLOR_ROJO, "No estás en un vehículo"); return 1;}
	new vehicleid = GetPlayerVehicleID(playerid);
	new opcion[128];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		new nombre[128];
	    format(nombre, 128, "[*] INTERIOR: %s", GetVehicleName(vehicleid));
    	SendClientMessage(playerid, Verde, nombre);

    	for(new i = 0; i < 2; i++)
		{
			new Bonnet = CocheInfo[vehicleid][cGuantera][i];
			if(Bonnet != 0)
			{
			    if(Bonnet == 176){format(string, sizeof(string), "Hueco %d: %s (%d$)", i, ObjetoInfo[Bonnet][NombreObjeto], CocheInfo[vehicleid][cGuanteraCant][i]);}
				else{format(string, sizeof(string), "Hueco %d: %s (%d uds.)", i, ObjetoInfo[Bonnet][NombreObjeto], CocheInfo[vehicleid][cGuanteraCant][i]);}
	            SendClientMessage(playerid, COLOR_PIEL, string);
			}
		}
		SendClientMessage(playerid, COLOR_YELLOW, "USO: /guantera [meter/sacar]");
		return 1;
	}
	if(strcmp(opcion,"meter",true) == 0)
	{
	    if(PlayerTieneLlaveVeh(playerid, vehicleid) || PlayerEsFaccionVeh(playerid, vehicleid))
	    {
			if(JugadorInfo[playerid][pManoIzq] == 177){return 1;}
	    	if(JugadorInfo[playerid][pManoDer] == 174 || JugadorInfo[playerid][pManoDer] == 175) { SendClientMessage(playerid,COLOR_ROJO, "No puedes guardar un arma reglamentaria en la guantera."); return 1; }
			GuardarInterior(playerid, vehicleid);
		}
	}
	if(strcmp(opcion,"sacar",true) == 0)
	{
	    if(PlayerTieneLlaveVeh(playerid, vehicleid) || PlayerEsFaccionVeh(playerid, vehicleid))
	    {
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_YELLOW, "USO: /guantera sacar [0/1]");
				return 1;
			}
			new hueco = strval(tmp);
			if(hueco < 0 || hueco > 1){return 1;}
			SacarInterior(playerid, vehicleid, hueco);
		}
	}
	return 1;
}
if(strcmp(cmd, "/malabrir", true) == 0)
{
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER){SendClientMessage(playerid, COLOR_ROJO, "No estás en un vehículo"); return 1;}
	new car = GetPlayerVehicleID(playerid);
	if(IsABike(car)) { return 1; }
    if(car == 0){SendClientMessage(playerid, COLOR_ROJO, "No hay ningún vehículo que puedas abrir"); return 1;}
    if(PlayerTieneLlaveVeh(playerid, car) || PlayerEsFaccionVeh(playerid, car))
    {
		new engine,lights,alarm,doors,bonnet,boot,objective;
	    GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
	    SetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,1,objective);
	 	format(string, sizeof(string), "abre el maletero del %s desde adentro.", GetVehicleName(car));
	    AutoRol(playerid, string);
	   	VehMaletero[car] = 1;
	}
	else SendClientMessage(playerid, COLOR_ROJO, "No tienes las llaves");
	return 1;
    //MostrarMaletero(playerid, car);
    //VehMaleteroPlayer[playerid] = car;
}
if(strcmp(cmd, "/maletero", true) == 0 || strcmp(cmd, "/mal", true) == 0) //Abrir maletero del vehículo
{
	if(JugadorInfo[playerid][pNivel] == 1) { SendClientMessage(playerid, Rojo, "No tienes acceso al comando siendo nivel 1"); return 1; }
    new opcion[128];
	opcion = strtok(cmdtext, idx);
    if(IsPlayerInAnyVehicle(playerid)){SendClientMessage(playerid, Rojo, "El maletero está afuera y tú dentro. Utiliza '/malabrir' desde dentro."); return 1;}
	if(!strlen(opcion))
	{
 		new car, Float:distancia = 6.0, Float:vX, Float:vY, Float:vZ;
		for(new x=0; x <= TotalVeh; x++)
		{
		    GetVehiclePos(x, vX, vY, vZ);
		    if(IsPlayerInRangeOfPoint(playerid, 6.0, vX, vY, vZ) && !IsABike(x) && (PlayerTieneLlaveVeh(playerid, x) || PlayerEsFaccionVeh(playerid, x)))
		    {
		        if(GetPlayerDistanceFromPoint(playerid, vX, vY, vZ) <= distancia)distancia = GetPlayerDistanceFromPoint(playerid, vX, vY, vZ), car = x;
		    }
		}
		if(car == 0){return 1;}
		if(VehMaletero[car] == 1)
		{
			MostrarMaletero(playerid, car);
	    	VehMaleteroPlayer[playerid] = car;
			return 1;
		}
		else
		{
			new engine,lights,alarm,doors,bonnet,boot,objective;
		    GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
		    SetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,1,objective);
		    format(string, sizeof(string), "abre el maletero del %s.", GetVehicleName(car));
	 	    AutoRol(playerid, string);
	 	    VehMaletero[car] = 1;
	 	    MostrarMaletero(playerid, car);
		    VehMaleteroPlayer[playerid] = car;
	    }
		return 1;
	}
	else if(strcmp(opcion,"cerrar",true) == 0) //Cerrar maletero
	{
	    new car, Float:distancia = 6.0, Float:vX, Float:vY, Float:vZ;
		for(new x=0; x <= TotalVeh; x++)
		{
		    GetVehiclePos(x, vX, vY, vZ);
		    if(IsPlayerInRangeOfPoint(playerid, 6.0, vX, vY, vZ) && !IsABike(x) && VehMaletero[x] == 1)
		    {
		        if(GetPlayerDistanceFromPoint(playerid, vX, vY, vZ) <= distancia)distancia = GetPlayerDistanceFromPoint(playerid, vX, vY, vZ), car = x;
		    }
		}
		if(car == 0){SendClientMessage(playerid, Rojo, "El maletero del vehículo ya se encuentra cerrado."); return 1;}
		new engine,lights,alarm,doors,bonnet,boot,objective;
    	GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
	    SetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,0,objective);
        format(string, sizeof(string), "cierra el maletero del %s.", GetVehicleName(car));
 	    AutoRol(playerid, string);
 	    VehMaletero[car] = 0;
 	    return 1;
	}
	else if(strcmp(opcion,"guardar",true) == 0) //guarda maletero
	{
	    if(JugadorInfo[playerid][pManoDer] == 174 || JugadorInfo[playerid][pManoDer] == 175) { SendClientMessage(playerid,COLOR_ROJO, "No puedes guardar un arma reglamentaria en un maletero."); return 1; }
		new car, Float:distancia = 6.0, Float:vX, Float:vY, Float:vZ;
		for(new x=0; x <= TotalVeh; x++)
		{
		    GetVehiclePos(x, vX, vY, vZ);
		    if(IsPlayerInRangeOfPoint(playerid, 6.0, vX, vY, vZ) && !IsABike(x) && VehMaletero[x] == 1)
		    {
		        if(GetPlayerDistanceFromPoint(playerid, vX, vY, vZ) <= distancia)distancia = GetPlayerDistanceFromPoint(playerid, vX, vY, vZ), car = x;
		    }
		}
		if(car >= 1)
		{
	    	GuardarMaletero(playerid, car, 1);
		}
		return 1;
	}
	if(strcmp(opcion,"coger",true) == 0)
	{
	    if(JugadorInfo[playerid][pManoDer] == 0)
		{
		    new car, Float:distancia = 6.0, Float:vX, Float:vY, Float:vZ;
			for(new x=0; x <= TotalVeh; x++)
			{
			    GetVehiclePos(x, vX, vY, vZ);
			    if(IsPlayerInRangeOfPoint(playerid, 6.0, vX, vY, vZ) && !IsABike(x) && VehMaletero[x] == 1)
			    {
			        if(GetPlayerDistanceFromPoint(playerid, vX, vY, vZ) <= distancia)distancia = GetPlayerDistanceFromPoint(playerid, vX, vY, vZ), car = x;
			    }
			}
			if(car >= 1)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, Gris, "USO: /mal coger [hueco]");
					return 1;
				}
				new hueco = strval(tmp);
				if(hueco < 1 || hueco > 10){return 1;}
				SacarMaletero(playerid, car, hueco-1);
		        return 1;
			}
		}
		else SendClientMessage(playerid, Rojo, "Tienes la mano derecha ocupada");
	}
	else{ return SendClientMessage(playerid, COLOR_YELLOW, "USO: (/mal)etero [coger/guardar/cerrar]");}
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/remolcar", true) == 0) //Remolcar un vehículo
{
	if(JugadorInfo[playerid][pFaccion] != 1 && JugadorInfo[playerid][pTrabajo] != 7){SendClientMessage(playerid, Rojo, "No eres mecánico o policía."); return 1;}
	if((JugadorInfo[playerid][pFaccion] == 1 && JugadorInfo[playerid][pServicioPD] == 0) && JugadorInfo[playerid][pHabMec] < 60){SendClientMessage(playerid, Rojo, "Necesitas nivel 3 de mecánico para usar este comando."); return 1;}
	if((JugadorInfo[playerid][pFaccion] == 1 && JugadorInfo[playerid][pServicioPD] == 0) && (JugadorInfo[playerid][pTrabajo] == 7 && Trabajando[playerid] == 0)){SendClientMessage(playerid, Rojo, "No estás de servicio como mecánico ni como policía."); return 1;}
	if((JugadorInfo[playerid][pFaccion] == 0) && (JugadorInfo[playerid][pTrabajo] == 7 && Trabajando[playerid] == 0)){SendClientMessage(playerid, Rojo, "No estás de servicio como mecánico."); return 1;}
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) != 525 || GetPlayerState(playerid) != 2){SendClientMessage(playerid, Rojo, "No estás en una grúa como conductor."); return 1;}
	new Float:vX,Float:vY,Float:vZ;
	new car, Float:distancia = 7.0;
	new IDGrua = GetPlayerVehicleID(playerid);
	for(new x=0; x <= TotalVeh; x++)
	{
	    GetVehiclePos(x, vX, vY, vZ);
	    if(IsVehicleInRangeOfPoint(7.0,IDGrua, vX, vY, vZ) && x != IDGrua && !IsABike(x))
	    {
	        if(GetVehicleDistanceFromPoint(IDGrua, vX, vY, vZ) <= distancia)distancia = GetVehicleDistanceFromPoint(IDGrua, vX, vY, vZ), car = x;
	    }
	}
	if(car == 0){SendClientMessage(playerid, Rojo, "No se ha detectado ningún vehículo alrededor de la grúa."); return 1;}
	if(IsTrailerAttachedToVehicle(IDGrua))
	{
    	DetachTrailerFromVehicle(IDGrua);
    	SendClientMessage(playerid, COLOR_PIEL, "¡Has desenganchado el coche de tu grua!");
   	}
   	else
   	{
		AttachTrailerToVehicle(car,IDGrua);
		SendClientMessage(playerid, COLOR_PIEL, "¡Has enganchado el coche a tu grua!");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

//----------COMANDOS LÍDER----------//

if(strcmp(cmd, "/reclutar", true) == 0) //Invitar gente a una facción
{
	if(JugadorInfo[playerid][pLider] <= 0){SendClientMessage(playerid,Rojo,"No eres líder de una facción."); return 1;}
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /Reclutar [IdJugador/ParteDelNombre]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(playerid2 == playerid){SendClientMessage(playerid,Rojo,"No te puedes reclutar a tí mismo."); return 1;}
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
    if(JugadorInfo[playerid][pFaccion] == JugadorInfo[playerid2][pFaccion]){SendClientMessage(playerid,Rojo,"Este jugador ya forma parte de tu facción."); return 1;}
    if(JugadorInfo[playerid2][pFaccion] != 0){SendClientMessage(playerid,Rojo,"Este jugador ya forma parte de una facción."); return 1;}
    if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "Demasiado lejos."); return 1;}
    reclutarfaccion[playerid2] = JugadorInfo[playerid][pFaccion];
    reclutarlider[playerid2] = playerid;
	format(string, sizeof(string), "%s te ha invitado a su facción. Escribe '/aceptar faccion' para unirte.", NombreJugador(playerid));
	SendClientMessage(playerid2, Amarillo, string);
	format(string, sizeof(string), "Has invitado a %s a tu facción, espera a que responda.", NombreJugador(playerid2));
	SendClientMessage(playerid, Amarillo, string);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/promover", true) == 0) //Dar rangos a miembros de una facción
{
	if(JugadorInfo[playerid][pLider] <= 0){SendClientMessage(playerid,Rojo,"No eres líder de una facción."); return 1;}
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /promover [IdJugador/ParteDelNombre] [Rango]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
    if(JugadorInfo[playerid][pFaccion] != JugadorInfo[playerid2][pFaccion]){SendClientMessage(playerid,Rojo,"Este jugador no forma parte de tu facción."); return 1;}
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /promover [IdJugador/ParteDelNombre] [Rango]");
        return 1;
    }
    new rango = strval(tmp);
    if(rango < 1 || rango > 12){SendClientMessage(playerid,Rojo,"El rango debe estar entre 1 y 12."); return 1;}
    JugadorInfo[playerid2][pRango] = rango;
	format(string, sizeof(string), "Líder %s te ha promovido al rango %d.", NombreJugador(playerid), rango);
	SendClientMessage(playerid2, COLOR_GREEN, string);
	format(string, sizeof(string), "Has promovido a rango %d a %s.", rango, NombreJugador(playerid2));
	SendClientMessage(playerid, COLOR_GREEN2, string);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/expulsar", true) == 0) //Expulsar miembros de una facción
{
	if(JugadorInfo[playerid][pLider] <= 0){SendClientMessage(playerid,Rojo,"No eres líder de una facción."); return 1;}
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /expulsar [IdJugador/ParteDelNombre]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"No te puedes expulsar a tí mismo, si quieres dejar la facción habla con un administrador."); return 1;}
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
    if(JugadorInfo[playerid][pFaccion] != JugadorInfo[playerid2][pFaccion]){SendClientMessage(playerid,Rojo,"Este jugador no forma parte de tu facción."); return 1;}
    JugadorInfo[playerid2][pRango] = 0;
    JugadorInfo[playerid2][pFaccion] = 0;
    JugadorInfo[playerid2][pServicioPD] = 0;
    JugadorInfo[playerid2][pServicioMD] = 0;
    for(new x = 0; x<MAX_SLOTS_CT; x++) // Reset inventario
	{
    	JugadorInfo[playerid][pCint][x] = 0;
    	JugadorInfo[playerid][pCintCant][x] = 0;
	}
	format(string, sizeof(string), "%s te ha expulsado de su facción.", NombreJugador(playerid));
	SendClientMessage(playerid2, Amarillo, string);
	format(string, sizeof(string), "Has expulsado a %s de tu facción.", NombreJugador(playerid2));
	SendClientMessage(playerid, Amarillo, string);
    return 1;
}

//----------COMANDOS FACCIONES----------//

//---------------------------------------------------------------------------------------------------------------


if(strcmp(cmd, "/barraluces", true) == 0)
{
    if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
	if(!IsPlayerInAnyVehicle(playerid)) { SendClientMessage(playerid, COLOR_ROJO, "No estás en un vehículo"); return 1; }
 	new id = GetPlayerVehicleID(playerid);
    if(attInfo[GetVehicleModel(id) - 400][_attPos] != -1.0)
    {
      	if(vehicleInfo[id][useAttach])
        {
          	DestroyObject(vehicleInfo[id][attachObject]);
        }
		vehicleInfo[id][attachObject] =  CreateObject(19419, 10.0, 10.0, 10.0, 0, 0, 0);
		vehicleInfo[id][useAttach] = true;
		AttachObjectToVehicle(vehicleInfo[id][attachObject], GetPlayerVehicleID(playerid), -0.0, -0.39, attInfo[GetVehicleModel(id) - 400][_attPos], 0.0, 0.0, 0.0);
		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		SendClientMessage(playerid, COLOR_GREEN, "Barra de luces instalada");
	}
	else
	{
       	SendClientMessage(playerid, COLOR_ROJO, "Error");
	}
	return 1;
}

if(strcmp(cmd, "/quitarbarraluces", true) == 0)
{
    if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
    
    if(!IsPlayerInAnyVehicle(playerid)) { SendClientMessage(playerid, COLOR_ROJO, "No estás en un vehículo"); return 1; }

	new vehicleid = GetPlayerVehicleID(playerid);
 	if(vehicleInfo[vehicleid][useAttach])
  	{
   		DestroyObject(vehicleInfo[vehicleid][attachObject]);
     	PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
     	SendClientMessage(playerid, COLOR_GREEN, "Barra de luces quitada");
   	}
    return 1;
}

if(strcmp(cmd, "/sir", true) == 0) //Sirena LSPD
{
		if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2)
	    {
	        new vehicleid = GetPlayerVehicleID(playerid);
   			if(SinSonido[vehicleid] == 0)
		    {
		        LuzSS[0][vehicleid] = CreateObject(19292,0.0,0.0,0.0,0.0,0.0,0.0);//Azul
		        LuzSS[1][vehicleid] = CreateObject(19290,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo
		        LuzSS[2][vehicleid] = CreateObject(19290,0.0,0.0,0.0,0.0,0.0,0.0);//Rojo de nuevo, para uso de Enforcer y grúa.
		        
                Sirena[vehicleid] = CreateObject(19419,0.0,0.0,0.0,0.0,0.0,0.0); // Tablero de Luces
                Bombilla[vehicleid] = CreateObject(18646,0.0,0.0,0.0,0.0,0.0,0.0); // Tablero de Luces
                // -- Luces ya Puestas -- //
		        if(GetVehicleModel(vehicleid) == 523) //HPV 1000
		        {
		        	GameTextForPlayer(playerid, "~w~SIRENAS~g~ COLOCADAS", 3000, 3);
		            AttachObjectToVehicle(LuzSS[0][vehicleid],vehicleid,0.1,0.8,0.4,0.0,0.0,0.0);
		        	AttachObjectToVehicle(LuzSS[1][vehicleid],vehicleid,-0.2,0.8,0.4,0.0,0.0,0.0);
		        }
		        else if(GetVehicleModel(vehicleid) == 427) //Enforcer
		        {
		        	GameTextForPlayer(playerid, "~w~SIRENAS~g~ COLOCADAS", 3000, 3);
		            AttachObjectToVehicle(LuzSS[1][vehicleid],vehicleid,-0.4,1.10,1.5,0.0,0.0,0.0);
		        	AttachObjectToVehicle(LuzSS[2][vehicleid],vehicleid,0.4,1.10,1.5,0.0,0.0,0.0);
		        }
		        else if(GetVehicleModel(vehicleid) == 596) //Patrulla LSPD
		        {
		        	GameTextForPlayer(playerid, "~w~SIRENAS~g~ COLOCADAS", 3000, 3);
		            AttachObjectToVehicle(LuzSS[0][vehicleid],vehicleid,0.5,-0.3,1.0,0.0,0.0,0.0);
		        	AttachObjectToVehicle(LuzSS[1][vehicleid],vehicleid,-0.5,-0.3,1.0,0.0,0.0,0.0);
		        }
	            else if(GetVehicleModel(vehicleid) == 597) //Patrulla SFPD
		        {
		        	GameTextForPlayer(playerid, "~w~SIRENAS~g~ COLOCADAS", 3000, 3);
		            AttachObjectToVehicle(LuzSS[0][vehicleid],vehicleid,0.5,-0.3,1.0,0.0,0.0,0.0);
		        	AttachObjectToVehicle(LuzSS[1][vehicleid],vehicleid,-0.5,-0.3,1.0,0.0,0.0,0.0);
		        }
		        else if(GetVehicleModel(vehicleid) == 598) //Patrulla LVPD
		        {
		        	GameTextForPlayer(playerid, "~w~SIRENAS~g~ COLOCADAS", 3000, 3);
		            AttachObjectToVehicle(LuzSS[0][vehicleid],vehicleid,0.5,-0.3,1.0,0.0,0.0,0.0);
		        	AttachObjectToVehicle(LuzSS[1][vehicleid],vehicleid,-0.5,-0.3,1.0,0.0,0.0,0.0);
		        }
		        else if(GetVehicleModel(vehicleid) == 599) //Ranger
		        {
		        	GameTextForPlayer(playerid, "~w~SIRENAS~g~ COLOCADAS", 3000, 3);
		            AttachObjectToVehicle(LuzSS[0][vehicleid],vehicleid,0.5,-0.0,1.2,0.0,0.0,0.0);
		        	AttachObjectToVehicle(LuzSS[1][vehicleid],vehicleid,-0.5,-0.0,1.2,0.0,0.0,0.0);
		        }
		        else if(GetVehicleModel(vehicleid) == 525) // Grua
		        {
		        	GameTextForPlayer(playerid, "~w~SIRENAS~g~ COLOCADAS", 3000, 3);
		            AttachObjectToVehicle(LuzSS[1][vehicleid],vehicleid,-0.5,-0.5,1.5,0.0,0.0,0.0);
		        	AttachObjectToVehicle(LuzSS[2][vehicleid],vehicleid,0.5,-0.5,1.5,0.0,0.0,0.0);
		        }
		        // -- Sirena -- //
		        else if(GetVehicleModel(vehicleid) == 560) // Sultan
		        {
		        	GameTextForPlayer(playerid, "~w~SIRENAS~g~ COLOCADAS", 3000, 3);
		            AttachObjectToVehicle(Bombilla[vehicleid], vehicleid, 0.019999, 0.789999, 0.449999, 0.000000, 0.000000, 0.000000);
		        }
		        else if(GetVehicleModel(vehicleid) == 402) // Buffalo
		        {
		        	GameTextForPlayer(playerid, "~w~SIRENAS~g~ COLOCADAS", 3000, 3);
		            AttachObjectToVehicle(Bombilla[vehicleid], vehicleid, 0.000000, 0.514999, 0.319999, 0.000000, 0.000000, 0.000000);
		        }
		        else if(GetVehicleModel(vehicleid) == 579) // Huntley
		        {
		        	GameTextForPlayer(playerid, "~w~SIRENAS~g~ COLOCADAS", 3000, 3);
		            AttachObjectToVehicle(Bombilla[vehicleid], vehicleid, -0.004999, 0.524999, 0.664999, 0.000000, 0.000000, 0.000000);
		        }
		        else if(GetVehicleModel(vehicleid) == 415) // Cheetah
		        {
		        	GameTextForPlayer(playerid, "~w~SIRENAS~g~ COLOCADAS", 3000, 3);
		            AttachObjectToVehicle(Bombilla[vehicleid], vehicleid, 0.004999, 0.569999, 0.214999, 0.000000, 0.000000, 0.000000);
		        }
		        else if(GetVehicleModel(vehicleid) == 482) // Burrito
		        {
		        	GameTextForPlayer(playerid, "~w~SIRENAS~g~ COLOCADAS", 3000, 3);
		            AttachObjectToVehicle(Bombilla[vehicleid], vehicleid, -0.019999, 1.404998, 0.454999, 0.000000, 0.000000, 0.000000);
		        }
		        else if(GetVehicleModel(vehicleid) == 426) // Premier
		        {
		        	GameTextForPlayer(playerid, "~w~SIRENAS~g~ COLOCADAS", 3000, 3);
		            AttachObjectToVehicle(Bombilla[vehicleid], vehicleid, 0.014999, 0.769999, 0.364999, 0.000000, 0.000000, 0.000000);
		        }
		        SinSonido[vehicleid] = 1;
		        return 1;
		    }
		    if(SinSonido[vehicleid] == 1)
		    {
		        DestroyObject(LuzSS[0][vehicleid]);
		        DestroyObject(LuzSS[1][vehicleid]);
		        DestroyObject(LuzSS[2][vehicleid]);
				GameTextForPlayer(playerid, "~w~SIRENAS~r~ QUITADAS", 3000, 3);
		        DestroyObject(Sirena[vehicleid]);
		        DestroyObject(Bombilla[vehicleid]);
		        SinSonido[vehicleid] = 0;
				return 1;
		    }
		}
		return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/ap", true) == 0) //Comando para abrir puertas
{
	AbrirPuerta(playerid);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(!strcmp(cmdtext, "/apatio", true)) //Comando para abrir puerta partio prisión
{
    if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
    if(IsPlayerInRangeOfPoint(playerid, 5, 2571.3999000,-1304.8300000,1043.0000000))
    {
        MoveDynamicObject(puertapatioprision, 2571.4004000,-1307.7000000,1043.0000000, 3.0);
    }
    else{SendClientMessage(playerid,Rojo,"No estás cerca de la puerta del patio de la prisión federal."); return 1;}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(!strcmp(cmdtext, "/cpatio", true)) //Comando para cerrar puerta partio prisión
{
    if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
    if(IsPlayerInRangeOfPoint(playerid, 5, 2571.3999000,-1304.8300000,1043.0000000))
    {
        MoveDynamicObject(puertapatioprision, 2571.3999000,-1304.8300000,1043.0000000, 3.0);
    }
    else{SendClientMessage(playerid,Rojo,"No estás cerca de la puerta del patio de la prisión federal."); return 1;}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(!strcmp(cmdtext, "/celda", true)) //Comando para abrir celdas de LSPD
{
    if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
    if(IsPlayerInRangeOfPoint(playerid, 3, 266.31, 76.71, 1001.2900))
    {
        MoveDynamicObject(Celda1, 266.2500, 76.9000, 1001.2900, 3.0);
        SetTimerEx("CerrarPuerta",3000,0,"p",Celda1);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 3, 266.25, 82.95, 1001.29))
    {
        MoveDynamicObject(Celda2, 266.25, 81.39, 1001.29, 3.0);
        SetTimerEx("CerrarPuerta",3000,0,"p",Celda2);
    }
	else if(IsPlayerInRangeOfPoint(playerid, 3, 266.25, 87.46, 1001.29))
    {
        MoveDynamicObject(Celda3, 266.25, 85.9, 1001.29, 3.0);
        SetTimerEx("CerrarPuerta",3000,0,"p",Celda3);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2555.7200000,-1304.1000000,1043.1000000)) //Prisión federal
    {
        SetDynamicObjectRot(puertaceldaprision1, 0.0000000,0.0000000,90.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision1);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2559.6199000,-1304.0996000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision2, 0.0000000,0.0000000,90.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision2);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2551.8210000,-1304.0996000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision3, 0.0000000,0.0000000,90.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision3);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2547.9224000,-1304.0996000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision4, 0.0000000,0.0000000,90.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision4);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2544.0237000,-1304.0996000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision5, 0.0000000,0.0000000,90.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision5);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2540.1243000,-1304.0996000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision6, 0.0000000,0.0000000,90.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision6);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2536.2253000,-1304.0996000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision7, 0.0000000,0.0000000,90.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision7);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2532.3264000,-1304.0996000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision8, 0.0000000,0.0000000,90.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision8);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2561.6799300,-1283.6899400,1043.0999800))
    {
        SetDynamicObjectRot(puertaceldaprision9, 0.0000000,0.0000000,270.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision9);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2557.7798000,-1283.6895000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision10, 0.0000000,0.0000000,270.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision10);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2553.8799000,-1283.6895000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision11, 0.0000000,0.0000000,270.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision11);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2549.9800000,-1283.6895000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision12, 0.0000000,0.0000000,270.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision12);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2546.0798000,-1283.6895000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision13, 0.0000000,0.0000000,270.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision13);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2542.1799000,-1283.6895000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision14, 0.0000000,0.0000000,270.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision14);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2, 2538.2798000,-1283.6895000,1043.1000000))
    {
        SetDynamicObjectRot(puertaceldaprision15, 0.0000000,0.0000000,270.0000000);
        SetTimerEx("CerrarPuerta",3000,0,"p",puertaceldaprision15);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(!strcmp(cmdtext, "/embargar", true)) //Comando para meter vehículo en depósito de LSPD
{
    if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
    if(JugadorInfo[playerid][pServicioPD] <= 0){SendClientMessage(playerid,Rojo,"No estás de servicio."); return 1;}
    if(JugadorInfo[playerid][pRango] < 3){SendClientMessage(playerid,Rojo,"Necesitas tener al menos rango 3 para usar este comando."); return 1;}
    if(!IsPlayerInDynamicArea(playerid, AreaDepositoLSPD)){SendClientMessage(playerid,Rojo,"No estás en el depósito de vehículos de LSPD."); return 1;}
    if(!GetPlayerVehicleID(playerid)){SendClientMessage(playerid,Rojo,"No estás en un vehículo."); return 1;}
    new carid = GetPlayerVehicleID(playerid);
    if(carid <= MAX_VEHPUBLICO){SendClientMessage(playerid,Rojo,"No puedes embargar vehículos públicos."); return 1;}
    if(CocheInfo[carid][cEnDeposito] == 2){SendClientMessage(playerid,Rojo,"Este vehículo ya está embargado."); return 1;}
    
    CocheInfo[carid][cEnDeposito] = 2;
	SaveCar(carid);
	
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
   	SetVehicleParamsEx(carid,0,lights,alarm,doors,bonnet,boot,objective);
   	RemovePlayerFromVehicle(playerid);
   	
	format(string, sizeof(string), "Has embargado el vehículo #%d.", carid);
    SendClientMessage(playerid, Amarillo, string);
    if(strlen(CocheInfo[carid][cDueno]))
    {
        format(string, sizeof(string), "Ahora su dueño, %s, tendrá que pagar una multa de %d$ para sacarlo del depósito.", CocheInfo[carid][cDueno], CocheInfo[carid][cValor]/30);
    	SendClientMessage(playerid, Amarillo, string);
    }
    format(string, sizeof(string), "El agente %s ha estacionado el vehículo #%d en el depósito de LSPD.", NombreJugador(playerid), carid);
    SendAdminMessage(Aguamarina, string);
    printf(string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(!strcmp(cmdtext, "/deposito", true)) //Comando para abrir deposito de LSPD
{
    if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
    if(JugadorInfo[playerid][pServicioPD] <= 0){SendClientMessage(playerid,Rojo,"No estás de servicio."); return 1;}
    if(IsPlayerInRangeOfPoint(playerid, 10, 1620.6500,-1861.5996,15.3000))
    {
        MoveDynamicObject(lspddeposito, 1612.0996,-1861.5996,15.3000, 2.5);
        SetTimerEx("CerrarPuerta",4000,0,"p",lspddeposito);
        format(string, sizeof(string), "%s abre la puerta del deposito con su control remoto.", NombreJugadorProxy(playerid));
    	ProxDetector(15.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
    	return 1;
    }
    else{SendClientMessage(playerid,Rojo,"No estás en la entrada al depósito del LSPD.");}
    return 1;
}

if(!strcmp(cmdtext, "/reciclar", true))
{
    if(IsPlayerInRangeOfPoint(playerid, 3, 1809.1409,-1444.7749,13.5842) || IsPlayerInRangeOfPoint(playerid, 3, 1555.70081, -1684.40845, 6.06940))
    {
		ActualizarManos(playerid);
  		if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT){SendClientMessage(playerid, Rojo, "No puedes tirar objetos dentro de un vehículo."); return 1;}
		if(JugadorInfo[playerid][pManoDer] == 0){SendClientMessage(playerid, Rojo, "Necesitas tener algo en tu mano derecha."); return 1;}
    	ResetPlayerWeapons(playerid);
        new Mano = JugadorInfo[playerid][pManoDer];
		new string2[128]; format(string2, 128, "tira un/a %s al contenedor.", ObjetoInfo[Mano][NombreObjeto]);
		AutoRol(playerid, string2);
		format(string, sizeof(string), "Tiras al contenedor tu %s", ObjetoInfo[Mano][NombreObjeto]);
		SendClientMessage(playerid, COLOR_GREEN2, string);
        JugadorInfo[playerid][pManoDer] = 0;
        JugadorInfo[playerid][pManoDerCant] = 0;
        RemovePlayerAttachedObject(playerid, 1);
	}
	return 1;
}

if(!strcmp(cmdtext, "/uniformes", true))
{
	if(JugadorInfo[playerid][pFaccion] == 2)
	{
	    if(JugadorInfo[playerid][pServicioFD] <= 0){SendClientMessage(playerid,Rojo,"No estás de servicio (/servicio)."); return 1;}
	    if(IsPlayerInRangeOfPoint(playerid, 5, 1792.0444,-1100.0355,1024.1171) || IsPlayerInRangeOfPoint(playerid, 5, -344.9991,166.3512,1035.1298) || IsPlayerInRangeOfPoint(playerid, 5, -349.9806,167.3951,1035.1298))
	    {
	        TogglePlayerControllable(playerid, 1);
	        ShowModelSelectionMenu(playerid, uniformesfd, "Uniformes", 0x00000099, 0xFFFFFFF96, 0xFF0000AA);
		}
	}
	return 1;
}

if(!strcmp(cmdtext, "/miuniforme", true))
{
	if(JugadorInfo[playerid][pFaccion] == 1)
	{
	    if(JugadorInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid, Rojo, "No estás de servicio (/servicio)."); return 1;}
		if(JugadorInfo[playerid][pUniformePD] > 0){SendClientMessage(playerid, COLOR_ROJO, "Ya tienes uniforme. (/uniforme)"); return 1;}
		if(EnCasilleroPD(playerid))
	    {
			TogglePlayerControllable(playerid, 1);
	        ShowModelSelectionMenu(playerid, uniformespd, "Uniformes", 0x00000099, 0xFFFFFFF96, 0xFF0000AA);
		}
	}
	return 1;
}

if(strcmp(cmd, "/daruniforme", true) == 0) //Da dinero a un jugador
{
	if(JugadorInfo[playerid][pLider] == 1)
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Gris, "USO: /daruniforme [IdJugador/ParteDelNombre] [UniformeID]");
			SendClientMessage(playerid, -1, "71 Cadet - 265 Tenpenny - 266 Pulaski - 267 Hernandez - 280 LSPD Officer - 281 SFPD Officer - 282 LVPD Officer");
			SendClientMessage(playerid, -1, "284 LSPD Motorbike - 285 SWAT Agent - 286 DIC Agent - 282 County Sheriff - 288 Desert Sheriff");
			SendClientMessage(playerid, -1, "306 LSPD Girl - 307 LSPD Black Girl - 30 LVPD Girl");
			return 1;
		}
	    playerid2 = ReturnUser(tmp);
		if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
		if(JugadorInfo[playerid2][pFaccion] != 1) {SendClientMessage(playerid,COLOR_ROJO,"¡No es un oficial de policia!"); return 1;}
		if(JugadorInfo[playerid2][pServicioPD] == 0) {SendClientMessage(playerid,COLOR_ROJO,"¡No está de servicio!"); return 1;}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Gris, "USO: /daruniforme [IdJugador/ParteDelNombre] [UniformeID]");
			SendClientMessage(playerid, -1, "71 Cadet - 265 Tenpenny - 266 Pulaski - 267 Hernandez - 280 LSPD Officer - 281 SFPD Officer - 282 LVPD Officer");
			SendClientMessage(playerid, -1, "284 LSPD Motorbike - 285 SWAT Agent - 286 DIC Agent - 282 County Sheriff - 288 Desert Sheriff");
			SendClientMessage(playerid, -1, "306 LSPD Girl - 307 LSPD Black Girl - 30 LVPD Girl");
			return 1;
		}
		new modelid = strval(tmp);
		JugadorInfo[playerid2][pUniformePD] = modelid;
	    SetPlayerSkin(playerid2, modelid);
	    format(string, 128, "Le has entregado a %s el uniforme %d", NombreJugador(playerid2), modelid);
	    SendClientMessage(playerid, Azulito, string);
	    format(string, 128, "Entregado tu uniforme (%d) por el líder %s", modelid, NombreJugador(playerid));
	    SendClientMessage(playerid2, COLOR_GREEN2, string);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(!strcmp(cmdtext, "/equipofd", true)) //Armeria de LSFD
{
    if(JugadorInfo[playerid][pFaccion] == 2)
	{
	    if(JugadorInfo[playerid][pServicioFD] == 0){SendClientMessage(playerid, Rojo, "No estás de servicio."); return 1;}
		if(IsPlayerInRangeOfPoint(playerid, 5, 1792.0444,-1100.0355,1024.1171) || IsPlayerInRangeOfPoint(playerid, 5, -344.9991,166.3512,1035.1298) || IsPlayerInRangeOfPoint(playerid, 5, -349.9806,167.3951,1035.1298))
	    {
	        new cadena[450];
			strcat(cadena, "\nExtintor");
            strcat(cadena, "\nMáscara de oxígeno");
            strcat(cadena, "\nPala");
            strcat(cadena, "\nMotosierra");
            strcat(cadena, "\nPalanca");
            strcat(cadena, "\nDestornillador");
            strcat(cadena, "\nCasco bombero amarillo");
            strcat(cadena, "\nCasco bombero rojo");
            strcat(cadena, "\nLata de combustible");
			ShowPlayerDialog(playerid, 38, 2, "Equipo LSFD", cadena,"Tomar", "Salir");
	    }
	}
    return 1;
}

if(!strcmp(cmdtext, "/equipopd", true)) //Armeria de LSPD
{
    if(JugadorInfo[playerid][pFaccion] == 1)
	{
	    if(JugadorInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid, Rojo, "No estás de servicio."); return 1;}
		if(EnCasilleroPD(playerid))
	    {
	        new cadena[450];
			strcat(cadena, "Táser\n"); // Todos
			strcat(cadena, "Chaleco antibalas\n"); // Todos
			strcat(cadena, "Porra\n"); // Todos
			strcat(cadena, "Spray\n"); // Todos
			strcat(cadena, "Cargador Pistola\n"); // Todos
			strcat(cadena, "Cargador Deagle\n"); // Todos
			strcat(cadena, "Cargador MP5\n"); // Todos
			strcat(cadena, "Cargador M4\n"); // Todos
			strcat(cadena, "Cargador Rifle\n"); // Todos
			strcat(cadena, "Cargador Escopeta\n"); // Todos
			strcat(cadena, "Casco policia\n"); // 2
			strcat(cadena, "Chaleco Swat\n"); // 3
			strcat(cadena, "Casco Swat\n"); // 3
			strcat(cadena, "Máscara oxígeno\n"); // 4
			strcat(cadena, "Granada lacrimógena\n"); // 4
			strcat(cadena, "Sombrero Sheriff\n"); // 2
			strcat(cadena, "Gorro policia 1\n"); // 2
			strcat(cadena, "Gorro policia 2\n"); // 2
			strcat(cadena, "Gorro policia 3\n"); // 2
			strcat(cadena, "Lentes policia 1\n"); // 2
			strcat(cadena, "Lentes policia 2\n"); // 2
			strcat(cadena, "Lentes policia 3\n"); // 2
			strcat(cadena, "Cámara fotográfica profesional\n"); // 2
			ShowPlayerDialog(playerid, 34, 2, "Equipo LSPD", cadena,"Tomar", "Salir");
	    }
	}
    return 1;
}

if(strcmp(cmd, "/traficar", true) == 0) //Aceptar proposiciones
{
    if(JugadorInfo[playerid][pTrabajo] != 11){return 1;}
    if(JugadorInfo[playerid][pEsperaTrabajar] > 0)
    {	
        format(string, sizeof(string), "No puedes traficar ahora. Tienes que jugar 10 horas entre pedidos.");
        SendClientMessage(playerid, Rojo, string);
		return 1;
    }
    if(JugadorInfo[playerid][pTrabajo] == 11) //Traficante
    {
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 2219.0447,-1047.9170,57.6861))
	    {
		    new opcion[60];
			opcion = strtok(cmdtext, idx);
			if(!strlen(opcion))
			{
			    if(Traficar[playerid] == 0)
			    {
			        ProxDetector(3.0, playerid, "[Desconocido 371] susurra: Dime cuáles productos quieres encargar, ¿cajas o paquetes?",Chat2,Chat2,Chat3,Chat4,Chat5);
					SendClientMessage(playerid, COLOR_YELLOW, "Marca la opción con el comando '/traficar cajas/paquetes'");
					Traficar[playerid] = 1;
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_YELLOW, "Debes escribir los productos que deseas encargar. (/traficar cajas/paquetes)");
				}
			    return 1;
			}
			if(strcmp(opcion,"cajas",true) == 0)
			{
			    if(Traficar[playerid] == 1)
				{
				    ProxDetector(3.0, playerid, "[Desconocido 371] susurra: Buena elección la de hoy, ¿que tipo de cajas vas a querer?",Chat2,Chat2,Chat3,Chat4,Chat5);
		        	new cadena[450];
					strcat(cadena, "Descripción\t\tPrecio\n");
					strcat(cadena, "Cajas de armas blancas\t\t$3000\n"); //
					strcat(cadena, "Cajas de armas livianas\t\t$5000\n");
					strcat(cadena, "Cajas de armas pesadas\t\t$8000");
					ShowPlayerDialog(playerid, 36, DIALOG_STYLE_TABLIST_HEADERS, "Traficar", cadena,"Aceptar", "Cancelar");
					Traficar[playerid] = 0;
				}
				else SendClientMessage(playerid, COLOR_YELLOW, "No estás encargando nada al traficante. Primero usa /traficar.");
			}
			else if(strcmp(opcion,"paquetes",true) == 0)
			{
			    if(Traficar[playerid] == 1)
				{
				    ProxDetector(3.0, playerid, "[Desconocido 371] susurra: Buena elección la de hoy, ¿que tipo de paquetes vas a querer?",Chat2,Chat2,Chat3,Chat4,Chat5);
		        	new cadena[450];
					strcat(cadena, "Descripción\t\tPrecio\n");
					strcat(cadena, "Semillas de marihuana\t\t$1200\n"); //
					strcat(cadena, "Paquetes de hierba\t\t$3000\n");
					strcat(cadena, "Paquetes de LSD\t\t$3500\n"); //
					strcat(cadena, "Paquetes de heroina\t\t$3500\n");
					strcat(cadena, "Paquetes de crack\t\t$3500");
					strcat(cadena, "Paquetes de cocaína\t\t$3500");
					ShowPlayerDialog(playerid, 37, DIALOG_STYLE_TABLIST_HEADERS, "Traficar", cadena,"Aceptar", "Cancelar");
					Traficar[playerid] = 0;
		        }
		        else SendClientMessage(playerid, COLOR_YELLOW, "No estás encargando nada al traficante. Primero usa /traficar.");
			}
		}
		else SendClientMessage(playerid, Rojo, "No estás junto al hombre de los contactos.");
	}
	return 1;
}

if(strcmp(cmd, "/pagarle", true) == 0) //Aceptar proposiciones
{
    if(JugadorInfo[playerid][pTrabajo] == 11) //Traficante
    {
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1327.1383,206.3858,19.5547))
	    {
			if(PrecioT[playerid] > 0)
			{
		        format(string, 128, "Has pagado una suma de %d$ al traficante. Ahora puedes tomar tus productos. (/articulos)", PrecioT[playerid]);
		        SendClientMessage(playerid, COLOR_YELLOW, string);
		        GivePlayerMoneyAC(playerid, -PrecioT[playerid]);
				PrecioT[playerid] = 0;
				AhoraPuedeT[playerid] = 1;
			}
		}
	}
	return 1;
}

if(strcmp(cmd, "/articulos", true) == 0) //Aceptar proposiciones
{
    if(JugadorInfo[playerid][pTrabajo] == 11) //Traficante
    {
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, 1327.1383,206.3858,19.5547))
	    {
			if(AhoraPuedeT[playerid] != 0)
			{
			    if(JugadorInfo[playerid][pManoIzq] == 0 && JugadorInfo[playerid][pManoDer] == 0)
			    {
			        JugadorInfo[playerid][pManoDer] = Caja1[playerid];
	    			JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[Caja1[playerid]][Capacidad];
	    			PonerObjeto(playerid, 1, Caja1[playerid]);
	    			JugadorInfo[playerid][pManoIzq] = Caja2[playerid];
	    			JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[Caja2[playerid]][Capacidad];
	    			PonerObjeto(playerid, 2, Caja2[playerid]);
	    
					AhoraPuedeT[playerid] = 0;
					PrecioT[playerid] = 0;
					Caja1[playerid] = 0;
					Caja2[playerid] = 0;
					JugadorInfo[playerid][pEsperaTrabajar] = 60*10;
					SendClientMessage(playerid, COLOR_GREEN, "Has recibido tus articulos correctamente. Ahora escóndelos para no levantar sospechas.");
				}
				else SendClientMessage(playerid, Rojo, "Debes tener ambas manos desocupadas.");
			}
		}
	}
	return 1;
}

if(!strcmp(cmdtext, "/abrir", true))
{ 
    if (IsPlayerInRangeOfPoint(playerid, 3.2, 1065.4894,56.1566,801.0356))
	{
	    if(JugadorInfo[playerid][pFaccion] == 4)
	 	{
	 	    MoveDynamicObject(PuertaEstudio1, 1065.92737, 55.30130, 800.03748, 1.25, 0.00000, 0.00000, 0.00000);
	 	}
	}
	if (IsPlayerInRangeOfPoint(playerid, 3.2, 1065.5153,46.9039,801.0356))
	{
	    if(JugadorInfo[playerid][pFaccion] == 4)
	 	{
	 	    MoveDynamicObject(PuertaEstudio2, 1065.95374, 46.16650, 800.03748, 1.25, 0.00000, 0.00000, 0.00000);
	 	}
	}
	
	if (IsPlayerInRangeOfPoint(playerid, 12.0, 1961.6819,-2189.9028,13.5469))
	{
	    if(JugadorInfo[playerid][pFaccion] == 1 || JugadorInfo[playerid][pFaccion] == 2 || JugadorInfo[playerid][pFaccion] == 3 || JugadorInfo[playerid][pFaccion] == 5)
	 	{
	 	    SendClientMessage(playerid, AmarilloClaro, "Las rejas del aeropuerto se cerrarán automáticamente en 6 segundos.");
	 	    MoveDynamicObject(PuertaAero[0], 1953.7863, -2189.82690, 13.54420, 2.00);
	 	    MoveDynamicObject(PuertaAero[1], 1969.2813, -2189.82690, 13.54420, 2.00);
	 	    SetTimer("CerrarAeropuerto",6000,false);
	 	}
	}
    if (IsPlayerInRangeOfPoint(playerid, 10.0, 1823.78, -1537.98, 13.54))
    {
        if(JugadorInfo[playerid][pFaccion] == 1)
		{
	    	if (EasternGatesStatus == GATES_CLOSING)
	     	{
	      		SendClientMessage(playerid, Rojo, "¡Las puertas se deben cerrar completamente para abrilas!");
	      		return 1;
	      	}
	      	if(EasternGatesStatus == GATES_CLOSED) // ABRIENDO PUERTAS.
	       	{
	        	SendClientMessage(playerid, AmarilloClaro, "Las puertas se cerrarán automáticamente en 6 segundos.");
		    	MoveObject(LSPrisonGatesObject[0], 1824.318481, -1534.731201, 14.296878 + 0.01, 0.025, 0, 0, 258);
		    	MoveObject(LSPrisonGatesObject[1], 1822.407592, -1540.949951, 14.296878 + 0.01, 0.025, 0, 0, 253);
		    	EasternGatesStatus = GATES_OPENING;
		    	SetTimer("CerrarPrision",6000,false);
		    }
		}
	}
	    	
	if(IsPlayerInRangeOfPoint(playerid, 7, 1712.6497,-1140.1967,24.0781)) // Puerta 1
    {
    	if(JugadorInfo[playerid][pFaccion] == 2)
		{
            MoveDynamicObject(lsfdpuerta[0], 1709.19214, -1142.44971, 21.0975, 3.00);
            MoveDynamicObject(lsfdpuerta[1], 1716.11011, -1142.44971, 21.0975, 3.00);
            format(string, sizeof(string), "%s abre las puertas con su control remoto.", NombreJugadorProxy(playerid));
 	    	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 7, 1729.9376,-1137.7236,24.0859)) // Puerta 2
    {
    	if(JugadorInfo[playerid][pFaccion] == 2)
		{
            MoveDynamicObject(lsfdpuerta[2],1726.19409, -1142.46948, 21.0975, 3.00);
            MoveDynamicObject(lsfdpuerta[3],1733.12024, -1142.44971, 21.0975, 3.00);
            format(string, sizeof(string), "%s abre las puertas con su control remoto.", NombreJugadorProxy(playerid));
 	    	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 7, 1746.9075,-1137.6741,24.0859)) // Puerta 3
    {
    	if(JugadorInfo[playerid][pFaccion] == 2)
		{
            MoveDynamicObject(lsfdpuerta[4],1743.19409, -1142.46948, 21.0975, 3.00);
            MoveDynamicObject(lsfdpuerta[5],1750.12024, -1142.44971, 21.0975, 3.00);
            format(string, sizeof(string), "%s abre las puertas con su control remoto.", NombreJugadorProxy(playerid));
 	    	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 7, 1746.6224,-1099.5781,24.0781)) // Puerta 4
    {
    	if(JugadorInfo[playerid][pFaccion] == 2)
		{
            MoveDynamicObject(lsfdpuerta[6],1743.19409, -1094.92639, 21.0975, 3.00);
            MoveDynamicObject(lsfdpuerta[7],1750.12024, -1094.92639, 21.0975, 3.00);
            format(string, sizeof(string), "%s abre las puertas con su control remoto.", NombreJugadorProxy(playerid));
 	    	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 7, 1763.6658,-1099.9454,24.0781)) // Puerta 5
    {
    	if(JugadorInfo[playerid][pFaccion] == 2)
		{
            MoveDynamicObject(lsfdpuerta[8],1767.11597, -1094.90686, 21.0975, 3.00);
            MoveDynamicObject(lsfdpuerta[9],1760.19409, -1094.92639, 21.0975, 3.00);
            format(string, sizeof(string), "%s abre las puertas con su control remoto.", NombreJugadorProxy(playerid));
 	    	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		}
	}
	return 1;
}

if(!strcmp(cmdtext, "/cerrar", true))
{
    if (IsPlayerInRangeOfPoint(playerid, 3.2, 1065.4894,56.1566,801.0356))
	{
	    if(JugadorInfo[playerid][pFaccion] == 4)
	 	{
	 	    MoveDynamicObject(PuertaEstudio1, 1065.92737, 55.30130, 800.03748, 1.25, 0.00000, 0.00000, 90.00000);
	 	}
	}
	if (IsPlayerInRangeOfPoint(playerid, 3.2, 1065.5153,46.9039,801.0356))
	{
	    if(JugadorInfo[playerid][pFaccion] == 4)
	 	{
	 	    MoveDynamicObject(PuertaEstudio2, 1065.95374, 46.16650, 800.03748, 1.25, 0.00000, 0.00000, 90.00000);
	 	}
	}
	
    if (IsPlayerInRangeOfPoint(playerid, 10.0, 1823.78, -1537.98, 13.54))
    {
        if(JugadorInfo[playerid][pFaccion] == 1)
		{
	    	if (EasternGatesStatus == GATES_OPENING)
	     	{
	      		SendClientMessage(playerid, Rojo, "¡Las puertas se deben abrir completamente para cerrarlas!");
	      		return 1;
		    }
		    CerrarPrision();
		}
	}
	
	if(IsPlayerInRangeOfPoint(playerid, 9, 1712.6497,-1140.1967,24.0781)) // Puerta 1
    {
    	if(JugadorInfo[playerid][pFaccion] == 2)
		{
            MoveDynamicObject(lsfdpuerta[0], 1709.19214, -1142.44971, 25.01650, 3.00);
            MoveDynamicObject(lsfdpuerta[1], 1716.11011, -1142.44971, 25.01650, 3.00);
            format(string, sizeof(string), "%s cierra las puertas con su control remoto.", NombreJugadorProxy(playerid));
 	    	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 9, 1729.9376,-1137.7236,24.0859)) // Puerta 2
    {
    	if(JugadorInfo[playerid][pFaccion] == 2)
		{
            MoveDynamicObject(lsfdpuerta[2],1726.19409, -1142.46948, 25.01650, 3.00);
            MoveDynamicObject(lsfdpuerta[3],1733.12024, -1142.44971, 25.01650, 3.00);
            format(string, sizeof(string), "%s cierra las puertas con su control remoto.", NombreJugadorProxy(playerid));
 	    	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 9, 1746.9075,-1137.6741,24.0859)) // Puerta 3
    {
    	if(JugadorInfo[playerid][pFaccion] == 2)
		{
            MoveDynamicObject(lsfdpuerta[4],1743.19409, -1142.46948, 25.01650, 3.00);
            MoveDynamicObject(lsfdpuerta[5],1750.12024, -1142.44971, 25.01650, 3.00);
            format(string, sizeof(string), "%s cierra las puertas con su control remoto.", NombreJugadorProxy(playerid));
 	    	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 9, 1746.6224,-1099.5781,24.0781)) // Puerta 4
    {
    	if(JugadorInfo[playerid][pFaccion] == 2)
		{
            MoveDynamicObject(lsfdpuerta[6],1743.19409, -1094.92639, 25.01650, 3.00);
            MoveDynamicObject(lsfdpuerta[7],1750.12024, -1094.92639, 25.01650, 3.00);
            format(string, sizeof(string), "%s cierra las puertas con su control remoto.", NombreJugadorProxy(playerid));
 	    	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		}
	}
	else if(IsPlayerInRangeOfPoint(playerid, 9, 1763.6658,-1099.9454,24.0781)) // Puerta 5
    {
    	if(JugadorInfo[playerid][pFaccion] == 2)
		{
            MoveDynamicObject(lsfdpuerta[8],1767.11597, -1094.90686, 25.01650, 3.00);
            MoveDynamicObject(lsfdpuerta[9],1760.19409, -1094.92639, 25.01650, 3.00);
            format(string, sizeof(string), "%s cierra las puertas con su control remoto.", NombreJugadorProxy(playerid));
 	    	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		}
	}
	return 1;
}

//
if(!strcmp(cmdtext, "/uniforme", true)) //
{
    if(JugadorInfo[playerid][pFaccion] == 1)
	{
	    if(JugadorInfo[playerid][pServicioPD] > 0)
		{
			if(GetPlayerSkin(playerid) == JugadorInfo[playerid][pUniformePD])
			{
			    SendClientMessage(playerid, COLOR_GREEN2, "Te quitas tu uniforme de facción y ahora te muestras como un civil.");
				SetPlayerSkin(playerid, JugadorInfo[playerid][pSkin]);
			}
			else
			{
			    if(JugadorInfo[playerid][pUniformePD] > 0)
			    {
			    	SendClientMessage(playerid, COLOR_GREEN2, "Te quitas tu ropa de civil y te colocas tu uniforme de facción.");
					SetPlayerSkin(playerid, JugadorInfo[playerid][pUniformePD]);
				}
				else { SendClientMessage(playerid, COLOR_ROJO, "¡No tienes un uniforme! (/miuniforme)"); }
			}
		}
	}
	return 1;
}
if(!strcmp(cmdtext, "/servicio", true)) //Armeria de LSPD
{
    if(JugadorInfo[playerid][pFaccion] == 1)
	{
	    if(EnCasilleroPD(playerid))
	    {
			if(JugadorInfo[playerid][pServicioPD] == 0) // Si no está de servicio.
			{
			    JugadorInfo[playerid][pServicioPD] = 1;
			    JugadorInfo[playerid][pServicioMD] = 1;
			    if(JugadorInfo[playerid][pUniformePD] > 0)
			    {
				   	SendClientMessage(playerid, COLOR_GREEN, "Ahora estás de servicio en tu trabajo, colocado uniforme de facción.");
					SetPlayerSkin(playerid, JugadorInfo[playerid][pUniformePD]);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_ROJO, "Ahora estás de servicio como policia, pero no tienes un uniforme de facción. (/miuniforme)");
				}
			}
			else
			{
			    JugadorInfo[playerid][pServicioPD] = 0;
			    JugadorInfo[playerid][pServicioMD] = 0;
				SetPlayerSkin(playerid, JugadorInfo[playerid][pSkin]);
			    SendClientMessage(playerid, COLOR_GREEN, "Dejas de estar de servicio en tu trabajo, colocado vestimenta personal.");
			}
		}
		else SendClientMessage(playerid, Rojo, "No estás cerca de tu taquilla");
	}
	if(JugadorInfo[playerid][pFaccion] == 2)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5, 1792.0444,-1100.0355,1024.1171) || IsPlayerInRangeOfPoint(playerid, 5, -344.9991,166.3512,1035.1298) || IsPlayerInRangeOfPoint(playerid, 5, -349.9806,167.3951,1035.1298))
	    {
			if(JugadorInfo[playerid][pServicioFD] == 0) // Si no está de servicio.
			{
			    JugadorInfo[playerid][pServicioFD] = 1;
			    JugadorInfo[playerid][pServicioMD] = 1;
			    SendClientMessage(playerid, COLOR_GREEN, "Estás de servicio en tu trabajo");
			}
			else
			{
			    JugadorInfo[playerid][pServicioFD] = 0;
			    JugadorInfo[playerid][pServicioMD] = 0;
			    SendClientMessage(playerid, COLOR_GREEN, "Estás fuera de servicio");
			    ShowModelSelectionMenu(playerid, ropaservicio, "Vestimenta", 0x00000099, 0xFFFFFFF96, 0xFF0000AA);
			}
		}
		else SendClientMessage(playerid, Rojo, "No estás cerca de tu taquilla");
	}
	return 1;
}
//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/qcables", true) == 0) //Esposar a un jugador
{
	if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
	if(JugadorInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"No estás de servicio."); return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Gris, "USO: /qcables [IdJugador/ParteDelNombre]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
	if(Taseado[playerid2] >= 1)
 	{
	    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"No te puedes quitarle los cables a tí mismo."); return 1;}
	    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
	    if(!GetPlayersProx(3.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "Demasiado lejos."); return 1;}
	    format(string, sizeof(string), "%s le quita los cables del táser a %s.", NombreJugadorProxy(playerid), NombreJugadorProxy(playerid2));
	    ProxDetector(15.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	    ClearAnimations(playerid2, 1);
		Taseado[playerid2] = 0;
	    TogglePlayerControllable(playerid2, 1);
	}
	else
	{
		SendClientMessage(playerid, Rojo, "El jugador no está paralizado por un táser.");
	}
	return 1;
}

if(strcmp(cmd, "/esposar", true) == 0) //Esposar a un jugador
{
	if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
	if(JugadorInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"No estás de servicio."); return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Gris, "USO: /esposar [IdJugador/ParteDelNombre]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"No te puedes esposar a tí mismo."); return 1;}
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
    if(!GetPlayersProx(3.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "Demasiado lejos."); return 1;}
	if(IsPlayerInAnyVehicle(playerid2)){SendClientMessage(playerid, Rojo, "No puedes esposar a alguien que está en un vehículo. Prueba /Retener."); return 1;}
	if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleID(playerid2) == 0){SendClientMessage(playerid, Rojo, "No puedes esposar a alguien desde un vehículo."); return 1;}
    if(JugadorInfo[playerid2][pServicioPD] > 0){SendClientMessage(playerid,Rojo,"No puedes esposar a un policía de servicio."); return 1;}
    format(string, sizeof(string), "Has sido esposado por %s, espera a que te liberen, no intentes escapar.", NombreJugadorProxy(playerid));
    SendClientMessage(playerid2, Azulito, string);
    format(string, sizeof(string), "Has esposado a %s. Escribe '/desesposar' para desesposarlo.", NombreJugadorProxy(playerid2));
    SendClientMessage(playerid, Azulito, string);
    format(string, sizeof(string), "%s le coloca unas esposas a %s.", NombreJugadorProxy(playerid), NombreJugadorProxy(playerid2));
    ProxDetector(15.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
    ClearAnimations(playerid2, 1);
    SetPlayerSpecialAction(playerid2, SPECIAL_ACTION_CUFFED);
    SetPlayerAttachedObject(playerid2, 4, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977,-81.700035, 0.891999, 1.000000, 1.168000);
    Esposado[playerid2] = 1;
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/desesposar", true) == 0) //Desesposar a un jugador
{
	if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
	if(JugadorInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"No estás de servicio."); return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Gris, "USO: /desesposar [IdJugador/ParteDelNombre]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
    if(!GetPlayersProx(3.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "Demasiado lejos."); return 1;}
	if(IsPlayerInAnyVehicle(playerid2)){SendClientMessage(playerid, Rojo, "No puedes desesposar a alguien que está en un vehículo. Prueba /Soltar."); return 1;}
	if(Esposado[playerid2] != 1){SendClientMessage(playerid, Rojo, "Esta persona no está esposada."); return 1;}
    format(string, sizeof(string), "Has sido desesposado por %s.", NombreJugadorProxy(playerid));
    SendClientMessage(playerid2, Azulito, string);
    format(string, sizeof(string), "Has desesposado a %s.", NombreJugadorProxy(playerid2));
    SendClientMessage(playerid, Azulito, string);
    format(string, sizeof(string), "%s quita las esposas a %s.", NombreJugadorProxy(playerid), NombreJugadorProxy(playerid2));
    ProxDetector(15.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
    ClearAnimations(playerid2, 1);
    SetPlayerSpecialAction(playerid2, SPECIAL_ACTION_NONE);
    RemovePlayerAttachedObject(playerid2, 4);
    Esposado[playerid2] = 0;
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/retener", true) == 0) //Retener a un jugador a un vehículo
{
	if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
	if(JugadorInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"No estás de servicio."); return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Gris, "USO: /retener [IdJugador/ParteDelNombre]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
	if(!IsPlayerInAnyVehicle(playerid)){SendClientMessage(playerid,Rojo,"No estás en ningún vehículo."); return 1;}
    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"No te puedes retener a tí mismo."); return 1;}
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
	if(GetPlayerVehicleID(playerid2) != GetPlayerVehicleID(playerid)){SendClientMessage(playerid, Rojo, "Esta persona no está dentro de tu vehículo."); return 1;}
    if(JugadorInfo[playerid2][pServicioPD] > 0){SendClientMessage(playerid,Rojo,"No puedes retener a un policía de servicio."); return 1;}
    format(string, sizeof(string), "Has sido esposado al vehículo por %s.", NombreJugadorProxy(playerid));
    SendClientMessage(playerid2, Azulito, string);
    format(string, sizeof(string), "Has esposado a %s al vehículo. Escribe '/soltar' para desesposarlo.", NombreJugadorProxy(playerid2));
    SendClientMessage(playerid, Azulito, string);
    format(string, sizeof(string), "%s le coloca unas esposas a %s y lo amarra al vehículo.", NombreJugadorProxy(playerid), NombreJugadorProxy(playerid2));
    ProxDetector(15.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
    TogglePlayerControllable(playerid2, 0);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/soltar", true) == 0) //Soltar a un jugador del vehículo
{
	if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
	if(JugadorInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"No estás de servicio."); return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Gris, "USO: /soltar [IdJugador/ParteDelNombre]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
	if(!IsPlayerInAnyVehicle(playerid)){SendClientMessage(playerid,Rojo,"No estás en ningún vehículo."); return 1;}
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
	if(GetPlayerVehicleID(playerid2) != GetPlayerVehicleID(playerid)){SendClientMessage(playerid, Rojo, "Esta persona no está en tu vehículo."); return 1;}
    format(string, sizeof(string), "Has sido desesposado del vehículo.", NombreJugadorProxy(playerid));
    SendClientMessage(playerid2, Azulito, string);
    format(string, sizeof(string), "Has desesposado del vehículo a %s.", NombreJugadorProxy(playerid2));
    SendClientMessage(playerid, Azulito, string);
    format(string, sizeof(string), "%s desesposa a %s del vehículo.", NombreJugadorProxy(playerid), NombreJugadorProxy(playerid2));
    ProxDetector(15.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
    TogglePlayerControllable(playerid2, 1);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/refuerzos", true) == 0 || strcmp(cmd,"/ref",true) ==0 ) //Solicitar refuerzos
{
	if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
	if(JugadorInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"No estás de servicio."); return 1;}
	if(SolicitaRefuerzos[playerid] == 1){SendClientMessage(playerid,Rojo,"Ya estás solicitando refuerzos."); return 1;}
	SolicitaRefuerzos[playerid] = 1;
	format(string, sizeof(string), "[CENTRAL]: A todas las unidades, %s pidió refuerzos por la zona de %s.", NombreJugador(playerid), GetPlayerZona(playerid));
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(JugadorInfo[i][pFaccion] == 1 && JugadorInfo[i][pServicioPD] > 0)
			{
				SetPlayerMarkerForPlayer(i, playerid, 0x00CB00FF);
				SendClientMessage(i, COLOR_RADIO, string);
			}
		}
	}
	return 1;
}

if(strcmp(cmd, "/autorizarswat", true) == 0) //Solicitar refuerzos
{
	if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
	if(JugadorInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"No estás de servicio."); return 1;}
	if(JugadorInfo[playerid][pRango] >= 7)
	{
		if(autorizarswat == 0) // no está autorizada
		{
		    format(string, sizeof(string), "[CENTRAL]: A todas las unidades, %s ha autorizado una operación SWAT.", NombreJugador(playerid));
	        SendRadioMessage(1, COLOR_RADIO, string);
	        autorizarswat = 1;
		}
		else
		{
		    format(string, sizeof(string), "[CENTRAL]: A todas las unidades, %s ha desautorizado una operación SWAT.", NombreJugador(playerid));
	        SendRadioMessage(1, COLOR_RADIO, string);
	        autorizarswat = 0;
	 	}
 	}
 	else
 	{
 	    SendClientMessage(playerid, Rojo, "Rango insuficiente.");
 	}
	return 1;
}

if(strcmp(cmd, "/escop", true) == 0)
{
	if(JugadorInfo[playerid][pFaccion] == 1 && JugadorInfo[playerid][pServicioPD] == 1)
	{
		if(JugadorInfo[playerid][pManoDer] == 22 && JugadorInfo[playerid][pManoDerCant] != 0)
		{
			if(BalasDeGoma[playerid] == 0)
			{
			    AutoRol(playerid, "carga los cartuchos de goma en su escopeta.");
			    BalasDeGoma[playerid] = 1;
		 	}
		 	else
		 	{
		 	    AutoRol(playerid, "descarga los cartuchos de goma en su escopeta.");
			    BalasDeGoma[playerid] = 0;
		 	}
		}
		else SendClientMessage(playerid, COLOR_ROJO, "No tienes una escopeta con cartuchos");
  	}
	return 1;
}
if(strcmp(cmd, "/botonpanico", true) == 0 || strcmp(cmd,"/bpanico",true) ==0 ) //Solicitar refuerzos
{
	if(JugadorInfo[playerid][pFaccion] >= 1 && JugadorInfo[playerid][pFaccion] <= 3)
	{
		if(SolicitaRefuerzos[playerid] == 1){SendClientMessage(playerid,Rojo,"Ya tienes una solicitud de refuerzos activa."); return 1;}
		SendClientMessage(playerid, COLOR_GREEN, "Has presionado el botón de pánico del radio. Marcada tu posición a oficiales de la policía.");

		new nombre[32];
		switch(JugadorInfo[playerid][pFaccion])
		{
	    	case 1:
	    	{
				format(nombre, 32, "LSPD");
	    	}
	    	case 2:
	    	{
	        	format(nombre, 32, "LSFD");
	    	}
	  	    case 3:
	    	{
	  	       format(nombre, 32, "ESTADO");
	    	}
	 	}

		format(string, sizeof(string), "[ALERTA %s] %s ha pulsado el botón del pánico de su radio. Marcada última posición conocida.", nombre, NombreJugador(playerid));
		new Float:posicion[3];
		GetPlayerPos(playerid, posicion[0], posicion[1], posicion[2]);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(JugadorInfo[i][pFaccion] == 1 && JugadorInfo[i][pServicioPD] > 0)
				{
					SetPlayerCheckpoint(i, posicion[0], posicion[1], posicion[2], 3.0);
					SendClientMessage(i, COLOR_RADIO, string);
				}
			}
		}
	}
	return 1;
}


//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/marcar",true) == 0) //Saca un objeto del inventario
{
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /marcar [1/2/3/4]");
        SendClientMessage(playerid, AmarilloClaro, "1: Asistencia bomberil/policial - 2: Asistencia de seguridad pública - 3: Asistencia gubernamental - 4: Asistencia interdepartamental");
        return 1;
    }
    new Opcion = strval(tmp);
    if(Opcion < 1 || Opcion > 4){SendClientMessage(playerid, Rojo, "1: Asistencia bomberil/policial - 2: Asistencia de seguridad pública - 3: Asistencia gubernamental - 4: Asistencia interdepartamental"); return 1;}
	switch(Opcion)
	{
	    case 1: // Policias y bomberos (NARANJO)
	    {
	        if(SolicitaTodos[playerid] == 1){SendClientMessage(playerid,Rojo,"Ya estás solicitando refuerzos."); return 1;}
			SolicitaTodos[playerid] = 1;
			format(string, sizeof(string), "[CENTRAL]: %s solicita la presencia bomberil y policial en el barrio de %s.", NombreJugador(playerid), GetPlayerZona(playerid));
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(JugadorInfo[i][pFaccion] == 1 && JugadorInfo[i][pServicioPD] > 0 || (JugadorInfo[i][pFaccion] == 2 && JugadorInfo[i][pServicioFD] > 0))
					{
						SetPlayerMarkerForPlayer(i, playerid, Naranja);
						SendClientMessage(i, COLOR_RADIO, string);
					}
				}
			}
	    }
	    case 2: // Asistencia de seguridad pública (AZUL)
	    {
	        if(SolicitaTodos[playerid] == 2){SendClientMessage(playerid,Rojo,"Ya estás solicitando refuerzos."); return 1;}
			SolicitaTodos[playerid] = 2;
			format(string, sizeof(string), "[CENTRAL]: %s solicita la presencia de seguridad pública en el barrio de %s.", NombreJugador(playerid), GetPlayerZona(playerid));
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(JugadorInfo[i][pFaccion] == 1 && JugadorInfo[i][pServicioPD] > 0)
					{
						SetPlayerMarkerForPlayer(i, playerid, 0x1229FAFF);
						SendClientMessage(i, COLOR_RADIO, string);
					}
				}
			}
	    }
	    case 3: // Asistencia de gobierno (ROJO)
	    {
	        if(SolicitaTodos[playerid] == 3){SendClientMessage(playerid,Rojo,"Ya estás solicitando refuerzos."); return 1;}
			SolicitaTodos[playerid] = 3;
			format(string, sizeof(string), "[CENTRAL]: %s solicita la presencia gubernamental en el barrio de %s.", NombreJugador(playerid), GetPlayerZona(playerid));
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(JugadorInfo[i][pFaccion] == 1 && JugadorInfo[i][pServicioPD] > 0 || (JugadorInfo[i][pFaccion] == 3))
					{
						SetPlayerMarkerForPlayer(i, playerid, 0x5b0000FF);
						SendClientMessage(i, COLOR_RADIO, string);
					}
				}
			}
	    }
	    case 4: // Asistencia general (AMARILLO)
	    {
	        if(SolicitaTodos[playerid] == 4){SendClientMessage(playerid,Rojo,"Ya estás solicitando refuerzos."); return 1;}
			SolicitaTodos[playerid] = 4;
			format(string, sizeof(string), "[CENTRAL]: %s solicita la presencia interdepartamental en el barrio de %s.", NombreJugador(playerid), GetPlayerZona(playerid));
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(JugadorInfo[i][pFaccion] == 1 && JugadorInfo[i][pServicioPD] > 0 || (JugadorInfo[i][pFaccion] == 2 && JugadorInfo[i][pServicioFD] > 0))
					{
						SetPlayerMarkerForPlayer(i, playerid, COLOR_YELLOW);
						SendClientMessage(i, COLOR_RADIO, string);
					}
				}
			}
	    }
	}
    return 1;
}


if(strcmp(cmd, "/nomarcar", true) == 0) //Dejar de solicitar refuerzos
{
	if(JugadorInfo[playerid][pFaccion] >= 1 && JugadorInfo[playerid][pFaccion] <= 3)
	{
		if(SolicitaTodos[playerid] == 0){SendClientMessage(playerid,Rojo,"No estás solicitando refuerzos."); return 1;}
		SolicitaTodos[playerid] = 0;
		SendClientMessage(playerid, COLOR_GREEN, "Has cancelado la solicitud de refuerzos.");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(JugadorInfo[i][pFaccion] == 1 && JugadorInfo[i][pServicioPD] > 0 || (JugadorInfo[i][pFaccion] == 2 && JugadorInfo[i][pServicioFD] > 0) || (JugadorInfo[i][pFaccion] == 3))
				{
					SetPlayerMarkerForPlayer(i, playerid, Invisible);
				}
			}
		}
		KillTimer(NoRefAuto[playerid]);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/noref", true) == 0) //Dejar de solicitar refuerzos
{
	if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
	if(SolicitaRefuerzos[playerid] != 0)
	{
		SolicitaRefuerzos[playerid] = 0;
		format(string, sizeof(string), "[CENTRAL]: A todas las unidades, %s ha cancelado la solicitud de apoyo.", NombreJugador(playerid));
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(JugadorInfo[i][pFaccion] == 1 && JugadorInfo[i][pServicioPD] > 0)
				{
					SetPlayerMarkerForPlayer(i, playerid, Invisible);
					SendClientMessage(i, COLOR_RADIO, string);
				}
			}
		}
		KillTimer(NoRefAuto[playerid]);
	}
	else if(SolicitaTodos[playerid] != 0)
	{
	    SolicitaTodos[playerid] = 0;
		SendClientMessage(playerid, COLOR_GREEN, "Has cancelado la solicitud de refuerzos.");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(JugadorInfo[i][pFaccion] == 1 && JugadorInfo[i][pServicioPD] > 0 || (JugadorInfo[i][pFaccion] == 2 && JugadorInfo[i][pServicioFD] > 0) || (JugadorInfo[i][pFaccion] == 3))
				{
					SetPlayerMarkerForPlayer(i, playerid, Invisible);
				}
			}
		}
		KillTimer(NoRefAuto[playerid]);
	}
	else SendClientMessage(playerid, COLOR_ROJO, "No estás pidiendo refuerzos.");
	return 1;
}

//---------------------------------------------------------------------------------------------------------------
if(strcmp(cmd, "/gorro", true) == 0) //Quitarse el gorro
{
    if(JugadorInfo[playerid][pManoDer] > 0) { return SendClientMessage(playerid, Rojo, "¡Ya tienes algo en tu mano derecha!"), 1; }
    if(JugadorInfo[playerid][pToy][0] >= 1) // Gorro colocado
	{
		RemovePlayerAttachedObject(playerid, 4);
		JugadorInfo[playerid][pManoDer] = JugadorInfo[playerid][pToy][0];
		JugadorInfo[playerid][pManoDerCant] = 1;
		PonerObjeto(playerid, 1, JugadorInfo[playerid][pManoDer]);
		JugadorInfo[playerid][pToy][0] = 0;
		format(string, 128, "Retiras tu %s y lo sostienes en tu mano derecha.", ObjetoInfo[JugadorInfo[playerid][pManoDer]][NombreObjeto]); SendClientMessage(playerid, Verde, string);
		SaveToys(playerid);
 	}
	return 1;
}
if(strcmp(cmd, "/gafas", true) == 0) //Quitarse las gafas
{
    if(JugadorInfo[playerid][pManoDer] > 0) { return SendClientMessage(playerid, Rojo, "¡Ya tienes algo en tu mano derecha!"), 1; }
	if(JugadorInfo[playerid][pToy][1] >= 1) // Gafas colocado
	{
		RemovePlayerAttachedObject(playerid, 5);
		JugadorInfo[playerid][pManoDer] = JugadorInfo[playerid][pToy][1];
		JugadorInfo[playerid][pManoDerCant] = 1;
		PonerObjeto(playerid, 1, JugadorInfo[playerid][pManoDer]);
		JugadorInfo[playerid][pToy][1] = 0;
		format(string, 128, "Retiras tu %s y lo sostienes en tu mano derecha.", ObjetoInfo[JugadorInfo[playerid][pManoDer]][NombreObjeto]); SendClientMessage(playerid, Verde, string);
		SaveToys(playerid);
	}
	return 1;
}

if(strcmp(cmd, "/mandibula", true) == 0) //Quitarse un pañuelo
{
    if(JugadorInfo[playerid][pManoDer] > 0) { return SendClientMessage(playerid, Rojo, "¡Ya tienes algo en tu mano derecha!"), 1; }
    if(JugadorInfo[playerid][pToy][2] >= 1) // Pañuelo colocado
	{
		RemovePlayerAttachedObject(playerid, 6);
		JugadorInfo[playerid][pManoDer] = JugadorInfo[playerid][pToy][2];
		JugadorInfo[playerid][pManoDerCant] = 1;
		PonerObjeto(playerid, 1, JugadorInfo[playerid][pManoDer]);
		JugadorInfo[playerid][pToy][2] = 0;
		MascaraGas[playerid] = 0;
 		Mascara[playerid] = 0;
		format(string, 128, "Retiras tu %s y lo sostienes en tu mano derecha.", ObjetoInfo[JugadorInfo[playerid][pManoDer]][NombreObjeto]); SendClientMessage(playerid, Verde, string);
		SaveToys(playerid);
	}
	return 1;
}

if(strcmp(cmd, "/chaleco", true) == 0) //Quitarse un pañuelo
{
    if(JugadorInfo[playerid][pManoDer] > 0) { return SendClientMessage(playerid, Rojo, "¡Ya tienes algo en tu mano derecha!"), 1; }
    if(JugadorInfo[playerid][pToy][3] >= 1) // Pañuelo colocado
 	{
        new Float:chaleco, chalecocant;
	    GetPlayerArmour(playerid, chaleco);
       	chalecocant = floatround(chaleco, floatround_round);
	 	RemovePlayerAttachedObject(playerid, 7);
		JugadorInfo[playerid][pManoDer] = JugadorInfo[playerid][pToy][3];
		JugadorInfo[playerid][pManoDerCant] = chalecocant;
		PonerObjeto(playerid, 1, JugadorInfo[playerid][pManoDer]);
		SetPlayerArmour(playerid, 0);
		JugadorInfo[playerid][pToy][3] = 0;
		format(string, 128, "Retiras tu %s y lo sostienes en tu mano derecha.", ObjetoInfo[JugadorInfo[playerid][pManoDer]][NombreObjeto]); SendClientMessage(playerid, Verde, string);
		SaveToys(playerid);
	}
	return 1;
}

if(strcmp(cmd, "/personalizado", true) == 0) //Quitarse un pañuelo
{
    if(JugadorInfo[playerid][pManoDer] > 0) { return SendClientMessage(playerid, Rojo, "¡Ya tienes algo en tu mano derecha!"), 1; }
    if(JugadorInfo[playerid][pToy][4] >= 1) // Algo colocado
	{
		RemovePlayerAttachedObject(playerid, 8);
		JugadorInfo[playerid][pManoDer] = JugadorInfo[playerid][pToy][4];
		JugadorInfo[playerid][pManoDerCant] = 1;
		PonerObjeto(playerid, 1, JugadorInfo[playerid][pManoDer]);
		JugadorInfo[playerid][pToy][4] = 0;
		Mascara[playerid] = 0;
		format(string, 128, "Retiras tu %s y lo sostienes en tu mano derecha.", ObjetoInfo[JugadorInfo[playerid][pManoDer]][NombreObjeto]); SendClientMessage(playerid, Verde, string);
		SaveToys(playerid);
	}
	return 1;
}

if(strcmp(cmd, "/usar", true) == 0) //Ponerse o quitarse un pasamontañas
{
	// -- accesorios.1
	if(JugadorInfo[playerid][pManoDer] >= 129 && JugadorInfo[playerid][pManoDer] <= 173) // Es un accesorio
	{
	    for(new toy; toy < sizeof(ToyInfo); toy++)
	    {
	        if(JugadorInfo[playerid][pManoDer] == ToyInfo[toy][tObjetoID]) // Es un objeto válido para los accesorios
	        {

				if(ToyInfo[toy][tIndex] == GORRO)
				{
				    if(JugadorInfo[playerid][pToy][0] == 0)
					{
						JugadorInfo[playerid][pManoDer] = 0;
						JugadorInfo[playerid][pManoDerCant] = 0;
						PonerObjeto(playerid, 1, JugadorInfo[playerid][pManoDer]);
						if(JugadorInfo[playerid][pToyX][0] > 0 && JugadorInfo[playerid][pToyY][0] > 0 && JugadorInfo[playerid][pToyZ][0] > 0)
						{
						    SendClientMessage(playerid, Verde, "Colocado objeto en las coordenadas guardadas previamente, para eliminarlas y volverlas a fijar usa /accesorios.");
						    JugadorInfo[playerid][pToy][0] = ToyInfo[toy][tObjetoID];
						    SetPlayerAttachedObject(playerid, ToyInfo[toy][tIndex], ToyInfo[toy][tModeloID], ToyInfo[toy][tBone],
							JugadorInfo[playerid][pToyX][0], JugadorInfo[playerid][pToyY][0], JugadorInfo[playerid][pToyZ][0],
							JugadorInfo[playerid][pToyrX][0], JugadorInfo[playerid][pToyrY][0], JugadorInfo[playerid][pToyrZ][0],
							JugadorInfo[playerid][pToytX][0], JugadorInfo[playerid][pToytY][0], JugadorInfo[playerid][pToytZ][0]);
						}
						else
						{
						    format(string, 128, "Colocado %s para que sea visible, para editar y fijar las coordenadas usa /accesorios.", ToyInfo[toy][tObjetoNombre]); SendClientMessage(playerid, Verde, string);
                            SetPlayerAttachedObject(playerid, ToyInfo[toy][tIndex], ToyInfo[toy][tModeloID], ToyInfo[toy][tBone]);
							JugadorInfo[playerid][pToy][0] = ToyInfo[toy][tObjetoID];
							JugadorInfo[playerid][pToyX][0] = 0;
							JugadorInfo[playerid][pToyY][0] = 0;
							JugadorInfo[playerid][pToyZ][0] = 0;
							JugadorInfo[playerid][pToyrX][0] = 0;
							JugadorInfo[playerid][pToyrY][0] = 0;
							JugadorInfo[playerid][pToyrZ][0] = 0;
							JugadorInfo[playerid][pToytX][0] = 1;
							JugadorInfo[playerid][pToytY][0] = 1;
							JugadorInfo[playerid][pToytZ][0] = 1;
						}
						PonerObjeto(playerid, 1, 0);
						return SaveToys(playerid), 1;
					}
					else { return SendClientMessage(playerid, COLOR_ROJO, "¡Ya tienes un objeto del mismo tipo en tu cuerpo!"), 1; }
				}
				if(ToyInfo[toy][tIndex] == GAFAS)
				{
				    if(JugadorInfo[playerid][pToy][1] == 0)
					{
						JugadorInfo[playerid][pManoDer] = 0;
						JugadorInfo[playerid][pManoDerCant] = 0;
						PonerObjeto(playerid, 1, JugadorInfo[playerid][pManoDer]);
						if(JugadorInfo[playerid][pToyX][1] > 0 && JugadorInfo[playerid][pToyY][1] > 0 && JugadorInfo[playerid][pToyZ][1] > 0)
						{
						    SendClientMessage(playerid, Verde, "Colocado objeto en las coordenadas guardadas previamente, para eliminarlas y volverlas a fijar usa /accesorios.");
						    JugadorInfo[playerid][pToy][1] = ToyInfo[toy][tObjetoID];
						    SetPlayerAttachedObject(playerid, ToyInfo[toy][tIndex], ToyInfo[toy][tModeloID], ToyInfo[toy][tBone],
							JugadorInfo[playerid][pToyX][1], JugadorInfo[playerid][pToyY][1], JugadorInfo[playerid][pToyZ][1],
							JugadorInfo[playerid][pToyrX][1], JugadorInfo[playerid][pToyrY][1], JugadorInfo[playerid][pToyrZ][1],
							JugadorInfo[playerid][pToytX][1], JugadorInfo[playerid][pToytY][1], JugadorInfo[playerid][pToytZ][1]);
						}
						else
						{
                            format(string, 128, "Colocado %s para que sea visible, para editar y fijar las coordenadas usa /accesorios.", ToyInfo[toy][tObjetoNombre]); SendClientMessage(playerid, Verde, string);
                            SetPlayerAttachedObject(playerid, ToyInfo[toy][tIndex], ToyInfo[toy][tModeloID], ToyInfo[toy][tBone]);
							JugadorInfo[playerid][pToy][1] = ToyInfo[toy][tObjetoID];
							JugadorInfo[playerid][pToyX][1] = 0;
							JugadorInfo[playerid][pToyY][1] = 0;
							JugadorInfo[playerid][pToyZ][1] = 0;
							JugadorInfo[playerid][pToyrX][1] = 0;
							JugadorInfo[playerid][pToyrY][1] = 0;
							JugadorInfo[playerid][pToyrZ][1] = 0;
							JugadorInfo[playerid][pToytX][1] = 1;
							JugadorInfo[playerid][pToytY][1] = 1;
							JugadorInfo[playerid][pToytZ][1] = 1;
						}
						PonerObjeto(playerid, 1, 0);
						return SaveToys(playerid), 1;
					}
					else { return SendClientMessage(playerid, COLOR_ROJO, "¡Ya tienes un objeto del mismo tipo en tu cuerpo!"), 1; }
				}
				if(ToyInfo[toy][tIndex] == MANDIBULA)
				{
				    if(JugadorInfo[playerid][pToy][2] == 0)
					{
						JugadorInfo[playerid][pManoDer] = 0;
						JugadorInfo[playerid][pManoDerCant] = 0;
						MascaraGas[playerid] = 1;
            			Mascara[playerid] = 1;
            			for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if(IsPlayerConnected(i))
							{
				                ShowPlayerNameTagForPlayer(i, playerid, 0);
							}
						}
						PonerObjeto(playerid, 1, JugadorInfo[playerid][pManoDer]);
						if(JugadorInfo[playerid][pToyX][2] > 0 && JugadorInfo[playerid][pToyY][2] > 0 && JugadorInfo[playerid][pToyZ][2] > 0)
						{
						    SendClientMessage(playerid, Verde, "Colocado objeto en las coordenadas guardadas previamente, para eliminarlas y volverlas a fijar usa /accesorios.");
						    JugadorInfo[playerid][pToy][2] = ToyInfo[toy][tObjetoID];
						    SetPlayerAttachedObject(playerid, ToyInfo[toy][tIndex], ToyInfo[toy][tModeloID], ToyInfo[toy][tBone],
							JugadorInfo[playerid][pToyX][2], JugadorInfo[playerid][pToyY][2], JugadorInfo[playerid][pToyZ][2],
							JugadorInfo[playerid][pToyrX][2], JugadorInfo[playerid][pToyrY][2], JugadorInfo[playerid][pToyrZ][2],
							JugadorInfo[playerid][pToytX][2], JugadorInfo[playerid][pToytY][2], JugadorInfo[playerid][pToytZ][2]);
						}
						else
						{
                            format(string, 128, "Colocado %s para que sea visible, para editar y fijar las coordenadas usa /accesorios.", ToyInfo[toy][tObjetoNombre]); SendClientMessage(playerid, Verde, string);
                            SetPlayerAttachedObject(playerid, ToyInfo[toy][tIndex], ToyInfo[toy][tModeloID], ToyInfo[toy][tBone]);
							JugadorInfo[playerid][pToy][2] = ToyInfo[toy][tObjetoID];
							JugadorInfo[playerid][pToyX][2] = 0;
							JugadorInfo[playerid][pToyY][2] = 0;
							JugadorInfo[playerid][pToyZ][2] = 0;
							JugadorInfo[playerid][pToyrX][2] = 0;
							JugadorInfo[playerid][pToyrY][2] = 0;
							JugadorInfo[playerid][pToyrZ][2] = 0;
							JugadorInfo[playerid][pToytX][2] = 2;
							JugadorInfo[playerid][pToytY][2] = 2;
							JugadorInfo[playerid][pToytZ][2] = 2;
						}
						PonerObjeto(playerid, 1, 0);
						return SaveToys(playerid), 1;
					}
					else { return SendClientMessage(playerid, COLOR_ROJO, "¡Ya tienes un objeto del mismo tipo en tu cuerpo!"), 1; }
				}
				if(ToyInfo[toy][tIndex] == CHALECO)
				{
				    if(JugadorInfo[playerid][pToy][3] == 0)
					{
					    if(JugadorInfo[playerid][pFaccion] > 0)
					    {
						    SetPlayerArmour(playerid, JugadorInfo[playerid][pManoDerCant]);
							JugadorInfo[playerid][pManoDer] = 0;
							JugadorInfo[playerid][pManoDerCant] = 0;
							PonerObjeto(playerid, 1, JugadorInfo[playerid][pManoDer]);
							if(JugadorInfo[playerid][pToyX][3] > 0 && JugadorInfo[playerid][pToyY][3] > 0 && JugadorInfo[playerid][pToyZ][3] > 0)
							{
							    SendClientMessage(playerid, Verde, "Colocado objeto en las coordenadas guardadas previamente, para eliminarlas y volverlas a fijar usa /accesorios.");
							    JugadorInfo[playerid][pToy][3] = ToyInfo[toy][tObjetoID];
							    SetPlayerAttachedObject(playerid, ToyInfo[toy][tIndex], ToyInfo[toy][tModeloID], ToyInfo[toy][tBone],
								JugadorInfo[playerid][pToyX][3], JugadorInfo[playerid][pToyY][3], JugadorInfo[playerid][pToyZ][3],
								JugadorInfo[playerid][pToyrX][3], JugadorInfo[playerid][pToyrY][3], JugadorInfo[playerid][pToyrZ][3],
								JugadorInfo[playerid][pToytX][3], JugadorInfo[playerid][pToytY][3], JugadorInfo[playerid][pToytZ][3]);
							}
							else
							{
	                            format(string, 128, "Colocado %s para que sea visible, para editar y fijar las coordenadas usa /accesorios.", ToyInfo[toy][tObjetoNombre]); SendClientMessage(playerid, Verde, string);
	                            SetPlayerAttachedObject(playerid, ToyInfo[toy][tIndex], ToyInfo[toy][tModeloID], ToyInfo[toy][tBone]);
								JugadorInfo[playerid][pToy][3] = ToyInfo[toy][tObjetoID];
								JugadorInfo[playerid][pToyX][3] = 0;
								JugadorInfo[playerid][pToyY][3] = 0;
								JugadorInfo[playerid][pToyZ][3] = 0;
								JugadorInfo[playerid][pToyrX][3] = 0;
								JugadorInfo[playerid][pToyrY][3] = 0;
								JugadorInfo[playerid][pToyrZ][3] = 0;
								JugadorInfo[playerid][pToytX][3] = 3;
								JugadorInfo[playerid][pToytY][3] = 3;
								JugadorInfo[playerid][pToytZ][3] = 3;
							}
							PonerObjeto(playerid, 1, 0);
							return SaveToys(playerid), 1;
						}
						else { return SendClientMessage(playerid, COLOR_ROJO, "¡Solo para miembros de facción!"), 1; }
					}
					else { return SendClientMessage(playerid, COLOR_ROJO, "¡Ya tienes un objeto del mismo tipo en tu cuerpo!"), 1; }
				}
	        }
	    }
	}
    // -- otros.
  	else if(((JugadorInfo[playerid][pManoDer] >= 55 && JugadorInfo[playerid][pManoDer] <= 57) || (JugadorInfo[playerid][pManoDer] >= 65 && JugadorInfo[playerid][pManoDer] <= 67)) && JugadorInfo[playerid][pManoDerCant] > 0)
    {
        format(string, sizeof(string), "come de su %s.", ObjetoInfo[JugadorInfo[playerid][pManoDer]][NombreObjeto]);
 	    AutoRol(playerid, string);
        JugadorInfo[playerid][pManoDerCant] --;
        new Float:cvida;
        GetPlayerHealth(playerid, cvida);
		LoopingAnim(playerid,"FOOD","EAT_Burger",4.1,0,1,1,1,1);
		LoopingAnim(playerid,"FOOD","EAT_Burger",4.1,0,1,1,1,1);
        if(cvida < 100) GivePlayerHealth(playerid, 1);
	    return 1;
    }
    else if(((JugadorInfo[playerid][pManoDer] >= 58 && JugadorInfo[playerid][pManoDer] <= 64) || (JugadorInfo[playerid][pManoDer] >= 71 && JugadorInfo[playerid][pManoDer] <= 73)) && JugadorInfo[playerid][pManoDerCant] > 0)
    {
        format(string, sizeof(string), "bebe de su %s.", ObjetoInfo[JugadorInfo[playerid][pManoDer]][NombreObjeto]);
 	    AutoRol(playerid, string);
        JugadorInfo[playerid][pManoDerCant] --;
        new Float:cvida;
		LoopingAnim(playerid,"BAR","dnk_stndM_loop",4.1,0,1,1,1,1);
		LoopingAnim(playerid,"BAR","dnk_stndM_loop",4.1,0,1,1,1,1);
        GetPlayerHealth(playerid, cvida);
        if(cvida < 100) GivePlayerHealth(playerid, 1);
	    return 1;
    }
	ActualizarManos(playerid);
	return 1;
}
//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/forzarvehiculo", true) == 0) //Forzar la apertura de un vehículo
{
    if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
	if(JugadorInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"No estás de servicio como policía."); return 1;}
	if(autorizarswat == 0){SendClientMessage(playerid,Rojo,"No está autorizada una operación SWAT."); return 1;}
	new car, Float:distancia = 4.0, Float:vX, Float:vY, Float:vZ;
	for(new x=0; x <= TotalVeh; x++)
	{
	    GetVehiclePos(x, vX, vY, vZ);
	    if(IsPlayerInRangeOfPoint(playerid, 3.5, vX, vY, vZ) && !IsABike(x) && CocheInfo[x][cCerrado] == 1)
	    {
	        if(GetPlayerDistanceFromPoint(playerid, vX, vY, vZ) <= distancia)distancia = GetPlayerDistanceFromPoint(playerid, vX, vY, vZ), car = x;
	    }
	}
	if(car == 0){SendClientMessage(playerid, Rojo, "No se ha detectado ningún vehículo a tu alrededor que puedas abrir."); return 1;}
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(car,engine,lights,alarm,0,bonnet,boot,objective);
    CocheInfo[car][cCerrado] = 0;
    format(string, sizeof(string), "%s fuerza la puerta del vehículo con sus herramientas.", NombreJugadorProxy(playerid));
    ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/forzarmaletero", true) == 0) //Forzar la apertura de un maletero
{
	if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
	if(JugadorInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"No estás de servicio como policía."); return 1;}
	if(autorizarswat == 0){SendClientMessage(playerid,Rojo,"No está autorizada una operación SWAT."); return 1;}
	new car, Float:distancia = 4.0, Float:vX, Float:vY, Float:vZ;
	for(new x=0; x <= TotalVeh; x++)
	{
	    GetVehiclePos(x, vX, vY, vZ);
	    if(IsPlayerInRangeOfPoint(playerid, 3.5, vX, vY, vZ) && !IsABike(x) && VehMaletero[x] == 0)
	    {
	        if(GetPlayerDistanceFromPoint(playerid, vX, vY, vZ) <= distancia)distancia = GetPlayerDistanceFromPoint(playerid, vX, vY, vZ), car = x;
	    }
	}
	if(car == 0){SendClientMessage(playerid, Rojo, "No se ha detectado ningún vehículo a tu alrededor que puedas abrir."); return 1;}
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
    SetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,1,objective);
    format(string, sizeof(string), "%s fuerza el maletero del vehículo con sus herramientas.", NombreJugadorProxy(playerid));
    ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
    VehMaletero[car] = 1;
    MostrarMaletero(playerid, car);
    VehMaleteroPlayer[playerid] = car;
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/encarcelar", true) == 0) //Encarcelar a un delincuente (meter en jail)
{
	if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
	if(JugadorInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"No estás de servicio."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Gris, "USO: /encarcelar [IdJugador/ParteDelNombre] [horas]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"No te puedes encarcelar a tí mismo."); return 1;}
    if(!IsPlayerInRangeOfPoint(playerid, 15.0, 2529.6387,-1281.9346,1048.2891)){SendClientMessage(playerid,Rojo,"No estás en la prisión federal."); return 1;}
	if(JugadorInfo[playerid2][pFaccion] == 1){SendClientMessage(playerid,Rojo,"No puedes arrestar a un policía."); return 1;}
	if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo,"Debe estar más cerca de tí."); return 1;}
	if(JugadorInfo[playerid2][pEncarcelado] > 0){SendClientMessage(playerid, Rojo,"Esta persona ya está encarcelada. Para sacarla de prisión utiliza '/desencarcelar'"); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Gris, "USO: /encarcelar [IdJugador/ParteDelNombre] [horas]");
		return 1;
	}
	new tiempo = strval(tmp);
	if(tiempo < 1){SendClientMessage(playerid,Rojo,"El tiempo no puede ser menor que '1' hora(s)."); return 1;}
	if(tiempo > 5){SendClientMessage(playerid,Rojo,"El tiempo no puede ser mayor que '5' hora(s)."); return 1;}
	new string2[170];
	if(IsPlayerInRangeOfPoint(playerid, 15.0, 2529.6387,-1281.9346,1048.2891))
	{
	    SetPlayerPos(playerid2, 2532.8345,-1291.8160,1044.1250);
	    JugadorInfo[playerid2][pEncarcelado] = 2, JugadorInfo[playerid2][pTiempoCarcel] = tiempo*60;
	    format(string2, sizeof(string2), "Has sido encarcelado en la prisión federal por %d horas por el oficial %s.", tiempo, NombreJugador(playerid));
	    SendClientMessage(playerid2, COLOR_GREEN2, string2);
	    format(string2, sizeof(string2), "[ARRESTO] %s %s ha arrestado a %s durante %d hora(s).", Rango(playerid), NombreJugador(playerid), NombreJugador(playerid2), tiempo);
	    SendRadioMessage(1, 0xF63A37FF, string2);
	    format(string2, sizeof(string2), "[ARRESTO] %s %s ha arrestado a %s durante %d hora(s).", Rango(playerid), NombreJugador(playerid), NombreJugador(playerid2), tiempo);
	    SendAdminMessage(COLOR_YELLOW, string2);
 	    printf("El policía %s ha encarcelado a %s %d horas en la prisión federal.", NombreJugador(playerid), NombreJugador(playerid2), tiempo);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/desencarcelar", true) == 0) //Desencarcelar a un delincuente (sacar de jail)
{
	if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
	if(JugadorInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"No estás de servicio."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Gris, "USO: /desencarcelar [IdJugador/ParteDelNombre]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"No te puedes desencarcelar a tí mismo."); return 1;}
    if(!IsPlayerInRangeOfPoint(playerid, 15.0, 266.25, 82.95, 1001.29) && !IsPlayerInRangeOfPoint(playerid, 15.0, 2529.6387,-1281.9346,1048.2891)){SendClientMessage(playerid,Rojo,"No estás en las celdas de comisaría ni en la prisión federal."); return 1;}
	if(!GetPlayersProx(3.0, playerid, playerid2)){SendClientMessage(playerid, Rojo,"Debes estar más cerca de él."); return 1;}
	if(JugadorInfo[playerid2][pEncarcelado] == 0){SendClientMessage(playerid, Rojo,"Esta persona no está encarcelada."); return 1;}
	if(JugadorInfo[playerid2][pEncarcelado] == 1)SetPlayerPos(playerid2, 268.25, 82.95, 1001.29);
	if(JugadorInfo[playerid2][pEncarcelado] == 2)SetPlayerPos(playerid2, 2529.6387,-1281.9346,1048.2891);
	JugadorInfo[playerid2][pEncarcelado] = 0, JugadorInfo[playerid2][pTiempoCarcel] = 0;
    format(string, sizeof(string), "Has sido desencarcelado por %s.", NombreJugador(playerid));
    SendClientMessage(playerid2, Amarillo, string);
    format(string, sizeof(string), "Has desencarcelado a %s.", NombreJugador(playerid2));
    SendClientMessage(playerid, Amarillo, string);
    format(string, sizeof(string), "[PRISIÓN FEDERAL]: %s %s ha desencarcelado a %s.", Rango(playerid), NombreJugador(playerid), NombreJugador(playerid2));
    SendRadioMessage(1, 0xF63A37FF, string);
    printf("El policía %s ha desencarcelado a %s.", NombreJugador(playerid), NombreJugador(playerid2));
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/cachear", true) == 0) //Cachear a alguien
{
	if(JugadorInfo[playerid][pTrabajo] == 8 || JugadorInfo[playerid][pFaccion] == 1)
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
	 	{
			SendClientMessage(playerid, Gris, "USO: /cachear [IdJugador/ParteDelNombre]");
			return 1;
		}
		playerid2 = ReturnUser(tmp);
	    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
	    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"No te puedes cachear a tí mismo."); return 1;}
		if(!GetPlayersProx(2.0, playerid, playerid2)){SendClientMessage(playerid, Rojo,"Debes estar a su lado para cachearle."); return 1;}
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleID(playerid2) != GetPlayerVehicleID(playerid)){SendClientMessage(playerid, Rojo, "No puedes cachear a alguien desde un vehículo."); return 1;}

        if(JugadorInfo[playerid][pFaccion] != 1) // No es pd
		{
        	ofertacachear[playerid2] = playerid;
			format(string,128,"%s tendrá que aceptar tu intención de cachearlo.",NombreJugadorProxy(playerid2));
			SendClientMessage(playerid,COLOR_GREEN2,string);

			format(string,128,"%s tiene la intención de cachearte, utiliza /aceptar cachear",NombreJugadorProxy(playerid));
			SendClientMessage(playerid2,AmarilloClaro,string);
		}
		else // Es pd
		{
            format(string, 128, "|_________ Pertenencias de %s _________|", NombreJugador(playerid2));
			SendClientMessage(playerid, -1, string);
			for(new x = 0; x<MAX_SLOTS_INV; x++)
			{
			    if(JugadorInfo[playerid2][pBol][x] >= 1)
			    {
			    	format(string, sizeof(string), "%s (%d uds.)", ObjetoInfo[JugadorInfo[playerid2][pBol][x]][NombreObjeto], JugadorInfo[playerid2][pBolCant][x]);
			    	SendClientMessage(playerid, COLOR_YELLOW, string);
				}
			}
			if(JugadorInfo[playerid2][pTrabajo] == 12) // Es camello
			{
				if(JugadorInfo[playerid2][pProductos] > 0)
				{
				    format(string, sizeof(string), "Productos (%d uds.)", JugadorInfo[playerid2][pProductos]);
  					SendClientMessage(playerid, COLOR_YELLOW, string);
				}
			}
			if(JugadorInfo[playerid2][pManoDer] >= 1)
	  		{
		    	format(string, sizeof(string), "Mano derecha: %s (%d uds.)", ObjetoInfo[JugadorInfo[playerid2][pManoDer]][NombreObjeto], JugadorInfo[playerid2][pManoDerCant]);
		    	SendClientMessage(playerid, COLOR_YELLOW, string);
			}
			if(JugadorInfo[playerid2][pManoIzq] >= 1)
	  		{
		    	format(string, sizeof(string), "Mano izquierda: %s (%d uds.)", ObjetoInfo[JugadorInfo[playerid2][pManoIzq]][NombreObjeto], JugadorInfo[playerid2][pManoIzqCant]);
		    	SendClientMessage(playerid, COLOR_YELLOW, string);
			}
			format(string, sizeof(string), "%s cacheó los bolsillos de %s.", NombreJugadorProxy(playerid), NombreJugadorProxy(playerid2));
		 	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		 	format(string, sizeof(string), "Lleva en la cartera: %d $", GetPlayerMoney(playerid2));
  			SendClientMessage(playerid, COLOR_YELLOW, string);
  		}
	}
	return 1;
}

if(strcmp(cmd, "/ccs", true) == 0 || strcmp(cmd, "/vercinturon", true) == 0) //Cachear a alguien
{
	if(JugadorInfo[playerid][pFaccion] == 1)
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
	 	{
			SendClientMessage(playerid, Gris, "USO: /vercinturon [IdJugador/ParteDelNombre]");
			return 1;
		}
		playerid2 = ReturnUser(tmp);
	    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
		if(!GetPlayersProx(7.0, playerid, playerid2)){SendClientMessage(playerid, Rojo,"¡No está cerca tuyo!"); return 1;}
		if(GetPlayerState(playerid2) != PLAYER_STATE_DRIVER){SendClientMessage(playerid, Rojo, "¡No está en un vehículo!"); return 1;}
		format(string, sizeof(string), "%s comprueba si el cinturón de %s está abrochado.", NombreJugadorProxy(playerid), NombreJugadorProxy(playerid2));
	 	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	 	if(CinturonPuesto[playerid2] == 0) { SendClientMessage(playerid, COLOR_PIEL, "El cinturón de seguridad está desabrochado."); }
		else { SendClientMessage(playerid, COLOR_PIEL, "El cinturón de seguridad está abrochado."); }
	}
	return 1;
}

if(strcmp(cmd, "/cuentabanco", true) == 0) //Cachear a alguien
{
	if(JugadorInfo[playerid][pFaccion] == 1)
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
	 	{
			SendClientMessage(playerid, Gris, "USO: /cuentabanco [IdJugador/ParteDelNombre]");
			return 1;
		}
		playerid2 = ReturnUser(tmp);
	    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
	    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"No te puedes checkear a tí mismo."); return 1;}
		if(!GetPlayersProx(4.0, playerid, playerid2)){SendClientMessage(playerid, Rojo,"Debes estar a su lado para checkearle."); return 1;}
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerVehicleID(playerid2) != GetPlayerVehicleID(playerid)){SendClientMessage(playerid, Rojo, "No puedes checkear a alguien desde un vehículo."); return 1;}


        ofertabanco[playerid2] = playerid;
		format(string,128,"%s tendrá que aceptar tu petición de información.",NombreJugadorProxy(playerid2));
		SendClientMessage(playerid,COLOR_GREEN2,string);

		format(string,128,"%s requiere la información de tu cuenta bancaria, utiliza /aceptar banco",NombreJugadorProxy(playerid));
		SendClientMessage(playerid2,COLOR_GREEN2,string);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/quitar", true) == 0) //Requisar objetos a alguien
{
	if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
	if(JugadorInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"No estás de servicio."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Gris, "USO: /quitar [IdJugador/ParteDelNombre] [Armas/Municion/Drogas/Productos]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"No te puedes requisar objetos a tí mismo."); return 1;}
	if(!GetPlayersProx(1.5, playerid, playerid2)){SendClientMessage(playerid, Rojo,"Debes estar a su lado."); return 1;}
	if(JugadorInfo[playerid2][pServicioPD] > 0){SendClientMessage(playerid,Rojo,"No puedes requisar objetos a un policía."); return 1;}
	if(IsPlayerInAnyVehicle(playerid)){SendClientMessage(playerid, Rojo, "No puedes requisar objetos a alguien desde un vehículo."); return 1;}
	if(IsPlayerInAnyVehicle(playerid2)){SendClientMessage(playerid, Rojo, "No puedes requisar objetos a alguien que está en un vehículo."); return 1;}
    new objetos[20];
	objetos = strtok(cmdtext, idx);
	if(!strlen(objetos))
	{
		SendClientMessage(playerid, Gris, "USO: /quitar [IdJugador/ParteDelNombre] [Armas/Municion/Drogas/Productos]");
		return 1;
	}
	if(strcmp(objetos,"armas",true) == 0)
	{
	    format(string, sizeof(string), "El agente %s te ha retirado todas tus armas.", NombreJugador(playerid));
	    SendClientMessage(playerid2, Azulito, string);
	    new TieneObjeto;
		for(new x = 0; x<MAX_SLOTS_INV; x++)
		{
		    if(ObjetoInfo[JugadorInfo[playerid2][pBol][x]][IDArma] > 0)
		    {
			    format(string, sizeof(string), "Has retirado a %s su %s de los bolsillos.", NombreJugadorProxy(playerid2), ObjetoInfo[JugadorInfo[playerid2][pBol][x]][NombreObjeto]);
			    SendClientMessage(playerid, Azulito, string);
			    JugadorInfo[playerid2][pBol][x] = 0, JugadorInfo[playerid2][pBolCant][x] = 0;
			    TieneObjeto = 1;
		    }
		}
		if(TieneObjeto == 0)SendClientMessage(playerid, AmarilloClaro, "Nada.");
		format(string, sizeof(string), "El agente %s ha retirado a %s todas sus armas.", NombreJugadorProxy(playerid), NombreJugadorProxy(playerid2));
	 	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	 	printf(string);
		return 1;
	}
	if(strcmp(objetos,"municion",true) == 0)
	{
	    format(string, sizeof(string), "El agente %s te ha retirado todas tus municiones.", NombreJugador(playerid));
	    SendClientMessage(playerid2, Azulito, string);
	    new TieneObjeto;
		for(new x = 0; x<MAX_SLOTS_INV; x++)
		{
		    if(JugadorInfo[playerid2][pBol][x] <= 53 && JugadorInfo[playerid2][pBol][x] >= 39)
		    {
			    format(string, sizeof(string), "Has retirado a %s su %s de los bolsillos.", NombreJugadorProxy(playerid2), ObjetoInfo[JugadorInfo[playerid2][pBol][x]][NombreObjeto]);
			    SendClientMessage(playerid, Azulito, string);
			    JugadorInfo[playerid2][pBol][x] = 0, JugadorInfo[playerid2][pBolCant][x] = 0;
				TieneObjeto = 1;
		    }
		}
		if(TieneObjeto == 0)SendClientMessage(playerid, AmarilloClaro, "Nada.");
		format(string, sizeof(string), "El agente %s ha retirado a %s todas sus municiones.", NombreJugadorProxy(playerid), NombreJugadorProxy(playerid2));
	 	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	 	printf(string);
		return 1;
	}
	else if(strcmp(objetos,"drogas",true) == 0)
	{
	    format(string, sizeof(string), "El agente %s te ha retirado todas tus drogas.", NombreJugador(playerid));
	    SendClientMessage(playerid2, Azulito, string);
	    new TieneObjeto;
		for(new x = 0; x<MAX_SLOTS_INV; x++)
		{
		    if(JugadorInfo[playerid2][pBol][x] <= 86 && JugadorInfo[playerid2][pBol][x] >= 75)
		    {
			    format(string, sizeof(string), "Has retirado a %s su %s de los bolsillos.", NombreJugadorProxy(playerid2), ObjetoInfo[JugadorInfo[playerid2][pBol][x]][NombreObjeto]);
			    SendClientMessage(playerid, Azulito, string);
			    JugadorInfo[playerid2][pBol][x] = 0, JugadorInfo[playerid2][pBolCant][x] = 0;
				TieneObjeto = 1;
		    }
		}
		if(TieneObjeto == 0)SendClientMessage(playerid, AmarilloClaro, "Nada.");
		format(string, sizeof(string), "El agente %s ha retirado a %s los estupefacientes que lleva encima.", NombreJugadorProxy(playerid), NombreJugadorProxy(playerid2));
	 	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	 	printf(string);
	}
	else if(strcmp(objetos,"productos",true) == 0)
	{
	    format(string, sizeof(string), "El agente %s te ha retirado todos tus productos.", NombreJugador(playerid));
	    SendClientMessage(playerid2, Azulito, string);

		if(JugadorInfo[playerid2][pProductos] > 0)
		{
		    format(string, sizeof(string), "Has retirado a %s los %d productos de sus bolsillos.", NombreJugadorProxy(playerid2), JugadorInfo[playerid2][pProductos]);
	    	SendClientMessage(playerid, Azulito, string);
            JugadorInfo[playerid2][pProductos] = 0;
		}
		else SendClientMessage(playerid, AmarilloClaro, "Nada.");

		format(string, sizeof(string), "El agente %s ha retirado a %s los productos que lleva encima.", NombreJugadorProxy(playerid), NombreJugadorProxy(playerid2));
	 	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	 	printf(string);
	}
	else
	{
		SendClientMessage(playerid, Rojo, "Opción inválida.");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/romperpuerta", true) == 0) //Abrir una puerta por la fuerza
{
    if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
	if(JugadorInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"No estás de servicio."); return 1;}
	if(autorizarswat == 0){SendClientMessage(playerid,Rojo,"No está autorizada una operación SWAT."); return 1;}
	if(GetPlayerFueraPuertaCasa(playerid)) //Está en la puerta de una casa
	{
		new casa = GetPlayerFueraPuertaCasa(playerid);
		if(CasaInfo[casa][hCerrada] == 0){SendClientMessage(playerid,Rojo,"Esta puerta ya está abierta."); return 1;}
		CasaInfo[casa][hCerrada] = 0;
		format(string, sizeof(string), "%s rompe la puerta de una casa con el ariete policial.", NombreJugadorProxy(playerid));
	    ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
        SendClientMessage(playerid, COLOR_GREEN, "¡Ahora pueden entrar a la casa!");
		printf("%s (Casa: %d)", string, casa);
		PlayerPlaySound(playerid, 1009, 0.0, 0.0, 0.0);
		new Float:EX, Float:EY, Float:EZ;
		EX = CasaInfo[casa][hEntradaX], EY = CasaInfo[casa][hEntradaY], EZ = CasaInfo[casa][hEntradaZ];
		for(new i=0; i<MAX_PLAYERS; i++)
		{
		    if(GetPlayerDentroCasa(i) == casa || IsPlayerInRangeOfPoint(i, 10.0, EX, EY, EZ))PlayerPlaySound(i, 1009, 0.0, 0.0, 0.0);
		}
	}
	else if(GetPlayerFueraPuertaNego(playerid)) //Está en la puerta de un negocio
	{
		new nego = GetPlayerFueraPuertaNego(playerid);
		if(NegocioInfo[nego][nCerrado] == 0){SendClientMessage(playerid,Rojo,"Esta puerta ya está abierta."); return 1;}
		NegocioInfo[nego][nCerrado] = 0;
		UpdateNegocioLabel(nego);
		format(string, sizeof(string), "%s rompe la puerta de un negocio con el ariete policial.", NombreJugadorProxy(playerid));
	    ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	    SendClientMessage(playerid, COLOR_GREEN, "¡Ahora pueden entrar al negocio!");
		printf("%s (Negocio: %d)", string, nego);
		PlayerPlaySound(playerid, 1009, 0.0, 0.0, 0.0);
		new Float:EX, Float:EY, Float:EZ;
		EX = NegocioInfo[nego][nEntradaX], EY = NegocioInfo[nego][nEntradaY], EZ = NegocioInfo[nego][nEntradaZ];
		for(new i=0; i<MAX_PLAYERS; i++)
		{
		    if(GetPlayerDentroNego(i) == nego || IsPlayerInRangeOfPoint(i, 10.0, EX, EY, EZ))PlayerPlaySound(i, 1009, 0.0, 0.0, 0.0);
		}
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/vermueble", true) == 0) //Registrar una casa o local
{
    if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
	if(JugadorInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"No estás de servicio."); return 1;}
	if(autorizarswat == 0){SendClientMessage(playerid,Rojo,"No está autorizada una operación SWAT."); return 1;}
	if(!GetPlayerDentroCasa(playerid) && !GetPlayerDentroNego(playerid)){SendClientMessage(playerid,Rojo,"No estás en una casa o un local."); return 1;}
	if(GetPlayerDentroCasa(playerid)) //Está en una casa
	{
		new casa = GetPlayerDentroCasa(playerid);
		format(string, sizeof(string), "%s revisa el armario de la vivienda.", NombreJugadorProxy(playerid));
	    ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		printf("%s (Casa: %d)", string, casa);
		for(new x=0; x < 10; x++)
		{
		    if(CasaInfo[casa][hArmario][x] >= 1)
		    {
		    	format(string, sizeof(string), "Revisas el armario y encuentras un %s.", ObjetoInfo[CasaInfo[casa][hArmario][x]][NombreObjeto]);
		    	SendClientMessage(playerid, Azulito, string);
			}
		}
		format(string, sizeof(string), "Revisas el armario y encuentras un monto de %d$", CasaInfo[casa][hDineroGuardado]);
		SendClientMessage(playerid, Azulito, string);
	}
	else if(GetPlayerDentroNego(playerid)) //Está en un local
	{
		new nego = GetPlayerDentroNego(playerid);
		format(string, sizeof(string), "%s revisa el almacén del negocio.", NombreJugadorProxy(playerid));
	    ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		printf("%s (Local: %d)", string, nego);
		for(new x=0; x < NegocioInfo[nego][nMaxAlmacen]; x++)
		{
		    if(NegocioInfo[nego][nAlmacen][x] >= 1)
		    {
		    	format(string, sizeof(string), "Revisas el almacén y encuentras un %s.", ObjetoInfo[NegocioInfo[nego][nAlmacen][x]][NombreObjeto]);
		    	SendClientMessage(playerid, Azulito, string);
			}
		}
		format(string, sizeof(string), "Revisas el almacén y encuentras un monto de %d$", NegocioInfo[nego][nDineroGuardado]);
		SendClientMessage(playerid, Azulito, string);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/confiscar", true) == 0) //Confiscar objetos de una casa o local
{
	if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
	if(JugadorInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"No estás de servicio."); return 1;}
	if(autorizarswat == 0){SendClientMessage(playerid,Rojo,"No está autorizada una operación SWAT."); return 1;}
	if(!GetPlayerDentroCasa(playerid) && !GetPlayerDentroNego(playerid)){SendClientMessage(playerid,Rojo,"No estás en una casa o un local."); return 1;}
    new objetos[20];
	objetos = strtok(cmdtext, idx);
	if(!strlen(objetos))
	{
		SendClientMessage(playerid, Gris, "USO: /confiscar [armas/munición/drogas]");
		return 1;
	}
	if(strcmp(objetos,"armas",true) == 0)
	{
	    if(GetPlayerDentroCasa(playerid)) //Está en una casa
		{
		    new TieneObjeto;
		    new casa = GetPlayerDentroCasa(playerid);
			for(new x=0; x < 10; x++)
			{
			    if(ObjetoInfo[CasaInfo[casa][hArmario][x]][IDArma] > 0)
			    {
				    format(string, sizeof(string), "Retiras una %s del armario.", ObjetoInfo[CasaInfo[casa][hArmario][x]][NombreObjeto]);
				    SendClientMessage(playerid, Azulito, string);
				    CasaInfo[casa][hArmario][x] = 0, CasaInfo[casa][hArmarioCant][x] = 0;
				    TieneObjeto = 1;
			    }
			}
			if(TieneObjeto == 0)SendClientMessage(playerid, Rojo, "¡No hay nada!");
			format(string, sizeof(string), "%s confisca las armas de la casa.", NombreJugadorProxy(playerid));
		 	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		 	printf("%s (Casa: %d)", string, casa);
			return 1;
		}
		if(GetPlayerDentroNego(playerid)) //Está en un local
		{
		    new TieneObjeto;
		    new nego = GetPlayerDentroNego(playerid);
			for(new x=0; x < NegocioInfo[nego][nMaxAlmacen]; x++)
			{
			    if(ObjetoInfo[NegocioInfo[nego][nAlmacen][x]][IDArma] > 0)
			    {
				    format(string, sizeof(string), "Retiras una %s del almacén.", ObjetoInfo[NegocioInfo[nego][nAlmacen][x]][NombreObjeto], NegocioInfo[nego][nAlmacenCant][x]);
				    SendClientMessage(playerid, Azulito, string);
				    NegocioInfo[nego][nAlmacen][x] = 0, NegocioInfo[nego][nAlmacenCant][x] = 0;
				    TieneObjeto = 1;
			    }
			}
			if(TieneObjeto == 0)SendClientMessage(playerid, Rojo, "¡No hay nada!");
			format(string, sizeof(string), "%s confisca las armas del local.", NombreJugadorProxy(playerid));
		 	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		 	printf("%s (Local: %d)", string, nego);
			return 1;
		}
	}
	if(strcmp(objetos,"municion",true) == 0)
	{
	    if(GetPlayerDentroCasa(playerid)) //Está en una casa
		{
		    new TieneObjeto;
		    new casa = GetPlayerDentroCasa(playerid);
			for(new x=0; x < 10; x++)
			{
			    if((CasaInfo[casa][hArmario][x] <= 53 && CasaInfo[casa][hArmario][x] >= 39) || (CasaInfo[casa][hArmario][x] <= 124 && CasaInfo[casa][hArmario][x] >= 102)) //Municiones y cajas de armamento
			    {
				    format(string, sizeof(string), "Retiras una %s del armario.", ObjetoInfo[CasaInfo[casa][hArmario][x]][NombreObjeto]);
				    SendClientMessage(playerid, Azulito, string);
				    CasaInfo[casa][hArmario][x] = 0, CasaInfo[casa][hArmarioCant][x] = 0;
					TieneObjeto = 1;
			    }
			}
			if(TieneObjeto == 0)SendClientMessage(playerid, Rojo, "¡No hay nada!");
			format(string, sizeof(string), "%s confisca las municiones de la casa.", NombreJugadorProxy(playerid));
		 	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		 	printf("%s (Casa: %d)", string, casa);
			return 1;
		}
		if(GetPlayerDentroNego(playerid)) //Está en un local
		{
		    new TieneObjeto;
		    new nego = GetPlayerDentroNego(playerid);
			for(new x=0; x < NegocioInfo[nego][nMaxAlmacen]; x++)
			{
			    if((NegocioInfo[nego][nAlmacen][x] <= 53 && NegocioInfo[nego][nAlmacen][x] >= 39) || (NegocioInfo[nego][nAlmacen][x] <= 124 && NegocioInfo[nego][nAlmacen][x] >= 102)) //Municiones y cajas de armamento
			    {
				    format(string, sizeof(string), "Retiras una %s del almacén.", ObjetoInfo[NegocioInfo[nego][nAlmacen][x]][NombreObjeto], NegocioInfo[nego][nAlmacenCant][x]);
				    SendClientMessage(playerid, Azulito, string);
				    NegocioInfo[nego][nAlmacen][x] = 0, NegocioInfo[nego][nAlmacen][x] = 0;
					TieneObjeto = 1;
			    }
			}
			if(TieneObjeto == 0)SendClientMessage(playerid, Rojo, "¡No hay nada!");
			format(string, sizeof(string), "%s confisca las municiones del local.", NombreJugadorProxy(playerid));
		 	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		 	printf("%s (Local: %d)", string, nego);
			return 1;
		}
	}
	else if(strcmp(objetos,"drogas",true) == 0)
	{
        if(GetPlayerDentroCasa(playerid)) //Está en una casa
		{
		    new TieneObjeto;
		    new casa = GetPlayerDentroCasa(playerid);
			for(new x=0; x < 10; x++)
			{
			    if(CasaInfo[casa][hArmario][x] <= 86 && CasaInfo[casa][hArmario][x] >= 75)
			    {
				    format(string, sizeof(string), "Retiras una %s del armario.", ObjetoInfo[CasaInfo[casa][hArmario][x]][NombreObjeto]);
				    SendClientMessage(playerid, Azulito, string);
				    CasaInfo[casa][hArmario][x] = 0, CasaInfo[casa][hArmarioCant][x] = 0;
					TieneObjeto = 1;
			    }
			}
			if(TieneObjeto == 0)SendClientMessage(playerid, Rojo, "¡No hay nada!");
			format(string, sizeof(string), "%s confisca las drogas de la casa.", NombreJugadorProxy(playerid));
		 	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		 	printf("%s (Casa: %d)", string, casa);
			return 1;
		}
		if(GetPlayerDentroNego(playerid)) //Está en un local
		{
		    new TieneObjeto;
		    new nego = GetPlayerDentroNego(playerid);
			for(new x=0; x < NegocioInfo[nego][nMaxAlmacen]; x++)
			{
			    if(NegocioInfo[nego][nAlmacen][x] <= 86 && NegocioInfo[nego][nAlmacen][x] >= 75)
			    {
				    format(string, sizeof(string), "Retiras una %s del almacén.", ObjetoInfo[NegocioInfo[nego][nAlmacen][x]][NombreObjeto], NegocioInfo[nego][nAlmacenCant][x]);
				    SendClientMessage(playerid, Azulito, string);
				    NegocioInfo[nego][nAlmacen][x] = 0, NegocioInfo[nego][nAlmacen][x] = 0;
					TieneObjeto = 1;
			    }
			}
			if(TieneObjeto == 0)SendClientMessage(playerid, Rojo, "¡No hay nada!");
			format(string, sizeof(string), "%s confisca las drogas del local.", NombreJugadorProxy(playerid));
		 	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		 	printf("%s (Local: %d)", string, nego);
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, Rojo, "Opción inválida.");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/quitarpuntos", true) == 0) //Multar a alguien
{
	if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
	if(JugadorInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"No estás de servicio."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Gris, "USO: /quitarpuntos [IdJugador/ParteDelNombre] [puntos]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"No te puedes quitarte puntos a tí mismo."); return 1;}
	if(JugadorInfo[playerid2][pFaccion] == 1){SendClientMessage(playerid,Rojo,"No puedes quitarle puntos a un policía."); return 1;}
	if(!GetPlayersProx(3.0, playerid, playerid2)){SendClientMessage(playerid, Rojo,"Debe estar más cerca de tí."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Gris, "USO: /quitarpuntos [IdJugador/ParteDelNombre] [puntos]");
		return 1;
	}
	new coste = strval(tmp);
	if(coste <= 0 || coste >= 6){SendClientMessage(playerid,Rojo,"No puedes quitar menos de 1 punto o más de 5 puntos"); return 1;}
	format(string, 128, "El agente %s te ha quitado %d puntos de conducción.", NombreJugador(playerid), coste);
	SendClientMessage(playerid2, Azulito, string);
	format(string, 128, "Le has quitado %d puntos de conducción a %s.", coste, NombreJugador(playerid2));
	SendClientMessage(playerid, Azulito, string);
	JugadorInfo[playerid2][pPuntosConduccion] -= coste;
	return 1;
}

if(strcmp(cmd, "/agregarpuntos", true) == 0) //Multar a alguien
{
	if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
	if(JugadorInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"No estás de servicio."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Gris, "USO: /agregarpuntos [IdJugador/ParteDelNombre] [puntos]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"No te puedes agregarte puntos a tí mismo."); return 1;}
	if(JugadorInfo[playerid2][pFaccion] == 1){SendClientMessage(playerid,Rojo,"No puedes agregarle puntos a un policía."); return 1;}
	if(!GetPlayersProx(3.0, playerid, playerid2)){SendClientMessage(playerid, Rojo,"Debe estar más cerca de tí."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Gris, "USO: /agregarpuntos [IdJugador/ParteDelNombre] [puntos]");
		return 1;
	}
	new coste = strval(tmp);
	if(JugadorInfo[playerid2][pPuntosConduccion] == 12){SendClientMessage(playerid, Rojo, "Este jugador tiene sus puntos completos."); return 1;}
	if(coste <= 0 || coste >= 6){SendClientMessage(playerid,Rojo,"No puedes agregar menos de 1 punto o más de 5 puntos"); return 1;}
	format(string, 128, "El agente %s te ha agregado %d puntos de conducción.", NombreJugador(playerid), coste);
	SendClientMessage(playerid2, Azulito, string);
	format(string, 128, "Le has agregado %d puntos de conducción a %s.", coste, NombreJugador(playerid2));
	SendClientMessage(playerid, Azulito, string);
	JugadorInfo[playerid2][pPuntosConduccion] += coste;
	return 1;
}

if(strcmp(cmd, "/multar", true) == 0) //Multar a alguien
{
	if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
	if(JugadorInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid,Rojo,"No estás de servicio."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Gris, "USO: /multar [IdJugador/ParteDelNombre] [Cantidad]");
		SendClientMessage(playerid, -1, "La cantidad ingresada será descontada de la cuenta bancaria del jugador.");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"No te puedes multar a tí mismo."); return 1;}
	if(JugadorInfo[playerid2][pFaccion] == 1){SendClientMessage(playerid,Rojo,"No puedes multar a un policía."); return 1;}
	if(!GetPlayersProx(3.0, playerid, playerid2)){SendClientMessage(playerid, Rojo,"Debe estar más cerca de tí."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Gris, "USO: /multar [IdJugador/ParteDelNombre] [Cantidad]");
		SendClientMessage(playerid, -1, "La cantidad ingresada será descontada de la cuenta bancaria del jugador.");
		return 1;
	}
	new coste = strval(tmp);
	if(coste < 1 || coste > 10000){SendClientMessage(playerid,Rojo,"El coste debe estar entre 1$ y 10000$."); return 1;}
	format(string, sizeof(string), "Has entregado a %s una multa de %d$. Espera a que la pague.", NombreJugador(playerid2), coste);
	SendClientMessage(playerid, Amarillo, string);
	format(string, sizeof(string), "%s te ha entregado una multa de %d$. Escribe '/aceptar multa' para pagarla.", NombreJugador(playerid), coste);
	SendClientMessage(playerid2, Amarillo, string);
	MultaPrecio[playerid2] = coste, Multador[playerid2] = playerid;
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/reanimar", true) == 0) //Reanimar a alguien
{
	if(JugadorInfo[playerid][pFaccion] != 2){return 1;}
	if(JugadorInfo[playerid][pServicioFD] == 0){SendClientMessage(playerid,Rojo,"No estás de servicio."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Gris, "USO: /reanimar [IdJugador/ParteDelNombre]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"El comando no da ningún resultado."); return 1;}
	if(!GetPlayersProx(3.0, playerid, playerid2)){SendClientMessage(playerid, Rojo,"Acércate más al herido."); return 1;}
	if(IsPlayerInAnyVehicle(playerid)){SendClientMessage(playerid, Rojo, "No puedes reanimar a alguien desde un vehículo."); return 1;}
	if(JugadorInfo[playerid2][pMuerto] == 0){SendClientMessage(playerid, Rojo, "El comando no da ningún resultado."); return 1;}
	if(JugadorInfo[playerid][pCheckpoint] != 0){SendClientMessage(playerid, Rojo, "No estás atendiendo ningún informe"); return 1;}
	TogglePlayerControllable(playerid, 0);
	TogglePlayerControllable(playerid2, 0);
	SetTimerEx("Descongelar", 8000, false, "i", playerid);
	SetTimerEx("Descongelar", 8000, false, "i", playerid2);
	JugadorInfo[playerid2][pMuerto] = 0;
	KillTimer(MuertoTimer[playerid2]);
	KillTimer(MuertoFlashTimer[playerid2]);
	RemovePlayerColorFade(playerid2);
	SetPlayerHealth(playerid2, 15);
	ApplyAnimation(playerid,"MEDIC","CPR",4.1,0,1,1,0,0,1);
	ApplyAnimation(playerid,"MEDIC","CPR",4.1,0,1,1,0,0,1);
	ApplyAnimation(playerid2,"CRACK","crckidle2",4.1,1,1,1,0,0,1);
	format(string, sizeof(string), "%s ha reanimado a %s mediante primeros auxilios.", NombreJugadorProxy(playerid), NombreJugadorProxy(playerid2));
    ProxDetector(10.0, playerid, string,Verde,Verde,Verde,Verde,Verde);
    SendClientMessage(playerid2, AmarilloClaro, "Te ha reanimado un paramédico, pero sigues estando demasiado débil. Espera atención mayor en un hospital.");

	Delete3DTextLabel(Yo3DText[playerid]);
    Delete3DTextLabel(Heridas[playerid]);
    RecibioHeadShot[playerid] = 0; RecibioDisparo[playerid] = 0;

    for(new i; i < MAX_INFORMES; i++)
	{
		if(Informes[i][iPaciente] == playerid2)
		{
			Informes[i][iEstado] = 0;
			KillTimer(Informes[i][iTimer]);
			DisablePlayerCheckpoint(Informes[i][iMedico]);
			break;
		}
	}
	return 1;
}


if(strcmp(cmd, "/buscados", true) == 0) //
{
	if(JugadorInfo[playerid][pServicioPD] == 0) { SendClientMessage(playerid, Rojo, "No estás en servicio"); return 1; }
	if(JugadorInfo[playerid][pFaccion] == 1)
	{
	    new opcion[128];
		opcion = strtok(cmdtext, idx);
		if(!strlen(opcion))
		{
			SendClientMessage(playerid, AmarilloClaro, "USO: /buscados [ver/crear/borrar]");
			return 1;
		}
		if(strcmp(opcion,"ver",true) == 0)
		{
			new dialog[1024], hay;
			for(new i = 0; i < MAX_BUSCADOS; i++)
			{
				new Buscado = Buscados[i][bCreado];
				if(Buscado == 0){format(string, sizeof(string), "\n-");}
				else
				{
				    if(Buscados[i][bEliminando] == 0){format(string, sizeof(string), "\n[%d] %s", i, Buscados[i][bTitulo]);}
					else{format(string, sizeof(string), "\n{F60000}[%d] %s", i, Buscados[i][bTitulo]);}
					hay++;
				}
				strcat(dialog, string);
			}
			ShowPlayerDialog(playerid, VER_BYC, DIALOG_STYLE_LIST, "Busquedas activas", dialog, "Seleccionar", "Cerrar");
			if(hay==0){SendClientMessage(playerid, COLOR_GREY,"No hay nada en esa página.");}
			return 1;
		}
		else if(strcmp(opcion,"crear",true) == 0)
		{
            for(new i = 0; i < MAX_BUSCADOS; i++)
			{
				new Creado = Buscados[i][bCreado];
				if(Creado == 0)
				{
				    Crear[playerid] = i;
				    ShowPlayerDialog(playerid, TITULO_BYC, DIALOG_STYLE_INPUT, "Busqueda 1/3", "Introduce el título de la búsqueda o el nombre del sospechoso.\nSi ya tienes la identificación del sospechoso usa el /ordenador.\nNo puedes usar más de 30 carácteres.", "Continuar", "Cancelar");
                    break;
				}
			}
		}
		else if(strcmp(opcion,"borrar",true) == 0)
		{
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, AmarilloClaro,"USO: /buscados borrar [id]");
				return 1;
			}
			new id = strval(tmp);
			if(id < 0 || id > MAX_BUSCADOS){SendClientMessage(playerid, Rojo, "No existe este informe"); return 1;}
			
			format(string, 128, "[CENTRAL]: El agente %s ha borrado la búsqueda a %s (%d)", NombreJugador(playerid), Buscados[id][bTitulo], id);
  			SendRadioMessage(1, COLOR_RADIO, string);
  			SendClientMessage(playerid, COLOR_GREEN2, "La búsqueda se eliminó, desaparecerá en cinco minutos.");
  			KillTimer(Buscados[id][bTimer]);
			Buscados[id][bTimer] = SetTimerEx("EliminarBusqueda", 60000*5, 0, "i", id);
			Buscados[id][bEliminando] = 1;
		}
		else{SendClientMessage(playerid, AmarilloClaro, "USO: /buscados [ver/crear/borrar]");}
	}
	return 1;
}

if(strcmp(cmd, "/informes", true) == 0) //
{
	if(JugadorInfo[playerid][pServicioMD] == 0) { SendClientMessage(playerid, Rojo, "No estás en servicio"); return 1; }
	if(!IsFaccionPublica(playerid)) { SendClientMessage(playerid, Rojo, "No tienes acceso al comando"); return 1; }
	
    new opcion[128];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, AmarilloClaro, "USO: /informes <mostrar - atender>");
		return 1;
	}
	if(strcmp(opcion,"mostrar",true) == 0) //Abrir maletero
	{
		MostrarInformes(playerid);
		return 1;
	}
	else if(strcmp(opcion,"atender",true) == 0)
	{
	    tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, AmarilloClaro, "USO: /informe atender [id]");
			return 1;
		}
		new id = strval(tmp);
		if(id < 0 || id > MAX_INFORMES){SendClientMessage(playerid, Rojo, "No existe este informe"); return 1;}
		
		if(Informes[id][iEstado] == 1)
		{
		    if(JugadorInfo[playerid][pFaccion] == 1)
		    {
		    	format(string, 128, "[CENTRAL]: El agente %s ha atendido el informe %d. Se mantendrá activo durante 15 minutos adicionales.", NombreJugador(playerid), id);
		    }
		    else if(JugadorInfo[playerid][pFaccion] == 2)
		    {
		    	format(string, 128, "[CENTRAL]: El bombero %s ha atendido el informe %d. Se mantendrá activo durante 15 minutos adicionales.", NombreJugador(playerid), id);
		    }
		    SendRadioMessage(1, COLOR_RADIO, string);
			SendRadioMessage(2, COLOR_RADIO, string);
		    
			SendClientMessage(playerid, COLOR_GREEN, "Informe atendido. Permanecerá activo durante 15 minutos adicionales, a nivel informativo para otros miembros de servicio.");
			SetPlayerCheckpoint(playerid, Informes[id][iX], Informes[id][iY], Informes[id][iZ], 8.0);
			JugadorInfo[playerid][pCheckpoint] = 16;
			Informes[id][iEstado] = 2;
			Informes[id][iMedico] = playerid;
		    KillTimer(Informes[id][iTimer]);
			Informes[id][iTimer] = SetTimerEx("EliminarInforme2", 60000*15, 0, "i", Informes[id][iPaciente]);
		}
		else if(Informes[id][iEstado] == 2)
		{
		    SendClientMessage(playerid, COLOR_GREEN, "El informe ya estaba atendido. Se encuentra en modo informativo para miembros de servicio, se ha marcado en tu radar.");
			SetPlayerCheckpoint(playerid, Informes[id][iX], Informes[id][iY], Informes[id][iZ], 8.0);
			JugadorInfo[playerid][pCheckpoint] = 16;
		}
		else SendClientMessage(playerid, Rojo, "¡Informe inválido!");
		return 1;
	}
	else{SendClientMessage(playerid, AmarilloClaro, "USO: /informes <mostrar - atender>");}
	return 1;
}
if(strcmp(cmd, "/fuego", true) == 0) //Poner objetos de trafico
{
	if(JugadorInfo[playerid][pAdmin] >= 3)
	{
	    new tmp2[256];
		if(IsPlayerInAnyVehicle(playerid)){return 1;}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
	 	{
			SendClientMessage(playerid, Gris, "USO: /fuego [tipo] [vida]");
			SendClientMessage(playerid, -1, "Fuego [1-4] | Humo [5-7]");
			return 1;
		}
		tmp2 = strtok(cmdtext, idx);
		if(!strlen(tmp2))
		{
			SendClientMessage(playerid, Gris, "USO: /fuego [tipo] [vida = 0-50]");
			return 1;
		}
		new vida = strval(tmp2);
		if(vida < 0 || vida > 50){SendClientMessage(playerid, Rojo, "¡La vida debe estar entre 0 y 50!"); return 1;}
		
		switch(strval(tmp))
		{
			case 1:
			{
			    for(new i = 0; i < sizeof(FuegoInfo); i++)
				{
					if(FuegoInfo[i][fuCreado] == 0)
					{
					    EditandoFuego[playerid] = i;
					    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
						GetPlayerPos(playerid, plocx, plocy, plocz);
						GetPlayerFacingAngle(playerid,ploca);
						FuegoInfo[i][fuCreado]=1;
						FuegoInfo[i][fuTipo]=1;
						FuegoInfo[i][fuX]=plocx;
						FuegoInfo[i][fuY]=plocy;
						FuegoInfo[i][fuZ]=plocz-2.0;
						FuegoInfo[i][fuVida]=vida;
						FuegoInfo[i][fuObjeto] = CreateDynamicObject(18689, plocx, plocy, plocz-2.0, 0, 0, ploca, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 500.0, 500.0);
						SendClientMessage(playerid, COLOR_GREEN, "Colocaste un fuego 1, edita la posición con los controles.");
						EditDynamicObject(playerid, FuegoInfo[i][fuObjeto]);
						return 1;
					}
				}
			}
			case 2:
			{
			    for(new i = 0; i < sizeof(FuegoInfo); i++)
				{
					if(FuegoInfo[i][fuCreado] == 0)
					{
					    EditandoFuego[playerid] = i;
					    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
						GetPlayerPos(playerid, plocx, plocy, plocz);
						GetPlayerFacingAngle(playerid,ploca);
						FuegoInfo[i][fuCreado]=1;
						FuegoInfo[i][fuTipo]=1;
						FuegoInfo[i][fuX]=plocx;
						FuegoInfo[i][fuY]=plocy;
						FuegoInfo[i][fuZ]=plocz-2.0;
						FuegoInfo[i][fuVida]=vida;
						FuegoInfo[i][fuObjeto] = CreateDynamicObject(18690, plocx, plocy, plocz-2.0, 0, 0, ploca, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 500.0, 500.0);
						SendClientMessage(playerid, COLOR_GREEN, "Colocaste un fuego 2, edita la posición con los controles.");
						EditDynamicObject(playerid, FuegoInfo[i][fuObjeto]);
						return 1;
					}
				}
			}
			case 3:
			{
			    for(new i = 0; i < sizeof(FuegoInfo); i++)
				{
					if(FuegoInfo[i][fuCreado] == 0)
					{
					    EditandoFuego[playerid] = i;
					    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
						GetPlayerPos(playerid, plocx, plocy, plocz);
						GetPlayerFacingAngle(playerid,ploca);
						FuegoInfo[i][fuCreado]=1;
						FuegoInfo[i][fuTipo]=1;
						FuegoInfo[i][fuX]=plocx;
						FuegoInfo[i][fuY]=plocy;
						FuegoInfo[i][fuZ]=plocz-2.0;
						FuegoInfo[i][fuVida]=vida;
						FuegoInfo[i][fuObjeto] = CreateDynamicObject(18691, plocx, plocy, plocz-2.0, 0, 0, ploca, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 500.0, 500.0);
						SendClientMessage(playerid, COLOR_GREEN, "Colocaste un fuego 3, edita la posición con los controles.");
						EditDynamicObject(playerid, FuegoInfo[i][fuObjeto]);
						return 1;
					}
				}
			}
			case 4:
			{
			    for(new i = 0; i < sizeof(FuegoInfo); i++)
				{
					if(FuegoInfo[i][fuCreado] == 0)
					{
					    EditandoFuego[playerid] = i;
					    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
						GetPlayerPos(playerid, plocx, plocy, plocz);
						GetPlayerFacingAngle(playerid,ploca);
						FuegoInfo[i][fuCreado]=1;
						FuegoInfo[i][fuTipo]=1;
						FuegoInfo[i][fuX]=plocx;
						FuegoInfo[i][fuY]=plocy;
						FuegoInfo[i][fuZ]=plocz-2.0;
						FuegoInfo[i][fuVida]=vida;
						FuegoInfo[i][fuObjeto] = CreateDynamicObject(18692, plocx, plocy, plocz-2.0, 0, 0, ploca, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 500.0, 500.0);
						SendClientMessage(playerid, COLOR_GREEN, "Colocaste un fuego 4, edita la posición con los controles.");
						EditDynamicObject(playerid, FuegoInfo[i][fuObjeto]);
						return 1;
					}
				}
			}
			case 5:
			{
			    for(new i = 0; i < sizeof(FuegoInfo); i++)
				{
					if(FuegoInfo[i][fuCreado] == 0)
					{
					    EditandoFuego[playerid] = i;
					    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
						GetPlayerPos(playerid, plocx, plocy, plocz);
						GetPlayerFacingAngle(playerid,ploca);
						FuegoInfo[i][fuCreado]=1;
						FuegoInfo[i][fuTipo]=2;
						FuegoInfo[i][fuX]=plocx;
						FuegoInfo[i][fuY]=plocy;
						FuegoInfo[i][fuZ]=plocz-2.0;
						FuegoInfo[i][fuVida]=vida;
						FuegoInfo[i][fuObjeto] = CreateDynamicObject(18715, plocx, plocy, plocz-2.0, 0, 0, ploca, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 500.0, 500.0);
						SendClientMessage(playerid, COLOR_GREEN, "Colocaste un humo 5, edita la posición con los controles.");
						EditDynamicObject(playerid, FuegoInfo[i][fuObjeto]);
						return 1;
					}
				}
			}
			case 6:
			{
			    for(new i = 0; i < sizeof(FuegoInfo); i++)
				{
					if(FuegoInfo[i][fuCreado] == 0)
					{
					    EditandoFuego[playerid] = i;
					    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
						GetPlayerPos(playerid, plocx, plocy, plocz);
						GetPlayerFacingAngle(playerid,ploca);
						FuegoInfo[i][fuCreado]=1;
						FuegoInfo[i][fuTipo]=2;
						FuegoInfo[i][fuX]=plocx;
						FuegoInfo[i][fuY]=plocy;
						FuegoInfo[i][fuZ]=plocz-2.0;
						FuegoInfo[i][fuVida]=vida;
						FuegoInfo[i][fuObjeto] = CreateDynamicObject(18727, plocx, plocy, plocz-2.0, 0, 0, ploca, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 500.0, 500.0);
						SendClientMessage(playerid, COLOR_GREEN, "Colocaste un humo 6, edita la posición con los controles.");
						EditDynamicObject(playerid, FuegoInfo[i][fuObjeto]);
						return 1;
					}
				}
			}
			case 7:
			{
			    for(new i = 0; i < sizeof(FuegoInfo); i++)
				{
					if(FuegoInfo[i][fuCreado] == 0)
					{
					    EditandoFuego[playerid] = i;
					    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
						GetPlayerPos(playerid, plocx, plocy, plocz);
						GetPlayerFacingAngle(playerid,ploca);
						FuegoInfo[i][fuCreado]=1;
						FuegoInfo[i][fuTipo]=2;
						FuegoInfo[i][fuX]=plocx;
						FuegoInfo[i][fuY]=plocy;
						FuegoInfo[i][fuZ]=plocz-2.0;
						FuegoInfo[i][fuVida]=vida;
						FuegoInfo[i][fuObjeto] = CreateDynamicObject(18726, plocx, plocy, plocz-2.0, 0, 0, ploca, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 500.0, 500.0);
						SendClientMessage(playerid, COLOR_GREEN, "Colocaste un humo 7, edita la posición con los controles.");
						EditDynamicObject(playerid, FuegoInfo[i][fuObjeto]);
						return 1;
					}
				}
			}
		}
	 	Streamer_Update(playerid);
	}
	return 1;
}
if(strcmp(cmd, "/qfuego", true) == 0)
{
    if(JugadorInfo[playerid][pAdmin] >= 3)
	{
	    for(new fuego=0; fuego < MAX_FUEGOS; fuego++)
	    {
		    if(FuegoInfo[fuego][fuCreado] == 1)
		    {
				if(IsPlayerInRangeOfPoint(playerid,3.0,FuegoInfo[fuego][fuX],FuegoInfo[fuego][fuY],FuegoInfo[fuego][fuZ])) // Esta a 3 metros
			 	{
				    FuegoInfo[fuego][fuCreado] = 0;
				    FuegoInfo[fuego][fuVida] = 0;
				    FuegoInfo[fuego][fuX] = 0;
				    FuegoInfo[fuego][fuY] = 0;
				    FuegoInfo[fuego][fuZ] = 0;
				    FuegoInfo[fuego][fuTipo] = 0;
				    DestroyDynamicObject(FuegoInfo[fuego][fuObjeto]);
				    SendClientMessage(playerid, COLOR_GREEN, "¡Fuego eliminado!");
				    return 1;
		  		}
	  		}
		}
	}
	return 1;
}
if(strcmp(cmd, "/cono", true) == 0) //Poner objetos de trafico
{
	if(JugadorInfo[playerid][pFaccion] == 1 || JugadorInfo[playerid][pFaccion] == 2)
	{
		if(IsPlayerInAnyVehicle(playerid)){return 1;}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
	 	{
			SendClientMessage(playerid, Gris, "USO: /cono [opción]");
			SendClientMessage(playerid, -1, "1 Clavos - 2 Cono - 3 Valla - 4 Barrera - 5 Cierre - 6 Mediana - 7 Cinta policial - 8 Esc. Mediana - 9 Esc. Grande");
			SendClientMessage(playerid, -1, "10 Desvío - 11 Valla metálica - 12 Camilla");
			return 1;
		}
		switch(strval(tmp))
		{
			case 1:
			{
			    if(JugadorInfo[playerid][pFaccion] == 1)
				{
				    GameTextForPlayer(playerid, "~y~Colocaste una banda de clavos", 2000, 3);
					new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
					GetPlayerPos(playerid, plocx, plocy, plocz);
					GetPlayerFacingAngle(playerid,ploca);
					CreateCopObject(1,plocx,plocy,plocz,ploca, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				}
				else SendClientMessage(playerid, COLOR_ROJO, "¡No puedes colocar este cono!");
			}
			case 2:
			{
			    GameTextForPlayer(playerid, "~y~Colocaste un cono", 2000, 3);
			    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
				GetPlayerPos(playerid, plocx, plocy, plocz);
				GetPlayerFacingAngle(playerid,ploca);
				CreateCopObject(2,plocx,plocy,plocz-0.2,ploca, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
			}
			case 3:
			{
			    GameTextForPlayer(playerid, "~y~Colocaste una valla", 2000, 3);
			    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
				GetPlayerPos(playerid, plocx, plocy, plocz);
				GetPlayerFacingAngle(playerid,ploca);
				CreateCopObject(3,plocx,plocy,plocz,ploca, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
			}
			case 4:
			{
			    GameTextForPlayer(playerid, "~y~Colocaste una barrera", 2000, 3);
			    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
				GetPlayerPos(playerid, plocx, plocy, plocz);
				GetPlayerFacingAngle(playerid,ploca);
				CreateCopObject(4,plocx,plocy,plocz-0.2,ploca, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
			}
			case 5:
			{
			    GameTextForPlayer(playerid, "~y~Colocaste un cierre", 2000, 3);
			    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
				GetPlayerPos(playerid, plocx, plocy, plocz);
				GetPlayerFacingAngle(playerid,ploca);
				CreateCopObject(5,plocx,plocy,plocz+0.5,ploca+180, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
			}
			case 6:
			{
			    GameTextForPlayer(playerid, "~y~Colocaste una mediana", 2000, 3);
			    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
				GetPlayerPos(playerid, plocx, plocy, plocz);
				GetPlayerFacingAngle(playerid,ploca);
				CreateCopObject(10,plocx,plocy,plocz,ploca+180, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
			}
			case 7:
			{
			    if(JugadorInfo[playerid][pFaccion] == 1)
				{
				    GameTextForPlayer(playerid, "~y~Colocaste una cinta policial", 2000, 3);
					new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
					GetPlayerPos(playerid, plocx, plocy, plocz);
					GetPlayerFacingAngle(playerid,ploca);
					CreateCopObject(7,plocx,plocy,plocz,ploca, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				}
				else SendClientMessage(playerid, COLOR_ROJO, "¡No puedes colocar este cono!");
			}
			case 8:
			{
			    if(JugadorInfo[playerid][pFaccion] == 2)
				{
				    GameTextForPlayer(playerid, "~y~Colocaste una escalera", 2000, 3);
					new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
					GetPlayerPos(playerid, plocx, plocy, plocz);
					GetPlayerFacingAngle(playerid,ploca);
					CreateCopObject(8,plocx,plocy,plocz,ploca, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				}
				else SendClientMessage(playerid, COLOR_ROJO, "¡No puedes colocar este cono!");
			}
			case 9:
			{
			    if(JugadorInfo[playerid][pFaccion] == 2)
				{
				    GameTextForPlayer(playerid, "~y~Colocaste una escalera", 2000, 3);
				    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
					GetPlayerPos(playerid, plocx, plocy, plocz);
					GetPlayerFacingAngle(playerid,ploca);
					CreateCopObject(9,plocx,plocy,plocz,ploca, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				}
				else SendClientMessage(playerid, COLOR_ROJO, "¡No puedes colocar este cono!");
			}
			case 10:
			{
			    GameTextForPlayer(playerid, "~y~Colocaste un desvio", 2000, 3);
			    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
				GetPlayerPos(playerid, plocx, plocy, plocz);
				GetPlayerFacingAngle(playerid,ploca);
				CreateCopObject(11,plocx,plocy,plocz,ploca, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
			}
			case 11:
			{
			    GameTextForPlayer(playerid, "~y~Colocaste una valla metalica", 2000, 3);
			    new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
				GetPlayerPos(playerid, plocx, plocy, plocz);
				GetPlayerFacingAngle(playerid,ploca);
				CreateCopObject(12,plocx,plocy,plocz,ploca, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
			}
			case 12:
			{
			    if(JugadorInfo[playerid][pFaccion] == 2)
				{
				    GameTextForPlayer(playerid, "~y~Colocaste una camilla", 2000, 3);
					new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
					GetPlayerPos(playerid, plocx, plocy, plocz);
					GetPlayerFacingAngle(playerid,ploca);
					CreateCopObject(6,plocx,plocy,plocz,ploca, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
				}
				else SendClientMessage(playerid, COLOR_ROJO, "¡No puedes colocar este cono!");
			}
		}
	 	Streamer_Update(playerid);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if (strcmp(cmd,"/qcono",true) == 0)
{
	if(JugadorInfo[playerid][pFaccion] == 1 || JugadorInfo[playerid][pFaccion] == 2)
	{
		if(IsPlayerInAnyVehicle(playerid)){return 1;}
	    DeleteClosestObject(playerid);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if (strcmp(cmd,"/quitarconos",true) == 0)
{
	if(JugadorInfo[playerid][pAdmin] >= 4)
	{
	    SendClientMessage(playerid, Naranja, "¡Has quitado todas las barreras!");
    	DeleteAllObjects();
	}
	return 1;
}
//-------------- SISTEMA DE MAPEO IN GAME -------------------//

if(strcmp(cmd, "/ponerobjeto", true) == 0) //Poner objetos de mapeos
{
	if(JugadorInfo[playerid][pAdmin] >= 3)
	{
		if(IsPlayerInAnyVehicle(playerid)){return 1;}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
	 	{
			SendClientMessage(playerid, Gris, "USO: /ponerobjeto [objetoid]");
			return 1;
		}

		for(new i = 0; i < sizeof(ObjectInfo); i++)
		{
			if(ObjectInfo[i][obCreado] == 0)
			{
	   			EditandoObjeto[playerid] = i;
	   			new Float:plocx,Float:plocy,Float:plocz,Float:ploca;
				GetPlayerPos(playerid, plocx, plocy, plocz);
				GetPlayerFacingAngle(playerid,ploca);
				ObjectInfo[i][obCreado]=1;
				ObjectInfo[i][obX]=plocx;
				ObjectInfo[i][obY]=plocy;
				ObjectInfo[i][obZ]=plocz;
				ObjectInfo[i][obObjeto] = CreateDynamicObject(strval(tmp), plocx, plocy, plocz, 0, 0, ploca, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid), -1, 500.0, 500.0);
				format(string, 128, "¡Objeto (%d) colocado!", strval(tmp));
    			SendClientMessage(playerid, COLOR_GREEN, string);
				EditDynamicObject(playerid, ObjectInfo[i][obObjeto]);
				return 1;
			}
		}
	 	Streamer_Update(playerid);
	}
	return 1;
}
if(strcmp(cmd, "/quitarobjeto", true) == 0)
{
    if(JugadorInfo[playerid][pAdmin] >= 3)
	{
	    for(new info=0; info < MAX_OBJETOS; info++)
	    {
		    if(ObjectInfo[info][obCreado] == 1)
		    {
				if(IsPlayerInRangeOfPoint(playerid,3.0,ObjectInfo[info][obX],ObjectInfo[info][obY],ObjectInfo[info][obZ])) // Esta a 3 metros
			 	{
				    SendClientMessage(playerid, COLOR_GREEN, "¡Objeto eliminado!");
				    ObjectInfo[info][obCreado] = 0;
				    ObjectInfo[info][obX] = 0;
				    ObjectInfo[info][obY] = 0;
				    ObjectInfo[info][obZ] = 0;
				    ObjectInfo[info][obrX] = 0;
				    ObjectInfo[info][obrY] = 0;
				    ObjectInfo[info][obrZ] = 0;
				    DestroyDynamicObject(ObjectInfo[info][obObjeto]);
				    return 1;
		  		}
	  		}
		}
	}
	return 1;
}

if(strcmp(cmd, "/objetos", true) == 0)
{
    for(new info=0; info < 300; info++)
   	{
		if(Objetos[info][obModelo] != 0) {
	       	format(string, 128, "%s - %d", Objetos[info][obNombre], Objetos[info][obModelo]);
	       	SendClientMessage(playerid, -1, string);
		}
	}
	return 1;
}
//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/noticia",true) == 0 || strcmp(cmd,"/n",true) == 0) //Comando noticias LSN
{
	if(JugadorInfo[playerid][pFaccion] != 4){return 1;}
    if(Transmitir == 0) { SendClientMessage(playerid, Rojo, "No hay ninguna transmisión en línea. (/transmitir)"); return 1; }
	if(CocheLSTV(GetPlayerVehicleID(playerid)))
	{
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[80];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, Gris, "USO: (/n)oticia [texto]");
			return 1;
		}
		format(string, sizeof(string), "[NOTICIAS] %s: %s", NombreJugador(playerid), result);
		NoticiasLSN(Naranja,string);
	}
	else
 	{
 	    SendClientMessage(playerid, Rojo, "No puedes usar este comando aquí.");
 	}
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/directo",true) == 0) //Comando en vivo LSN
{
    if(JugadorInfo[playerid][pFaccion] != 4){return 1;}
    if(Transmitir == 0) { SendClientMessage(playerid, Rojo, "No hay ninguna transmisión en línea. (/transmitir)"); return 1; }
    if(CocheLSTV(GetPlayerVehicleID(playerid)))
    {
		new coche = GetPlayerVehicleID(playerid);
		if(DirectoLSNCoche[coche] != NOEXISTE){SendClientMessage(playerid, Rojo, "Este vehículo ya está emitiendo en directo."); return 1;}
		DirectoLSNCoche[coche] = playerid;
		for(new i=0; i<MAX_PLAYERS; i++)
		{
		    if(GetPlayerVehicleID(i) == coche)SendClientMessage(i, COLOR_GREEN, "Ahora el vehículo está en directo. Todo el que hable dentro de él, saldrá en la radio.");
		}
		SendClientMessage(playerid, COLOR_PIEL, "Para detener el directo utiliza '/directoff' y se acabará la transmisión en radio.");
	}
	else
 	{
 	    SendClientMessage(playerid, Rojo, "No puedes usar este comando aquí.");
 	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/directooff",true) == 0) //Comando en vivo LSN
{
    if(JugadorInfo[playerid][pFaccion] != 4){return 1;}
    if(Transmitir == 0) { SendClientMessage(playerid, Rojo, "No hay ninguna transmisión en línea. (/transmitir)"); return 1; }
	if(CocheLSTV(GetPlayerVehicleID(playerid)))
    {
		new coche = GetPlayerVehicleID(playerid);
		if(DirectoLSNCoche[coche] == NOEXISTE){SendClientMessage(playerid, Rojo, "Este vehículo no está emitiendo en directo."); return 1;}
		for(new i=0; i<MAX_PLAYERS; i++)
		{
		    if(GetPlayerVehicleID(i) == coche)SendClientMessage(i, COLOR_GREEN, "El vehículo ya no está en directo. Puedes hablar sin salir en la radio.");
		}
		DirectoLSNCoche[coche] = NOEXISTE;
	}
	else
 	{
 	    SendClientMessage(playerid, Rojo, "No puedes usar este comando aquí.");
 	}
	return 1;
}

if(strcmp(cmd,"/estudio",true) == 0) //Comando en vivo LSN
{
    if(JugadorInfo[playerid][pFaccion] != 4){return 1;}
    if(Transmitir == 0) { SendClientMessage(playerid, Rojo, "No hay ninguna transmisión en línea. (/transmitir)"); return 1; }
    if(EstaEnEstudio(playerid) != 0)
    {
		if(DirectoLSNEstudio != 0){SendClientMessage(playerid, Rojo, "El estudio ya está emitiendo en directo."); return 1;}
		for(new i=0; i<MAX_PLAYERS; i++)
		{
		    if(EstaEnEstudio(i))
			{
				SendClientMessage(i, COLOR_GREEN, "Ahora el estudio está en directo. Todo el que hable dentro de la zona saldrá en radio. Sólo activo para miembros de facción.");
			}
		}
		DirectoLSNEstudio = 1;
		SendClientMessage(playerid, COLOR_PIEL, "Para detener el directo utiliza '/offestudio' y se acabará la transmisión en radio.");
	}
	else SendClientMessage(playerid, Rojo, "No puedes usar este comando aquí.");
	return 1;
}

if(strcmp(cmd,"/transmitir",true) == 0) //Comando en vivo LSN
{
    if(JugadorInfo[playerid][pFaccion] != 4){return 1;}
    if(Transmitir == 0)
    {
        Transmitir = 1;
		NoticiasLSN(Naranja, "** LSRTV comenzará a transmitir. **");
	}
	else
	{
	    Transmitir = 0;
		NoticiasLSN(Naranja, "** LSRTV terminó su transmisión. **");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/offestudio",true) == 0) //Comando en vivo LSN
{
    if(JugadorInfo[playerid][pFaccion] != 4){return 1;}
    if(Transmitir == 0) { SendClientMessage(playerid, Rojo, "No hay ninguna transmisión en línea. (/transmitir)"); return 1; }
	if(EstaEnEstudio(playerid) != 0)
    {
		if(DirectoLSNEstudio == 0){SendClientMessage(playerid, Rojo, "El estudio no está emitiendo en directo."); return 1;}
		for(new i=0; i<MAX_PLAYERS; i++)
		{
		    if(EstaEnEstudio(i))
			{
				SendClientMessage(i, COLOR_GREEN, "El estudio ya no está en directo. Puedes hablar sin salir en la radio.");
			}
		}
		DirectoLSNEstudio = 0;
	}
	else
 	{
 	    SendClientMessage(playerid, Rojo, "No puedes usar este comando aquí.");
 	}
	return 1;
}

if(strcmp(cmd, "/miembros", true) == 0) //Comando para ver los miembros online de tu facción
{
	if(JugadorInfo[playerid][pFaccion] == 0){return 1;}
	format(string, sizeof(string), "SELECT Nombre FROM facciones WHERE ID = %d", JugadorInfo[playerid][pFaccion]);
 	mysql_query(1, string);
	new faccion[30];
	mysql_fetch_field_row(faccion, "Nombre");
	mysql_free_result();
    format(string, sizeof(string), "Lista de %s:", faccion);
	SendClientMessage(playerid, COLOR_PIEL, string);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID)
		{
			if(JugadorInfo[i][pFaccion] == JugadorInfo[playerid][pFaccion])
			{
			    if(JugadorInfo[i][pServicioPD] == 1)
			    {
					format(string, sizeof(string), "[%d] %s, rango: %s. (En servicio)", i, JugadorInfo[i][pNombre], Rango(i));
					SendClientMessage(playerid, COLOR_PIEL, string);
				}
				else
				{
				    format(string, sizeof(string), "[%d] %s, rango: %s.", i, JugadorInfo[i][pNombre], Rango(i));
					SendClientMessage(playerid, COLOR_PIEL, string);
				}
			}
		}
	}
    return 1;
}

//----------COMANDOS CANALES----------//

if(strcmp(cmd, "/familia", true) == 0 || strcmp(cmd, "/f", true) == 0) //Chat facciones públicas OOC
{
    if(IsPlayerConnected(playerid))
    {
        if(JugadorInfo[playerid][pFaccion] == 0){return 1;}
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[265];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Gris, "USO: (/f)amilia [texto]");
	    	return 1;
		}
		if(strlen(result) > 87)
	    {
	        new text1[91],text2[91];

	        strmid(text2, result, 87, 128);
	        strmid(text1, result, 0, 87);
	        format(string, sizeof(string), "[OOC] %s %s [ID: %d]: (( %s...", Rango(playerid), NombreJugador(playerid), playerid, text1);
			SendFaccionMessage(JugadorInfo[playerid][pFaccion], 0x00D2E6C8/*0x01FCFFC8*/, string);
			printf("Faccion %d OOC %s: %s", JugadorInfo[playerid][pFaccion], NombreJugador(playerid), text1);
			format(string, sizeof(string), "... %s ))", text2);
			SendFaccionMessage(JugadorInfo[playerid][pFaccion], 0x00D2E6C8/*0x01FCFFC8*/, string);
			printf("Faccion %d OOC %s: %s", JugadorInfo[playerid][pFaccion], NombreJugador(playerid), text2);
	    }
	    else
		{
		    format(string, sizeof(string), "[OOC] %s %s [ID: %d]: (( %s ))", Rango(playerid), NombreJugador(playerid), playerid, result);
			SendFaccionMessage(JugadorInfo[playerid][pFaccion], 0x00D2E6C8/*0x01FCFFC8*/, string);
			printf("Faccion %d OOC %s: %s", JugadorInfo[playerid][pFaccion], NombreJugador(playerid), result);
		}
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/radio", true) == 0 || strcmp(cmd, "/r", true) == 0) //Chat facciones públicas IC
{
    if(IsPlayerConnected(playerid))
    {
        if(JugadorInfo[playerid][pFaccion] == 0 || (JugadorInfo[playerid][pFaccion] > 4 && JugadorInfo[playerid][pFaccion] != 5)){return 1;}
        if(JugadorInfo[playerid][pFaccion] == 1 && JugadorInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid, Rojo, "No estás de servicio."); return 1;}
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[265];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Gris, "USO: (/r)adio [texto]");
	    	return 1;
		}
		if(strlen(result) > 87)
	    {
	        new text1[91],text2[91];

	        strmid(text2, result, 87, 128);
	        strmid(text1, result, 0, 87);
            AutoRol(playerid, "habla por radio.");
	        format(string, sizeof(string), "[RADIO] %s %s: %s ...", Rango(playerid), NombreJugador(playerid), text1);
			SendRadioMessage(JugadorInfo[playerid][pFaccion], COLOR_RADIO, string);
			printf("Faccion %d OOC %s: %s", JugadorInfo[playerid][pFaccion], NombreJugador(playerid), text1);

			format(string, sizeof(string), "%s", text2);
			SendRadioMessage(JugadorInfo[playerid][pFaccion], COLOR_RADIO, string);
			printf("Faccion %d OOC %s: %s", JugadorInfo[playerid][pFaccion], NombreJugador(playerid), text2);
	    }
	    else
		{
		    AutoRol(playerid, "habla por radio.");
		    format(string, sizeof(string), "[RADIO] %s %s: %s", Rango(playerid), NombreJugador(playerid), result);
			SendRadioMessage(JugadorInfo[playerid][pFaccion], COLOR_RADIO, string);
			printf("Faccion %d IC %s: %s", JugadorInfo[playerid][pFaccion], NombreJugador(playerid), result);
		}
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID)
			{
			    if(playerid != i)
			    {
				    if(GetPlayersProx(11.5, playerid, i))
				    {
						if(JugadorInfo[i][pFaccion] != JugadorInfo[playerid][pFaccion])
						{
						    if(strlen(result) > 87)
						    {
						        new text1[91],text2[91];
						        strmid(text2, result, 87, 128);
						        strmid(text1, result, 0, 87);
						        format(string, sizeof(string), "%s por radio: %s...", NombreJugadorProxy(playerid), text1);
								SendClientMessage(i, Chat2, string);

								format(string, sizeof(string), "%s", text2);
								SendClientMessage(i, Chat2, string);
						    }
						    else
							{
							    format(string, sizeof(string), "%s por radio: %s", NombreJugadorProxy(playerid), result);
								SendClientMessage(i, Chat2, string);
							}
						}
					}
				}
			}
		}
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/departamental", true) == 0 || strcmp(cmd, "/d", true) == 0) //Chat facciones gubernamentales IC
{
    if(IsPlayerConnected(playerid))
    {
        if(JugadorInfo[playerid][pFaccion] == 0 || JugadorInfo[playerid][pFaccion] > 3){return 1;}
        if(JugadorInfo[playerid][pFaccion] == 1 && JugadorInfo[playerid][pServicioPD] == 0){SendClientMessage(playerid, Rojo, "No estás de servicio."); return 1;}
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[265];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Gris, "USO: (/dep)artamental [texto]");
	    	return 1;
		}
		new nombre[32];
		switch(JugadorInfo[playerid][pFaccion])
  		{
  		    case 1:
  		    {
				format(nombre, 32, "LSPD");
  		    }
  		    case 2:
  		    {
  		        format(nombre, 32, "LSFD");
  		    }
  		    case 3:
  		    {
  		        format(nombre, 32, "ESTADO");
  		    }
  		    case 5:
  		    {
  		        format(nombre, 32, "GUARDIA NACIONAL");
  		    }
  		}
  		
  		if(strlen(result) > 87)
	    {
	        new text1[91],text2[91];

	        strmid(text2, result, 87, 128);
	        strmid(text1, result, 0, 87);
            AutoRol(playerid, "habla por radio.");
	        format(string, sizeof(string), "[%s ID %d]: %s", nombre, playerid, result);
			SendPublicMessage(COLOR_DEP, string);
			printf("Facciones IC %s: %s", NombreJugador(playerid), result);

			format(string, sizeof(string), "%s", text2);
			SendPublicMessage(COLOR_DEP, string);
			printf("Facciones IC %s: %s", NombreJugador(playerid), result);
	    }
	    else
		{
		    AutoRol(playerid, "habla por radio.");
		    format(string, sizeof(string), "[%s ID %d]: %s", nombre, playerid, result);
			SendPublicMessage(COLOR_DEP, string);
			printf("Facciones IC %s: %s", NombreJugador(playerid), result);
		}
		
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID)
			{
			    if(playerid != i)
			    {
				    if(GetPlayersProx(11.5, playerid, i))
				    {
						if(JugadorInfo[i][pFaccion] == 0 || JugadorInfo[i][pFaccion] >= 6)
						{
						    if(strlen(result) > 87)
						    {
						        new text1[91],text2[91];
						        strmid(text2, result, 87, 128);
						        strmid(text1, result, 0, 87);
						        format(string, sizeof(string), "%s por radio: %s...", NombreJugadorProxy(playerid), text1);
								SendClientMessage(i, Chat2, string);

								format(string, sizeof(string), "%s", text2);
								SendClientMessage(i, Chat2, string);
						    }
						    else
							{
							    format(string, sizeof(string), "%s por radio: %s", NombreJugadorProxy(playerid), result);
								SendClientMessage(i, Chat2, string);
							}
						}
					}
				}
			}
		}
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/megafono", true) == 0 || strcmp(cmd, "/m", true) == 0) //Chat facciones gubernamentales IC
{
    if(IsPlayerConnected(playerid))
    {
        if(JugadorInfo[playerid][pFaccion] == 0 || JugadorInfo[playerid][pFaccion] > 2){return 1;}
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[265];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Gris, "USO: (/m)egáfono [texto]");
	    	return 1;
		}
        format(string, sizeof(string), "[MEGÁFONO ID: %d] o< %s]", playerid, result);
 	    ProxDetector(50.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/gritar", true) == 0 || strcmp(cmd, "/gr", true) == 0 || strcmp(cmd, "/g", true) == 0) //Chat cercano IC gritar
{
    if(IsPlayerConnected(playerid))
    {
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[265];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Gris, "USO: (/g)ritar [texto]");
	    	return 1;
		}
		new lenguaje[10];
        switch(Idioma[playerid])
        {
            case 0: lenguaje = "";
            case 1: lenguaje = "[ESP] ";
            case 2: lenguaje = "[ALE] ";
            case 3: lenguaje = "[JAP] ";
            case 4: lenguaje = "[ITA] ";
            case 5: lenguaje = "[RUS] ";
            case 6: lenguaje = "[ARA] ";
            case 7: lenguaje = "[FRA] ";
            case 8: lenguaje = "[CHI] ";
            case 9: lenguaje = "[POR] ";
        }
        new prefijo[30];
        switch(Idioma[playerid])
        {
            case 0: prefijo = "grita";
            case 1: prefijo = "grita";   // Español
            case 2: prefijo = "geschrei"; // Aleman
            case 3: prefijo = "himei";    // Japonés
            case 4: prefijo = "urla";  // Italiano
            case 5: prefijo = "krichit";// Ruso
            case 6: prefijo = "srkhat";   // Arabe
            case 7: prefijo = "cris";    // Frances
            case 8: prefijo = "jianjiao";   // Chino
            case 9: prefijo = "gritos";   // Portugues
        }
		if(strlen(result) > 70)
  		{
	        new text1[91],text2[91];
	        strmid(text2, result, 70, 128);
	        strmid(text1, result, 0, 70);
    		format(string, 128, "%s%s %s: ¡¡%s...", lenguaje, NombreJugadorProxy(playerid), prefijo, text1);
		    ProxDetector(15.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
	        format(string, 128, "... %s!!", text2);
	        ProxDetector(15.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
	    }
	    else
		{
		 	format(string, sizeof string, "%s%s %s: ¡¡%s!!", lenguaje, NombreJugadorProxy(playerid), prefijo, result);
		 	ProxDetector(15.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
		}
		printf("%s grita: %s", NombreJugador(playerid), result);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/decir", true) == 0 || strcmp(cmd, "/de", true) == 0) //Chat cercano IC decir
{
    if(IsPlayerConnected(playerid))
    {
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[265];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Gris, "USO: (/de)cir [texto]");
	    	return 1;
		}
		
        if(strlen(result) > 70)
  		{
	        new text1[91],text2[91];
	        strmid(text2, result, 70, 128);
	        strmid(text1, result, 0, 70);
    		format(string, 128, "%s dice: %s...", NombreJugadorProxy(playerid), result);
		    ProxDetector(15.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
	        format(string, 128, "%s", text2);
	        ProxDetector(15.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
	    }
	    else
		{
		 	format(string, sizeof string, "%s dice: %s", NombreJugadorProxy(playerid), result);
		 	ProxDetector(15.0, playerid, string,Chat1,Chat2,Chat3,Chat4,Chat5);
		}
		printf("%s dice: %s", NombreJugador(playerid), result);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/cerca", true) == 0 || strcmp(cmd, "/c", true) == 0) //Chat cercano IC susurrar
{
    if(IsPlayerConnected(playerid))
    {
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[265];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Gris, "USO: (/c)erca [texto]");
	    	return 1;
		}
		
        if(strlen(result) > 70)
  		{
	        new text1[91],text2[91];
	        strmid(text2, result, 70, 128);
	        strmid(text1, result, 0, 70);
    		format(string, 128, "%s susurra: %s...", NombreJugadorProxy(playerid), result);
		    ProxDetector(5.0, playerid, string,Chat2,Chat2,Chat3,Chat4,Chat5);
	        format(string, 128, "%s", text2);
	        ProxDetector(5.0, playerid, string,Chat2,Chat2,Chat3,Chat4,Chat5);
	    }
	    else
		{
		 	format(string, sizeof string, "%s susurra: %s", NombreJugadorProxy(playerid), result);
		 	ProxDetector(5.0, playerid, string,Chat2,Chat2,Chat3,Chat4,Chat5);
		}
		printf("%s susurra: %s", NombreJugador(playerid), result);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/susurrar", true) == 0 || strcmp(cmd, "/s", true) == 0) //Chat  cercano privado IC
{
    if(IsPlayerConnected(playerid))
    {
        tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
        {
            SendClientMessage(playerid, Gris, "USO: (/s)usurrar [IdJugador/ParteDelNombre] [Texto]");
            return 1;
        }
        playerid2 = ReturnUser(tmp);
        if(playerid2 == playerid){SendClientMessage(playerid, Rojo, "No te puedes susurrar a tí mismo."); return 1;}
        if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid, Rojo, "Jugador no encontrado"); return 1;}
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[265];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Gris, "USO: (/s)usurrar [IdJugador/ParteDelNombre] [Texto]");
	    	return 1;
		}
		if(!GetPlayersProx(1.5, playerid, playerid2)){SendClientMessage(playerid, Rojo, "Debes estar a su lado para susurrarle."); return 1;}

		format(string, sizeof(string), "le susurra algo al oído de %s", NombreJugador(playerid2));
        AutoRol(playerid, string);
        format(string, sizeof(string), "([%d] %s) te ha susurrado: %s", playerid, NombreJugador(playerid), result);
        SendClientMessage(playerid2, AmarilloClaro, string);
        format(string, sizeof(string), "Le has susurrado  a ([%d] %s): %s", NombreJugador(playerid2), result);
        SendClientMessage(playerid, Amarillo, string);
		printf("%s susurra a %s: %s", NombreJugador(playerid), NombreJugador(playerid2), result);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/b", true) == 0) //Chat cercano OOC
{
    if(IsPlayerConnected(playerid))
    {
		if(ChatOOC[playerid] == 1){SendClientMessage(playerid, Rojo, "Espera 5 para volver a usar el chat OOC."); return 1;}
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[265];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Gris, "USO: /b [texto]");
	    	return 1;
		}
 		format(string, sizeof(string), "[OOC|ID: %d] %s: (( %s ))", playerid, NombreJugador(playerid), result);
	 	ProxDetector(15.0, playerid, string,COLOR_OOCA,COLOR_OOCB,COLOR_OOCC,COLOR_OOCD,COLOR_OOCE);
		printf("Chat OOC %s: %s", NombreJugador(playerid), result);
		ChatOOC[playerid] = 1;
		SetTimerEx("ChatOOCTimer",5000,0,"d",playerid);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/mp", true) == 0) //Mensajes privados para admins
{
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
 	{
		SendClientMessage(playerid, Gris, "USO: /mp [IdJugador/ParteDelNombre] [texto]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
    if(ActivoPrivados[playerid2] == 0)
    {
	    if(playerid == playerid2){SendClientMessage(playerid,Rojo,"No te puedes enviar mensajes privados a tí mismo."); return 1;}
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[265];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Gris, "USO: /mp [IdJugador/ParteDelNombre] [texto]");
	    	return 1;
		}
		printf("MP %s a %s: %s", NombreJugador(playerid), NombreJugador(playerid2), result);
		
		if(strlen(result) > 70)
	    {
	        new text1[91],text2[92];
	        strmid(text2, result, 70, 128);
	        strmid(text1, result, 0, 70);
	        
	        format(string, sizeof(string), "Mensaje Privado de %s [ID: %d]: (( %s", NombreJugador(playerid), playerid, text1);
			SendClientMessage(playerid2, COLOR_PIEL, string);
			format(string, sizeof(string), "Privado Enviado a %s [ID: %d]: (( %s", NombreJugador(playerid2), playerid2, text1);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			
			format(string, sizeof(string), "...%s ))", text2);
			SendClientMessage(playerid2, COLOR_PIEL, string);
			format(string, sizeof(string), "...%s ))", text2);
			SendClientMessage(playerid, COLOR_YELLOW, string);
	    }
	    else
		{
		 	format(string, sizeof(string), "Mensaje Privado de %s [ID: %d]: (( %s ))", NombreJugador(playerid), playerid, result);
			SendClientMessage(playerid2, COLOR_PIEL, string);
			format(string, sizeof(string), "Privado Enviado a %s [ID: %d]: (( %s ))", NombreJugador(playerid2), playerid2, result);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		
	}
	else SendClientMessage(playerid, Rojo, "Tiene los privados desactivados.");
    return 1;
}
//----------------------------------------------------------------------------------------------------------------
if(strcmp(cmd, "/ame", true) == 0) //Canal de acciones del jugador
{
    if(IsPlayerConnected(playerid))
    {
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[265];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Gris, "USO: /ame [Acción]");
	    	return 1;
		}
        AutoRol(playerid, result);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/me", true) == 0) //Canal de acciones del jugador
{
    if(IsPlayerConnected(playerid))
    {
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[265];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Gris, "USO: /me [Acción]");
	    	return 1;
		}
        if(strlen(result) > 88)
	    {
	        new text1[91],text2[92];
	        strmid(text2, result, 88, 128);
	        strmid(text1, result, 0, 88);
	        format(string, 128, "%s %s...", NombreJugadorProxy(playerid), text1);
	        ProxDetector(20.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	        format(string, 128, "%s", text2);
	        ProxDetector(20.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	    }
	    else
		{
		 	format(string, sizeof string, "%s %s", NombreJugadorProxy(playerid), result);
		 	ProxDetector(20.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		}
		printf("%s", string);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/do", true) == 0) //Canal de sucesos en el ambiente
{
    if(IsPlayerConnected(playerid))
    {
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[265];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Gris, "USO: /do [Suceso]");
	    	return 1;
		}
		new nombre[128];
  		if(Mascara[playerid] == 0) { format(nombre, sizeof(nombre), "[ID: %i]", playerid); }
        else { format(nombre, sizeof(nombre), "%s", NombreJugadorProxy(playerid)); }
        
        if(strlen(result) > 87)
	    {
	        new text1[91],text2[91];

	        strmid(text2, result, 87, 128);
	        strmid(text1, result, 0, 87);
	        format(string, 128, "%s %s...", nombre, text1);
	        ProxDetector(20.0, playerid, string,COLOR_GREENDO,COLOR_GREENDO,COLOR_GREENDO,COLOR_GREENDO,COLOR_GREENDO);
	        format(string, 128, "%s", text2);
	        ProxDetector(20.0, playerid, string,COLOR_GREENDO,COLOR_GREENDO,COLOR_GREENDO,COLOR_GREENDO,COLOR_GREENDO);
	    }
	    else
		{
		 	format(string, sizeof string, "%s %s", nombre, result);
		 	ProxDetector(20.0, playerid, string,COLOR_GREENDO,COLOR_GREENDO,COLOR_GREENDO,COLOR_GREENDO,COLOR_GREENDO);
		}
		printf("(/do) %s: %s", NombreJugador(playerid), result);
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/yo", true) == 0) //Indicar un estado del personaje IC
{
    if(IsPlayerConnected(playerid))
    {
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
		new offset = idx;
		new result[80];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
		result[idx - offset] = EOS;
		if(!strlen(result) && Yo[playerid] != 0)
		{
	    	SendClientMessage(playerid, Gris, "USO: /yo [Estado]");
	    	format(string, sizeof(string), "%s *", YoTexto[playerid]);
	    	SendClientMessage(playerid, Naranja, string);
	    	return 1;
		}
		if(!strlen(result))
		{
	    	SendClientMessage(playerid, Gris, "USO: /yo [Estado]");
	    	return 1;
		}
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		Delete3DTextLabel(Yo3DText[playerid]);
		format(YoTexto[playerid], sizeof(result), result);
        Yo3DText[playerid] = Create3DTextLabel(YoTexto[playerid], 0xFF6347FF, X, Y, Z, 3.4, 1);
       	Attach3DTextLabelToPlayer(Yo3DText[playerid], playerid, 0.0, 0.0, 0.26);
        Streamer_Update(playerid);
        format(string, sizeof(string), "%s *", result);
		SendClientMessage(playerid, Naranja, string);
		Yo[playerid] = 1;
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/yob", true) == 0) //Borrar el estado
{
    if(IsPlayerConnected(playerid))
    {
		if(Yo[playerid] == 0)
		{
	    	SendClientMessage(playerid, Rojo, "El comando no da ningún resultado.");
	    	return 1;
		}
        Delete3DTextLabel(Yo3DText[playerid]);
        Streamer_Update(playerid);
		SendClientMessage(playerid, COLOR_GREEN, "Sin texto descriptivo.");
		Yo[playerid] = 0;
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------
if(strcmp(cmd, "/idioma", true) == 0) //Selecciona un idioma
{
    new opcion[24];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Gris, "USO: /idioma [opción]");
		SendClientMessage(playerid, -1, "0: Inglés,   1: Español");
		SendClientMessage(playerid, -1, "2: Alemán,   3: Japonés");
		SendClientMessage(playerid, -1, "4: Italiano, 5: Ruso");
		SendClientMessage(playerid, -1, "6: Árabe,    7: Francés");
		SendClientMessage(playerid, -1, "8: Chino,    9: Portugués");
		return 1;
	}
	if(strcmp(opcion,"0",true) == 0)
	{
	    Idioma[playerid] = 0;
	    SendClientMessage(playerid, Verde, "¡Ahora te expresas en otro idioma!");
	    return 1;
	}
	if(strcmp(opcion,"1",true) == 0)
	{
	    Idioma[playerid] = 1;
	    SendClientMessage(playerid, Verde, "¡Ahora te expresas en otro idioma!");
	    return 1;
	}
	if(strcmp(opcion,"2",true) == 0)
	{
	    Idioma[playerid] = 2;
	    SendClientMessage(playerid, Verde, "¡Ahora te expresas en otro idioma!");
	    return 1;
	}
	if(strcmp(opcion,"3",true) == 0)
	{
	    Idioma[playerid] = 3;
	    SendClientMessage(playerid, Verde, "¡Ahora te expresas en otro idioma!");
	    return 1;
	}
	if(strcmp(opcion,"4",true) == 0)
	{
	    Idioma[playerid] = 4;
	    SendClientMessage(playerid, Verde, "¡Ahora te expresas en otro idioma!");
	    return 1;
	}
	if(strcmp(opcion,"5",true) == 0)
	{
	    Idioma[playerid] = 5;
	    SendClientMessage(playerid, Verde, "¡Ahora te expresas en otro idioma!");
	    return 1;
	}
	if(strcmp(opcion,"6",true) == 0)
	{
	    Idioma[playerid] = 6;
	    SendClientMessage(playerid, Verde, "¡Ahora te expresas en otro idioma!");
	    return 1;
	}
	if(strcmp(opcion,"7",true) == 0)
	{
	    Idioma[playerid] = 7;
	    SendClientMessage(playerid, Verde, "¡Ahora te expresas en otro idioma!");
	    return 1;
	}
	if(strcmp(opcion,"8",true) == 0)
	{
	    Idioma[playerid] = 8;
	    SendClientMessage(playerid, Verde, "¡Ahora te expresas en otro idioma!");
	    return 1;
	}
	if(strcmp(opcion,"9",true) == 0)
	{
	    Idioma[playerid] = 9;
	    SendClientMessage(playerid, Verde, "¡Ahora te expresas en otro idioma!");
	    return 1;
	}
	else
	{
	    SendClientMessage(playerid, Gris, "USO: /idioma [opción]");
		SendClientMessage(playerid, -1, "0: Inglés,   1: Español");
		SendClientMessage(playerid, -1, "2: Alemán,   3: Japonés");
		SendClientMessage(playerid, -1, "4: Italiano, 5: Ruso");
		SendClientMessage(playerid, -1, "6: Árabe,    7: Francés");
		SendClientMessage(playerid, -1, "8: Chino,    9: Portugués");
	}
	return 1;
}

//----------COMANDOS CASAS Y NEGOCIOS----------//

if(strcmp(cmd, "/comprarnegocio", true) == 0) //Comprar un negocio
{
	if(!GetPlayerFueraPuertaNego(playerid)){SendClientMessage(playerid,Rojo,"No estás en la puerta de un local."); return 1;} //No está en un negocio
	new nego = GetPlayerFueraPuertaNego(playerid);
	if(NegocioInfo[nego][nComprado] == 2){SendClientMessage(playerid,Rojo,"¡Este local está clausurado!"); return 1;} //Negocio claurado
	if(NegocioInfo[nego][nComprado] == 1){SendClientMessage(playerid,Rojo,"Este local no está en venta."); return 1;} //Negocio comprado
	if(JugadorInfo[playerid][pNegocio] > 0){SendClientMessage(playerid,Rojo,"Ya posees un negocio."); return 1;} //Ya tiene negocio
	if(JugadorInfo[playerid][pDineroBanco] < NegocioInfo[nego][nValor]){SendClientMessage(playerid,Rojo,"No tienes suficiente dinero en el banco."); return 1;}

	JugadorInfo[playerid][pDineroBanco] -= NegocioInfo[nego][nValor];
	JugadorInfo[playerid][pNegocio] = nego; //Setea el negocio del jugador
	if(NegocioInfo[nego][nTipo] == 6)JugadorInfo[playerid][pTaller] = nego; //Si es taller, setearlo al jugador
	NegocioInfo[nego][nComprado] = 1;
	format(NegocioInfo[nego][nDueno], 60, "%s", JugadorInfo[playerid][pNombre]);
	format(string, sizeof(string), "Has comprado un local por %d$.", NegocioInfo[nego][nValor]);
	SendClientMessage(playerid, Verde, string);
	SendClientMessage(playerid, Verde, "Felicidades por tu nueva compra. Utiliza '/ayudanegocio' para ver los comandos de negocio.");
	printf("%s compra el local %d por %d$",NombreJugador(playerid), nego, NegocioInfo[nego][nValor]);
	UpdateNegocioLabel(nego);
	GuardarNegocio(nego);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/nombrenegocio", true) == 0) //Cambiar nombre a un negocio
{
    if(JugadorInfo[playerid][pNegocio] == 0){SendClientMessage(playerid,Rojo,"No posees un local."); return 1;} //No tiene negocio
	if(GetPlayerFueraPuertaNego(playerid) != JugadorInfo[playerid][pNegocio]){SendClientMessage(playerid,Rojo,"No estás en la puerta de tu local."); return 1;} //No está en una casa
	new nego = JugadorInfo[playerid][pNegocio];
	new length = strlen(cmdtext);
    while ((idx < length) && (cmdtext[idx] <= ' '))
    {
        idx++;
    }
    new offset = idx;
    new result[MAX_PLAYER_NAME];
    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
    {
        result[idx - offset] = cmdtext[idx];
        idx++;
    }
    result[idx - offset] = EOS;
    if(!strlen(result))
    {
        SendClientMessage(playerid, Gris, "USO: /nombrenegocio [texto]");
        return 1;
    }
    new string2[250];
    format(NegocioInfo[nego][nNombre], sizeof(result), "%s", result);
    format(string2, sizeof(string2), "Has cambiado el nombre de tu negocio a %s.", result);
    SendClientMessage(playerid, Verde, string2);
    UpdateNegocioLabel(nego);
    GuardarNegocio(nego);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/vendernegocio", true) == 0) //Vender un negocio
{
    if(JugadorInfo[playerid][pNegocio] == 0){SendClientMessage(playerid,Rojo,"No posees un local."); return 1;} //No tiene negocio
	if(GetPlayerFueraPuertaNego(playerid) != JugadorInfo[playerid][pNegocio]){SendClientMessage(playerid,Rojo,"No estás en la puerta de tu local."); return 1;} //No está en una casa
	new nego = JugadorInfo[playerid][pNegocio];
    if(NegocioInfo[nego][nComprado] == 2){SendClientMessage(playerid,Rojo,"¡Este local está clausurado!"); return 1;} //Negocio claurado
	JugadorInfo[playerid][pNegocio] = 0; //Setea el negocio del jugador a 0
	if(NegocioInfo[nego][nTipo] == 6)JugadorInfo[playerid][pTaller] = 0; //Si es taller, resetear
	new dinero = NegocioInfo[nego][nValor]*3/4;
	JugadorInfo[playerid][pDineroBanco] += dinero;
	NegocioInfo[nego][nComprado] = 0;
	format(NegocioInfo[nego][nDueno], 60, "");
	NegocioInfo[nego][nCerrado] = 0;
	format(string, sizeof(string), "Has vendido tu local por %d$. El dinero se te ha ingresado en tu cuenta bancaria.", dinero);
	SendClientMessage(playerid, Verde, string);
	printf("%s vende su local %d por %d$",NombreJugador(playerid), nego, dinero);
	UpdateNegocioLabel(nego);
	GuardarNegocio(nego);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/comprarcasa", true) == 0) //Comprar una casa
{
	if(!GetPlayerFueraPuertaCasa(playerid)){SendClientMessage(playerid,Rojo,"No estás en la puerta de una casa."); return 1;} //No está en una casa
	new casa = GetPlayerFueraPuertaCasa(playerid);
	if(CasaInfo[casa][hComprada] == 1 || CasaInfo[casa][hComprada] == -1){SendClientMessage(playerid,Rojo,"Esta casa no está en venta."); return 1;} //Casa comprada
	if(JugadorInfo[playerid][pCasaAlq] > 0){SendClientMessage(playerid,Rojo,"No puedes comprar una casa si estás alquilando una."); return 1;} //Ya tiene casa
	if(JugadorInfo[playerid][pCasa] > 0){SendClientMessage(playerid,Rojo,"Ya posees una casa."); return 1;} //Ya tiene casa
	if(JugadorInfo[playerid][pDineroBanco] < CasaInfo[casa][hValor]){SendClientMessage(playerid,Rojo,"No tienes suficiente dinero en el banco."); return 1;}
	JugadorInfo[playerid][pDineroBanco] -= CasaInfo[casa][hValor];
	JugadorInfo[playerid][pCasa] = casa; //Setea la casa del jugador
	CasaInfo[casa][hComprada] = 1;
	format(CasaInfo[casa][hDueno], 60, "%s", JugadorInfo[playerid][pNombre]);
	CasaInfo[casa][hInquilinos] = 1;
	CasaInfo[casa][hAlquilable] = 0;
	CasaInfo[casa][hPAlquiler] = 0;
	format(string, sizeof(string), "Has comprado una casa por %d$.", CasaInfo[casa][hValor]);
	SendClientMessage(playerid, Verde, string);
	SendClientMessage(playerid, Verde, "Felicidades por tu nueva compra. Utiliza '/ayudacasa' para ver los comandos de tu casa.");
	printf("%s compra la casa %d por %d$",NombreJugador(playerid), casa, CasaInfo[casa][hValor]);
	GuardarCasa(casa);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/vendercasa", true) == 0) //Vender una casa
{
    if(JugadorInfo[playerid][pCasa] == 0){SendClientMessage(playerid,Rojo,"No posees una casa."); return 1;} //No tiene casa
	if(GetPlayerFueraPuertaCasa(playerid) != JugadorInfo[playerid][pCasa]){SendClientMessage(playerid,Rojo,"No estás en la puerta de tu casa."); return 1;} //No está en una casa
	new casa = JugadorInfo[playerid][pCasa];
	JugadorInfo[playerid][pCasa] = 0; //Setea la casa del jugador a 0
	JugadorInfo[playerid][pDineroBanco] += CasaInfo[casa][hValor];
	CasaInfo[casa][hComprada] = 0;
	format(CasaInfo[casa][hDueno], 60, "-");
	CasaInfo[casa][hCerrada] = 1;
	CasaInfo[casa][hInquilinos] = 0;
	CasaInfo[casa][hAlquilable] = 0;
	CasaInfo[casa][hPAlquiler] = 0;
	format(string, sizeof(string), "Has vendido tu casa por %d$. El dinero se te ha ingresado en tu cuenta bancaria.", CasaInfo[casa][hValor]);
	SendClientMessage(playerid, Verde, string);
	printf("%s vende su casa %d por %d$",NombreJugador(playerid), casa, CasaInfo[casa][hValor]);
	GuardarCasa(casa);
	return 1;
}
if(strcmp(cmd, "/infocasa", true) == 0)
{
    if(JugadorInfo[playerid][pAdmin] <= 4){return 1;}
	if(!GetPlayerFueraPuertaCasa(playerid) && !GetPlayerDentroPuertaCasa(playerid)){return 1;} //No está en una casa
	new casa = GetPlayerFueraPuertaCasa(playerid);
    if(GetPlayerFueraPuertaCasa(playerid))
	{
	    format(string, sizeof(string), "Llave casa: %d | Dueño: %s | Precio: %d$", casa, CasaInfo[casa][hDueno], CasaInfo[casa][hValor]);
	    SendClientMessage(playerid, Gris, string);
	}
	return 1;
}
if(strcmp(cmd, "/infonego", true) == 0)
{
    if(JugadorInfo[playerid][pAdmin] <= 4){return 1;}
	if(!GetPlayerFueraPuertaNego(playerid) && !GetPlayerDentroPuertaNego(playerid)){return 1;} //No está en un negocio
	new nego = GetPlayerFueraPuertaNego(playerid);
    if(GetPlayerFueraPuertaNego(playerid))
	{
	    format(string, sizeof(string), "Llave negocio: %d | Dueño: %s | Precio: %d$", nego, NegocioInfo[nego][nDueno], NegocioInfo[nego][nValor]);
	    SendClientMessage(playerid, Gris, string);
	}
	return 1;
}
if(strcmp(cmd, "/infocoche", true) == 0)
{
    if(JugadorInfo[playerid][pAdmin] <= 4){return 1;}
    if(!GetPlayerVehicleID(playerid)){return 1;}
    new carid = GetPlayerVehicleID(playerid);
    format(string, sizeof(string), "Llave coche: %d | Modelo: %s | Dueño: %s | Precio: %d$", CocheInfo[carid][cLlave], GetVehicleName(carid), CocheInfo[carid][cDueno], CocheInfo[carid][cValor]);
 	SendClientMessage(playerid, Gris, string);
	return 1;
}
if(strcmp(cmd, "/info", true) == 0)
{
	if(!GetPlayerFueraPuertaCasa(playerid) && !GetPlayerDentroPuertaCasa(playerid) && !GetPlayerFueraPuertaNego(playerid) && !GetPlayerDentroPuertaNego(playerid)){return 1;} //No está en una casa
	new n = GetPlayerFueraPuertaNego(playerid);
	new c = GetPlayerFueraPuertaCasa(playerid);
	new llave[128], comprado[128], precio[128], nombre[128], estadopuerta[128];
    if(GetPlayerFueraPuertaNego(playerid))
	{
	    format(llave, 128,"~b~llave ~w~%d", n);
		format(nombre, 128,"~w~%s", NegocioInfo[n][nNombre]);
		if(NegocioInfo[n][nComprado] == 0) //negocio libre
		{
			format(comprado,sizeof(comprado),"~w~en venta");
		}
		else if(NegocioInfo[n][nComprado] == 1)
		{
			format(comprado,sizeof(comprado),"~b~comprado");
		}
		else
		{
		    format(comprado,sizeof(comprado),"~r~clausurado");
		}
		
		if(NegocioInfo[n][nCerrado] == 0) //negocio cerrado
		{
			format(estadopuerta,sizeof(estadopuerta),"~b~abierto");
		}
		else
		{
			format(estadopuerta,sizeof(estadopuerta),"~b~cerrado");
		}
		format(precio, 128,"~b~precio: ~w~%d$", NegocioInfo[n][nValor]);

	    format(string,128,"%s~n~%s~n~%s~n~%s~n~%s", llave, nombre, comprado, precio, estadopuerta);
	    GameTextForPlayer(playerid, string, 2300, 3);
	}
	else if(GetPlayerFueraPuertaCasa(playerid))
	{
	    format(llave, 128,"~g~llave ~w~%d", c);
		format(nombre, 128,"~w~%s", CasaInfo[c][hBarrio]);
		if(CasaInfo[c][hComprada] == 0) //negocio libre
		{
			format(comprado,sizeof(comprado),"~w~en venta");
		}
		else
		{
			format(comprado,sizeof(comprado),"~g~comprado");
		}

		if(CasaInfo[c][hCerrada] == 0) //negocio cerrado
		{
			format(estadopuerta,sizeof(estadopuerta),"~g~abierto");
		}
		else
		{
			format(estadopuerta,sizeof(estadopuerta),"~g~cerrado");
		}
		if(CasaInfo[c][hComprada] == -1) //hotel
		{
			format(precio, 128,"~g~alquiler: ~w~%d$", CasaInfo[c][hPAlquiler]);
		}
		else
		{
			format(precio, 128,"~g~precio: ~w~%d$", CasaInfo[c][hValor]);
		}
	    format(string,128,"%s~n~%s~n~%s~n~%s~n~%s", llave, nombre, comprado, precio, estadopuerta);
	    GameTextForPlayer(playerid, string, 2300, 3);
	}
 	new planta = GetPlayerPlantacion(playerid);
	if(planta != 0)
	{
 	    if(PlantaInfo[planta][plTipo] <= 1) //Marihuana
		{
			if(PlantaInfo[planta][plEstado] <= 100)
			{
				format(string,sizeof(string),"~g~Plantacion marihuana~n~~g~Proceso:~w~ %d%%",PlantaInfo[planta][plEstado]);
			}
			else if(PlantaInfo[planta][plEstado] > 100)
			{
				format(string,sizeof(string),"~g~Plantacion marihuana~n~~g~Proceso:~w~ 100%%");
			}
			GameTextForPlayer(playerid, string, 2300, 3);
		}
	}
	return 1;
}
if(strcmp(cmd, "/timbre", true) == 0) //
{
	if(GetPlayerFueraPuertaCasa(playerid)) //Está en la puerta de una casa
	{
		new casa = GetPlayerFueraPuertaCasa(playerid);
		AutoRol(playerid, "toca el timbre de la casa.");
		new Float:EX, Float:EY, Float:EZ;
		EX = CasaInfo[casa][hEntradaX], EY = CasaInfo[casa][hEntradaY], EZ = CasaInfo[casa][hEntradaZ];

		for(new i=0; i<MAX_PLAYERS; i++)
		{
		    if(GetPlayerDentroCasa(i) == casa || IsPlayerInRangeOfPoint(i, 0.2, EX, EY, EZ))SendClientMessage(playerid, COLOR_ACCION, "** Suena el timbre en la puerta de la casa. **");
		}
	}
	return 1;
}
if(strcmp(cmd, "/puerta", true) == 0) //Abrir/cerrar una casa o un local
{
	if(!GetPlayerFueraPuertaCasa(playerid) && !GetPlayerDentroPuertaCasa(playerid) && !GetPlayerFueraPuertaNego(playerid) && !GetPlayerDentroPuertaNego(playerid)){SendClientMessage(playerid,Rojo,"No estás en la puerta de una casa o un local."); return 1;} //No está en una casa
	if(GetPlayerFueraPuertaCasa(playerid) || GetPlayerDentroPuertaCasa(playerid))
	{
        new casa;
        if(!GetPlayerDentroPuertaCasa(playerid)){casa = GetPlayerFueraPuertaCasa(playerid);}
		if(!GetPlayerFueraPuertaCasa(playerid)){casa = GetPlayerDentroPuertaCasa(playerid);}
		if(JugadorInfo[playerid][pCasa] != casa && JugadorInfo[playerid][pCasaAlq] != casa){SendClientMessage(playerid,Rojo,"No tienes la llave de esta casa."); return 1;} //No es su casa
		if(CasaInfo[casa][hCerrada] == 0)
		{
		    CasaInfo[casa][hCerrada] = 1; GameTextForPlayer(playerid, "~w~Casa ~r~cerrada", 2000, 3);
		    PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		else
		{
		    CasaInfo[casa][hCerrada] = 0; GameTextForPlayer(playerid, "~w~Casa ~g~abierta", 2000, 3);
		    PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
	}
	if(GetPlayerFueraPuertaNego(playerid) || GetPlayerDentroPuertaNego(playerid))
	{
	    new nego;
        if(!GetPlayerDentroPuertaNego(playerid)){nego = GetPlayerFueraPuertaNego(playerid);}
		if(!GetPlayerFueraPuertaNego(playerid)){nego = GetPlayerDentroPuertaNego(playerid);}
        if(NegocioInfo[nego][nComprado] == 2){SendClientMessage(playerid,Rojo,"¡Este local está clausurado!"); return 1;} //Negocio claurado
		if(JugadorInfo[playerid][pNegocio] != nego){SendClientMessage(playerid,Rojo,"No tienes la llave de este local."); return 1;} //No es su negocio
		if(NegocioInfo[nego][nCerrado] == 0)
		{
		    NegocioInfo[nego][nCerrado] = 1; GameTextForPlayer(playerid, "~w~Negocio ~r~cerrado", 2000, 3);
		    PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		else
		{
		    NegocioInfo[nego][nCerrado] = 0; GameTextForPlayer(playerid, "~w~Negocio ~g~abierto", 2000, 3);
		    PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		UpdateNegocioLabel(nego);
		GuardarNegocio(nego);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/alquilable", true) == 0) //Hacer alquilable una casa
{
    if(JugadorInfo[playerid][pCasa] == 0){SendClientMessage(playerid,Rojo,"No posees una casa."); return 1;} //No tiene casa
    new casa = JugadorInfo[playerid][pCasa];
	new opcion[128];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Gris, "USO: /alquilable [si/no] ");
		return 1;
	}
	if(strcmp(opcion,"Si",true) == 0)
	{
	    CasaInfo[casa][hAlquilable] = 1; GameTextForPlayer(playerid, "~g~Casa alquilable", 2000, 3);
	}
	else if(strcmp(opcion,"No",true) == 0)
	{
        CasaInfo[casa][hAlquilable] = 0; GameTextForPlayer(playerid, "~r~Casa no alquilable", 2000, 3);
	}
	else
	{
	    SendClientMessage(playerid, Gris, "USO: /alquilable [si/no] ");
		return 1;
	}
	GuardarCasa(casa);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/renta", true) == 0) //Precio de alquiler de una casa
{
	if(JugadorInfo[playerid][pCasa] == 0){SendClientMessage(playerid,Rojo,"No posees una casa."); return 1;} //No tiene casa
	new casa = JugadorInfo[playerid][pCasa];
	if(CasaInfo[casa][hAlquilable] == 0){SendClientMessage(playerid,Rojo,"Tu casa no es alquilable."); return 1;} //No tiene casa
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Gris, "USO: /renta [precio 10-200]");
		return 1;
	}
	new precio = strval(tmp);
	if(precio < 10 || precio > 200){SendClientMessage(playerid,Rojo,"El precio debe estar entre 10$ y 200$."); return 1;}
	CasaInfo[casa][hPAlquiler] = precio;
	format(string, sizeof(string), "Precio de alquiler de tu casa: %d$.", precio);
	SendClientMessage(playerid, Amarillo, string);
	GuardarCasa(casa);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/desalojar", true) == 0) //Desalojar a una persona de tu casa
{
	if(JugadorInfo[playerid][pCasa] == 0){SendClientMessage(playerid,Rojo,"No posees una casa."); return 1;}
	new casa = JugadorInfo[playerid][pCasa];
    tmp = strtok(cmdtext, idx);
   	if(!strlen(tmp))
    {
	    SendClientMessage(playerid, Gris, "USO: /desalojar [IdJugador/ParteDelNombre]");
	    return 1;
	}
    playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
    if(JugadorInfo[playerid2][pCasaAlq] != casa){SendClientMessage(playerid,Rojo,"Esta persona no está alquilando tu casa."); return 1;}
    JugadorInfo[playerid2][pCasaAlq] = 0;
    CasaInfo[casa][hInquilinos] --;
    format(string, sizeof(string), "%s te ha desalojado de su casa.",NombreJugador(playerid));
    SendClientMessage(playerid2, AmarilloClaro, string);
    format(string, sizeof(string), "Has desalojado a %s de tu casa.",NombreJugador(playerid2));
    SendClientMessage(playerid, AmarilloClaro, string);
	GuardarCasa(casa);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/desalojartodos", true) == 0) //Desalojar a todas las personas persona de tu casa
{
    if(JugadorInfo[playerid][pCasa] == 0){SendClientMessage(playerid,Rojo,"No posees una casa."); return 1;}
    new casa = JugadorInfo[playerid][pCasa];
    CasaInfo[casa][hInquilinos] = 1;
    format(string, sizeof(string), "%s te ha desalojado de su casa.",NombreJugador(playerid));
    SendClientMessage(playerid, AmarilloClaro, "Ahora nadie está alquilando tu casa.");
    for(new i=0; i<MAX_PLAYERS; i++)
    {
        if(JugadorInfo[i][pCasaAlq] == casa){JugadorInfo[i][pCasaAlq] = 0; SendClientMessage(i, AmarilloClaro, string);}
    }
    format(string, sizeof(string), "UPDATE usuarios SET CasaAlq = 0 WHERE CasaAlq = %d", casa);
    mysql_query(1, string);
	GuardarCasa(casa);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/alquilar", true) == 0) //Alquilar una casa
{
    if(!GetPlayerFueraPuertaCasa(playerid)){SendClientMessage(playerid,Rojo,"No estás en la puerta de una casa."); return 1;} //No está en una casa
	new casa = GetPlayerFueraPuertaCasa(playerid);
	if(CasaInfo[casa][hComprada] > 0) //Comprada
	{
		if(CasaInfo[casa][hAlquilable] == 0){SendClientMessage(playerid,Rojo,"Esta casa no está en alquiler."); return 1;} //Casa comprada
	    if(JugadorInfo[playerid][pCasaAlq] > 0){SendClientMessage(playerid,Rojo,"Ya estás alquilando una casa."); return 1;}
		if(JugadorInfo[playerid][pCasa] > 0){SendClientMessage(playerid,Rojo,"No puedes alquilar una casa si tienes comprada otra."); return 1;} //Ya tiene casa
		if(CasaInfo[casa][hInquilinos] >= 4){SendClientMessage(playerid,Rojo,"Esta casa no puede acoger a más personas."); return 1;} //Ya tiene casa
		if(GetPlayerMoney(playerid) < CasaInfo[casa][hPAlquiler]){SendClientMessage(playerid,Rojo,"No tienes suficiente dinero."); return 1;}
		GivePlayerMoneyAC(playerid, -CasaInfo[casa][hPAlquiler]);
		JugadorInfo[playerid][pCasaAlq] = casa;
		CasaInfo[casa][hInquilinos] ++;
		format(string, sizeof(string), "Has alquilado una casa por %d$. A partir de ahora pagarás ese precio cada payday.", CasaInfo[casa][hPAlquiler]);
		SendClientMessage(playerid, Verde, string);
		SendClientMessage(playerid, Verde, "Utiliza '/ayudacasa' para ver los comandos de tu casa.");
		GuardarCasa(casa);
	}
    else if(CasaInfo[casa][hComprada] == -1) //Hotel
	{
	    if(JugadorInfo[playerid][pCasaAlq] > 0){SendClientMessage(playerid,Rojo,"Ya estás alquilando una casa."); return 1;}
		if(JugadorInfo[playerid][pCasa] > 0){SendClientMessage(playerid,Rojo,"No puedes alquilar una habitación si tienes comprada otra."); return 1;} //Ya tiene casa
		if(CasaInfo[casa][hInquilinos] >= 1){SendClientMessage(playerid,Rojo,"Esta habitación no puede acoger a más personas."); return 1;} //Ya tiene casa
		if(GetPlayerMoney(playerid) < CasaInfo[casa][hPAlquiler]){SendClientMessage(playerid,Rojo,"No tienes suficiente dinero."); return 1;}
		GivePlayerMoneyAC(playerid, -CasaInfo[casa][hPAlquiler]);
		JugadorInfo[playerid][pCasaAlq] = casa;
		CasaInfo[casa][hInquilinos] = 1;
		format(string, sizeof(string), "Has alquilado una casa por %d$. A partir de ahora pagarás ese precio cada payday.", CasaInfo[casa][hPAlquiler]);
		SendClientMessage(playerid, Verde, string);
		SendClientMessage(playerid, Verde, "Utiliza '/ayudacasa' para ver los comandos de tu casa.");
		GuardarCasa(casa);
	}
	else SendClientMessage(playerid,Rojo,"Esta casa no está en alquiler.");
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/desalquilar", true) == 0) //Desalquilar una casa
{
    if(JugadorInfo[playerid][pCasaAlq] == 0){SendClientMessage(playerid,Rojo,"No estás alquilando ninguna casa."); return 1;}
    new casa = JugadorInfo[playerid][pCasaAlq];
    if(CasaInfo[casa][hComprada] == -1)
    {
        JugadorInfo[playerid][pCasaAlq] = 0;
	    CasaInfo[casa][hInquilinos] = 0;
	    CasaInfo[casa][hCerrada] = 1;
    }
    else
    {
	    JugadorInfo[playerid][pCasaAlq] = 0;
	    CasaInfo[casa][hInquilinos] --;
    }
    SendClientMessage(playerid, Verde, "Ya no estás alquilando ninguna casa.");
    GuardarCasa(casa);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/armario", true) == 0 || strcmp(cmd, "/arm", true) == 0) //Abrir maletero del vehículo
{
    if(!GetPlayerDentroCasa(playerid)){return 1;}
 	new casa = GetPlayerDentroCasa(playerid);
 	if(CasaInfo[casa][hComprada] >= 0 && JugadorInfo[playerid][pCasa] != casa){SendClientMessage(playerid, Rojo, "¡No eres propietario de la casa!"); return 1;}
 	if(CasaInfo[casa][hComprada] == -1){SendClientMessage(playerid, Rojo, "¡No eres propietario de la vivienda!"); return 1;}
    new opcion[128];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Rojo, "USO: (/arm)ario <ver - sacar - guardar>");
		return 1;
	}
	if(strcmp(opcion,"ver",true) == 0) { MostrarArmario(playerid, casa); }
	else if(strcmp(opcion,"sacar",true) == 0)
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Gris, "USO: (/arm)ario sacar [hueco]");
			return 1;
		}
		new hueco = strval(tmp);
		if(hueco < 0 || hueco > 9){return 1;}
		SacarArmario(playerid, casa, hueco);
  		return 1;
	}
	else if(strcmp(opcion,"guardar",true) == 0)
	{
        if(JugadorInfo[playerid][pManoDer] == 174 || JugadorInfo[playerid][pManoDer] == 175) { SendClientMessage(playerid,COLOR_ROJO, "No puedes guardar un arma reglamentaria en un armario."); return 1; }
		GuardarArmario(playerid, casa, 1);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/almacen", true) == 0 || strcmp(cmd, "/alm", true) == 0) //
{
    if(!GetPlayerDentroNego(playerid)){SendClientMessage(playerid, Rojo, "No estás en un local."); return 1;}
 	new nego = GetPlayerDentroNego(playerid);
 	if(NegocioInfo[nego][nComprado] == 2){SendClientMessage(playerid,Rojo,"¡Este local está clausurado!"); return 1;} //Negocio claurado
 	if(NegocioInfo[nego][nComprado] >= 0 && JugadorInfo[playerid][pNegocio] != nego){SendClientMessage(playerid, Rojo, "No eres el propietario de este local."); return 1;}
    new opcion[128];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Rojo, "USO: (/alm)acen <ver - sacar - guardar>");
		return 1;
	}
	if(strcmp(opcion,"ver",true) == 0) { MostrarAlmacen(playerid, nego); }
	else if(strcmp(opcion,"sacar",true) == 0)
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, Gris, "USO: (/alm)acen sacar [hueco]");
			return 1;
		}
		new hueco = strval(tmp);
		if(hueco < 0 || hueco > NegocioInfo[nego][nMaxAlmacen]){return 1;}
		SacarAlmacen(playerid, nego, hueco);
  		return 1;
	}
	else if(strcmp(opcion,"guardar",true) == 0)
	{
		if(JugadorInfo[playerid][pManoDer] == 174 || JugadorInfo[playerid][pManoDer] == 175) { SendClientMessage(playerid,COLOR_ROJO, "No puedes guardar un arma reglamentaria en un almacén."); return 1; }
		GuardarAlmacen(playerid, nego, 1);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/guardardinero", true) == 0) //Guardar dinero en una casa o local
{
    if(!GetPlayerDentroCasa(playerid) && !GetPlayerDentroNego(playerid)){SendClientMessage(playerid, Rojo, "No estás en una casa o un local."); return 1;}
    if(GetPlayerDentroCasa(playerid))
    {
	 	new casa = GetPlayerDentroCasa(playerid);
	 	if(CasaInfo[casa][hComprada] >= 0 && JugadorInfo[playerid][pCasa] != casa){SendClientMessage(playerid, Rojo, "No eres el propietario de esta casa."); return 1;}
	 	if(CasaInfo[casa][hComprada] == -1){SendClientMessage(playerid, Rojo, "Los hoteles y moteles no tienen armarios."); return 1;}
	 	tmp = strtok(cmdtext, idx);
	   	if(!strlen(tmp))
	    {
		    SendClientMessage(playerid, Gris, "USO: /guardardinero [cantidad]");
		    format(string, sizeof(string), "Dinero guardado: %d$", CasaInfo[casa][hDineroGuardado]);
		    SendClientMessage(playerid, Naranja, string);
		    return 1;
		}
	    new dinero = strval(tmp);
	    if(dinero <= 0){SendClientMessage(playerid, Rojo, "La cantidad no puede ser nula o negativa."); return 1;}
	    if(dinero > GetPlayerMoney(playerid)){SendClientMessage(playerid, Rojo, "No tienes tanto dinero."); return 1;}
	    CasaInfo[casa][hDineroGuardado] += dinero;
	    GivePlayerMoneyAC(playerid, -dinero);
	    format(string, sizeof(string), "Has guardado %d$ en tu casa.", dinero);
		SendClientMessage(playerid, Verde, string);
		GuardarCasa(casa);
	}
	else if(GetPlayerDentroNego(playerid))
    {
        new nego = GetPlayerDentroNego(playerid);
        if(NegocioInfo[nego][nComprado] == 2){SendClientMessage(playerid,Rojo,"¡Este local está clausurado!"); return 1;} //Negocio claurado
	 	if(NegocioInfo[nego][nComprado] >= 0 && JugadorInfo[playerid][pNegocio] != nego){SendClientMessage(playerid, Rojo, "No eres el propietario de este local."); return 1;}
	 	tmp = strtok(cmdtext, idx);
	   	if(!strlen(tmp))
	    {
		    SendClientMessage(playerid, Gris, "USO: /guardardinero [Cantidad]");
		    format(string, sizeof(string), "Dinero guardado: %d$", NegocioInfo[nego][nDineroGuardado]);
		    SendClientMessage(playerid, Naranja, string);
		    return 1;
		}
	    new dinero = strval(tmp);
	    if(dinero <= 0){SendClientMessage(playerid, Rojo, "La cantidad no puede ser nula o negativa."); return 1;}
	    if(dinero > GetPlayerMoney(playerid)){SendClientMessage(playerid, Rojo, "No tienes tanto dinero."); return 1;}
	    NegocioInfo[nego][nDineroGuardado] += dinero;
	    GivePlayerMoneyAC(playerid, -dinero);
	    format(string, sizeof(string), "Has guardado %d$ en tu local.", dinero);
		SendClientMessage(playerid, Verde, string);
		GuardarNegocio(nego);
    }
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/sacardinero", true) == 0) //Sacar dinero en una casa o local
{
    if(!GetPlayerDentroCasa(playerid) && !GetPlayerDentroNego(playerid)){SendClientMessage(playerid, Rojo, "No estás en una casa o un local."); return 1;}
    if(GetPlayerDentroCasa(playerid))
    {
	 	new casa = GetPlayerDentroCasa(playerid);
	 	if(CasaInfo[casa][hComprada] >= 0 && JugadorInfo[playerid][pCasa] != casa){SendClientMessage(playerid, Rojo, "No eres el propietario de esta casa."); return 1;}
	 	if(CasaInfo[casa][hComprada] == -1){SendClientMessage(playerid, Rojo, "Los hoteles y moteles no tienen armarios."); return 1;}
	 	tmp = strtok(cmdtext, idx);
	   	if(!strlen(tmp))
	    {
		    SendClientMessage(playerid, Gris, "USO: /sacardinero [cantidad]");
		    format(string, sizeof(string), "Dinero guardado: %d$", CasaInfo[casa][hDineroGuardado]);
		    SendClientMessage(playerid, Naranja, string);
		    return 1;
		}
	    new dinero = strval(tmp);
	    if(dinero <= 0){SendClientMessage(playerid, Rojo, "La cantidad no puede ser nula o negativa."); return 1;}
	    if(dinero > CasaInfo[casa][hDineroGuardado]){SendClientMessage(playerid, Rojo, "No hay tanto dinero guardado."); return 1;}
	    CasaInfo[casa][hDineroGuardado] -= dinero;
	    GivePlayerMoneyAC(playerid, dinero);
	    format(string, sizeof(string), "Has sacado %d$ de tu casa.", dinero);
		SendClientMessage(playerid, Verde, string);
		GuardarCasa(casa);
	}
	if(GetPlayerDentroNego(playerid))
    {
	 	new nego = GetPlayerDentroNego(playerid);
	 	if(NegocioInfo[nego][nComprado] == 2){SendClientMessage(playerid,Rojo,"¡Este local está clausurado!"); return 1;} //Negocio claurado
	 	if(NegocioInfo[nego][nComprado] >= 0 && JugadorInfo[playerid][pNegocio] != nego){SendClientMessage(playerid, Rojo, "No eres el propietario de este local."); return 1;}
	 	tmp = strtok(cmdtext, idx);
	   	if(!strlen(tmp))
	    {
		    SendClientMessage(playerid, Gris, "USO: /sacardinero [cantidad]");
		    format(string, sizeof(string), "Dinero guardado: %d$", NegocioInfo[nego][nDineroGuardado]);
		    SendClientMessage(playerid, Naranja, string);
		    return 1;
		}
	    new dinero = strval(tmp);
	    if(dinero <= 0){SendClientMessage(playerid, Rojo, "La cantidad no puede ser nula o negativa."); return 1;}
	    if(dinero > NegocioInfo[nego][nDineroGuardado]){SendClientMessage(playerid, Rojo, "No hay tanto dinero guardado."); return 1;}
	    NegocioInfo[nego][nDineroGuardado] -= dinero;
	    GivePlayerMoneyAC(playerid, dinero);
	    format(string, sizeof(string), "Has sacado %d$ de tu local.", dinero);
		SendClientMessage(playerid, Verde, string);
		GuardarNegocio(nego);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/contratar", true) == 0) //Contratar personal para el negocio
{
	if(JugadorInfo[playerid][pNegocio] == 0){SendClientMessage(playerid, Rojo, "No posees un negocio."); return 1;}
	new nego = JugadorInfo[playerid][pNegocio];
	if(NegocioInfo[nego][nTipo] == 6) //Es un taller
	{
		tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /contratar [IdJugador/ParteDelNombre]");
	        return 1;
	    }
	    playerid2 = ReturnUser(tmp);
	    if(playerid2 == playerid){SendClientMessage(playerid, Rojo, "No te puedes contratar a tí mismo."); return 1;}
	    if((playerid2 == INVALID_PLAYER_ID) || !IsPlayerConnected(playerid2))
		{
			SendClientMessage(playerid, Rojo, "Jugador no encontrado");
			return 1;
		}
		if(!GetPlayersProx(5.0, playerid, playerid)){SendClientMessage(playerid, Rojo, "Demasiado lejos."); return 1;}
		if(JugadorInfo[playerid2][pTrabajo] != 0){SendClientMessage(playerid, Rojo, "El jugador ya tiene un trabajo"); return 1;}
		if(JugadorInfo[playerid2][pTaller] == nego){SendClientMessage(playerid, Rojo, "El jugador ya trabaja para tí"); return 1;}
		if(JugadorInfo[playerid2][pTaller] != 0){SendClientMessage(playerid, Rojo, "El jugador trabaja en otro taller"); return 1;}
		Contratador[playerid2] = playerid;
		Contrato[playerid2] = 6;
		format(string, sizeof(string), "Has ofrecido a %s un contrato para trabajar en tu taller. Espera una respuesta.", NombreJugador(playerid2));
	    SendClientMessage(playerid, Amarillo, string);
	    format(string, sizeof(string), "%s te ha ofrecido un contrato para trabajar en su taller. Usa '/aceptar contrato' para aceptarlo.", NombreJugador(playerid));
	    SendClientMessage(playerid2, Amarillo, string);
	}
	else{SendClientMessage(playerid, Rojo, "No posees un negocio que permita contratar personal."); return 1;}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/despedir", true) == 0) //Despedir personal del negocio
{
    if(JugadorInfo[playerid][pNegocio] == 0){SendClientMessage(playerid, Rojo, "No posees un negocio."); return 1;}
	new nego = JugadorInfo[playerid][pNegocio];
	if(NegocioInfo[nego][nTipo] == 6) //Es un taller
	{
		tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /despedir [IdJugador/ParteDelNombre]");
	        return 1;
	    }
	    playerid2 = ReturnUser(tmp);
	    if(playerid2 == playerid){SendClientMessage(playerid, Rojo, "No te puedes despedir a tí mismo."); return 1;}
	    if((playerid2 == INVALID_PLAYER_ID) || !IsPlayerConnected(playerid2))
		{
			SendClientMessage(playerid, Rojo, "Jugador no encontrado");
			return 1;
		}
		if(JugadorInfo[playerid2][pTaller] != nego){SendClientMessage(playerid, Rojo, "Esa persona no trabaja en tu taller."); return 1;}
		format(string, sizeof(string), "Has despedido a %s de tu taller.", NombreJugador(playerid2));
	    SendClientMessage(playerid, Amarillo, string);
	    format(string, sizeof(string), "%s te ha despedido de su taller. Ya no puedes trabajar de mecánico en él.", NombreJugador(playerid));
	    SendClientMessage(playerid2, Amarillo, string);
	    JugadorInfo[playerid2][pTaller] = 0;
	}
	else{SendClientMessage(playerid, Rojo, "No posees un negocio que permita contratar personal, por lo tanto tampoco permite despedir."); return 1;}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/despedirtodos", true) == 0) //Despedir todo el personal de un negocio
{
    if(JugadorInfo[playerid][pNegocio] == 0){SendClientMessage(playerid, Rojo, "No posees un negocio."); return 1;}
	new nego = JugadorInfo[playerid][pNegocio];
	if(NegocioInfo[nego][nTipo] == 6) //Es un taller
	{
	    format(string, sizeof(string), "%s te ha despedido de su taller. Ya no puedes trabajar de mecánico en él.", NombreJugador(playerid));
	    for(new i=0;i<MAX_PLAYERS;i++)
	    {
	        if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID && JugadorInfo[i][pTaller] == nego && JugadorInfo[i][pNegocio] != nego)
	        {
			    SendClientMessage(playerid2, Amarillo, string);
			    JugadorInfo[playerid2][pTaller] = 0;
		    }
	    }
        format(string, sizeof(string), "UPDATE usuarios SET Taller = 0 WHERE (Taller = %d AND Negocio <> %d)", nego, nego);
    	mysql_query(1, string);
	    SendClientMessage(playerid, Amarillo, "Ahora nadie trabaja en tu negocio.");
	    
	}
	else{SendClientMessage(playerid, Rojo, "No posees un negocio que permita contratar personal, por lo tanto tampoco permite despedir."); return 1;}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/plantilla", true) == 0) //Ver los que trabajan en un negocio
{
    if(JugadorInfo[playerid][pNegocio] == 0){SendClientMessage(playerid, Rojo, "No posees un negocio."); return 1;}
	new nego = JugadorInfo[playerid][pNegocio];
	if(NegocioInfo[nego][nTipo] == 6) //Es un taller
	{
		SendClientMessage(playerid2, AmarilloClaro, "Listado del personal conectado:");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID && JugadorInfo[i][pTaller] == nego)
			{
				format(string, sizeof(string), "[%d] %s.", i, JugadorInfo[i][pNombre]);
				SendClientMessage(playerid, AmarilloClaro, string);
			}
		}
	}
	else{SendClientMessage(playerid, Rojo, "No posees un negocio que permita contratar personal."); return 1;}
	return 1;
}

//----------COMANDOS TRABAJO----------//

if(strcmp(cmd, "/trabajo", true) == 0) //Conseguir un trabajo
{
	if(JugadorInfo[playerid][pFaccion] >= 1 && JugadorInfo[playerid][pFaccion] <= 4){SendClientMessage(playerid, Rojo, "Ya tienes un empleo (facción es tu trabajo actual.)"); return 1;}
	if(JugadorInfo[playerid][pTrabajo] != 0){SendClientMessage(playerid, Rojo, "Ya tienes un empleo."); return 1;}
    new job = NOEXISTE;
	for(new x=0; x < sizeof(Jobs); x++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, Jobs[x][Jx], Jobs[x][Jy], Jobs[x][Jz])){job = x; break;}
	}
	if(job == NOEXISTE){OfertaTrabajo[playerid] = NOEXISTE; SendClientMessage(playerid, Rojo, "No estás en ninguna oferta de trabajo."); return 1;}
	if(job == 9){job = 6;} //Mecánico en taller de unity
	
	if(JugadorInfo[playerid][pPuntosRol] >= Jobs[job][JobPuntos])
	{
		if(OfertaTrabajo[playerid] == NOEXISTE)
		{
			OfertaTrabajo[playerid] = job;

			format(string, sizeof(string), "|_________ Oferta de %s _________|", Jobs[job][JobNombre], Jobs[job][JobPay]);
			SendClientMessage(playerid, -1, string);
			format(string, sizeof(string), "Si aceptas este empleo deberás trabajar un mínimo de 6 horas para dejarlo. Tendrás la oportunidad de ganar hasta %d$", Jobs[job][JobPay]);
			SendClientMessage(playerid, COLOR_YELLOW, string);

			SendClientMessage(playerid, COLOR_YELLOW, "Para unirte escribe el comando '/trabajo aceptar' en la consola.");
		}
		else
		{
		    JugadorInfo[playerid][pTrabajo] = OfertaTrabajo[playerid]+1;
		    OfertaTrabajo[playerid] = NOEXISTE;
		    JugadorInfo[playerid][pContrato] = 6;
		    format(string, sizeof(string), "Firmaste un contrato para ser %s. Puedes ver los comandos disponibles en '/ayudatrabajo'", Jobs[job][JobNombre]);
			SendClientMessage(playerid, Verde, string);
		}
	}
	else
	{
	    format(string, 128, "Necesitas '%d' punto(s) de rol para pertenecer a este trabajo.", Jobs[job][JobPuntos]);
	    SendClientMessage(playerid, COLOR_ROJO, string);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/trabajar", true) == 0) //Comienza a trabajar
{
	if(Trabajando[playerid] == 0)
	{
		if(JugadorInfo[playerid][pTrabajo] == 0){SendClientMessage(playerid, Rojo, "No tienes empleo."); return 1;}
		new empleo = JugadorInfo[playerid][pTrabajo];
		new job = empleo-1;
		if(empleo == 1) //Pizzero
		{
		    if(JugadorInfo[playerid][pEsperaTrabajar] > 0)
		    {
		        format(string, sizeof(string), "Estás cansado de trabajar. Vuelve en %d minutos.", JugadorInfo[playerid][pEsperaTrabajar]);
		        SendClientMessage(playerid, Rojo, string);
				return 1;
		    }
		    if(!IsPlayerInRangeOfPoint(playerid, 10.0, Jobs[job][Jx], Jobs[job][Jy], Jobs[job][Jz])){SendClientMessage(playerid, COLOR_ROJO, "No estás en tu puesto de trabajo."); return 1;}
			Trabajando[playerid] = 1;
			SendClientMessage(playerid, COLOR_GREEN, "Sube a una moto de reparto para comenzar a trabajar. Para dejar de trabajar utiliza '/trabajar'");
			return 1;
		}
		if(empleo == 2) //Barrendero
		{
		    if(JugadorInfo[playerid][pEsperaTrabajar] > 0)
		    {
		        format(string, sizeof(string), "Estás cansado de trabajar. Vuelve en %d minutos.", JugadorInfo[playerid][pEsperaTrabajar]);
		        SendClientMessage(playerid, Rojo, string);
				return 1;
		    }
		    if(!IsPlayerInRangeOfPoint(playerid, 10.0, Jobs[job][Jx], Jobs[job][Jy], Jobs[job][Jz])){SendClientMessage(playerid, COLOR_ROJO, "No estás en tu puesto de trabajo."); return 1;}
			Trabajando[playerid] = 1;
			SendClientMessage(playerid, COLOR_GREEN, "Sube a un limpiacalles para comenzar a trabajar. Para dejar de trabajar utiliza '/trabajar'");
			return 1;
		}
		if(empleo == 4) //Cosechador
		{
		    if(JugadorInfo[playerid][pEsperaTrabajar] > 0)
		    {
		        format(string, sizeof(string), "Estás cansado de trabajar. Vuelve en %d minutos.", JugadorInfo[playerid][pEsperaTrabajar]);
		        SendClientMessage(playerid, Rojo, string);
				return 1;
		    }
		    if(!IsPlayerInRangeOfPoint(playerid, 10.0, Jobs[job][Jx], Jobs[job][Jy], Jobs[job][Jz])){SendClientMessage(playerid, COLOR_ROJO, "No estás en tu puesto de trabajo."); return 1;}
			Trabajando[playerid] = 1;
			SendClientMessage(playerid, COLOR_GREEN, "Sube a una cosechadora para comenzar a trabajar. Para dejar de trabajar utiliza '/trabajar'");
			return 1;
		}
		if(empleo == 5) //Fumigador aéreo
		{
		    if(JugadorInfo[playerid][pEsperaTrabajar] > 0)
		    {
		        format(string, sizeof(string), "Estás cansado de trabajar. Vuelve en %d minutos.", JugadorInfo[playerid][pEsperaTrabajar]);
		        SendClientMessage(playerid, Rojo, string);
				return 1;
		    }
		    if(!IsPlayerInRangeOfPoint(playerid, 10.0, Jobs[job][Jx], Jobs[job][Jy], Jobs[job][Jz])){SendClientMessage(playerid, COLOR_ROJO, "No estás en tu puesto de trabajo."); return 1;}
		    Trabajando[playerid] = 1;
			SendClientMessage(playerid, COLOR_GREEN, "Sube al avión para comenzar a trabajar. Para dejar de trabajar utiliza '/trabajar'");
			return 1;
		}
		if(empleo == 6) //Taxista
		{
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Gris, "USO: /trabajar [5-20]");
				return 1;
			}
			new n = strval(tmp);
			if(n < 5 || n > 20){SendClientMessage(playerid, Rojo, "La tarifa debe estar entre 5$ y 20$."); return 1;}
			Trabajando[playerid] = 1;
			Tarifa[playerid] = n;
			format(string, sizeof(string), "Taxista %s está de servicio, tarifa: %d$, número 777.", NombreJugador(playerid), n);
			SendAnuncio(COLOR_VERDE, string);
			SendClientMessage(playerid, COLOR_GREEN, "Ahora estás de servicio, utiliza '/ayudatrabajo' para mirar los comandos de tu trabajo.");
			return 1;
		}
		if(empleo == 7) //Mecánico
		{
		    Trabajando[playerid] = 1;
			SendClientMessage(playerid, COLOR_GREEN, "Ahora estás de servicio, utiliza '/ayudatrabajo' para mirar los comandos de tu trabajo.");
			SendClientMessage(playerid, COLOR_GREEN, "Utiliza '/trabajar' de nuevo para dejar de trabajar.");
			return 1;
		}
		if(empleo == 9) //Pescador
		{
		    if(JugadorInfo[playerid][pEsperaTrabajar] > 0)
		    {
		        format(string, sizeof(string), "Estás cansado de trabajar. Vuelve en %d minutos.", JugadorInfo[playerid][pEsperaTrabajar]);
		        SendClientMessage(playerid, Rojo, string);
				return 1;
		    }
		    Trabajando[playerid] = 1;
			SendClientMessage(playerid, COLOR_GREEN, "Sube a un barco de pesca para comenzar a pescar. Para dejar de trabajar utiliza '/trabajar'");
			if(JugadorInfo[playerid][pLicNavegacion] == 0)
			{
			    AvisarIlegal(playerid);
			}
			return 1;
		}
	}
	else
	{
	    new empleo = JugadorInfo[playerid][pTrabajo];
	    if(empleo == 1) //Pizzero
		{
		    new cocheid = GetPlayerVehicleID(playerid);
			DisablePlayerCheckpoint(playerid);
			Trabajando[playerid] = 0;
			PizzaRepartida[playerid] = 0;
			SendClientMessage(playerid, Verde, "Has dejado de trabajar. A tu jefe no le gustan los holgazanes, así que no cobras ganancias.");
			if(IsAPizzaBike(GetPlayerVehicleID(playerid)))RemovePlayerFromVehicle(playerid);
			SetVehicleToRespawn(cocheid);
			return 1;
		}
		if(empleo == 2) //Barrendero
		{
		    new cocheid = GetPlayerVehicleID(playerid);
			DisablePlayerCheckpoint(playerid);
			Trabajando[playerid] = 0;
			CalleBarrida[playerid] = 0;
			SendClientMessage(playerid, Verde, "Has dejado de trabajar. A tu jefe no le gustan los holgazanes, así que no cobras ganancias.");
			if(IsASweeper(GetPlayerVehicleID(playerid)))RemovePlayerFromVehicle(playerid);
			SetVehicleToRespawn(cocheid);
			return 1;
		}
		if(empleo == 4) //Cosechador
		{
		    new cocheid = GetPlayerVehicleID(playerid);
		    DisablePlayerCheckpoint(playerid);
			Trabajando[playerid] = 0;
			Cosechado[playerid] = 0;
			SendClientMessage(playerid, Verde, "Has dejado de trabajar. A tu jefe no le gustan los holgazanes, así que no cobras ganancias.");
			if(IsACombine(GetPlayerVehicleID(playerid)))RemovePlayerFromVehicle(playerid);
			SetVehicleToRespawn(cocheid);
			return 1;
		}
		if(empleo == 5) //Fumigador aéreo
		{
		    new cocheid = GetPlayerVehicleID(playerid);
		    DisablePlayerRaceCheckpoint(playerid);
			DisablePlayerCheckpoint(playerid);
			Trabajando[playerid] = 0;
			Fumigado[playerid] = 0;
			SendClientMessage(playerid, Verde, "Has dejado de trabajar. A tu jefe no le gustan los holgazanes, así que no cobras ganancias.");
			if(IsACropduster(GetPlayerVehicleID(playerid)))RemovePlayerFromVehicle(playerid);
			SetVehicleToRespawn(cocheid);
			return 1;
		}
		if(empleo == 6) //Taxista
		{
			Trabajando[playerid] = 0;
			SendClientMessage(playerid, Verde, "Ya no estás de servicio como taxista.");
			return 1;
		}
		if(empleo == 7) //Mecánico
		{
		    SetPlayerSkin(playerid, JugadorInfo[playerid][pSkin]);
			Trabajando[playerid] = 0;
			SendClientMessage(playerid, Verde, "Ya no estás de servicio como mecánico.");
			return 1;
		}
		if(empleo == 9) //Pescador
		{
		    new cocheid = GetPlayerVehicleID(playerid);
		    DisablePlayerCheckpoint(playerid);
			Trabajando[playerid] = 0;
			PescaRecogida[playerid] = 0;
			SendClientMessage(playerid, Verde, "Has dejado de trabajar. A tu jefe no le gustan los holgazanes, así que no cobras ganancias.");
			if(IsABarcoPesca(GetPlayerVehicleID(playerid)))RemovePlayerFromVehicle(playerid);
			SetVehicleToRespawn(cocheid);
			return 1;
		}
	}
	return 1;
}


if(strcmp(cmd, "/taxi", true) == 0) //Ofrecer transporte a alguien
{
	if(JugadorInfo[playerid][pTrabajo] != 6){SendClientMessage(playerid, Rojo, "No eres taxista."); return 1;}
	if(Trabajando[playerid] == 0){SendClientMessage(playerid, Rojo, "No estás de servicio como taxista."); return 1;}
	if(!IsATaxi(GetPlayerVehicleID(playerid))){SendClientMessage(playerid, Rojo, "No estás en un taxi."); return 1;}
	if(TaxiPasajero[playerid] != NOEXISTE){SendClientMessage(playerid, Rojo, "Ya hay alguien pagándote por ir en taxi."); return 1;}
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /taxi [IdJugador/ParteDelNombre]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(playerid2 == playerid){SendClientMessage(playerid, Rojo, "No te puedes ofrecer transporte a tí mismo."); return 1;}
    if((playerid2 == INVALID_PLAYER_ID) || !IsPlayerConnected(playerid2))
	{
		SendClientMessage(playerid, Rojo, "Jugador no encontrado");
		return 1;
	}
	if(GetPlayerVehicleID(playerid) != GetPlayerVehicleID(playerid2)){SendClientMessage(playerid, Rojo, "Esa persona no está en tu taxi."); return 1;}
	TaxiPasajero[playerid] = playerid2;
	TaxiConductor[playerid2] = playerid;
	format(string, sizeof(string), "Estás llevando a %s en tu taxi por %d$ cada medio minuto.", NombreJugador(playerid2), Tarifa[playerid]);
	SendClientMessage(playerid, Amarillo, string);
	SendClientMessage(playerid, Amarillo, "Ve al destino que te ordenó.");
	format(string, sizeof(string), "%s te está llevando en su taxi por %d$ cada medio minuto.", NombreJugador(playerid), Tarifa[playerid]);
	SendClientMessage(playerid2, Amarillo, string);
	SendClientMessage(playerid2, Amarillo, "Baja del vehículo cuando llegues a tu destino.");
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/llevartaxi", true) == 0) //Acepta el pedido de taxi de alguien
{
    if(JugadorInfo[playerid][pTrabajo] != 6){SendClientMessage(playerid, Rojo, "No eres taxista."); return 1;}
	if(Trabajando[playerid] == 0){SendClientMessage(playerid, Rojo, "No estás trabajando."); return 1;}
	if(!IsATaxi(GetPlayerVehicleID(playerid))){SendClientMessage(playerid, Rojo, "No estás en un taxi."); return 1;}
	new pidetaxi = NOEXISTE;
	for(new i=0; i<MAX_PLAYERS; i++)
	{
	    if(SolicitaTaxi[i] > 0){pidetaxi = i; break;}
	}
	if(pidetaxi == NOEXISTE){SendClientMessage(playerid, Rojo, "Nadie solicita un taxi actualmente."); return 1;}
	format(string, sizeof(string), "Has aceptado la solicitud de taxi de %s. Ve a su posición.", NombreJugador(pidetaxi));
	SendClientMessage(playerid, Amarillo, string);
	new Float:mX, Float:mY, Float:mZ;
	GetPlayerPos(pidetaxi, mX, mY, mZ);
	SetPlayerCheckpoint(playerid, mX, mY, mZ, 3.0);
	format(string, sizeof(string), "[CENTRAL DE TAXIS]: El taxista %s ha aceptado tu solicitud. No se mueva de su posición.", NombreJugador(playerid));
	SendClientMessage(pidetaxi, Amarillo, string);
	SolicitaTaxi[pidetaxi] = 0;
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/reparar", true) == 0) //Ofrecer reparación a alguien
{
	if(JugadorInfo[playerid][pTrabajo] != 7){SendClientMessage(playerid, Rojo, "No eres mecánico."); return 1;}
	if(Trabajando[playerid] == 0){SendClientMessage(playerid, Rojo, "No estás de servicio como mecánico."); return 1;}
	if(!GetPlayerTaller(playerid)){SendClientMessage(playerid, Rojo, "No estás en un taller."); return 1;}
	if(GetPlayerTaller(playerid) != 1 && JugadorInfo[playerid][pTaller] != GetPlayerTaller(playerid)){SendClientMessage(playerid, Rojo, "No trabajas en este taller."); return 1;}
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /reparar [IdJugador/ParteDelNombre] [Motor/Carroceria/Ruedas] [Precio]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(playerid2 == playerid){SendClientMessage(playerid, Rojo, "No te puedes ofrecer reparación a tí mismo."); return 1;}
    if((playerid2 == INVALID_PLAYER_ID) || !IsPlayerConnected(playerid2)){SendClientMessage(playerid, Rojo, "Jugador no encontrado");return 1;}
	if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "Demasiado lejos."); return 1;}
	if(!IsPlayerInAnyVehicle(playerid2)){SendClientMessage(playerid, Rojo, "Esa persona no está en ningún vehículo."); return 1;}
	if(SiendoReparado[playerid2] != 0){SendClientMessage(playerid, Rojo, "Ya están reparando el vehículo de esta persona, espera a que terminen."); return 1;}
	new coche = GetPlayerVehicleID(playerid2);
	new opcion[128];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Gris, "USO: /reparar [IdJugador/ParteDelNombre] [Motor/Carroceria/Ruedas] [Precio]");
		return 1;
	}
	if(strcmp(opcion,"motor",true) == 0)
	{
	    if(VehCapo[coche] != 1){SendClientMessage(playerid, Rojo, "El vehículo debe tener abierto el capó."); return 1;}
	    new Float:cvida;
	    GetVehicleHealth(coche, cvida);
		if(cvida == 1000){SendClientMessage(playerid, Rojo, "El motor de este vehículo está en perfecto estado."); return 1;}
		tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /reparar [IdJugador/ParteDelNombre] [Motor/Carroceria/Ruedas] [Precio]");
	        return 1;
	    }
	    new precio = strval(tmp);
	    if(precio < 30 || precio > 200){SendClientMessage(playerid, Rojo, "El precio debe estar entre 30$ y 200$."); return 1;}
	    format(string, sizeof(string), "Has ofrecido a %s repararle el motor por %d$. Espera una respuesta.", NombreJugador(playerid2), precio);
	    SendClientMessage(playerid, Amarillo, string);
	    format(string, sizeof(string), "%s te ha ofrecido repararte el motor por %d$. Utiliza '/Aceptar Reparacion' para aceptarlo.", NombreJugador(playerid), precio);
	    SendClientMessage(playerid2, Amarillo, string);
		ReparacionTipo[playerid2] = 1;
		ReparacionMeca[playerid2] = playerid;
		ReparacionPrecio[playerid2] = precio;
	    return 1;
	}
	if(strcmp(opcion,"carroceria",true) == 0)
	{
	    new panels,doors,lights,tires;
		GetVehicleDamageStatus(coche,panels,doors,lights,tires);
		if(panels == 0 && doors == 0 && lights == 0){SendClientMessage(playerid, Rojo, "La carrocería de este vehículo está en perfecto estado."); return 1;}
		tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /reparar [IdJugador/ParteDelNombre] [Motor/Carroceria/Ruedas] [Precio]");
	        return 1;
	    }
	    new precio = strval(tmp);
	    if(precio < 30 || precio > 200){SendClientMessage(playerid, Rojo, "El precio debe estar entre 30$ y 200$."); return 1;}
	    format(string, sizeof(string), "Has ofrecido a %s repararle la carrocería por %d$. Espera una respuesta.", NombreJugador(playerid2), precio);
	    SendClientMessage(playerid, Amarillo, string);
	    format(string, sizeof(string), "%s te ha ofrecido repararte la carrocería por %d$. Utiliza '/Aceptar Reparacion' para aceptarlo.", NombreJugador(playerid), precio);
	    SendClientMessage(playerid2, Amarillo, string);
		ReparacionTipo[playerid2] = 2;
		ReparacionMeca[playerid2] = playerid;
		ReparacionPrecio[playerid2] = precio;
		return 1;
	}
	if(strcmp(opcion,"ruedas",true) == 0)
	{
	    new panels,doors,lights,tires;
		GetVehicleDamageStatus(coche,panels,doors,lights,tires);
		if(tires == 0){SendClientMessage(playerid, Rojo, "Las ruedas de este vehículo están en perfecto estado."); return 1;}
		tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /reparar [IdJugador/ParteDelNombre] [Motor/Carroceria/Ruedas] [Precio]");
	        return 1;
	    }
	    new precio = strval(tmp);
	    if(precio < 30 || precio > 200){SendClientMessage(playerid, Rojo, "El precio debe estar entre 30$ y 200$."); return 1;}
	    format(string, sizeof(string), "Has ofrecido a %s repararle las ruedas por %d$. Espera una respuesta.", NombreJugador(playerid2), precio);
	    SendClientMessage(playerid, Amarillo, string);
	    format(string, sizeof(string), "%s te ha ofrecido repararte las ruedas por %d$. Utiliza '/Aceptar Reparacion' para aceptarlo.", NombreJugador(playerid), precio);
	    SendClientMessage(playerid2, Amarillo, string);
		ReparacionTipo[playerid2] = 3;
		ReparacionMeca[playerid2] = playerid;
		ReparacionPrecio[playerid2] = precio;
		return 1;
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/repintar", true) == 0) //Ofrecer repintar coche a alguien
{
    if(JugadorInfo[playerid][pTrabajo] != 7){SendClientMessage(playerid, Rojo, "No eres mecánico."); return 1;}
	if(Trabajando[playerid] == 0){SendClientMessage(playerid, Rojo, "No estás de servicio como mecánico."); return 1;}
	if(JugadorInfo[playerid][pHabMec] < 30){SendClientMessage(playerid, Rojo, "Necesitas nivel 2 de mecánico para usar este comando."); return 1;}
	if(!GetPlayerTaller(playerid)){SendClientMessage(playerid, Rojo, "No estás en un taller."); return 1;}
	if(GetPlayerTaller(playerid) != 1 && JugadorInfo[playerid][pTaller] != GetPlayerTaller(playerid)){SendClientMessage(playerid, Rojo, "No trabajas en este taller."); return 1;}
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /repintar [IdJugador/ParteDelNombre] [Color1] [Color2] [Precio]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(playerid2 == playerid){SendClientMessage(playerid, Rojo, "No te puedes ofrecer un repintado a tí mismo."); return 1;}
    if((playerid2 == INVALID_PLAYER_ID) || !IsPlayerConnected(playerid2))
	{
		SendClientMessage(playerid, Rojo, "Jugador no encontrado");
		return 1;
	}
	if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "Demasiado lejos."); return 1;}
	if(!IsPlayerInAnyVehicle(playerid2)){SendClientMessage(playerid, Rojo, "Esa persona no está en ningún vehículo."); return 1;}
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /repintar [IdJugador/ParteDelNombre] [Color1] [Color2] [Precio]");
        return 1;
    }
    new color1 = strval(tmp);
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /repintar [IdJugador/ParteDelNombre] [Color1] [Color2] [Precio]");
        return 1;
    }
    new color2 = strval(tmp);
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /repintar [IdJugador/ParteDelNombre] [Color1] [Color2] [Precio]");
        return 1;
    }
    new precio = strval(tmp);
    if(precio < 200 || precio > 700){SendClientMessage(playerid, Rojo, "El precio debe estar entre 200$ y 700$."); return 1;}
    format(string, sizeof(string), "Has ofrecido a %s repintarle el vehículo (colores %d %d) por %d$. Espera una respuesta.", NombreJugador(playerid2), color1, color2, precio);
    SendClientMessage(playerid, Amarillo, string);
    format(string, sizeof(string), "%s te ha ofrecido repintarte el vehículo (colores %d %d) por %d$. Utiliza '/Aceptar Repintado'.", NombreJugador(playerid), color1, color2, precio);
    SendClientMessage(playerid2, Amarillo, string);
	RepintadoColor1[playerid2] = color1;
	RepintadoColor2[playerid2] = color2;
	RepintadoMeca[playerid2] = playerid;
	RepintadoPrecio[playerid2] = precio;
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/delincuente", true) == 0) //Invitar gente a una facción
{
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /delincuente [IdJugador/ParteDelNombre]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
    if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "Demasiado lejos."); return 1;}
    new Delincuente[128];
    if(JugadorInfo[playerid][pTrabajo] == 8)
    {
        format(Delincuente, 128, "%s tiene la habilidad para intentar robarte.", NombreJugadorProxy(playerid));
    }
    else
    {
        format(Delincuente, 128, "%s no tiene la habilidad para poder robarte.", NombreJugadorProxy(playerid));
    }
    SendClientMessage(playerid2, AmarilloClaro, Delincuente);
    return 1;
}

if(strcmp(cmd, "/secuestrar", true) == 0) //Invitar gente a una facción
{
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /secuestrar [IdJugador/ParteDelNombre]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
    if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "Demasiado lejos."); return 1;}
    new Delincuente[128];
    if(JugadorInfo[playerid][pTrabajo] == 8 && JugadorInfo[playerid][pHabLad] >= 50)
    {
        format(Delincuente, 128, "%s tiene la habilidad necesaria para intentar secuestrarte.", NombreJugadorProxy(playerid));
    }
    else
    {
        format(Delincuente, 128, "%s no posee la habilidad necesaria para un intento de secuestro.", NombreJugadorProxy(playerid));
    }
    SendClientMessage(playerid2, AmarilloClaro, Delincuente);
    return 1;
}


if(strcmp(cmd, "/forzar", true) == 0)
{
    if(JugadorInfo[playerid][pTrabajo] != 8){SendClientMessage(playerid, Rojo, "No eres ladrón."); return 1;}
    if(JugadorInfo[playerid][pManoDer] != 15 && JugadorInfo[playerid][pManoDer] != 15){SendClientMessage(playerid, Rojo, "Necesitas una palanca para forzar una puerta."); return 1;}
    if(JugadorInfo[playerid][pHabLad] < 30){SendClientMessage(playerid, Rojo, "Necesitas nivel 2 de ladrón para usar este comando."); return 1;}
    if(PuertaForzada[playerid] > 0)
	{
	    format(string, sizeof(string), "Espera %d minutos antes de intentar forzar otra puerta.", PuertaForzada[playerid]);
		SendClientMessage(playerid, Rojo, string);
		return 1;
	}
    if(!GetPlayerFueraPuertaCasa(playerid) && !GetPlayerFueraPuertaNego(playerid)){SendClientMessage(playerid, Rojo, "No estás en la puerta de una casa o local."); return 1;}
    if(GetPlayerFueraPuertaCasa(playerid))
    {
        new casa = GetPlayerFueraPuertaCasa(playerid);
        if(CasaInfo[casa][hCerrada] == 0){SendClientMessage(playerid, Rojo, "La puerta de esta casa ya está abierta."); return 1;}
        
    	SendClientMessage(playerid, Verde, "Colocas tu palanca en el borde del marco de la puerta y empiezas a jalar.");
		format(string, sizeof(string), "%s está intentando forzar la puerta de la casa con una palanca.", NombreJugadorProxy(playerid));
	    ProxDetector(20.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
        SetTimerEx("ForzarPuerta", 30000, false, "i, d", playerid, 1);
	    return 1;
    }
    else if(GetPlayerFueraPuertaNego(playerid))
    {
        new nego = GetPlayerFueraPuertaNego(playerid);
        if(NegocioInfo[nego][nCerrado] == 0){SendClientMessage(playerid, Rojo, "La puerta de este local ya está abierta."); return 1;}
		SendClientMessage(playerid, Verde, "Colocas tu palanca en el borde del marco de la puerta y empiezas a jalar.");
		format(string, sizeof(string), "%s está intentando forzar la puerta del negocio con una palanca.", NombreJugadorProxy(playerid));
	    ProxDetector(20.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
        SetTimerEx("ForzarPuerta", 30000, false, "i, d", playerid, 2);
	    return 1;
    }
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/robar", true) == 0) //Robar en casas o locales
{
    if(JugadorInfo[playerid][pTrabajo] != 8){SendClientMessage(playerid, Rojo, "No eres ladrón."); return 1;}
    if(!GetPlayerDentroCasa(playerid) && !GetPlayerDentroNego(playerid)){SendClientMessage(playerid, Rojo, "No estás en una casa o un local."); return 1;}
    if(Robando[playerid] > 0){SendClientMessage(playerid, Rojo, "Ya estás robando."); return 1;}
    if(JugadorInfo[playerid][pTiempoRobo] > 0)
    {
        format(string, sizeof(string), "Debes esperar %d minutos para usar este comando.", JugadorInfo[playerid][pTiempoRobo]);
        SendClientMessage(playerid, Rojo, string);
        return 1;
    }
    new policonectado;
    for(new x=0; x<MAX_PLAYERS; x++)
    {
        if(IsPlayerConnected(x) && x != INVALID_PLAYER_ID && JugadorInfo[x][pFaccion] == 1 && JugadorInfo[x][pServicioPD] > 0){policonectado = 1; break;}
    }
    if(policonectado == 0){SendClientMessage(playerid, Rojo, "No hay suficientes policías conectados para robar."); return 1;}
	if(GetPlayerDentroCasa(playerid)) //Es una casa
	{
	    new casa = GetPlayerDentroCasa(playerid);
	    if(JugadorInfo[playerid][pCasa] == casa){SendClientMessage(playerid, Rojo, "No puedes robar en tu propia casa."); return 1;}
	    if(IsPlayerInRangeOfPoint(playerid, 7.0, CasaInfo[casa][hSalidaX], CasaInfo[casa][hSalidaY], CasaInfo[casa][hSalidaZ])){SendClientMessage(playerid, Rojo, "Debes estar más alejado de la puerta para robar."); return 1;}
		format(string, sizeof(string), "%s está buscando objetos de valor en la casa.", NombreJugadorProxy(playerid));
	    ProxDetector(20.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	    Robando[playerid] = 1;
	    RoboTimer[playerid] = SetTimerEx("RobarF", 15000, false, "i, d", playerid, 2);
	    TogglePlayerControllable(playerid, 0);
	    ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.1,1,1,1,0,0,1);
	    
	    for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID)
			{
				if(JugadorInfo[i][pFaccion] == 1 && JugadorInfo[i][pServicioPD] > 0)
				{
					format(string, sizeof(string), "[AVISO]: La casa '%s' está siendo robada.", CasaInfo[casa][hBarrio]);
					SendClientMessage(i, Naranja, string);
				}
			}
		}
	    return 1;
	}
	if(GetPlayerDentroNego(playerid)) //Es un negocio
	{
	    new nego = GetPlayerDentroNego(playerid);
	    if(JugadorInfo[playerid][pNegocio] == nego){SendClientMessage(playerid, Rojo, "No puedes robar en tu propia negocio."); return 1;}
	    if(IsPlayerInRangeOfPoint(playerid, 7.0, NegocioInfo[nego][nSalidaX], NegocioInfo[nego][nSalidaY], NegocioInfo[nego][nSalidaZ])){SendClientMessage(playerid, Rojo, "Debes estar más alejado de la puerta para robar."); return 1;}
	    if(NegocioInfo[nego][nTipo] == 13 || NegocioInfo[nego][nTipo] == 14){SendClientMessage(playerid, Rojo, "No puedes robar en oficinas o almacenes."); return 1;}
		format(string, sizeof(string), "%s comienza a forcejear con su destornillador la caja fuerte del negocio para robarla.", NombreJugadorProxy(playerid));
	    ProxDetector(20.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	    Robando[playerid] = 1;
	    SendClientMessage(playerid, Verde, "El proceso durará '3' minutos contando desde ya. Las cámaras han captado movimiento y se activó la alarma.");
		ProxDetector(30.0, playerid, "Se escucha el ruido de una alarma cercana.", COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		
	    RoboTimer[playerid] = SetTimerEx("RobarF", 60000*3, false, "i, d", playerid, 2);
	    
	    TogglePlayerControllable(playerid, 0);
	    ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.1,1,1,1,0,0,1);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID)
			{
				if(JugadorInfo[i][pFaccion] == 1 && JugadorInfo[i][pServicioPD] > 0)
				{
					format(string, sizeof(string), "[AVISO]: El negocio '%s' está siendo robado en %s.", NegocioInfo[nego][nNombre], GetPlayerZona(playerid));
					SendClientMessage(i, Naranja, string);
				}
			}
		}
	    return 1;
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/puentear", true) == 0) //Robar un vehículo
{
    if(JugadorInfo[playerid][pTrabajo] != 8){SendClientMessage(playerid, Rojo, "No eres ladrón."); return 1;}
    if(JugadorInfo[playerid][pHabLad] < 60){SendClientMessage(playerid, Rojo, "Necesitas nivel 3 de ladrón para usar este comando."); return 1;}
    if(JugadorInfo[playerid][pTiempoRobo] > 0)
    {
        format(string, sizeof(string), "Debes esperar %d minutos para volver a usar este comando.", JugadorInfo[playerid][pTiempoRobo]);
        SendClientMessage(playerid, Rojo, string);
        return 1;
    }
	if(!IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER){SendClientMessage(playerid, Rojo, "No estás montado en un vehículo como conductor."); return 1;}
	new carid = GetPlayerVehicleID(playerid);
	if(Puenteando[playerid] > 0){SendClientMessage(playerid, Rojo, "Ya estás haciendo un puente a un vehículo."); return 1;}
	if(carid <= MAX_VEHPUBLICO){SendClientMessage(playerid, Rojo, "No puedes robar un vehículo de facción o trabajo."); return 1;}
	if(JugadorInfo[playerid][pManoDer] != 74 && JugadorInfo[playerid][pManoIzq] != 74){SendClientMessage(playerid, Rojo, "Necesitas un destornillador para hacer el puente."); return 1;}
	
	new engine,lights,alarm,doors,bonnet,boot,objective;
    GetVehicleParamsEx(carid,engine,lights,alarm,doors,bonnet,boot,objective);
    
    if(engine == 1){SendClientMessage(playerid, Rojo, "Este vehículo ya tiene el motor encendido."); return 1;}
    
	SetTimerEx("AlarmaCoche", 25000, false, "d", carid);
    SetVehicleParamsEx(carid,engine,lights,1,doors,bonnet,boot,objective);
    
    PuenteTimer[playerid] = SetTimerEx("PuentearF", 60000*3, false, "i, d", playerid, carid);
    format(string, sizeof(string), "%s comienza a hacerle un puente a un vehículo con sus herramientas.", NombreJugadorProxy(playerid));
	ProxDetector(15.0, playerid, string, COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	
	TogglePlayerControllable(playerid, 0);
	Puenteando[playerid] = 1;
	new Float:pX, Float:pY, Float:pZ;
	GetVehiclePos(carid, pX, pY, pZ);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID)
		{
			if(JugadorInfo[i][pFaccion] == 1 && JugadorInfo[i][pServicioPD] > 0)
			{
				format(string, sizeof(string), "[AVISO]: Un %s está siendo robado en %s.", CocheInfo[carid][cNombreModelo], GetPlayerZona(playerid));
				SendClientMessage(i, Naranja, string);
			}
		}
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/desguazar", true) == 0) //Vender un coche al desguace
{
	if(JugadorInfo[playerid][pTrabajo] != 8){SendClientMessage(playerid, Rojo, "No eres ladrón."); return 1;}
    if(JugadorInfo[playerid][pHabLad] < 90){SendClientMessage(playerid, Rojo, "Necesitas nivel 4 de ladrón para usar este comando."); return 1;}
    if(JugadorInfo[playerid][pTiempoRobo] > 0)
    {
        format(string, sizeof(string), "Debes esperar %d minutos para usar este comando.", JugadorInfo[playerid][pTiempoRobo]);
        SendClientMessage(playerid, Rojo, string);
        return 1;
    }
	if(!IsPlayerInAnyVehicle(playerid) || GetPlayerState(playerid) != PLAYER_STATE_DRIVER){SendClientMessage(playerid, Rojo, "No estás montado en un vehículo como conductor."); return 1;}
	new EsPropietario;
	for(new x=0; x<5; x++)
	{
	    if(CocheInfo[GetPlayerVehicleID(playerid)][cLlave] == JugadorInfo[playerid][pLlaveCoche][x])EsPropietario = 1;
	}
    if(EsPropietario != 0){SendClientMessage(playerid, Rojo, "No puedes desguazar tus propios vehículos."); return 1;}
    
	new carid = GetPlayerVehicleID(playerid);
	if(carid <= MAX_VEHPUBLICO){SendClientMessage(playerid, Rojo, "No puedes desguazar un vehículo de facción o trabajo."); return 1;}
	if(!IsPlayerInRangeOfPoint(playerid, 8.0, 2272.6394,-2350.2861,13.2669) && !IsPlayerInRangeOfPoint(playerid, 8.0, 2294.3999000,-2447.8000500,0.0000000)){SendClientMessage(playerid, Rojo, "No estás en el desguace."); return 1;}
	
 	new precio;
	precio = ((CocheInfo[carid][cValor]/24));
	GivePlayerMoneyAC(playerid, precio);
	format(string, sizeof(string), "¡Desguazaste el %s por %d$!", precio);
	SendClientMessage(playerid, Verde, string);
	JugadorInfo[playerid][pTiempoRobo] = 40;
    JugadorInfo[playerid][pHabLad] ++;
	VehExplotado[carid] = 1;
	CocheInfo[carid][cEnDeposito] = 1;
    SetVehicleToRespawn(carid);
    if(IsPlayerInRangeOfPoint(playerid, 8.0, 2294.3999000,-2447.8000500,0.0000000)){SetPlayerPos(playerid, 2285.9480,-2425.2461,3.0000);}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/dejartrabajo", true) == 0) //Renuncia al trabajo
{
    new empleo = JugadorInfo[playerid][pTrabajo];
	new job = empleo-1;
	if(JugadorInfo[playerid][pTrabajo] == 0){SendClientMessage(playerid, Rojo, "No tienes ningún trabajo."); return 1;}
	if(!IsPlayerInRangeOfPoint(playerid, 5.0, Jobs[job][Jx], Jobs[job][Jy], Jobs[job][Jz])){SendClientMessage(playerid, COLOR_ROJO, "No lo grites al aire, anda donde tu jefe y dicelo a la cara, ¿o tienes miedo?"); return 1;}
	if(JugadorInfo[playerid][pContrato] > 0)
	{
	    format(string, sizeof(string), "No puedes dejar tu trabajo todavía. Debes esperar %d horas.", JugadorInfo[playerid][pContrato]);
	    SendClientMessage(playerid, Rojo, string);
	    return 1;
	}
	format(string, sizeof(string), "¡Ya no eres un %s!", Jobs[empleo-1][JobNombre]);
	SendClientMessage(playerid, Amarillo, string);
    JugadorInfo[playerid][pTrabajo] = 0;
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/renunciar", true) == 0) //Renuncia al contrato
{
	if(JugadorInfo[playerid][pTaller] != 0)
	{
	    if(JugadorInfo[playerid][pTaller] == JugadorInfo[playerid][pNegocio]){SendClientMessage(playerid, Rojo, "No puedes renunciar al taller del que eres dueño."); return 1;}
		SendClientMessage(playerid, Amarillo, "¡Ya no trabajas en el taller como mecánico!");
	    JugadorInfo[playerid][pTaller] = 0;
	    return 1;
	}
	else{SendClientMessage(playerid, Amarillo, "No has firmado ningún contrato de trabajo con un negocio.");}
	return 1;
}


//----------COMANDOS TELEFONOS----------//

if(strcmp(cmd, "/llamar", true) == 0) //Llama a alguien
{
	if(JugadorInfo[playerid][pTelefono] == 0){SendClientMessage(playerid, Rojo, "No tienes un número de teléfono asignado a tu cuenta. Compra uno en una tienda de electrónica."); return 1;}
	if(JugadorInfo[playerid][pManoDer] != 68 && JugadorInfo[playerid][pManoIzq] != 68){SendClientMessage(playerid, Rojo, "Debes tener un teléfono en una mano."); return 1;}
	if(EnLlamada[playerid] != 0){SendClientMessage(playerid, Rojo, "Ya estás en una llamada."); return 1;}
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /llamar [número]");
        SendClientMessage(playerid, -1, "Servicios: Emergencías (911), Pizza (555), Taxi (777), Anuncio (444)");
        return 1;
    }
    new numero = strval(tmp);
    if(numero == 0){SendClientMessage(playerid, Rojo, "No puedes llamar al número 0."); return 1;}
    if(numero == JugadorInfo[playerid][pTelefono]){SendClientMessage(playerid, Rojo, "No te puedes llamar a tí mismo."); return 1;}
    
    LlamarTelefono(playerid, numero);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/contestar", true) == 0) //Contesta al teléfono
{
    if(JugadorInfo[playerid][pTelefono] == 0){SendClientMessage(playerid, COLOR_ROJO, "No tienes un número de teléfono asignado a tu cuenta. Compra uno en una tienda de electrónica."); return 1;}
	if(JugadorInfo[playerid][pManoDer] != 68){SendClientMessage(playerid, COLOR_ROJO, "Debes tener un teléfono en una mano."); return 1;}
	if(EnLlamada[playerid] != 0){SendClientMessage(playerid, Rojo, "Ya estás en una llamada."); return 1;}
	if(JugadorInfo[playerid][pFaccion] == 1 && JugadorInfo[playerid][pServicioPD] > 0)
	{
	    KillTimer(Timer_Telefono[playerid]);
	    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
		new oyente = NOEXISTE;
		for(new i; i < MAX_PLAYERS; i++)
		{
			if(EnLlamada[i] == 911)
			{
				oyente = i;
				break;
			}
		}

		if(oyente != NOEXISTE)
		{
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
			PersonaEnLlamada[playerid] = oyente;
			PersonaEnLlamada[oyente] = playerid;
			SendClientMessage(oyente, COLOR_GREEN2, "Descolgaron el teléfono");
			KillTimer(Timer_Telefono[playerid]);
			EnLlamada[playerid] = 2;
			EnLlamada[oyente] = 912;
		}
		return 1;
	}
	if(PersonaEnLlamada[playerid] > NOEXISTE) //llamada normal
	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
		SendClientMessage(PersonaEnLlamada[playerid], COLOR_GREEN2, "Descolgaron el teléfono");
		KillTimer(Timer_Telefono[playerid]);
		EnLlamada[playerid] = 2;
		EnLlamada[PersonaEnLlamada[playerid]] = 3;
		KillTimer(ToqueLlamadaTimer[playerid]);
		CostoLlamadaTimer[PersonaEnLlamada[playerid]] = SetTimerEx("LlamadaCoste", 6000, true, "d", PersonaEnLlamada[playerid]);
		return 1;
	}
	KillTimer(Timer_Telefono[playerid]);
	SendClientMessage(playerid, Rojo, "Parece no haber llamadas entrantes.");
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/colgar", true) == 0) //Colgar el teléfono
{
    KillTimer(Timer_Telefono[playerid]);
	ColgarTelefono(playerid);
	return 1;
}

if(strcmp(cmd, "/sonidito", true) == 0) //
{
	Timer_Telefono[playerid] = SetTimerEx("SonarTelefono", 1000, true, "i", playerid);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/sms", true) == 0) //Manda SMS a alguien
{
    if(JugadorInfo[playerid][pTelefono] == 0){SendClientMessage(playerid, Rojo, "No tienes un número de teléfono asignado a tu cuenta. Compra uno en una tienda de electrónica."); return 1;}
	if(JugadorInfo[playerid][pManoDer] != 68 && JugadorInfo[playerid][pManoIzq] != 68){SendClientMessage(playerid, Rojo, "Debes tener un teléfono en una mano."); return 1;}
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /sms [número] [texto]");
        return 1;
    }
    new numero = strval(tmp);
    if(numero == JugadorInfo[playerid][pTelefono]){SendClientMessage(playerid, Rojo, "No te puedes enviar un SMS a tí mismo."); return 1;}

    new tlfencontrado = -1;
    for(new x=0; x<MAX_PLAYERS; x++)
    {
        if(IsPlayerConnected(x) && x != INVALID_PLAYER_ID)
        {
            if(JugadorInfo[x][pTelefono] == numero && PlayerTieneObjeto(x, 68))
            {
                tlfencontrado = x;
                break;
            }
        }
    }
    if(tlfencontrado == -1){SendClientMessage(playerid, Gris, "El número que ha marcado no existe o no está disponible."); return 1;}
    
    new length = strlen(cmdtext);
    while ((idx < length) && (cmdtext[idx] <= ' '))
    {
        idx++;
    }
    new offset = idx;
    new result[128];
    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
    {
        result[idx - offset] = cmdtext[idx];
        idx++;
    }
    result[idx - offset] = EOS;
    if(!strlen(result))
    {
        SendClientMessage(playerid, Gris, "USO: /sms [número] [texto]");
        return 1;
    }
    new string2[250];
    format(string, sizeof(string), "%s envía un mensaje de texto con su teléfono.", NombreJugadorProxy(playerid));
 	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
    format(string2, sizeof(string2), "SMS enviado al %d: %s", numero, result);
    SendClientMessage(playerid, Amarillo, string2);
    SendClientMessage(playerid, RojoIntenso, "Costo del SMS: 5$.");
    JugadorInfo[playerid][pDineroBanco] -= 5;
    format(string2, sizeof(string2), "SMS recibido del %d: %s", JugadorInfo[playerid][pTelefono], result);
    SendClientMessage(tlfencontrado, Amarillo, string2);
    printf("%s envía a %s un SMS: %s", NombreJugador(playerid), NombreJugador(tlfencontrado), string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/agenda", true) == 0) //Muestra agenda al jugador
{
    if(JugadorInfo[playerid][pTelefono] == 0){SendClientMessage(playerid, Rojo, "No tienes un número de teléfono asignado a tu cuenta. Compra uno en una tienda de electrónica."); return 1;}
	if(JugadorInfo[playerid][pManoDer] != 68 && JugadorInfo[playerid][pManoIzq] != 68){SendClientMessage(playerid, Rojo, "Debes tener un teléfono en una mano."); return 1;}
	new string2[250], dialog[1024];
	format(string2, sizeof(string2), "SELECT Nombre FROM agendas WHERE Nombre = '%s'", JugadorInfo[playerid][pNombre]);
    mysql_query(1, string2);
	mysql_store_result();
	new existe;
	existe = mysql_num_rows();
	mysql_free_result();
	if(existe == 0) //Si no existe en la DB, crearla
	{
	    format(string2,sizeof(string2),"INSERT INTO agendas (Nombre) VALUES ('%s')", JugadorInfo[playerid][pNombre]);
    	mysql_query(1, string2);
	}
	
	new opcion[20];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Gris, "USO: /agenda [ver-nuevo-borrar]");
		return 1;
	}
	if(strcmp(opcion,"ver",true) == 0) //ver agenda
	{
		for(new x=0; x<16; x++)
		{
		    new Numero = AgendaNumero[playerid][x], Contacto[41];
		    format(Contacto, sizeof(Contacto), "%s", AgendaContacto[playerid][x]);
			if(!strlen(Contacto) || strcmp(Contacto,"NULL",true) == 0){format(string, sizeof(string), "\n{FFFFFF}[%d] Libre", x+1);}
			else{format(string, sizeof(string), "\n{FFFFFF}[%d] %s (%d)", x+1, Contacto, Numero);}
			strcat(dialog, string);
		}
		ShowPlayerDialog(playerid, 22, DIALOG_STYLE_LIST, "Agenda", dialog, "Seleccionar", "Cerrar");
		return 1;
	}
	if(strcmp(opcion,"nuevo",true) == 0) //agregar número a la agenda
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /agenda Nuevo [espacio] [número] [Nombre]");
	        return 1;
	    }
	    new slot = strval(tmp)-1;
	    if(slot < 0 || slot > 15){SendClientMessage(playerid, Rojo, "El espacio debe estar entre 1 y 16."); return 1;}
     	new Contacto[41];
	    format(Contacto, sizeof(Contacto), "%s", AgendaContacto[playerid][slot]);
	    if(strlen(Contacto) && strcmp(Contacto,"NULL",true) != 0){SendClientMessage(playerid, Rojo, "Espacio ocupado."); return 1;}
	    
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /agenda Nuevo [espacio] [número] [Nombre]");
	        return 1;
	    }
	    new numero = strval(tmp);
	    
	    new length = strlen(cmdtext);
	    while ((idx < length) && (cmdtext[idx] <= ' '))
	    {
	        idx++;
	    }
	    new offset = idx;
	    new result[MAX_PLAYER_NAME];
	    while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	    {
	        result[idx - offset] = cmdtext[idx];
	        idx++;
	    }
	    result[idx - offset] = EOS;
	    if(!strlen(result))
	    {
	        SendClientMessage(playerid, Gris, "USO: /agenda Nuevo [espacio] [número] [Nombre]");
	        return 1;
	    }
	    
	    AgendaNumero[playerid][slot] = numero;
	    format(AgendaContacto[playerid][slot], sizeof(result), "%s", result);
	    GuardarAgenda(playerid);
	    format(string, sizeof(string), "Contacto %s (%d) agregado a la agenda.", result, numero);
	    SendClientMessage(playerid, Verde, string);
	    return 1;
	}
	if(strcmp(opcion,"borrar",true) == 0) //borrar número de la agenda
	{
	    tmp = strtok(cmdtext, idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /agenda Borrar [espacio]");
	        return 1;
	    }
	    new slot = strval(tmp)-1;
	    if(slot < 0 || slot > 15){SendClientMessage(playerid, Rojo, "El espacio debe estar entre 1 y 16."); return 1;}
     	new Contacto[41];
	    format(Contacto, sizeof(Contacto), "%s", AgendaContacto[playerid][slot]);
	    if(!strlen(Contacto) || strcmp(Contacto,"NULL",true) == 0){SendClientMessage(playerid, Rojo, "Espacio vacío."); return 1;}
	    
	    format(string, sizeof(string), "Contacto %s (%d) borrado de la agenda.", Contacto, AgendaNumero[playerid][slot]);
	    SendClientMessage(playerid, Verde, string);
	    
	    AgendaNumero[playerid][slot] = 0;
	    format(AgendaContacto[playerid][slot], 41, "");
	    GuardarAgenda(playerid);
	    return 1;
	}
	else
	{
		SendClientMessage(playerid, Gris, "USO: /agenda [ver-nuevo-borrar]");
	}
	return 1;
}

//----------COMANDOS DROGAS----------//

if(strcmp(cmd, "/plantar", true) == 0) //Plantar semillas de drogas
{
    new opcion[25];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Gris, "USO: /plantar [marihuana]");
		return 1;
	}
	new Float:pX, Float:pY, Float:pZ, Int, VW;
	if(strcmp(opcion,"marihuana",true) == 0)
	{
	    if(JugadorInfo[playerid][pManoDer] != 85 && JugadorInfo[playerid][pManoIzq] != 85){SendClientMessage(playerid, Rojo, "No tienes una semilla de marihuana en ninguna mano."); return 1;}
	    //Quita unidad de semilla
		if(JugadorInfo[playerid][pManoDer] == 85){JugadorInfo[playerid][pManoDerCant] --;}
		else if(JugadorInfo[playerid][pManoIzq] == 85){JugadorInfo[playerid][pManoIzqCant] --;}
		//Crea planta
		GetPlayerPos(playerid, pX, pY, pZ);
		VW = GetPlayerVirtualWorld(playerid);
		Int = GetPlayerInterior(playerid);
		CrearPlantacion(playerid, 1, pX, pY, pZ, VW, Int);
		Streamer_Update(playerid);
		return 1;
	}
	return 1;
}

if(strcmp(cmd, "/recogerplanta", true) == 0) //Recoge plantacion
{
	new planta = GetPlayerPlantacion(playerid);
	if(planta == 0){SendClientMessage(playerid, Rojo, "No se ha detectado ninguna plantación a tu alrededor."); return 1;}
	if(PlantaInfo[planta][plEstado] < 100){SendClientMessage(playerid, Rojo, "No puedes recoger esta plantación todavía."); return 1;}
	if(JugadorInfo[playerid][pManoIzq] != 0 && JugadorInfo[playerid][pManoDer] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}

	if(JugadorInfo[playerid][pManoDer] == 0)
	{
	    JugadorInfo[playerid][pManoDer] = 86;
	    JugadorInfo[playerid][pManoDerCant] = 1;
	    PonerObjeto(playerid, 1, 86);
	}
	else if(JugadorInfo[playerid][pManoIzq] == 0)
	{
	    JugadorInfo[playerid][pManoIzq] = 86;
	    JugadorInfo[playerid][pManoIzqCant] = 1;
	    PonerObjeto(playerid, 2, 86);
	}
	format(string, sizeof(string), "%s recoge una planta de marihuana del suelo.", NombreJugadorProxy(playerid));
 	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	EliminarPlantacion(planta);
	return 1;
}

if(strcmp(cmd, "/eliminarplanta", true) == 0) //quitarobjeto plantacion
{
	new planta = GetPlayerPlantacion(playerid);
	if(planta == 0){SendClientMessage(playerid, Rojo, "No se ha detectado ninguna plantación a tu alrededor."); return 1;}
	format(string, sizeof(string), "%s pisotea una planta de marihuana del suelo.", NombreJugadorProxy(playerid));
 	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	EliminarPlantacion(planta);
	return 1;
}

if(strcmp(cmd, "/preparar", true) == 0) //Recoge plantacion
{
	if(PreparandoDroga[playerid] != 0){SendClientMessage(playerid, Rojo, "Ya estás preparando alguna droga."); return 1;}
    new opcion[25];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Gris, "USO: /preparar <marihuana - crack>");
		return 1;
	}
	if(strcmp(opcion,"marihuana",true) == 0)
	{
	    if(JugadorInfo[playerid][pManoDer] != 86 && JugadorInfo[playerid][pManoIzq] != 86){SendClientMessage(playerid, Rojo, "No tienes una planta de marihuana en ninguna mano."); return 1;}
	    format(string, sizeof(string), "%s comienza a preparar gramos de marihuana a partir de su planta.", NombreJugadorProxy(playerid));
 		ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
 		PreparandoDroga[playerid] = 1;
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("Descongelar", 15000, false, "d", playerid);
		SetTimerEx("PrepararDroga", 15000, false, "d, d", playerid, 1);
	    return 1;
	}
	if(strcmp(opcion,"crack",true) == 0)
	{
		if(JugadorInfo[playerid][pManoDer] != 81 && JugadorInfo[playerid][pManoIzq] != 81){SendClientMessage(playerid, Rojo, "No tienes una bolsita de cocaina en ninguna mano."); return 1;}
		if(!GetPlayerDentroCasa(playerid) && !GetPlayerDentroNego(playerid)){SendClientMessage(playerid, Rojo, "No estás en una casa o local."); return 1;}
		if(GetPlayerDentroCasa(playerid) && JugadorInfo[playerid][pCasa] != GetPlayerDentroCasa(playerid) && JugadorInfo[playerid][pCasaAlq] != GetPlayerDentroCasa(playerid)){SendClientMessage(playerid, Rojo, "No resides en esta vivienda."); return 1;}
		if(GetPlayerDentroNego(playerid) && JugadorInfo[playerid][pNegocio] != GetPlayerDentroNego(playerid)){SendClientMessage(playerid, Rojo, "No eres el propietario de este local."); return 1;}
	    format(string, sizeof(string), "%s comienza a preparar gramos de crack a partir de gramos de cocaina y otros productos.", NombreJugadorProxy(playerid));
 		ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
 		PreparandoDroga[playerid] = 2;
		TogglePlayerControllable(playerid, 0);
		SetTimerEx("Descongelar", 25000, false, "d", playerid);
		SetTimerEx("PrepararDroga", 25000, false, "d, d", playerid, 2);
		return 1;
	}
	return 1;
}

if(strcmp(cmd, "/fardo", true) == 0) //Comando para fardos
{
    new opcion[25];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Gris, "USO: /fardo <crear - sacar - meter - unir> ");
		return 1;
	}
	if(strcmp(opcion,"crear",true) == 0)
	{
	    if(GetPlayerBolsitaDroga(playerid, 1)) //Tiene una bolsita de droga en la mano derecha
	    {
	        new fardo;
	        switch(GetPlayerBolsitaDroga(playerid, 1))
	        {
	            case 1: fardo = 75; //Marihuana
	            case 2: fardo = 76; //Cocaína
	            case 3: fardo = 77; //Crack
	            case 4: fardo = 78; //Heroína
	            case 5: fardo = 79; //LSD
	        }
	        JugadorInfo[playerid][pManoDer] = fardo;
	        PonerObjeto(playerid, 1, fardo);
			format(string, sizeof(string), "Has creado un %s en tu mano derecha", ObjetoInfo[fardo][NombreObjeto]);
			SendClientMessage(playerid, COLOR_GREEN, string);
			format(string, sizeof(string), "%s crea un fardo de droga.", NombreJugadorProxy(playerid));
 			ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
			return 1;
	    }
	    else if(GetPlayerBolsitaDroga(playerid, 2)) //Tiene una bolsita de droga en la mano izquierda
	    {
	        new fardo;
	        switch(GetPlayerBolsitaDroga(playerid, 2))
	        {
	            case 1: fardo = 75; //Marihuana
	            case 2: fardo = 76; //Cocaína
	            case 3: fardo = 77; //Crack
	            case 4: fardo = 78; //Heroína
	            case 5: fardo = 79; //LSD
	        }
	        JugadorInfo[playerid][pManoIzq] = fardo;
	        PonerObjeto(playerid, 2, fardo);
			format(string, sizeof(string), "Has creado un %s en tu mano izquierda", ObjetoInfo[fardo][NombreObjeto]);
			SendClientMessage(playerid, COLOR_GREEN, string);
			format(string, sizeof(string), "%s crea un fardo de droga.", NombreJugadorProxy(playerid));
 			ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
			return 1;
	    }
	    else{SendClientMessage(playerid, Rojo, "No tienes una bolsita de droga en ninguna mano."); return 1;}
	}
	if(strcmp(opcion,"sacar",true) == 0)
	{
	    if(GetPlayerFardoDroga(playerid, 1) && JugadorInfo[playerid][pManoIzq] == 0) //Tiene fardo en mano derecha y mano izquierda libre
		{
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Gris, "USO: /Fardo Sacar [Cantidad]");
				return 1;
			}
			new cantidad = strval(tmp);
			if(cantidad < 1 || cantidad > 5){SendClientMessage(playerid, Rojo, "La cantidad debe estar entre 1 y 5."); return 1;}
			if(cantidad > JugadorInfo[playerid][pManoDerCant]){SendClientMessage(playerid, Rojo, "No hay tanta cantidad en el fardo."); return 1;}
			new bolsita;
	        switch(GetPlayerFardoDroga(playerid, 1))
	        {
	            case 1: bolsita = 80; //Marihuana
	            case 2: bolsita = 81; //Cocaína
	            case 3: bolsita = 82; //Crack
	            case 4: bolsita = 83; //Heroína
	            case 5: bolsita = 84; //LSD
	        }
	        JugadorInfo[playerid][pManoDerCant] -= cantidad;
			JugadorInfo[playerid][pManoIzq] = bolsita, JugadorInfo[playerid][pManoIzqCant] = cantidad;
	        PonerObjeto(playerid, 2, bolsita);
	        format(string, sizeof(string), "Sacas una %s del fardo", ObjetoInfo[bolsita][NombreObjeto]);
			SendClientMessage(playerid, COLOR_GREEN, string);
	        return 1;
		}
		else if(GetPlayerFardoDroga(playerid, 2) && JugadorInfo[playerid][pManoDer] == 0) //Tiene fardo en mano izquierda y mano derecha libre
		{
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Gris, "USO: /Fardo Sacar [Cantidad]");
				return 1;
			}
			new cantidad = strval(tmp);
			if(cantidad < 1 || cantidad > 5){SendClientMessage(playerid, Rojo, "La cantidad debe estar entre 1 y 5."); return 1;}
            if(cantidad > JugadorInfo[playerid][pManoIzqCant]){SendClientMessage(playerid, Rojo, "No hay tanta cantidad en el fardo."); return 1;}
			new bolsita;
	        switch(GetPlayerFardoDroga(playerid, 2))
	        {
	            case 1: bolsita = 80; //Marihuana
	            case 2: bolsita = 81; //Cocaína
	            case 3: bolsita = 82; //Crack
	            case 4: bolsita = 83; //Heroína
	            case 5: bolsita = 84; //LSD
	        }
	        JugadorInfo[playerid][pManoIzqCant] -= cantidad;
			JugadorInfo[playerid][pManoDer] = bolsita, JugadorInfo[playerid][pManoDerCant] = cantidad;
	        PonerObjeto(playerid, 1, bolsita);
	        format(string, sizeof(string), "Sacas una %s del fardo", ObjetoInfo[bolsita][NombreObjeto]);
			SendClientMessage(playerid, COLOR_GREEN, string);
	        return 1;
		}
		else{SendClientMessage(playerid, Rojo, "Debes tener un fardo en una mano y la otra mano vacía."); return 1;}
	}
	if(strcmp(opcion,"meter",true) == 0)
	{
	    if(!GetPlayerFardoDroga(playerid, 1) && !GetPlayerFardoDroga(playerid, 2)){SendClientMessage(playerid, Rojo, "No tienes un fardo de droga en ninguna mano."); return 1;}
	    if(!GetPlayerBolsitaDroga(playerid, 1) && !GetPlayerBolsitaDroga(playerid, 2)){SendClientMessage(playerid, Rojo, "No tienes una bolsita de droga en ninguna mano."); return 1;}
     	if(GetPlayerFardoDroga(playerid, 1) && GetPlayerBolsitaDroga(playerid, 2) && GetPlayerFardoDroga(playerid, 1) == GetPlayerBolsitaDroga(playerid, 2)) //Tiene fardo en mano derecha de misma droga que en mano izquierda
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Gris, "USO: /Fardo Meter [Cantidad]");
				return 1;
			}
			new cantidad = strval(tmp);
			if(cantidad < 1 || cantidad > 5){SendClientMessage(playerid, Rojo, "La cantidad debe estar entre 1 y 5."); return 1;}
			if(cantidad > JugadorInfo[playerid][pManoIzqCant]){SendClientMessage(playerid, Rojo, "No tienes tanta cantidad de droga en la bolsita."); return 1;}
			if(JugadorInfo[playerid][pManoDerCant] + cantidad > 70){SendClientMessage(playerid, Rojo, "Los fardos solo pueden llegar a contener 70 gramos."); return 1;}
			JugadorInfo[playerid][pManoDerCant] += cantidad;
			JugadorInfo[playerid][pManoIzqCant] -= cantidad;
			format(string, sizeof(string), "Metes %d gramos de tu %s en el fardo", cantidad, ObjetoInfo[JugadorInfo[playerid][pManoIzq]][NombreObjeto]);
			SendClientMessage(playerid, COLOR_GREEN, string);
			return 1;
	    }
	    else if(GetPlayerFardoDroga(playerid, 2) && GetPlayerBolsitaDroga(playerid, 1) && GetPlayerFardoDroga(playerid, 2) == GetPlayerBolsitaDroga(playerid, 1)) //Tiene fardo en mano izquierda de misma droga que en mano derecha
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, Gris, "USO: /Fardo Meter [Cantidad]");
				return 1;
			}
			new cantidad = strval(tmp);
			if(cantidad < 1 || cantidad > 5){SendClientMessage(playerid, Rojo, "La cantidad debe estar entre 1 y 5."); return 1;}
			if(cantidad > JugadorInfo[playerid][pManoDerCant]){SendClientMessage(playerid, Rojo, "No tienes tanta cantidad de droga en la bolsita."); return 1;}
			if(JugadorInfo[playerid][pManoIzqCant] + cantidad > 70){SendClientMessage(playerid, Rojo, "Los fardos solo pueden llegar a contener 70 gramos."); return 1;}
			JugadorInfo[playerid][pManoIzqCant] += cantidad;
			JugadorInfo[playerid][pManoDerCant] -= cantidad;
			format(string, sizeof(string), "Metes %d gramos de tu %s en el fardo", cantidad, ObjetoInfo[JugadorInfo[playerid][pManoDer]][NombreObjeto]);
			SendClientMessage(playerid, COLOR_GREEN, string);
			return 1;
	    }
	    else{SendClientMessage(playerid, Rojo, "Debes un fardo en una mano y una bolsita en la otra de la misma droga."); return 1;}
	}
	if(strcmp(opcion,"unir",true) == 0)
	{
		if(!GetPlayerFardoDroga(playerid, 1) || !GetPlayerFardoDroga(playerid, 2)){SendClientMessage(playerid, Rojo, "Debes tener un fardo de droga en cada mano."); return 1;}
		if(GetPlayerFardoDroga(playerid, 1) != GetPlayerFardoDroga(playerid, 2)){SendClientMessage(playerid, Rojo, "Los fardos no son de la misma droga."); return 1;}
		if(JugadorInfo[playerid][pManoDerCant] >= 70 || JugadorInfo[playerid][pManoIzqCant] >= 70){SendClientMessage(playerid, Rojo, "Los fardos solo pueden llegar a contener 70 gramos."); return 1;}
		if(JugadorInfo[playerid][pManoDerCant] + JugadorInfo[playerid][pManoIzqCant] <= 70)
		{
		    JugadorInfo[playerid][pManoDerCant] += JugadorInfo[playerid][pManoIzqCant];
		    JugadorInfo[playerid][pManoIzqCant] = 0;
		    format(string, sizeof(string), "Has unido tus fardos y has obtenido un {fce80c}%s {FFFFFF}de %d gramos.", ObjetoInfo[JugadorInfo[playerid][pManoDer]][NombreObjeto], JugadorInfo[playerid][pManoDerCant]);
			SendClientMessage(playerid, Blanco, string);
			return 1;
		}
		else
		{
		    new cantidad = 70 - JugadorInfo[playerid][pManoDerCant];
		    JugadorInfo[playerid][pManoDerCant] = 70;
		    JugadorInfo[playerid][pManoIzqCant] -= cantidad;
		    format(string, sizeof(string), "Pasas %d gramos de un {fce80c}%s {FFFFFF}a otro.", cantidad, ObjetoInfo[JugadorInfo[playerid][pManoDer]][NombreObjeto]);
			SendClientMessage(playerid, Blanco, string);
		}
		return 1;
	}
	return 1;
}

if(strcmp(cmd, "/consumir", true) == 0) //Consumir drogas
{
    new opcion[25];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Gris, "USO: /consumir <marihuana - cocaina - crack - heroina - lsd>");
		return 1;
	}
	if(strcmp(opcion,"marihuana",true) == 0)
	{
	    if(JugadorInfo[playerid][pManoDer] != 80 && JugadorInfo[playerid][pManoIzq] != 80){SendClientMessage(playerid, Rojo, "No tienes una bolsita de marihuana en ninguna mano."); return 1;}
		if(JugadorInfo[playerid][pManoDer] != 69 && JugadorInfo[playerid][pManoIzq] != 69){SendClientMessage(playerid, Rojo, "Necesitas un mechero con gas para encender el porro."); return 1;}
		if((JugadorInfo[playerid][pManoDer] == 69 && JugadorInfo[playerid][pManoDerCant] <= 0) || (JugadorInfo[playerid][pManoIzq] == 69 && JugadorInfo[playerid][pManoIzqCant] <= 0)){SendClientMessage(playerid, Rojo, "Necesitas un mechero con gas para encender el porro."); return 1;}
		//Quita unidad de droga
		if(JugadorInfo[playerid][pManoDer] == 80){JugadorInfo[playerid][pManoDerCant] --;}
		else if(JugadorInfo[playerid][pManoIzq] == 80){JugadorInfo[playerid][pManoIzqCant] --;}
		//Quita unidad de mechero
		if(JugadorInfo[playerid][pManoDer] == 69){JugadorInfo[playerid][pManoDerCant] --;}
		else if(JugadorInfo[playerid][pManoIzq] == 69){JugadorInfo[playerid][pManoIzqCant] --;}
		//Da efecto de marihuana
		RemovePlayerColorFade(playerid);
		if(JugadorInfo[playerid][pDrConsumida][0] > 80){FlashPlayerScreen(playerid, 0xa8070730, 1, 2); JugadorInfo[playerid][pDrConsumida][0] += 7; GivePlayerHealth(playerid,7.0);}
		else if(JugadorInfo[playerid][pDrConsumida][0] > 60){FlashPlayerScreen(playerid, 0xa8070735, 1, 4); JugadorInfo[playerid][pDrConsumida][0] += 10; GivePlayerHealth(playerid,10.0);}
		else if(JugadorInfo[playerid][pDrConsumida][0] > 40){FlashPlayerScreen(playerid, 0xa8070740, 1, 4); JugadorInfo[playerid][pDrConsumida][0] += 13; GivePlayerHealth(playerid,13.0);}
		else if(JugadorInfo[playerid][pDrConsumida][0] > 20){FlashPlayerScreen(playerid, 0xa8070745, 1, 5); JugadorInfo[playerid][pDrConsumida][0] += 16; GivePlayerHealth(playerid,16.0);}
		else{FlashPlayerScreen(playerid, 0xa8070750, 1, 5); JugadorInfo[playerid][pDrConsumida][0] += 19; GivePlayerHealth(playerid,19.0);}
		GivePlayerDrunkLevel(playerid, 8000);
		//Sube adicción
		JugadorInfo[playerid][pAdiccion][0] += 3;
		if(JugadorInfo[playerid][pAdiccion][0] > 100){JugadorInfo[playerid][pAdiccion][0] = 100;}
		//Sobredosis
		new Float:health;
		GetPlayerHealth(playerid,health);
		if(health >= 215.0)
		{
			SendClientMessage(playerid, COLOR_ROJO, "¡Consumiste demasiada droga que te ha dado una sobredosis!");
			SetPlayerHealth(playerid,0.0);
			RemovePlayerColorFade(playerid);
			return 1;
		}
		DarSobredosis(playerid);
		//Mensajes
		SendClientMessage(playerid, Naranja, "Has consumido marihuana");
		//Da el cigarro
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		ApplyAnimation(playerid, "GANGS", "smkcig_prtl", 3.0, 0, 0, 0, 0, 0);
		return 1;
	}
	if(strcmp(opcion,"cocaina",true) == 0)
	{
		if(JugadorInfo[playerid][pManoDer] != 81 && JugadorInfo[playerid][pManoIzq] !=  81){SendClientMessage(playerid, Rojo, "No tienes una bolsita de cocaína en ninguna mano."); return 1;}
		//Quita unidad de droga
		if(JugadorInfo[playerid][pManoDer] == 81){JugadorInfo[playerid][pManoDerCant] --;}
		else if(JugadorInfo[playerid][pManoIzq] == 81){JugadorInfo[playerid][pManoIzqCant] --;}
		//Da efecto de cocaina y vida
		RemovePlayerColorFade(playerid);
		if(JugadorInfo[playerid][pAdiccion][1] > 80){FlashPlayerScreen(playerid, 0xFFFFFF20, 255, 110); JugadorInfo[playerid][pDrConsumida][1] += 6; GivePlayerHealth(playerid,6.0);}
		else if(JugadorInfo[playerid][pAdiccion][1] > 60){FlashPlayerScreen(playerid, 0xFFFFFF40, 255, 120); JugadorInfo[playerid][pDrConsumida][1] += 12; GivePlayerHealth(playerid,12.0);}
		else if(JugadorInfo[playerid][pAdiccion][1] > 40){FlashPlayerScreen(playerid, 0xFFFFFF70, 255, 130); JugadorInfo[playerid][pDrConsumida][1] += 18; GivePlayerHealth(playerid,18.0);}
		else if(JugadorInfo[playerid][pAdiccion][1] > 20){FlashPlayerScreen(playerid, 0xFFFFFFBB, 255, 140); JugadorInfo[playerid][pDrConsumida][1] += 24; GivePlayerHealth(playerid,24.0);}
		else{FlashPlayerScreen(playerid, 0xFFFFFFFF, 255, 150); JugadorInfo[playerid][pDrConsumida][1] += 30; GivePlayerHealth(playerid,30.0);}
		//Sube adicción
		JugadorInfo[playerid][pAdiccion][1] += 5;
		if(JugadorInfo[playerid][pAdiccion][1] > 100){JugadorInfo[playerid][pAdiccion][1] = 100;}
		//Sobredosis
		new Float:health;
		GetPlayerHealth(playerid,health);
		if(health >= 215.0)
		{
			SendClientMessage(playerid, COLOR_ROJO, "¡Consumiste demasiada droga que te ha dado una sobredosis!");
			SetPlayerHealth(playerid,0.0);
			RemovePlayerColorFade(playerid);
			return 1;
		}
		DarSobredosis(playerid);
		//Mensajes
		SendClientMessage(playerid, Naranja, "Has consumido cocaína");
		return 1;
	}
	if(strcmp(opcion,"crack",true) == 0)
	{
		if(JugadorInfo[playerid][pManoDer] != 82 && JugadorInfo[playerid][pManoIzq] != 82){SendClientMessage(playerid, Rojo, "No tienes una bolsita de crack en ninguna mano."); return 1;}
		if(JugadorInfo[playerid][pManoDer] != 69 && JugadorInfo[playerid][pManoIzq] != 69){SendClientMessage(playerid, Rojo, "Necesitas un mechero con gas para fumar crack."); return 1;}
		if((JugadorInfo[playerid][pManoDer] == 69 && JugadorInfo[playerid][pManoDerCant] <= 0) || (JugadorInfo[playerid][pManoIzq] == 69 && JugadorInfo[playerid][pManoIzqCant] <= 0)){SendClientMessage(playerid, Rojo, "Necesitas un mechero con gas para fumar crack."); return 1;}
		//Quita unidad de droga
		if(JugadorInfo[playerid][pManoDer] == 82){JugadorInfo[playerid][pManoDerCant] --;}
		else if(JugadorInfo[playerid][pManoIzq] == 82){JugadorInfo[playerid][pManoIzqCant] --;}
		//Quita unidad de mechero
		if(JugadorInfo[playerid][pManoDer] == 69){JugadorInfo[playerid][pManoDerCant] --;}
		else if(JugadorInfo[playerid][pManoIzq] == 69){JugadorInfo[playerid][pManoIzqCant] --;}
		//Da efecto de crack y vida
		RemovePlayerColorFade(playerid);
		if(JugadorInfo[playerid][pAdiccion][2] > 80){FlashPlayerScreen(playerid, 0xFFFFFF05, 210, 70); JugadorInfo[playerid][pDrConsumida][2] += 4; GivePlayerHealth(playerid,4.0);}
		else if(JugadorInfo[playerid][pAdiccion][2] > 60){FlashPlayerScreen(playerid, 0xFFFFFF10, 210, 70); JugadorInfo[playerid][pDrConsumida][2] += 8; GivePlayerHealth(playerid,8.0);}
		else if(JugadorInfo[playerid][pAdiccion][2] > 40){FlashPlayerScreen(playerid, 0xFFFFFF15, 210, 70); JugadorInfo[playerid][pDrConsumida][2] += 12; GivePlayerHealth(playerid,12.0);}
		else if(JugadorInfo[playerid][pAdiccion][2] > 20){FlashPlayerScreen(playerid, 0xFFFFFF20, 210, 70); JugadorInfo[playerid][pDrConsumida][2] += 16; GivePlayerHealth(playerid,16.0);}
		else{FlashPlayerScreen(playerid, 0xFFFFFF25, 210, 70); JugadorInfo[playerid][pDrConsumida][2] += 20; GivePlayerHealth(playerid,20.0);}
		//Sube adicción
		JugadorInfo[playerid][pAdiccion][2] += 12;
		if(JugadorInfo[playerid][pAdiccion][2] > 100){JugadorInfo[playerid][pAdiccion][2] = 100;}
		//Sobredosis
		new Float:health;
		GetPlayerHealth(playerid,health);
		if(health >= 215.0)
		{
			SendClientMessage(playerid, COLOR_ROJO, "¡Consumiste demasiada droga que te ha dado una sobredosis!");
			SetPlayerHealth(playerid,0.0);
			RemovePlayerColorFade(playerid);
			return 1;
		}
		DarSobredosis(playerid);
		//Mensajes
		SendClientMessage(playerid, Naranja, "Has consumido crack");
		//Anim de fumar crack
		TogglePlayerControllable(playerid, 0);
		ApplyAnimation(playerid,"CRACK","crckidle1",4.1,1,1,1,1,1);
		SetTimerEx("Descongelar", 12000, false, "i", playerid);
		return 1;
	}
	if(strcmp(opcion,"heroina",true) == 0)
	{
	    if(JugadorInfo[playerid][pManoDer] != 83 && JugadorInfo[playerid][pManoIzq] != 83){SendClientMessage(playerid, Rojo, "No tienes una bolsita de heroína en ninguna mano."); return 1;}
		if(JugadorInfo[playerid][pManoDer] != 69 && JugadorInfo[playerid][pManoIzq] != 69){SendClientMessage(playerid, Rojo, "Necesitas un mechero con gas para fundir la heroína."); return 1;}
		if((JugadorInfo[playerid][pManoDer] == 69 && JugadorInfo[playerid][pManoDerCant] <= 0) || (JugadorInfo[playerid][pManoIzq] == 69 && JugadorInfo[playerid][pManoIzqCant] <= 0)){SendClientMessage(playerid, Rojo, "Necesitas un mechero con gas para fundir la heroína."); return 1;}
		//Quita unidad de droga
		if(JugadorInfo[playerid][pManoDer] == 83){JugadorInfo[playerid][pManoDerCant] --;}
		else if(JugadorInfo[playerid][pManoIzq] == 83){JugadorInfo[playerid][pManoIzqCant] --;}
		//Quita unidad de mechero
		if(JugadorInfo[playerid][pManoDer] == 69){JugadorInfo[playerid][pManoDerCant] --;}
		else if(JugadorInfo[playerid][pManoIzq] == 69){JugadorInfo[playerid][pManoIzqCant] --;}
		//Da efecto de heroína y vida
		RemovePlayerColorFade(playerid);
		if(JugadorInfo[playerid][pAdiccion][3] > 80){FlashPlayerScreen(playerid, 0x00000075, 1, 1); JugadorInfo[playerid][pDrConsumida][3] += 8; GivePlayerHealth(playerid,8.0);}
		else if(JugadorInfo[playerid][pAdiccion][3] > 60){FlashPlayerScreen(playerid, 0x00000080, 1, 2); JugadorInfo[playerid][pDrConsumida][3] += 16; GivePlayerHealth(playerid,16.0);}
		else if(JugadorInfo[playerid][pAdiccion][3] > 40){FlashPlayerScreen(playerid, 0x00000085, 1, 3); JugadorInfo[playerid][pDrConsumida][3] += 24; GivePlayerHealth(playerid,24.0);}
		else if(JugadorInfo[playerid][pAdiccion][3] > 20){FlashPlayerScreen(playerid, 0x00000090, 1, 4); JugadorInfo[playerid][pDrConsumida][3] += 32; GivePlayerHealth(playerid,32.0);}
		else{FlashPlayerScreen(playerid, 0x00000095, 1, 4); JugadorInfo[playerid][pDrConsumida][3] += 40; GivePlayerHealth(playerid,40.0);}
		SetPlayerWeather(playerid, 21);
		//Sube adicción
		JugadorInfo[playerid][pAdiccion][3] += 8;
		if(JugadorInfo[playerid][pAdiccion][3] > 100){JugadorInfo[playerid][pAdiccion][3] = 100;}
		//Sobredosis
		new Float:health;
		GetPlayerHealth(playerid,health);
		if(health >= 215.0)
		{
			SendClientMessage(playerid, COLOR_ROJO, "¡Consumiste demasiada droga que te ha dado una sobredosis!");
			SetPlayerHealth(playerid,0.0);
			RemovePlayerColorFade(playerid);
			return 1;
		}
		DarSobredosis(playerid);
		//Mensajes
		SendClientMessage(playerid, Naranja, "Has consumido heroína");
		//Anim de meterse heroína
		TogglePlayerControllable(playerid, 0);
		ApplyAnimation(playerid,"CRACK","crckidle1",4.1,1,1,1,1,1);
		SetTimerEx("Descongelar", 30000, false, "i", playerid);
		return 1;
	}
	if(strcmp(opcion,"lsd",true) == 0)
	{
	    if(JugadorInfo[playerid][pManoDer] != 84 && JugadorInfo[playerid][pManoIzq] != 84){SendClientMessage(playerid, Rojo, "No tienes un tripi de LSD en ninguna mano."); return 1;}
		//Quita unidad de droga
		if(JugadorInfo[playerid][pManoDer] == 84){JugadorInfo[playerid][pManoDerCant] --;}
		else if(JugadorInfo[playerid][pManoIzq] == 84){JugadorInfo[playerid][pManoIzqCant] --;}
		//Da efecto de LSD
		RemovePlayerColorFade(playerid);
		SetTimerEx("DarEfectoLSD", 200, false, "i", playerid);
		if(JugadorInfo[playerid][pAdiccion][4] > 80){JugadorInfo[playerid][pDrConsumida][4] += 5;}
		else if(JugadorInfo[playerid][pAdiccion][4] > 60){JugadorInfo[playerid][pDrConsumida][4] += 10;}
		else if(JugadorInfo[playerid][pAdiccion][4] > 40){JugadorInfo[playerid][pDrConsumida][4] += 15;}
		else if(JugadorInfo[playerid][pAdiccion][4] > 20){JugadorInfo[playerid][pDrConsumida][4] += 20;}
		else{JugadorInfo[playerid][pDrConsumida][4] += 25;}
		//Sube adicción
		JugadorInfo[playerid][pAdiccion][4] += 5;
		if(JugadorInfo[playerid][pAdiccion][4] > 100){JugadorInfo[playerid][pAdiccion][4] = 100;}
		//Sobredosis
		DarSobredosis(playerid);
		//Mensajes
		SendClientMessage(playerid, Naranja, "Has consumido LSD");
		return 1;
	}
	return 1;
}

//----------COMANDOS GENERALES----------//

if(strcmp(cmd, "/autofix", true) == 0)
{
 	if(!GetPlayerDentroNego(playerid) || !GetPlayerDentroCasa(playerid))
 	{
 	    SetPlayerVirtualWorld(playerid, 0);
	  	SetPlayerInterior(playerid, 0);
        PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
        SetCameraBehindPlayer(playerid);
		SendClientMessage(playerid, Naranja, "Te has desbugeado manualmente");
 	}
 	else SendClientMessage(playerid, COLOR_ROJO, "No puedes usar el comando ahora. Contacta con un administrador en línea.");
 	return 1;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
if(strcmp(cmd, "/ayuda", true) == 0)
{
    SendClientMessage(playerid, 0x045FB4FF, "[_GENERAL_] /stats /bol /mano /usar /quitar /guardar /ceder /tirar /recogerobjeto /espalda /qpecho /cargar /borrarcp");
    SendClientMessage(playerid, 0x045FB4FF, "[_GENERAL_] /recargar /aceptar /cajero /parking /entrartaller /salirtaller /staff /animaciones /limpiarventana /peaje");
    SendClientMessage(playerid, 0x045FB4FF, "[_GENERAL_] /trabajo /comprar /renunciar /pagar /reportar /hora /usarlata /llenarlata");
    SendClientMessage(playerid, 0x045FB4FF, "[_GENERAL_] /nameoff /examen /entrenar /vm /mostrar /autoreparar /minpayday /duda /fumar /entrada /maletin");
    SendClientMessage(playerid, 0x045FB4FF, "[_GENERAL_] /consumir /plantar /recogerplanta /eliminarplanta /preparar /fardo /llamar /sms /contestar /colgar /agenda");
    SendClientMessage(playerid, 0x045FB4FF, "[_GENERAL_] /autofix /chaleco /extraerunidad /meterunidad /acomodar /estilohablar");
	SendClientMessage(playerid, 0x045FB4FF, "[_GENERAL_] /gritar /cerca /susurrar /radio /togfam /b /me /do /yo /mp /togmp /idioma");
	SendClientMessage(playerid,COLOR_GREEN, "[_AYUDAS_] /ayudacasa /ayudanegocio /ayudacoche /ayudatrabajo /ayudafacción /ayudadrogas /ayudapesca");
	return 1;
}

if(strcmp(cmd, "/ayudacasa", true) == 0)
{
	SendClientMessage(playerid, Naranja, "|___________________________________________ MENÚ DE AYUDA CASA ___________________________________________|");
	SendClientMessage(playerid, AmarilloClaro, "[COMANDOS] /comprarcasa /vendercasa /puerta /timbre /alquilable /renta /desalojar /desalojartodos /alquilar /desalquilar");
    SendClientMessage(playerid, AmarilloClaro, "[COMANDOS] /armario ver /armario sacar /armario guardar /guardardinero /sacardinero");
	return 1;
}

if(strcmp(cmd, "/ayudanegocio", true) == 0)
{
	SendClientMessage(playerid, Naranja, "|________________________________________ MENÚ DE AYUDA NEGOCIO ________________________________________|");
    SendClientMessage(playerid, AmarilloClaro, "[COMANDOS] /comprarnegocio /vendernegocio /puerta /contratar /despedir /despedirtodos /plantilla");
    SendClientMessage(playerid, AmarilloClaro, "[COMANDOS] /guardardinero /sacardinero /almacen ver /almacen sacar /almacen guardar");
	return 1;
}

if(strcmp(cmd, "/ayudacoche", true) == 0)
{
	SendClientMessage(playerid, Naranja, "|_________________________________________ MENÚ DE AYUDA COCHES _________________________________________|");
    SendClientMessage(playerid, AmarilloClaro, "[COMANDOS] /encendermotor /luces /bloqueo /gas /rellenar /venderveh /venderveha /localizarveh");
    SendClientMessage(playerid, AmarilloClaro, "[COMANDOS] /sacardeposito /desembargar /capo /maletero /carid /oldcar /cinturon");
    SendClientMessage(playerid, AmarilloClaro, "[COMANDOS] /prestarllave /tirarllave /icoche /vercoche");
	return 1;
}

if(strcmp(cmd, "/ayudafaccion", true) == 0)
{
	if(JugadorInfo[playerid][pFaccion] != 0)
	{
	    SendClientMessage(playerid, Naranja, "|____________________________________ MENÚ DE AYUDA FACCIÓN ____________________________________|");
	    if(JugadorInfo[playerid][pFaccion] == 1) //LSPD
		{
		    SendClientMessage(playerid, AmarilloClaro, "[COMANDOS] /miembros /ap /celda /miuniforme /uniforme /equipopd /servicio /recogerprueba /esposar /retener /ref /noref");
        	SendClientMessage(playerid, AmarilloClaro, "[COMANDOS] /mascara /encarcelar /cuentabanco /cachear /quitar /multar /megafono /radio /departamentos /armeria /togfam /escop");
        	SendClientMessage(playerid, AmarilloClaro, "[COMANDOS] /cono /qcono /remolcar /autorizarswat /romperpuerta /vermueble /confiscar /deposito /embargar /bpanico /marcar");
        	SendClientMessage(playerid, AmarilloClaro, "[COMANDOS] /apatio /cpatio /forzarmaletero /forzarvehiculo /sir /callsign /borrarcallsign /qcables /reciclar");
			SendClientMessage(playerid, AmarilloClaro, "[COMANDOS] /agregarpuntos /quitarpuntos /armas /informes /marcar /nomarcar /aviso /ccs /vercinturon /daruniforme");
            SendClientMessage(playerid, AmarilloClaro, "[COMANDOS] /peajes /evidencias /miarma /ct /sct /gct /reclutar /promover /expulsar");
			return 1;
		}
		if(JugadorInfo[playerid][pFaccion] == 2) //Bomberos
		{
        	SendClientMessage(playerid, AmarilloClaro, "[COMANDOS] /togfam /miembros /uniformes /equipofd /servicio /bpanico /informes, (/m)egafono /cono /qcono /reanimar /abrir /cerrar");
            SendClientMessage(playerid, AmarilloClaro, "[COMANDOS] /autoreparar /rellenar /marcar /nomarcar /reclutar /promover /expulsar");
			return 1;
		}
		if(JugadorInfo[playerid][pFaccion] == 3) //Alcaldia
		{
		    SendClientMessage(playerid, AmarilloClaro, "[IMPORTANTE] La facción del gobierno se encuentra deshabilitada mediante el sistema.");
        	SendClientMessage(playerid, AmarilloClaro, "[COMANDOS] (/f)amilia para comunicarte por canal OOC con todos los miembros de la facción.");
            SendClientMessage(playerid, AmarilloClaro, "[COMANDOS] /miembros para ver los jugadores en línea pertenencientes a tu facción.");
        	return 1;
		}
		if(JugadorInfo[playerid][pFaccion] == 4) //LSN
		{
        	SendClientMessage(playerid, AmarilloClaro, "[COMANDOS] /togfam /miembros /ap /transmitir /noticia /directo /directoff /estudio /offestudio /reclutar /promover /expulsar");
        	return 1;
		}
		if(FamiliaInfo[JugadorInfo[playerid][pFaccion]][fTipo] == 3 || FamiliaInfo[JugadorInfo[playerid][pFaccion]][fTipo] == 4) //Banda/pandilla
		{
		    SendClientMessage(playerid, AmarilloClaro, "[SISTEMA DE FAMILIAS] (/f)amilia para comunicarte por canal OOC con todos los miembros de la facción.");
            SendClientMessage(playerid, AmarilloClaro, "[SISTEMA DE FAMILIAS] /miembros para ver los jugadores en línea pertenencientes a tu facción.");
			return 1;
		}
	}
	return 1;
}
if(strcmp(cmd, "/ayudatrabajo", true) == 0)
{
	if(JugadorInfo[playerid][pTrabajo] != 0)
	{
	    SendClientMessage(playerid, Naranja, "|______________________________________ MENÚ DE AYUDA TRABAJO ______________________________________|");
        if(JugadorInfo[playerid][pTrabajo] == 1) //Pizzero
        {
            SendClientMessage(playerid, AmarilloClaro, "[PIZZERO] '/trabajar' para comenzar a repartir pizzas en casas aleatorias. (cerca del pickup amarillo).");
            SendClientMessage(playerid, AmarilloClaro, "[PIZZERO] '/dejartrabajo' si cumpliste las 6 horas de contrado y quieres dejar de ser empleado.");
	        return 1;
        }
        if(JugadorInfo[playerid][pTrabajo] == 3) //Camionero
        {
            SendClientMessage(playerid, AmarilloClaro, "[CAMIONERO] '/trabajar' para comenzar a repartir pizzas en casas aleatorias. (cerca del pickup amarillo).");
			SendClientMessage(playerid, AmarilloClaro, "[CAMIONERO] '/cargo comprar' en la flecha blanca para comprar tus cajas de reparto.");
            SendClientMessage(playerid, AmarilloClaro, "[CAMIONERO] '/cargo vender' en el punto marcado para vender tus cajas disponibles.");
            SendClientMessage(playerid, AmarilloClaro, "[CAMIONERO] El punto de venta se marcará luego de utilizar '/cargo comprar' en tu radar.");
	        return 1;
        }
        if(JugadorInfo[playerid][pTrabajo] == 6) //Taxista
        {
            SendClientMessage(playerid, AmarilloClaro, "[TAXISTA] '/trabajar' para comenzar a usar los comandos de nuestro trabajo.");
            SendClientMessage(playerid, AmarilloClaro, "[TAXISTA] '/taxi' para dar inicio y establecer la tarifa. (se mostrará a todos los jugadores.)");
            SendClientMessage(playerid, AmarilloClaro, "[TAXISTA] '/llevartaxi' para atender una llamada que se recibió en la central.");
	        SendClientMessage(playerid, AmarilloClaro, "[TAXISTA] '/dejartrabajo' si cumpliste las 6 horas de contrado y quieres dejar de ser empleado.");
	        return 1;
        }
        if(JugadorInfo[playerid][pTrabajo] == 7) //Mecánico
        {
            SendClientMessage(playerid, AmarilloClaro, "[MECÁNICO] '/trabajar' para comenzar a usar los comandos de nuestro trabajo.");
            SendClientMessage(playerid, AmarilloClaro, "[MECÁNICO] '/reparar' para la reparación del vehículo. (el cliente debe estar montado en su coche.)");
            SendClientMessage(playerid, AmarilloClaro, "[MECÁNICO] '/repintar' para pintar un vehículo. (el cliente debe estar montado en su coche.)");
            SendClientMessage(playerid, AmarilloClaro, "[MECÁNICO] '/remolcar' para enganchar a la grua un vehículo. (el abuso del comando se puede sancionar con bloqueo.)");
	        return 1;
        }
        if(JugadorInfo[playerid][pTrabajo] == 8) //Ladrón
        {
            SendClientMessage(playerid, AmarilloClaro, "[LADRÓN] '/delincuente' para mostrar si tienes la habilidad suficiente para robar.");
            SendClientMessage(playerid, AmarilloClaro, "[LADRÓN] '/secuestrar' para mostrar si tienes la habilidad suficiente para sucuestrar otros jugadores.");
            SendClientMessage(playerid, AmarilloClaro, "[LADRÓN] '/forzar' para hacer palanca a las puertas negocios/casas. Esto dará inicio a un robo.");
            SendClientMessage(playerid, AmarilloClaro, "[LADRÓN] '/robar' para hurtar dinero en propiedades. Esto dará un aviso automáticamente a la PD.");
			SendClientMessage(playerid, AmarilloClaro, "[LADRÓN] '/puntear' para comenzar a hacer puente a un vehículo. (deberás tener herramientas en mano.)");
            SendClientMessage(playerid, AmarilloClaro, "[LADRÓN] '/desguazar' para vender el vehícuo que has robado. La ubicación es enviada automáticamente.");
	        return 1;
        }
        if(JugadorInfo[playerid][pTrabajo] == 12) //Camello
        {
	        SendClientMessage(playerid, AmarilloClaro, "[COMANDOS] /comprarproductos, /verproductos, /misdrogas, /venderdroga");
	        return 1;
        }
	}
	return 1;
}

if(strcmp(cmd, "/ayudadrogas", true) == 0)
{
	SendClientMessage(playerid, Naranja, "|___________________________________________ MENÚ DE AYUDA DROGAS ___________________________________________|");
	SendClientMessage(playerid, AmarilloClaro, "[COMANDOS] /consumir, /plantar, /recogerplanta, /eliminarplanta, /preparar, /fardo");
	return 1;
}

if(strcmp(cmd, "/ayudapesca", true) == 0)
{
	SendClientMessage(playerid, Naranja, "|___________________________________________ MENÚ DE AYUDA PESCA ___________________________________________|");
	SendClientMessage(playerid, AmarilloClaro, "[SISTEMA DE PESCA] /pescar (debe ser utilizado en el muelle de Santa Maria Beach).");
	SendClientMessage(playerid, AmarilloClaro, "[SISTEMA DE PESCA] /venderpeces (venderá la cantidad de peces según su peso en el punto de venta de O. Docks).");
	SendClientMessage(playerid, AmarilloClaro, "[SISTEMA DE PESCA] El punto de venta se marcará al utilizar /venderpeces durante unos segundos.");
	return 1;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
if(strcmp(cmd, "/cargo", true) == 0)
{
    if(JugadorInfo[playerid][pTrabajo] != 3){return 1;}
    new opcion[128];
    opcion = strtok(cmdtext, idx);
    if(!strlen(opcion))
    {
        SendClientMessage(playerid, COLOR_YELLOW, "USO: /cargo [comprar/vender]");
        return 1;
    }
    if(strcmp(opcion,"comprar",true) == 0)
    {
        if(!IsPlayerInRangeOfPoint(playerid,1.5,2348.0203,-2302.1589,13.5469)) {return SendClientMessage(playerid, Rojo, "No estás en el punto de compra del depósito de O. Docks."), 1;}
		ComproCajas[playerid] = 1;
		new precio = 100, objeto = 177;
		if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "¡No tienes dinero suficiente!"); return 1;}
		if(JugadorInfo[playerid][pManoDer] != 0){SendClientMessage(playerid, Rojo, "Tienes la mano derecha ocupada, se necesitan ambas."); return 1;}
		if(JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes la mano izquierda ocupada, se necesitan ambas."); return 1;}
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
		PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];
		GivePlayerMoneyAC(playerid, -precio);
		SetPlayerCheckpoint(playerid, 2810.6602,894.2064,10.7360, 6.0); // Cambiar.
		CargasTotal--;
		format(string, sizeof(string), "[{fdfe8b}CAJAS{FFFFFF}]\n{FFCC99}Stock: %d/100\n{33AA33}(( /cargo comprar ))\n{b0b0b0}Precio: 100$ c/u", CargasTotal);
		UpdateDynamic3DTextLabelText(compra, -1, string);
    }
    if(strcmp(opcion,"vender",true) == 0)
    {
        if(!IsPlayerInRangeOfPoint(playerid,1.5,2813.7825,891.6566,10.7578)) {return SendClientMessage(playerid, Rojo, "No estás en el punto de venta del depósito de carga de LV."), 1;}
        if(JugadorInfo[playerid][pManoDer] != 177){SendClientMessage(playerid, Rojo, "No tienes una caja para vender en el depósito."); return 1;}
		if(CargasTotalVendidas >= 300) {return SendClientMessage(playerid, Rojo, "El depósito no tiene más espacios para guardar cajas."), 1;}
        GivePlayerMoneyAC(playerid, 420);
        JugadorInfo[playerid][pManoDer] = 0;
		JugadorInfo[playerid][pManoDerCant] = 0;
		RemovePlayerAttachedObject(playerid, 1);
		CargasTotalVendidas++;
		SetPlayerSpecialAction(playerid, 0);
		
		format(string, sizeof(string), "[{fdfe8b}CAJAS{FFFFFF}]\n{FFCC99}Stock: %d/300\n{33AA33}(( /cargo vender ))\n{b0b0b0}Precio: 420$ c/u", CargasTotalVendidas);
		UpdateDynamic3DTextLabelText(venta, -1, string);
	}
	return 1;
}

if(strcmp(cmd, "/maletin", true) == 0)
{
    new opcion[128];
    opcion = strtok(cmdtext, idx);
    if(!strlen(opcion))
    {
        SendClientMessage(playerid, COLOR_YELLOW, "USO: /maletin [meter/sacar]");
        return 1;
    }
    if(JugadorInfo[playerid][pManoDer] != 176) {return 1;}
    if(strcmp(opcion,"meter",true) == 0)
    {
	   	tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_YELLOW, "USO: /maletin meter [dinero]");
			return 1;
		}
		new dinero = strval(tmp);
		if(dinero < 1 || dinero > 100000){SendClientMessage(playerid, Rojo, "La cantidad solo puede estar entre 1$ y 100,000$."); return 1;}
		JugadorInfo[playerid][pManoDerCant] += dinero;
		AutoRol(playerid, "mete dinero al maletín cuero.");
		format(string, sizeof(string), "¡Has guardado un monto de %d$ en tu maletín cuero!", dinero);
		SendClientMessage(playerid, COLOR_GREEN2, string);
		GivePlayerMoneyAC(playerid, -dinero);
    }
    if(strcmp(opcion,"sacar",true) == 0)
    {
        tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_YELLOW, "USO: /maletin sacar [dinero]");
			return 1;
		}
		new dinero = strval(tmp);
		if(dinero < 1 || dinero > 100000){SendClientMessage(playerid, Rojo, "La cantidad solo puede estar entre 1$ y 100,000$."); return 1;}
		JugadorInfo[playerid][pManoDerCant] -= dinero;
		AutoRol(playerid, "saca dinero al maletín cuero.");
		format(string, sizeof(string), "¡Has sacado un monto de %d$ en tu maletín cuero!", dinero);
		SendClientMessage(playerid, COLOR_GREEN2, string);
		GivePlayerMoneyAC(playerid, dinero);
    }
	return 1;
}

if(strcmp(cmd, "/borrarcp", true) == 0)
{
    DisablePlayerCheckpoint(playerid);
    SendClientMessage(playerid, -1, "Borraste tu checkpoint");
	return 1;
}

if(strcmp(cmd, "/peaje", true) == 0)
{
	if(JugadorInfo[playerid][pServicioPD] > 0 || JugadorInfo[playerid][pServicioFD] > 0 || JugadorInfo[playerid][pServicioMD] > 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid,6.0,48.6433,-1538.4159,4.7731))
	    {
	        SendClientMessage(playerid, COLOR_GREEN, "Eres miembro de un departamento del estado. El peaje se abre sin costo alguno.");
	        SendClientMessage(playerid, AmarilloClaro, "La barrera del peaje se cerrará automáticamente en 3 segundos.");
	        MoveDynamicObject(Peaje[0], 50.51134, -1534.63757, 4.72510, 0.025, 0.00000, -21.0000, 82.1201); // Se abre
	        SetTimer("CerrarPeaje0", 2700, false);
	    }
		else if(IsPlayerInRangeOfPoint(playerid,6.0,57.4437,-1525.3391,4.5983))
		{
		    SendClientMessage(playerid, COLOR_GREEN, "Eres miembro de un departamento del estado. El peaje se abre sin costo alguno.");
		    SendClientMessage(playerid, AmarilloClaro, "La barrera del peaje se cerrará automáticamente en 3 segundos.");
	        MoveDynamicObject(Peaje[1], 51.38313, -1528.17712, 4.72510, 0.025, 0.00000, 21.0000, 81.00000); // Se abre
	        SetTimer("CerrarPeaje1", 2700, false);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid,9.0,2876.2002,-803.6111,10.4886))
		{
		    SendClientMessage(playerid, COLOR_GREEN, "Eres miembro de un departamento del estado. El peaje se abre sin costo alguno.");
		    SendClientMessage(playerid, AmarilloClaro, "La barrera del peaje se cerrará automáticamente en 3 segundos.");
	        MoveDynamicObject(Peaje[2], 2879.31592, -800.00293, 10.55326, 0.025, 0.00000, 0, 0.00000);
	        SetTimer("CerrarPeaje2", 2700, false);
	    }
	    
	    else if(IsPlayerInRangeOfPoint(playerid,9.0,2842.5164,-803.1259,10.5373))
		{
		    SendClientMessage(playerid, COLOR_GREEN, "Eres miembro de un departamento del estado. El peaje se abre sin costo alguno.");
		    SendClientMessage(playerid, AmarilloClaro, "La barrera del peaje se cerrará automáticamente en 3 segundos.");
	        MoveDynamicObject(Peaje[3], 2839.97876, -799.64868, 10.63055, 0.025, 0.00000, 0.00000, 0.00000);
	        SetTimer("CerrarPeaje3", 2700, false);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid,9.0,2892.7546,-803.6655,10.4874))
		{
		    SendClientMessage(playerid, COLOR_GREEN, "Eres miembro de un departamento del estado. El peaje se abre sin costo alguno.");
		    SendClientMessage(playerid, AmarilloClaro, "La barrera del peaje se cerrará automáticamente en 3 segundos.");
	        MoveDynamicObject(Peaje[4], 2889.98730, -799.98901, 10.63055, 0.025, 0.00000, 0.00000, 0.00000);
	        SetTimer("CerrarPeaje4", 2700, false);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid,9.0,1707.3660,401.1885,30.2143))
		{
		    SendClientMessage(playerid, COLOR_GREEN, "Eres miembro de un departamento del estado. El peaje se abre sin costo alguno.");
		    SendClientMessage(playerid, AmarilloClaro, "La barrera del peaje se cerrará automáticamente en 3 segundos.");
	        MoveDynamicObject(Peaje[5], 1712.20898, 404.11877, 30.36735, 0.025, 0.00000, 0.00000, -18.24000);
	        SetTimer("CerrarPeaje5", 2700, false);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid,9.0,1690.8159,418.1933,30.6984))
		{
		    SendClientMessage(playerid, COLOR_GREEN, "Eres miembro de un departamento del estado. El peaje se abre sin costo alguno.");
		    SendClientMessage(playerid, AmarilloClaro, "La barrera del peaje se cerrará automáticamente en 3 segundos.");
	        MoveDynamicObject(Peaje[6], 1686.43152, 415.80704, 30.42270, 0.025,  0.00000, 90.00000, -18.84000);
	        SetTimer("CerrarPeaje6", 2700, false);
	    }
	}
	else
	{
	    if(Cerrados == 1) { return SendClientMessage(playerid, COLOR_ROJO, "Los peajes están cerrados"), 1;}
        if(GetPlayerMoney(playerid) < 12){SendClientMessage(playerid, COLOR_ROJO, "El peaje tiene un valor de 12$"); return 1;}
	    if(IsPlayerInRangeOfPoint(playerid,6.0,48.6433,-1538.4159,4.7731))
	    {
		    GivePlayerMoneyAC(playerid, -12);
	        AutoRol(playerid, "inserta unas monedas en el peaje.");
	        MoveDynamicObject(Peaje[0], 50.51134, -1534.63757, 4.72510, 0.025, 0.00000, -21.0000, 82.1201); // Se abre
	        SetTimer("CerrarPeaje0", 2700, false);
	    }
		else if(IsPlayerInRangeOfPoint(playerid,6.0,57.4437,-1525.3391,4.5983))
	    {
		    GivePlayerMoneyAC(playerid, -12);
	        AutoRol(playerid, "inserta unas monedas en el peaje.");
	        MoveDynamicObject(Peaje[1], 51.38313, -1528.17712, 4.72510, 0.025, 0.00000, 21.0000, 81.00000); // Se abre
	        SetTimer("CerrarPeaje1", 2700, false);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid,9.0,2876.2002,-803.6111,10.4886))
		{
		    GivePlayerMoneyAC(playerid, -12);
	        AutoRol(playerid, "inserta unas monedas en el peaje.");
	        MoveDynamicObject(Peaje[2], 2879.31592, -800.00293, 10.55326, 0.025, 0.00000, 0, 0.00000);
	        SetTimer("CerrarPeaje2", 2700, false);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid,9.0,2842.5164,-803.1259,10.5373))
		{
		    GivePlayerMoneyAC(playerid, -12);
	        AutoRol(playerid, "inserta unas monedas en el peaje.");
	        MoveDynamicObject(Peaje[3], 2839.97876, -799.64868, 10.63055, 0.025, 0.00000, 0.00000, 0.00000);
	        SetTimer("CerrarPeaje3", 2700, false);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid,9.0,2892.7546,-803.6655,10.4874))
		{
		    GivePlayerMoneyAC(playerid, -12);
	        AutoRol(playerid, "inserta unas monedas en el peaje.");
	        MoveDynamicObject(Peaje[4], 2889.98730, -799.98901, 10.63055, 0.025, 0.00000, 0.00000, 0.00000);
	        SetTimer("CerrarPeaje4", 2700, false);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid,9.0,1707.3660,401.1885,30.2143))
		{
		    GivePlayerMoneyAC(playerid, -12);
	        AutoRol(playerid, "inserta unas monedas en el peaje.");
	        MoveDynamicObject(Peaje[5], 1712.20898, 404.11877, 30.36735, 0.025, 0.00000, 0.00000, -18.24000);
	        SetTimer("CerrarPeaje5", 2700, false);
	    }
	    else if(IsPlayerInRangeOfPoint(playerid,9.0,1690.8159,418.1933,30.6984))
		{
		    GivePlayerMoneyAC(playerid, -12);
	        AutoRol(playerid, "inserta unas monedas en el peaje.");
	        MoveDynamicObject(Peaje[6], 1686.43152, 415.80704, 30.42270, 0.025,  0.00000, 0.00000, -18.84000);
	        SetTimer("CerrarPeaje6", 2700, false);
	    }
	}
	return 1;
}

if(strcmp(cmd, "/peajes", true) == 0) //Ir a un sitio concreto
{
    new opcion[128];
    opcion = strtok(cmdtext, idx);
    if(!strlen(opcion))
    {
        SendClientMessage(playerid, COLOR_YELLOW, "USO: /peajes [verificar/bloquear/desbloquear]");
        return 1;
    }
    if(strcmp(opcion,"verificar",true) == 0)
    {
        if(Cerrados == 1) { SendClientMessage(playerid, -1, "Los peajes se encuentran cerrados. (/peajes desbloquear)"); }
		else SendClientMessage(playerid, -1, "Los peajes se encuentran abiertos y funcionando. (/peajes bloquear)");
	    return 1;
    }
    if(strcmp(opcion,"bloquear",true) == 0)
    {
        if(Cerrados == 1) { return SendClientMessage(playerid, COLOR_ROJO, "Los peajes están cerrados"), 1;}
        Cerrados = 1;
        format(string, sizeof(string), "[CENTRAL]: Los peajes han sido bloqueados por orden de %s.", NombreJugador(playerid));
        SendRadioMessage(1, COLOR_RADIO, string);
        return 1;
    }
    if(strcmp(opcion,"desbloquear",true) == 0)
    {
        if(Cerrados == 0) { return SendClientMessage(playerid, COLOR_ROJO, "Los peajes están abiertos"), 1;}
        Cerrados = 0;
        format(string, sizeof(string), "[CENTRAL]: Los peajes han sido desbloqueados por orden de %s.", NombreJugador(playerid));
        SendRadioMessage(1, COLOR_RADIO, string);
        return 1;
    }
	return 1;
}

//-------------------------------- CAMELLO ----------------------------------------------------------------------

if(strcmp(cmd, "/verproductos", true) == 0)
{
	if(JugadorInfo[playerid][pTrabajo] != 12) {return 1;}
	format(string, sizeof(string), "Tienes %d productos.", JugadorInfo[playerid][pProductos]);
	SendClientMessage(playerid, COLOR_GREEN, string);
	return 1;
}

if(strcmp(cmd, "/comprarproductos", true) == 0)
{
	new tieneahora;
	if(JugadorInfo[playerid][pTrabajo] != 12) {return 1;}
	if(!IsPlayerInRangeOfPoint(playerid, 2.0, 2472.2256,-956.7034,80.1299))
	{
	    SetPlayerCheckpoint(playerid, 2472.2256,-956.7034,80.1299, 2.0);
		SendClientMessage(playerid, COLOR_ROJO, "No estás en el lugar indicado");
		return 1;
	}
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /comprarproductos [cantidad] | El valor de cada producto es de 100$.");
        return 1;
    }
    new Cantidad = strval(tmp);
    if(Cantidad < 0){return 1;}
    if(GetPlayerMoney(playerid) < (Cantidad*100)){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
	tieneahora = JugadorInfo[playerid][pProductos]+Cantidad;
	if(tieneahora >= 500){SendClientMessage(playerid, COLOR_ROJO, "No puedes tener más de 500 productos"); return 1;}
	format(string, sizeof(string), "Compraste %d productos por el precio total de %d$", Cantidad, Cantidad*100);
	SendClientMessage(playerid, COLOR_GREEN2, string);
	GivePlayerMoney(playerid, -Cantidad*100);
	JugadorInfo[playerid][pProductos] += Cantidad;
	return 1;
}

if(strcmp(cmd, "/misdrogas", true) == 0)
{
	new Productos = JugadorInfo[playerid][pProductos];
	if(JugadorInfo[playerid][pTrabajo] != 12) {return 1;}
	SendClientMessage(playerid, COLOR_GREEN2, "Drogas disponibles:");
	if(Productos >= 5) { SendClientMessage(playerid, COLOR_YELLOW, "Bolsita marihuana (Id: 1) (min: 500$) (5 productos.)"); }
	if(Productos >= 9) { SendClientMessage(playerid, COLOR_YELLOW, "Bolsita cocaína (Id: 2) (min: 900$) (9 productos.)"); }
	if(Productos >= 9) { SendClientMessage(playerid, COLOR_YELLOW, "Bolsita crack (Id: 3) (min: 900$) (9 productos.)"); }
	if(Productos >= 9) { SendClientMessage(playerid, COLOR_YELLOW, "Bolsita heroína (Id: 4) (min: 900$) (9 productos.)"); }
	if(Productos >= 9) { SendClientMessage(playerid, COLOR_YELLOW, "Bolsita LSD (Id: 5) (min: 900$) (9 productos.)"); }
	if(Productos >= 30) { SendClientMessage(playerid, COLOR_YELLOW, "Fardo marihuana (Id: 6) (min: 3000$) (30 productos.)"); }
	if(Productos >= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Fardo cocaína (Id: 7) (min: 5000$) (50 productos.)"); }
	if(Productos >= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Fardo crack (Id: 8) (min: 5000$) (50 productos.)"); }
	if(Productos >= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Fardo heroína (Id: 9) (min: 5000$) (50 productos.)"); }
	if(Productos >= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Fardo LSD (Id: 10) (min: 5000$) (50 productos.)"); }
	return 1;
}

if(strcmp(cmd, "/venderdroga", true) == 0)
{
	if(JugadorInfo[playerid][pTrabajo] != 12) {return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Gris, "USO: /venderdroga [IdJugador/ParteDelNombre] [IdDroga] [PrecioDroga]");
		return 1;
	}
    playerid2 = ReturnUser(tmp);
	if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
	if(playerid == playerid2){SendClientMessage(playerid,COLOR_ROJO,"No te puedes vender a tí"); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Gris, "USO: /venderdroga [IdJugador/ParteDelNombre] [IdDroga] [PrecioDroga]");
		return 1;
	}
	new iddroga = strval(tmp);
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Gris, "USO: /venderdroga [IdJugador/ParteDelNombre] [IdDroga] [PrecioDroga]");
		return 1;
	}
	new preciodroga = strval(tmp);
	
	if(iddroga == 1 && preciodroga < 500) { format(string, 128, "El valor de %s debe ser mínimo 500$", NombreDroga(iddroga)); SendClientMessage(playerid, COLOR_ROJO, string); return 1; }
	if(iddroga == 2 && preciodroga < 900) { format(string, 128, "El valor de %s debe ser mínimo 900$", NombreDroga(iddroga)); SendClientMessage(playerid, COLOR_ROJO, string); return 1; }
	if(iddroga == 3 && preciodroga < 900) { format(string, 128, "El valor de %s debe ser mínimo 900$", NombreDroga(iddroga)); SendClientMessage(playerid, COLOR_ROJO, string); return 1; }
	if(iddroga == 4 && preciodroga < 900) { format(string, 128, "El valor de %s debe ser mínimo 900$", NombreDroga(iddroga)); SendClientMessage(playerid, COLOR_ROJO, string); return 1; }
	if(iddroga == 5 && preciodroga < 900) { format(string, 128, "El valor de %s debe ser mínimo 900$", NombreDroga(iddroga)); SendClientMessage(playerid, COLOR_ROJO, string); return 1; }
	if(iddroga == 6 && preciodroga < 3000) { format(string, 128, "El valor de %s debe ser mínimo 3000$", NombreDroga(iddroga)); SendClientMessage(playerid, COLOR_ROJO, string); return 1; }
	if(iddroga == 7 && preciodroga < 5000) { format(string, 128, "El valor de %s debe ser mínimo 5000$", NombreDroga(iddroga)); SendClientMessage(playerid, COLOR_ROJO, string); return 1; }
	if(iddroga == 8 && preciodroga < 5000) { format(string, 128, "El valor de %s debe ser mínimo 5000$", NombreDroga(iddroga)); SendClientMessage(playerid, COLOR_ROJO, string); return 1; }
	if(iddroga == 9 && preciodroga < 5000) { format(string, 128, "El valor de %s debe ser mínimo 5000$", NombreDroga(iddroga)); SendClientMessage(playerid, COLOR_ROJO, string); return 1; }
	if(iddroga == 10 && preciodroga < 5000) { format(string, 128, "El valor de %s debe ser mínimo 5000$", NombreDroga(iddroga)); SendClientMessage(playerid, COLOR_ROJO, string); return 1; }

	DrogaOferta[playerid2] = iddroga;
	PrecioOferta[playerid2] = preciodroga;
	Camello[playerid2] = playerid;
	
	format(string, 128, "El camello %s te ofrece %s a %d$, utiliza /aceptar droga.", NombreJugadorProxy(playerid), NombreDroga(DrogaOferta[playerid2]), PrecioOferta[playerid2]);
	SendClientMessage(playerid2, COLOR_GREEN2, string);
	SendClientMessage(playerid, Azulito, "Oferta enviada, espera a que responda");
	return 1;
}

//---------------------------------------------------------------------------------------------------------------



if(strcmp(cmd, "/mostrar", true) == 0) //Mostrar documentación IC
{
    new opcion[128];
    opcion = strtok(cmdtext, idx);
    if(!strlen(opcion))
    {
        SendClientMessage(playerid, Gris, "USO: /mostrar [opción] [IdJugador/ParteDelNombre]");
        SendClientMessage(playerid, -1, "DNI, Licencias, PapelesCoche, Placa");
        return 1;
    }
    if(strcmp(opcion,"DNI",true) == 0)
    {
        tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /mostrar DNI [IdJugador/ParteDelNombre]");
	        return 1;
	    }
	    playerid2 = ReturnUser(tmp);
	    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
	    if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "Demasiado lejos."); return 1;}
	    format(string, sizeof(string), "%s saca su identificación y se la muestra a %s.", NombreJugadorProxy(playerid), NombreJugadorProxy(playerid2));
 	    ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);

 	    format(string, sizeof(string), "|_______ DNI de %s _______|", JugadorInfo[playerid][pNombre]);
 	    SendClientMessage(playerid2, Verde, string);
 	    format(string, sizeof(string), "| Nombre: %s", JugadorInfo[playerid][pNombre]);
 	    SendClientMessage(playerid2, COLOR_YELLOW, string);
 	    format(string, sizeof(string), "| N° de identificación: %d", JugadorInfo[playerid][pEdad]+JugadorInfo[playerid][pSQLID]+143129);
 	    SendClientMessage(playerid2, COLOR_YELLOW, string);
 	    format(string, sizeof(string), "| Edad: %d", JugadorInfo[playerid][pEdad]);
 	    SendClientMessage(playerid2, COLOR_YELLOW, string);
 	    new sexo[30];
 	    if(JugadorInfo[playerid][pSexo] == 2) sexo = "Femenina";
 	    else sexo = "Masculina";
 	    format(string, sizeof(string), "| Sexualidad: %s", sexo);
 	    SendClientMessage(playerid2, COLOR_YELLOW, string);

        return 1;
    }
    if(strcmp(opcion,"Licencias",true) == 0)
    {
        tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /Mostrar Licencias [IdJugador/ParteDelNombre]");
	        return 1;
	    }
	    playerid2 = ReturnUser(tmp);
	    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
	    if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "Demasiado lejos."); return 1;}
	    format(string, sizeof(string), "muestra sus licencias a %s.", NombreJugadorProxy(playerid2));
 	    AutoRol(playerid, string);

 	    format(string, sizeof(string), "|________ Licencias de %s ________|", JugadorInfo[playerid][pNombre]);
 	    SendClientMessage(playerid2, Verde, string);
		if(JugadorInfo[playerid][pLicConduccion] == 1)
		{
		    format(string, 128, "| Licencia de conducción (%d puntos.)", JugadorInfo[playerid][pPuntosConduccion]);
 	    	SendClientMessage(playerid2, COLOR_YELLOW, string);
		}
		if(JugadorInfo[playerid][pLicAviacion] == 1)
		{
 	    	SendClientMessage(playerid2, COLOR_YELLOW, "| Licencia de aviación");
		}
		if(JugadorInfo[playerid][pLicNavegacion] == 1)
		{
 	    	SendClientMessage(playerid2, COLOR_YELLOW, "| Licencia de navegación");
		}
		if(JugadorInfo[playerid][pLicCaza] == 1)
		{
 	    	SendClientMessage(playerid2, COLOR_YELLOW, "| Licencia de caza");
		}
		if(JugadorInfo[playerid][pLicPesca] == 1)
		{
 	    	SendClientMessage(playerid2, COLOR_YELLOW, "| Licencia de pesca");
		}
		if(JugadorInfo[playerid][pLicArmas] == 1)
		{
 	    	SendClientMessage(playerid2, COLOR_YELLOW, "| Licencia de armas");
		}
        return 1;
    }
    if(strcmp(opcion,"PapelesCoche",true) == 0)
    {
        tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /Mostrar PapelesCoche [IdJugador/ParteDelNombre]");
	        return 1;
	    }
	    playerid2 = ReturnUser(tmp);
	    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
	    if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "Demasiado lejos."); return 1;}
	    format(string, sizeof(string), "muestra los papeles de sus coches a %s.", NombreJugadorProxy(playerid2));
 	    AutoRol(playerid, string);
        format(string, sizeof(string), "|_____________ Papeles de coches de %s _____________|", JugadorInfo[playerid][pNombre]);
 	    SendClientMessage(playerid2, Verde, string);
		for(new x=0; x<5; x++)
		{
		    if(JugadorInfo[playerid][pLlaveCoche][x] != 0)
		    {
		    	new carid, string2[250];
		        for(new c=MAX_VEHPUBLICO; c<=TotalVeh; c++)
		        {
		            if(CocheInfo[c][cLlave] == JugadorInfo[playerid][pLlaveCoche][x]){carid = c; break;}
		        }
		        format(string2, sizeof(string2), "| Matrícula: SA-%d, Modelo: %s, Propietario: %s, Valor: %d$", JugadorInfo[playerid][pLlaveCoche][x], CocheInfo[carid][cNombreModelo], CocheInfo[carid][cDueno], CocheInfo[carid][cValor]);
		        SendClientMessage(playerid2, COLOR_YELLOW, string2);
		    }
		}
        return 1;
    }
    if(strcmp(opcion,"Placa",true) == 0)
    {
        if(JugadorInfo[playerid][pFaccion] == 4 || (JugadorInfo[playerid][pFaccion] < 1 && JugadorInfo[playerid][pFaccion] > 5)){SendClientMessage(playerid, Rojo, "¡No tienes placa!"); return 1;}
        tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
	    {
	        SendClientMessage(playerid, Gris, "USO: /Mostrar Placa [IdJugador/ParteDelNombre]");
	        return 1;
	    }
	    playerid2 = ReturnUser(tmp);
	    if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
	    if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "Demasiado lejos."); return 1;}
	    format(string, sizeof(string), "muestra su placa a %s.", NombreJugadorProxy(playerid2));
 	    AutoRol(playerid, string);
        switch(JugadorInfo[playerid][pFaccion])
 	    {
 	        case 1:
	 	    {
	 	    	SendClientMessage(playerid2, COLOR_ROJO, "** Cuerpo: Los Santos Police Department");
	 	    }
	 	    case 2:
	 	    {
	 	    	SendClientMessage(playerid2, COLOR_ROJO, "** Cuerpo: Los Santos Fire Department");
	 	    }
	 	    case 3:
	 	    {
	 	    	SendClientMessage(playerid2, COLOR_ROJO, "** Cuerpo: Los Santos Government");
	 	    }
	 	    case 5:
	 	    {
	 	    	SendClientMessage(playerid2, COLOR_ROJO, "** Cuerpo: San Andreas National Guard");
	 	    }
   		}
        format(string, sizeof(string), "** Rango: %s", Rango(playerid));
 	    SendClientMessage(playerid2, COLOR_ROJO, string);

 	    format(string, sizeof(string), "** Nº Placa: %d", JugadorInfo[playerid][pSQLID]+57911);
 	    SendClientMessage(playerid2, COLOR_ROJO, string);
 	    if(JugadorInfo[playerid][pServicioPD] > 0 || JugadorInfo[playerid][pServicioFD] > 0)
 	    {
 	        SendClientMessage(playerid2, COLOR_ROJO, "** Se encuentra de servicio");
 	    }
 	    else SendClientMessage(playerid2, COLOR_ROJO, "** No se encuentra de servicio");
 	    format(string, sizeof(string), "%s te ha mostrado su placa.", NombreJugadorProxy(playerid));
 	    SendClientMessage(playerid2, Azulito, string);
        return 1;
    }
    else
    {
        SendClientMessage(playerid, Gris, "USO: /mostrar [Opción] [IdJugador/ParteDelNombre]");
        SendClientMessage(playerid, -1, "DNI, Licencias, PapelesCoche, Placa");
    }
    return 1;
}


//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/autoreparar", true) == 0) //Repararse automáticamente un vehículo en el taller
{
	if(!GetPlayerVehicleID(playerid)){return 1;}
	if(SiendoReparado[playerid] == 1){SendClientMessage(playerid, Rojo, "Tu vehículo está siendo reparado, espera a que terminen."); return 1;}
    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1911.1561,-1776.7548,13.1049) || IsPlayerInRangeOfPoint(playerid, 5.0, 1017.7750,-917.8127,42.0641) || IsPlayerInRangeOfPoint(playerid, 5.0, 1715.4421,-1101.9237,23.8213))
	{
		new haymecanicos;
		for(new x=0; x<MAX_PLAYERS; x++)
		{
		    if(JugadorInfo[x][pTrabajo] == 7) haymecanicos ++;
		    if(haymecanicos >= 3) break;
		}
		if(haymecanicos >= 3){SendClientMessage(playerid, Rojo, "No puedes usar el sistema ahora. Hay mecánicos de servicio."); return 1;}
		if(GetPlayerMoney(playerid) < 500){SendClientMessage(playerid, Rojo, "El reparado del vehículo requiere de quinientos dólares"); return 1;}

		new coche = GetPlayerVehicleID(playerid);
        new Float:cvida;
	    GetVehicleHealth(coche, cvida);
		if(MotorFeo[coche] == 1){SendClientMessage(playerid, Rojo, "¡El motor del vehículo está destrozado!, trato cancelado."); return 1;}
	    if(cvida < 600){SendClientMessage(playerid, Rojo, "¡El vehículo está demasiado dañado para ser limpiado!, trato cancelado."); return 1;}
	    new panels,doors,lights,tires;
		GetVehicleDamageStatus(coche,panels,doors,lights,tires);
		if(cvida == 1000 && panels == 0 && doors == 0 && lights == 0 && tires == 0){SendClientMessage(playerid, Rojo, "El vehículo está en perfecto estado."); return 1;}

		SendClientMessage(playerid, Naranja, "Te están reparando el vehículo. El proceso durará alrededor de 1 minuto. El precio es de 500$");
	    SiendoReparado[playerid] = 1;
		TogglePlayerControllable(playerid, 0);
        SetCameraBehindPlayer(playerid);
		SetTimerEx("Descongelar", 60000, false, "i", playerid);
		GameTextForPlayer(playerid, "~g~REPARANDO VEHICULO...!", 60000, 3);
		SetTimerEx("RepararMeca", 60000, false, "i d d", playerid, 4, coche);
	}
	else
	{
		SendClientMessage(playerid, Rojo, "No estás en el lugar indicado (lavados automovilísticos)");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/vm", true) == 0) //Comando ver matriculas de vehiculos
{
    if(MatriculasActivadas[playerid] == 0)
    {
        MatriculasActivadas[playerid] = 1;
        for(new i; i <= MAX_VEHPUBLICO; i++)
		{
			if(!IsValidVehicle(i))
			{
				continue;
			}
			format(string, sizeof(string), "SA-%d\nID: %d", 1000+i-MAX_VEHPUBLICO, i);
			MatriculasCoches[playerid][i] = CreatePlayer3DTextLabel(playerid, string, Aguamarina, 0.0, 0.0, 0.0, 10.0, -1, i);
		}
        for(new i = MAX_VEHPUBLICO+1; i < MAX_VEHICLES; i++)
		{
			if(!IsValidVehicle(i))
			{
				continue;
			}
			format(string, sizeof(string), "SA-%d\nID: %d", CocheInfo[i][cLlave], i);
			MatriculasCoches[playerid][i] = CreatePlayer3DTextLabel(playerid, string, Aguamarina, 0.0, 0.0, 0.0, 10.0, -1, i);
		}
		SendClientMessage(playerid, Amarillo, "Textos flotantes de matriculas activados.");
    }
    else
    {
        MatriculasActivadas[playerid] = 0;
        for(new i; i < MAX_VEHICLES; i++)
		{
			DeletePlayer3DTextLabel(playerid, MatriculasCoches[playerid][i]);
		}
		SendClientMessage(playerid, Amarillo, "Textos flotantes de matriculas desactivados.");
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/entrenar", true) == 0) //Comando para entrenar en gyms
{
    if(HaciendoPressBanca[playerid] == 1){return 1;}
    if(JugadorInfo[playerid][pCansancioEntrenar] > 0)
    {
        format(string, sizeof(string), "Tu personaje se encuentra cansado. Espera %d minutos para hacer ejercicio nuevamente.", JugadorInfo[playerid][pCansancioEntrenar]);
        SendClientMessage(playerid, COLOR_PIEL, string);
        return 1;
    }
    new opcion[25];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
		SendClientMessage(playerid, Gris, "USO: /entrenar <pressbanca>");
		return 1;
	}
	if(strcmp(opcion,"PressBanca",true) == 0)
	{
	    new DetectarPressBanca, banca;
		for(new x; x < sizeof(PressBancaPlayerPos); x++)
		{
			if(IsPlayerInRangeOfPoint(playerid, 2.0, PressBancaPlayerPos[x][0], PressBancaPlayerPos[x][1], PressBancaPlayerPos[x][2]))
			{
				DetectarPressBanca = 1;
				banca = x;
				DestroyDynamicObject(PressBancaBarraObjeto[x]);
				break;
			}
		}
		if(DetectarPressBanca == 0){return 1;}
		format(string, sizeof(string), "Comienzas a hacer pesas con %d Kilos. Presiona 'CTRL' rápidamente en 1 minuto. Para abandonar escribe /dentrenar.", JugadorInfo[playerid][pFuerza]*30);
	    SendClientMessage(playerid, COLOR_PIEL, string);
		HaciendoPressBanca[playerid] = 1;
		TogglePlayerControllable(playerid, 0);
		SetPlayerPos(playerid, PressBancaPlayerPos[banca][0], PressBancaPlayerPos[banca][1], PressBancaPlayerPos[banca][2]);
		SetPlayerFacingAngle(playerid, PressBancaPlayerPos[banca][3]);
		ApplyAnimation(playerid, "benchpress", "gym_bp_geton", 1, 0, 0, 0, 1, 0, 1);
		SetTimerEx("TimerEntrenar", 60000, false, "i, d", playerid, 1);
		SetPlayerAttachedObject(playerid, 5, 2913, 6);
		return 1;
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/dentrenar", true) == 0) //Comando para dejar de entrenar en gyms
{
    if(HaciendoPressBanca[playerid] == 0){SendClientMessage(playerid, Rojo, "No estás haciendo ningún tipo de ejercicio."); return 1;}
    TimerEntrenar(playerid, 1);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/extraerunidad", true) == 0) //Comando de cajas de armamentos
{
    if(!GetPlayerCajaArmamento(playerid, 1) && !GetPlayerCajaArmamento(playerid, 2)){SendClientMessage(playerid, Rojo, "No tienes una Caja en ninguna mano."); return 1;}
    if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Debes tener una mano vacía."); return 1;}
    if(GetPlayerCajaArmamento(playerid, 1)) //Caja de armamento en mano derecha
    {
        new objeto = GetPlayerCajaArmamento(playerid, 1);
        JugadorInfo[playerid][pManoDerCant] --;
        JugadorInfo[playerid][pManoIzq] = objeto, PonerObjeto(playerid, 2, objeto);
		JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];
		format(string, sizeof(string), "Extraes una unidad de %s de la caja", ObjetoInfo[objeto][NombreObjeto], JugadorInfo[playerid][pManoIzqCant]);
		SendClientMessage(playerid, COLOR_GREEN, string);
		return 1;
    }
    else if(GetPlayerCajaArmamento(playerid, 2)) //Caja de armamento en mano izquierda
    {
        new objeto = GetPlayerCajaArmamento(playerid, 2);
        JugadorInfo[playerid][pManoIzqCant] --;
        JugadorInfo[playerid][pManoDer] = objeto, PonerObjeto(playerid, 1, objeto);
        if(ObjetoInfo[objeto][IDArma] != 0)
        {
            GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]);
        }
		JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];
		format(string, sizeof(string), "Extraes una unidad de %s de la caja", ObjetoInfo[objeto][NombreObjeto], JugadorInfo[playerid][pManoIzqCant]);
		SendClientMessage(playerid, COLOR_GREEN, string);
		return 1;
    }
	return 1;
}

if(strcmp(cmd, "/meterunidad", true) == 0) //Comando de cajas de armamentos
{
    new objetocaja = GetPlayerCajaArmamento(playerid, 1);
    new objetomano = JugadorInfo[playerid][pManoIzq];
    if(!GetPlayerCajaArmamento(playerid, 1)) {SendClientMessage(playerid, Rojo, "Debes tener una caja en la mano derecha y el objeto en la mano izquierda."); return 1;}
    if(objetocaja == objetomano)
	{
	    if(JugadorInfo[playerid][pManoIzqCant] == ObjetoInfo[objetomano][Capacidad])
	    {
	        if(ObjetoInfo[JugadorInfo[playerid][pManoDer]][Capacidad] != JugadorInfo[playerid][pManoDerCant])
	    	{
	    	    RemovePlayerWeapon(playerid, ObjetoInfo[objetomano][IDArma]);
            	JugadorInfo[playerid][pManoDerCant] += 1; // Aumenta la capacidad de la caja
            	format(string, sizeof(string), "Metes una unidad de %s en la caja", ObjetoInfo[objetomano][NombreObjeto], JugadorInfo[playerid][pManoIzqCant]);
				SendClientMessage(playerid, COLOR_GREEN, string);
				RemovePlayerAttachedObject(playerid, 2);
			    JugadorInfo[playerid][pManoIzq] = 0;
			    JugadorInfo[playerid][pManoIzqCant] = 0;
			}
			else SendClientMessage(playerid, Rojo, "No hay espacio en la caja.");
	    }
	    else SendClientMessage(playerid, Rojo, "El objeto no tiene su capacidad máxima.");
	}
	else SendClientMessage(playerid, Rojo, "Debes tener una caja en la mano derecha y el objeto en la mano izquierda.");
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/minpayday", true) == 0) //Ver cuanto queda para el siguiente payday
{
	format(string, sizeof(string), "¡Te quedan %d minutos para tu payday!", 55-JugadorInfo[playerid][pMinPayDay]);
	SendClientMessage(playerid, Amarillo, string);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/hora", true) == 0) //Reporta a la administración
{
	if(JugadorInfo[playerid][pEncarcelado] > 0)
	{
		format(string, sizeof(string), "Tiempo de cárcel: %d minutos.", JugadorInfo[playerid][pTiempoCarcel]);
		SendClientMessage(playerid, AmarilloClaro, string);
	}
	if(GetPlayerReloj(playerid))
	{
		format(string, sizeof(string), "~w~%d:%d", Hour, Minute);
		GameTextForPlayer(playerid, string, 5000, 1);
		ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);
		format(string, sizeof(string), "mira la hora en su %s.", ObjetoInfo[GetPlayerReloj(playerid)][NombreObjeto]);
		AutoRol(playerid, string);
	}
	else
	{
	    if(GetPlayerTelefono(playerid))
		{
		    format(string, sizeof(string), "~w~%d:%d", Hour, Minute);
			GameTextForPlayer(playerid, string, 5000, 1);
			ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);
		 	AutoRol(playerid, "mira la hora en su teléfono móvil.");
		}
		else {return SendClientMessage(playerid, COLOR_ROJO, "No tienes nada para ver la hora."), 1; }
	}
	return 1;
}
// --------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/callsign", true) == 0)
{
	if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
    new veh = GetPlayerVehicleID(playerid);
    if(IsPlayerInAnyVehicle(playerid))
    {
        if(GetVehicleModel(veh) == 596 || GetVehicleModel(veh) == 597 || GetVehicleModel(veh) == 598 || GetVehicleModel(veh) == 599)
        {

            new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[150];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, Gris, "USO: /callsign [Ej: 1-ADAM-3]");
				return 1;
			}
	     	if(!veicolo_callsign_status[veh])
	        {
		        format(string,sizeof(string), "%s", result);
		        veicolo_callsign_testo[veh] = Create3DTextLabel(string, 0xFFFFFFFF, 0.0, 0.0, 0.0, 7.0, 0, 1);
		        Attach3DTextLabelToVehicle( veicolo_callsign_testo[veh], veh, -0.7, -2.8, -0.3);
		        veicolo_callsign_status[veh] = 1;
	        }
	        else
	        {
	        	Delete3DTextLabel(veicolo_callsign_testo[veh]);
	            veicolo_callsign_status[veh] = 0;
	            return 1;
			}
		}
		else SendClientMessage(playerid,Rojo,"No es un patrulla el vehículo.");
	}
 	else SendClientMessage(playerid,Rojo,"No te encuentras en un vehículo.");
 	return 1;
}
if(strcmp(cmd, "/borrarcallsign", true) == 0)
{
	new veh = GetPlayerVehicleID(playerid);
	if(IsPlayerInAnyVehicle(playerid))
    {
    	Delete3DTextLabel(veicolo_callsign_testo[veh]);
   		veicolo_callsign_status[veh] = 0;
    }
    else SendClientMessage(playerid,Rojo,"No te encuentras en un vehículo.");
    return 1;
}


//---------------------------------------------------------------------------------------------------------------
			
if(strcmp(cmd, "/anuncio", true) == 0)
{
	if(anunciotiempo > 0){SendClientMessage(playerid, Rojo, "Hay que esperar 2 minutos entre anuncios.");}
	if(IsPlayerInRangeOfPoint(playerid, 3.0, 1045.6129,51.5695,801.0356))
	{
	    if(GetPlayerMoney(playerid) < 301){SendClientMessage(playerid, Rojo, "El valor del anuncio es de 300$"); return 1;}
	    new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[150];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, Gris, "USO: /anuncio [texto]");
			return 1;
		}
		SendClientMessage(playerid, COLOR_YELLOW, "Envíaste un anuncio a la central de noticias, el costo total fué de 300$");
		
		
		if(strlen(result) > 90)
	    {
	        new text1[91],text2[91];

	        strmid(text2, result, 90, 128);
	        strmid(text1, result, 0, 90);
	        format(string, 128, "[ANUNCIO]: %s...", text1);
	        SendAnuncio(COLOR_VERDE, string);
	        format(string, 128, "%s", text2);
	        SendAnuncio(COLOR_VERDE, string);
	    }
	    else
		{
		 	format(string, sizeof string, "[ANUNCIO]: %s", result);
		 	SendAnuncio(COLOR_VERDE, string);
		}
		format(string, sizeof(string), "Anuncio envíado por: %s [ID: %d]", NombreJugador(playerid), playerid);
		SendAdminMessage(-1, string);
	 	GivePlayerMoneyAC(playerid, -300);
   		anunciotiempo = 2;
	}
	else
	{
	    SendClientMessage(playerid, Rojo, "No estás en los estudios de LSRTV. Debes estar en el lobby del interior.");
	}
    return 1;
}
//--------------------------------------------------------------------------------------------------------------------
if(strcmp(cmd, "/reportar", true) == 0) //Reporta a la administración
{
	if(EnvieReporte[playerid] == 1) {return SendClientMessage(playerid, Rojo, "Ya enviaste un reporte!"), 1;}
    new length = strlen(cmdtext);
	while ((idx < length) && (cmdtext[idx] <= ' '))
	{
		idx++;
	}
	new offset = idx;
	new result[150];
	while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	{
		result[idx - offset] = cmdtext[idx];
		idx++;
	}
	result[idx - offset] = EOS;
	if(!strlen(result))
	{
		SendClientMessage(playerid, Gris, "USO: /reportar [texto]");
		return 1;
	}
	for(new i=0; i<MAX_REPORTES; i++)
	{
		if(Reporte[i][rEstado] == 0)
		{
		    Reporte[i][rEstado] = 1;
		    Reporte[i][rPlayer] = playerid;
		    format(Reporte[i][rTexto], 254, "%s", result);
		    break;
		}
	}
	activosreportes++;
	format(string, sizeof(string), "[DUDAS]: Hay %d reporte(s) pendientes.", activosreportes);
	SendAdminMessage(Amarillo, string);
	EnvieReporte[playerid] = 1;
	SendClientMessage(playerid, Azulito, "Enviaste un reporte a la administración, espera que te atiendan.");
    return 1;
}

if(strcmp(cmd, "/reportes", true) == 0) //
{
    if(JugadorInfo[playerid][pAdmin] < 3){return 1;}
	new textoreporte[256];
	SendClientMessage(playerid, COLOR_GREENDO, "|----- REPORTES PENDIENTES -----|");
	for(new i = 0; i < MAX_REPORTES; i++)
	{
	    if(Reporte[i][rEstado] == 1)
		{
		    format(string, sizeof(string), "[%d] %s(%d) - reporta: %s", i, NombreJugador(Reporte[i][rPlayer]),Reporte[i][rPlayer], Reporte[i][rTexto]);
		    if(strlen(string) > 120)
		    {
		        new text1[120],text2[256];
		        strmid(text2, string, 120, 256);
		        strmid(text1, string, 0, 120);
		        format(textoreporte, 256, "%s...", text1);
		        SendClientMessage(playerid, COLOR_YELLOW, textoreporte);
		        format(textoreporte, 256, "%s", text2);
		        SendClientMessage(playerid, COLOR_YELLOW, textoreporte);
		    }
		    else
			{
			 	format(string, 256, "[%d] %s(%d) - reporta: %s", i, NombreJugador(Reporte[i][rPlayer]),Reporte[i][rPlayer], Reporte[i][rTexto]);
			 	SendClientMessage(playerid, COLOR_YELLOW, string);
			}
		}
	}
	return 1;
}

if(strcmp(cmd, "/atenderreporte", true) == 0) //atenderreporte
{
    if(JugadorInfo[playerid][pAdmin] < 3){return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Gris, "USO: /atenderreporte [id] [respuesta]");
		return 1;
	}
	new seleccion = strval(tmp);

	new length = strlen(cmdtext);
	while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
	new offset = idx;
	new result[265];
	while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
	result[idx - offset] = EOS;
	if(!strlen(result))
	{
    	SendClientMessage(playerid, Gris, "USO: /atenderreporte [id] [respuesta]");
    	return 1;
	}
	if(Reporte[seleccion][rEstado] == 1)
	{
		activosreportes--;
	    EnvieReporte[Reporte[seleccion][rPlayer]] = 0;
		format(string, 128, "El administrador %s se va a encargar de responder el reporte %d de %s.", NombreJugador(playerid), Reporte[seleccion][rPlayer], NombreJugador(Reporte[seleccion][rPlayer]));
		SendTesterMessage(Azulito, string);
		if(strlen(result) > 84)
	    {
	        new text1[91],text2[92];
	        strmid(text2, result, 84, 128);
	        strmid(text1, result, 0, 84);
	        format(string, 128, "Respuesta de %s [ID: %d]: %s...", NombreJugador(playerid), playerid,text1);
	        SendClientMessage(Reporte[seleccion][rPlayer], COLOR_YELLOW, string);
	        format(string, 128, "%s", text2);
	        SendClientMessage(Reporte[seleccion][rPlayer], COLOR_YELLOW, string);
	    }
	    else
		{
		 	format(string, sizeof(string), "Respuesta de %s [ID: %d]: %s", NombreJugador(playerid), playerid, result);
		 	SendClientMessage(Reporte[seleccion][rPlayer], COLOR_YELLOW, string);
		}
		Reporte[seleccion][rEstado] = 0;
		Reporte[seleccion][rPlayer] = 0;
	}
	return 1;
}

if(strcmp(cmd, "/limpiarreportes", true) == 0) //Atenderduda
{
    if(JugadorInfo[playerid][pAdmin] < 4){return 1;}
	SendClientMessage(playerid, -1, "Has limpiado los reportes pendientes");
	for(new i = 0; i < MAX_REPORTES; i++)
	{
	    if(Reporte[i][rEstado] == 1)
		{
		    SendClientMessage(Reporte[i][rPlayer], Azulito, "¡Ya puedes envíar otro reporte!");
		    Reporte[i][rEstado] = 0;
		    Reporte[i][rPlayer] = 0;
		}
	}
	return 1;
}

//-----------------------------------------------------------------------------------------------------------
if(strcmp(cmd, "/duda", true) == 0) //Reporta a la administración
{
	if(EnvieDuda[playerid] == 1) {return SendClientMessage(playerid, Rojo, "Ya enviaste una duda!"), 1;}
    new length = strlen(cmdtext);
	while ((idx < length) && (cmdtext[idx] <= ' '))
	{
		idx++;
	}
	new offset = idx;
	new result[150];
	while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
	{
		result[idx - offset] = cmdtext[idx];
		idx++;
	}
	result[idx - offset] = EOS;
	if(!strlen(result))
	{
		SendClientMessage(playerid, Gris, "USO: /duda [texto]");
		return 1;
	}
	for(new i=0; i<MAX_DUDAS; i++)
	{
		if(Duda[i][dEstado] == 0)
		{
		    Duda[i][dEstado] = 1;
		    Duda[i][dPlayer] = playerid;
		    format(Duda[i][dTexto], 254, "%s", result);
		    break;
		}
	}
	activasdudas++;
	format(string, sizeof(string), "[DUDAS]: Hay %d duda(s) pendientes.", activasdudas);
	SendTesterMessage(Amarillo, string);
	EnvieDuda[playerid] = 1;
	SendClientMessage(playerid, Azulito, "Envíaste tu duda al equipo, espera a que te respondan");
    return 1;
}

if(strcmp(cmd, "/dudas", true) == 0) //Atenderduda
{
    if(JugadorInfo[playerid][pAdmin] < 1){return 1;}
	new textoduda[256];
	SendClientMessage(playerid, COLOR_GREENDO, "|----- DUDAS PENDIENTES -----|");
	for(new i = 0; i < MAX_DUDAS; i++)
	{
	    if(Duda[i][dEstado] == 1)
		{
		    format(string, sizeof(string), "Duda (%d) - %s(%d) - Pregunta: %s", i, NombreJugador(Duda[i][dPlayer]),Duda[i][dPlayer], Duda[i][dTexto]);
		    if(strlen(string) > 120)
		    {
		        new text1[120],text2[256];
		        strmid(text2, string, 120, 256);
		        strmid(text1, string, 0, 120);
		        format(textoduda, 256, "%s...", text1);
		        SendClientMessage(playerid, COLOR_YELLOW, textoduda);
		        format(textoduda, 256, "%s", text2);
		        SendClientMessage(playerid, COLOR_YELLOW, textoduda);
		    }
		    else
			{
			 	format(string, 256, "Duda (%d) - %s(%d) - Pregunta: %s", i, NombreJugador(Duda[i][dPlayer]),Duda[i][dPlayer], Duda[i][dTexto]);
			 	SendClientMessage(playerid, COLOR_YELLOW, string);
			}
		}
	}
	return 1;
}

if(strcmp(cmd, "/limpiardudas", true) == 0) //Atenderduda
{
    if(JugadorInfo[playerid][pAdmin] < 3){return 1;}
	SendClientMessage(playerid, -1, "Has limpiado las dudas pendientes");
	for(new i = 0; i < MAX_DUDAS; i++)
	{
	    if(Duda[i][dEstado] == 1)
		{
		    SendClientMessage(Duda[i][dPlayer], Azulito, "¡Ya puedes envíar otra duda!");
		    Duda[i][dEstado] = 0;
		    Duda[i][dPlayer] = 0;
		}
	}
	return 1;
}

if(strcmp(cmd, "/atenderduda", true) == 0) //Atenderduda
{
    if(JugadorInfo[playerid][pAdmin] < 1){return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Gris, "USO: /atenderduda [id] [respuesta]");
		return 1;
	}
	new seleccion = strval(tmp);

	new length = strlen(cmdtext);
	while ((idx < length) && (cmdtext[idx] <= ' ')){idx++;}
	new offset = idx;
	new result[265];
	while ((idx < length) && ((idx - offset) < (sizeof(result) - 1))){result[idx - offset] = cmdtext[idx]; idx++;}
	result[idx - offset] = EOS;
	if(!strlen(result))
	{
    	SendClientMessage(playerid, Gris, "USO: /atenderduda [id] [respuesta]");
    	return 1;
	}
	if(Duda[seleccion][dEstado] == 1)
	{
		activasdudas--;
	    EnvieDuda[Duda[seleccion][dPlayer]] = 0;
		format(string, 128, "%s se va a encargar de responder la duda %d de %s.", NombreJugador(playerid), Duda[seleccion][dPlayer], NombreJugador(Duda[seleccion][dPlayer]));
		SendTesterMessage(Azulito, string);
		if(strlen(result) > 88)
	    {
	        new text1[91],text2[92];
	        strmid(text2, result, 88, 128);
	        strmid(text1, result, 0, 88);
	        format(string, 128, "Respuesta de %s: %s...", NombreJugador(playerid), text1);
	        SendClientMessage(Duda[seleccion][dPlayer], COLOR_YELLOW, string);
	        format(string, 128, "%s", text2);
	        SendClientMessage(Duda[seleccion][dPlayer], COLOR_YELLOW, string);
	    }
	    else
		{
		 	format(string, sizeof(string), "Respuesta de %s: %s", NombreJugador(playerid), result);
		 	SendClientMessage(Duda[seleccion][dPlayer], COLOR_YELLOW, string);
		}
		Duda[seleccion][dEstado] = 0;
		Duda[seleccion][dPlayer] = 0;
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/pagar", true) == 0) //Da dinero a un jugador
{
	if(JugadorInfo[playerid][pNivel] == 1) { SendClientMessage(playerid, Rojo, "Solo usuarios nivel 2 o superior pueden usar este comando"); return 1; }
    if(PagarTimer[playerid] == 1){SendClientMessage(playerid,Rojo,"Debes esperar 1 minuto antes de volver a usar este comando"); return 1;}
    tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Gris, "USO: /pagar [IdJugador/ParteDelNombre] [Cantidad]");
		return 1;
	}
    playerid2 = ReturnUser(tmp);
	if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_ROJO,"Jugador no encontrado"); return 1;}
	if(playerid == playerid2){SendClientMessage(playerid,Rojo,"No puedes pagarte a tí mismo."); return 1;}
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Gris, "USO: /pagar [IdJugador/ParteDelNombre] [Cantidad]");
		return 1;
	}
	new dinero = strval(tmp);
	if(dinero < 1 || dinero > 50000){SendClientMessage(playerid, Rojo, "La cantidad solo puede estar entre 1$ y 50000$."); return 1;}
	if(GetPlayerMoney(playerid) < dinero){SendClientMessage(playerid,Rojo,"No tienes tanto dinero."); return 1;}
	if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "Demasiado lejos."); return 1;}
	format(string, sizeof(string), "%s saca algo de dinero, y se lo entrega a %s.", NombreJugadorProxy(playerid), NombreJugadorProxy(playerid2));
 	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	GivePlayerMoneyAC(playerid, -dinero);
	GivePlayerMoneyAC(playerid2, dinero);
	format(string, 128, "%s te ha entregado %d$", NombreJugadorProxy(playerid), dinero);
	SendClientMessage(playerid2, Gris, string);
	PagarTimer[playerid] = 1;
	SetTimerEx("TimerPagar", 60000, false, "i", playerid);
	printf("%s ha dado %d$ a %s", NombreJugador(playerid), dinero,  NombreJugador(playerid2));
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/stats", true) == 0) //Muestra las stats del jugador
{
    ShowStats(playerid, playerid);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/desconocidos", true) == 0) //Muestra los admins conectados de servicio
{
	if(JugadorInfo[playerid][pAdmin] >= 4)
	{
	    SendClientMessage(playerid, -1, "Enmascarados en línea:");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID && Mascara[i] == 1)
			{
   				format(string, sizeof(string), "[%d] %s (%s)", i, NombreJugadorProxy(i), NombreJugador(i));
				SendClientMessage(playerid, Gris, string);
			}
		}
	}
    return 1;
}

if(strcmp(cmd, "/staff", true) == 0) //Muestra los admins conectados de servicio
{
	SendClientMessage(playerid, Verde, "Administración:");
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID && JugadorInfo[i][pAdmin] >= 1 && AdminOculto[i] == 0)
		{
			switch(JugadorInfo[i][pAdmin])
			{
			    case 1:
			    {
			        format(string, sizeof(string), "{FFCC99}Colaborador: %s [%s]", NombreJugador(i), JugadorInfo[i][pAdminNombre]);
			    }
			    case 2:
			    {
			        format(string, sizeof(string), "{99CC33}Moderador: %s [%s]", NombreJugador(i), JugadorInfo[i][pAdminNombre]);
			    }
			    case 3:
			    {
			        format(string, sizeof(string), "{99CC33}Moderador: %s [%s]", NombreJugador(i), JugadorInfo[i][pAdminNombre]);
			    }
			    case 4,5:
			    {
			        format(string, sizeof(string), "{9D4147}Administrador: %s [%s]", NombreJugador(i), JugadorInfo[i][pAdminNombre]);
			    }
			    default:
			    {
			        format(string, sizeof(string), "{FFCC99}Tester: %s [%s]", NombreJugador(i), JugadorInfo[i][pAdminNombre]);
			    }
   			}
			SendClientMessage(playerid, -1, string);
		}
	}
	if(JugadorInfo[playerid][pAdmin] >= 3)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && i != INVALID_PLAYER_ID && JugadorInfo[i][pAdmin] >= 1 && AdminOculto[i] == 1) // está oculto
			{
				switch(JugadorInfo[i][pAdmin])
				{
				    case 1:
				    {
				        format(string, sizeof(string), "{FFCC99}Colaborador: %s [%s] (Oculto)", NombreJugador(i), JugadorInfo[i][pAdminNombre]);
				    }
				    case 2:
				    {
				        format(string, sizeof(string), "{99CC33}Moderador: %s [%s] (Oculto)", NombreJugador(i), JugadorInfo[i][pAdminNombre]);
				    }
				    case 3:
				    {
				        format(string, sizeof(string), "{99CC33}Moderador: %s [%s] (Oculto)", NombreJugador(i), JugadorInfo[i][pAdminNombre]);
				    }
				    case 4,5:
				    {
				        format(string, sizeof(string), "{9D4147}Administrador: %s [%s] (Oculto)", NombreJugador(i), JugadorInfo[i][pAdminNombre]);
				    }
				    default:
				    {
				        format(string, sizeof(string), "{FFCC99}Tester: %s [%s] (Oculto)", NombreJugador(i), JugadorInfo[i][pAdminNombre]);
				    }
	   			}
				SendClientMessage(playerid, -1, string);
			}
		}
	}
    return 1;
}
//---------------------------------------------------------------------------------------------------------------
if(strcmp(cmd,"/ct",true) == 0) //pd
{
    if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
    if(JugadorInfo[playerid][pServicioPD] == 0){return 1;}
	return VerCinturon(playerid),1;
}
if(strcmp(cmd,"/gct",true) == 0) //pd
{
    if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
    if(JugadorInfo[playerid][pServicioPD] == 0){return 1;}
	if(JugadorInfo[playerid][pManoDer] == 19) { return SendClientMessage(playerid, COLOR_ROJO, "Esta arma no es reglamentaria. (/miarma)"),1; }
	if(JugadorInfo[playerid][pManoDer] == 21) { return SendClientMessage(playerid, COLOR_ROJO, "Esta arma no es reglamentaria. (/miarma)"),1; }
	return GuardarCinturon(playerid, 1), 1;
}
if(strcmp(cmd,"/miarma",true) == 0) //pd
{
    if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
    if(JugadorInfo[playerid][pServicioPD] == 0){return 1;}
    if(JugadorInfo[playerid][pManoDer] == 19)
    {
        SendClientMessage(playerid, COLOR_GREEN, "¡Cambiaste tu arma reglamentaria!");
		JugadorInfo[playerid][pManoDer] = 174;
    }
    if(JugadorInfo[playerid][pManoDer] == 21)
    {
        SendClientMessage(playerid, COLOR_GREEN, "¡Cambiaste tu arma reglamentaria!");
		JugadorInfo[playerid][pManoDer] = 175;
    }
	return 1;
}
if(strcmp(cmd,"/sct",true) == 0) //Saca un objeto del inventario
{
    if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
    if(JugadorInfo[playerid][pServicioPD] == 0){return 1;}
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /sct [0/1/2/3/4/5]");
        return 1;
    }
    new Bol = strval(tmp);
    if(Bol < 0 || Bol > 5){SendClientMessage(playerid, Rojo, "El número del ct debe estar entre 0 y 5."); return 1;}
	SacarCinturon(playerid, Bol);
    return 1;
}
//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/bolsillos",true) == 0 || strcmp(cmd,"/bol",true) == 0) //Inventario
{
	return MostrarBolsillos(playerid),1;
}
//---------------------------------------------------------------------------------------------------------------
if(strcmp(cmd,"/mistoys", true) == 0)
{
    return LoadToys(playerid),1;
}
if(strcmp(cmd,"/accesorios",true) == 0 || strcmp(cmd,"/toys",true) == 0) //accesorios
{
    new dialog[1024], titulo[128];
    format(titulo, 128, "Menú de accesorios - Elegir accesorio");
	//
	if(JugadorInfo[playerid][pToy][0] >= 1) { format(string, sizeof(string), "\n{ffcc99}Gorro (en uso)"); }
	else {format(string, sizeof(string), "\nGorro (sin usar)");} // index 4
	strcat(dialog, string);
	//
	if(JugadorInfo[playerid][pToy][1] >= 1) { format(string, sizeof(string), "\n{ffcc99}Gafas (en uso)"); }
	else {format(string, sizeof(string), "\nGafas (sin usar)");} // index 5
	strcat(dialog, string);
	//
	if(JugadorInfo[playerid][pToy][2] >= 1) { format(string, sizeof(string), "\n{ffcc99}Mandíbula (en uso)"); }
	else {format(string, sizeof(string), "\nMandíbula (sin usar)");} // index 6
	strcat(dialog, string);
	//
    if(JugadorInfo[playerid][pToy][3] >= 1) { format(string, sizeof(string), "\n{ffcc99}Chaleco (en uso)"); }
	else {format(string, sizeof(string), "\nChaleco (sin usar)");} // index 7
	strcat(dialog, string);
	//
	if(JugadorInfo[playerid][pToy][4] >= 1) { format(string, sizeof(string), "\n{ffcc99}Hueco personalizado (en uso)"); }
	else {format(string, sizeof(string), "\nHueco personalizado (sin usar)");} // index 8
	strcat(dialog, string);
 	//
	ShowPlayerDialog(playerid, ACCESORIOS_MENU, DIALOG_STYLE_LIST, titulo, dialog, "Aceptar", "Salir");
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/mano",true) == 0) //Cambiar objetos de mano
{
	CambiarObjetosMano(playerid);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/sacarbolsillo",true) == 0 || strcmp(cmd,"/sacar",true) == 0) //Saca un objeto del inventario
{
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /sacar [bolsillo]");
        return 1;
    }
    new Bol = strval(tmp);
    if(Bol < 0 || Bol > 9){SendClientMessage(playerid, Rojo, "El número del bolsillo debe estar entre 0 y 9."); return 1;}
	SacarBolsillo(playerid, Bol);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/guardar",true) == 0) //Guarda un objeto en el inventario
{
	if(JugadorInfo[playerid][pManoDer] == 174 || JugadorInfo[playerid][pManoDer] == 175) { SendClientMessage(playerid,COLOR_ROJO, "No puedes guardar un arma reglamentaria en tus bolsillos. (/gct)"); return 1; }
	GuardarBolsillo(playerid, 1);
    return 1;
}


if(strcmp(cmd,"/acomodar",true) == 0) //Saca un objeto del inventario
{
	if(JugadorInfo[playerid][pManoDer] == 174 || JugadorInfo[playerid][pManoDer] == 175) { SendClientMessage(playerid,COLOR_ROJO, "No puedes guardar un arma reglamentaria en tus bolsillos. (/gct)"); return 1; }
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /acomodar [bolsillo]");
        SendClientMessage(playerid, -1, "Este comando sirve para poner un objeto en la ranura (bolsillo) que desees.");
        return 1;
    }
    new Bol = strval(tmp);
    if(Bol < 0 || Bol > 9){SendClientMessage(playerid, Rojo, "El número del bolsillo debe estar entre 0 y 9."); return 1;}
	AcomodarBolsillo(playerid, Bol);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/ceder",true) == 0) //ofrecer un objeto a otro jugador
{
	if(CederTiempo[playerid] == 1){SendClientMessage(playerid, Rojo, "Espera 3 segundos para ceder otro objeto."); return 1;}
	tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
        SendClientMessage(playerid, Gris, "USO: /ceder [jugador]");
        return 1;
    }
    playerid2 = ReturnUser(tmp);
    if(playerid2 == playerid){SendClientMessage(playerid, Rojo, "No te puedes pasar objetos a tí mismo."); return 1;}
    if((playerid2 == INVALID_PLAYER_ID) || !IsPlayerConnected(playerid2))
	{
		SendClientMessage(playerid, Rojo, "Jugador no encontrado");
		return 1;
	}
    if(!GetPlayersProx(5.0, playerid, playerid2)){SendClientMessage(playerid, Rojo, "Demasiado lejos."); return 1;}
    if(JugadorInfo[playerid][pManoDer] == 174 || JugadorInfo[playerid][pManoDer] == 175)
    {
        if(JugadorInfo[playerid2][pServicioPD] == 0)
        {
            SendClientMessage(playerid,COLOR_ROJO, "No puedes ceder armas reglamentarias a civiles.");
            return 1;
        }
    }
	if(JugadorInfo[playerid][pManoDer] <= 0){SendClientMessage(playerid, Rojo, "No tienes nada en tu mano derecha."); return 1;}
    if(JugadorInfo[playerid2][pManoIzq] > 0 && JugadorInfo[playerid2][pManoDer] > 0){SendClientMessage(playerid, Rojo, "Este jugador tiene ambas manos ocupadas."); return 1;}
    new ManoDer = JugadorInfo[playerid][pManoDer], ManoDerCant = JugadorInfo[playerid][pManoDerCant];
    if(JugadorInfo[playerid2][pManoDer] == 0)
	{
		if(ObjetoInfo[ManoDer][IDArma] > 0){GivePlayerWeapon(playerid2, ObjetoInfo[ManoDer][IDArma], ManoDerCant);}
		JugadorInfo[playerid2][pManoDer] = ManoDer, JugadorInfo[playerid2][pManoDerCant] = ManoDerCant, PonerObjeto(playerid2, 1, ManoDer), ActualizarManos(playerid2);
	}
    else if(JugadorInfo[playerid2][pManoIzq] == 0){JugadorInfo[playerid2][pManoIzq] = ManoDer, JugadorInfo[playerid2][pManoIzqCant] = ManoDerCant, PonerObjeto(playerid2, 2, ManoDer), ActualizarManos(playerid2);}
    JugadorInfo[playerid][pManoDer] = 0, JugadorInfo[playerid][pManoDerCant] = 0, ActualizarManos(playerid);
    ResetPlayerWeapons(playerid);
    format(string, sizeof(string), "%s te entrega %s", NombreJugador(playerid), ObjetoInfo[ManoDer][NombreObjeto]);
    SendClientMessage(playerid2, COLOR_GREEN, string);
    format(string, sizeof(string), "Entregas a %s un %s", NombreJugador(playerid2), ObjetoInfo[ManoDer][NombreObjeto]);
    SendClientMessage(playerid, COLOR_GREEN, string);
    CederTiempo[playerid] = 1;
    SetTimerEx("CederTimer", 3000, false, "i", playerid);
  	CederTiempo[playerid2] = 1;
  	SetTimerEx("CederTimer", 3000, false, "i", playerid2);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/tirar",true) == 0) //Tirar objetos
{
    if(JugadorInfo[playerid][pManoDer] == 174 || JugadorInfo[playerid][pManoDer] == 175) { SendClientMessage(playerid,COLOR_ROJO, "No puedes arrojar armas reglamentarias."); return 1; }
	ActualizarManos(playerid);
    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT){SendClientMessage(playerid, Rojo, "No puedes tirar objetos dentro de un vehículo."); return 1;}
	if(JugadorInfo[playerid][pManoDer] == 0){SendClientMessage(playerid, Rojo, "Necesitas tener algo en tu mano derecha."); return 1;}
    ResetPlayerWeapons(playerid);
	new ManoDer = JugadorInfo[playerid][pManoDer];
	new ManoDerCant = JugadorInfo[playerid][pManoDerCant];
	new string2[128]; format(string2, 128, "tira un/a %s al suelo.", ObjetoInfo[ManoDer][NombreObjeto]);
	AutoRol(playerid, string2);
	format(string, sizeof(string), "¡Tiras tu %s al suelo!", ObjetoInfo[ManoDer][NombreObjeto]);
	SendClientMessage(playerid, COLOR_GREEN2, string);
	JugadorInfo[playerid][pManoDer] = 0;
	JugadorInfo[playerid][pManoDerCant] = 0;
	RemovePlayerAttachedObject(playerid, 1);
	SetPlayerSpecialAction(playerid, 0);
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	new World = GetPlayerVirtualWorld(playerid);
	new Interior = GetPlayerInterior(playerid);
	DropObjeto(ManoDer, ManoDerCant, X, Y, Z, World, Interior, NombreJugador(playerid));
	Streamer_Update(playerid);
	BalasActual[playerid] = 0;
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/verobjeto", true) == 0)
{
    if(JugadorInfo[playerid][pAdmin] <= 4){return 1;}
    for(new i = 0; i < sizeof(DropInfo); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 2.0,DropInfo[i][DropPosX],DropInfo[i][DropPosY],DropInfo[i][DropPosZ]))
		{
			if(GetPlayerVirtualWorld(playerid) == DropInfo[i][DropVWorld] && GetPlayerInterior(playerid) == DropInfo[i][DropInterior])
			{
			    if(DropInfo[i][DropID] == 0) break;
				format(string, 128, "El objeto más cercano a tí es un/a '%s' arrojado/a por '%s'", ObjetoInfo[DropInfo[i][DropID]][NombreObjeto], DropInfo[i][Persona]);
				SendClientMessage(playerid, Naranja, string);
				break ;
			}
		}
	}
	return 1;
}

if(strcmp(cmd,"/eliminarobjeto",true) == 0)
{
    if(JugadorInfo[playerid][pAdmin] <= 4){return 1;}
    return EliminarObjeto(playerid), 1;
}


if(strcmp(cmd,"/recogerobjeto",true) == 0) //Recoger objeto del suelo
{
	RecogerObjeto(playerid);
	return 1;
}


//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/espalda",true) == 0)
{
    if(JugadorInfo[playerid][pEspalda] > 0)
    {
   		if(JugadorInfo[playerid][pEspalda] == 0){ return 1; }
	    if(JugadorInfo[playerid][pManoDer] > 0 && JugadorInfo[playerid][pManoIzq] > 0){SendClientMessage(playerid, Rojo, "Tus manos están ocupadas."); return 1;}
		new Espalda = JugadorInfo[playerid][pEspalda];
		if(JugadorInfo[playerid][pManoDer] == 0)
		{
		    JugadorInfo[playerid][pManoDer] = JugadorInfo[playerid][pEspalda];
			JugadorInfo[playerid][pManoDerCant] = JugadorInfo[playerid][pEspaldaCant];
            GivePlayerWeapon(playerid, ObjetoInfo[Espalda][IDArma], JugadorInfo[playerid][pEspaldaCant]);
			PonerObjeto(playerid, 1, Espalda);
            JugadorInfo[playerid][pEspalda] = 0, JugadorInfo[playerid][pEspaldaCant] = 0;
			RemovePlayerAttachedObject(playerid, 3);
		}
		else SendClientMessage(playerid, Rojo, "Debes tener tu mano derecha desocupada.");
	}
	else
	{
	    if(GetPlayerArma(playerid))
	    {
		    if(JugadorInfo[playerid][pManoDer] > 0 && ObjetoInfo[JugadorInfo[playerid][pManoDer]][Guardable] == 0)
			{
				new Mano = JugadorInfo[playerid][pManoDer];
			    ActualizarManos(playerid);
		        RemovePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma]);
				PonerObjeto(playerid, 3, Mano);
				RemovePlayerAttachedObject(playerid, 1);
		        JugadorInfo[playerid][pEspalda] = JugadorInfo[playerid][pManoDer], JugadorInfo[playerid][pEspaldaCant] = JugadorInfo[playerid][pManoDerCant];
				JugadorInfo[playerid][pManoDer] = 0, JugadorInfo[playerid][pManoDerCant] = 0;
				BalasActual[playerid] = 0;
			}
		}
		else SendClientMessage(playerid, Rojo, "No puedes colgar esto");
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/fumar",true) == 0) //Fumar
{
	if(!((JugadorInfo[playerid][pManoDer] == 69 && JugadorInfo[playerid][pManoDerCant] > 0 && JugadorInfo[playerid][pManoIzq] == 70 && JugadorInfo[playerid][pManoIzqCant] > 0) || (JugadorInfo[playerid][pManoDer] == 70 && JugadorInfo[playerid][pManoDerCant] > 0 && JugadorInfo[playerid][pManoIzq] == 69 && JugadorInfo[playerid][pManoIzqCant] > 0)))
	{
		SendClientMessage(playerid, Rojo, "Debes tener un mechero con gas en una mano y una caja de cigarrillos en la otra.");
		return 1;
	}
	JugadorInfo[playerid][pManoDerCant] --;
	JugadorInfo[playerid][pManoIzqCant] --;
	ApplyAnimation(playerid, "GANGS", "smkcig_prtl_F", 3.0, 0, 0, 0, 0, 0);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
	format(string, sizeof(string), "%s enciende un cigarrillo con un encendedor.", NombreJugadorProxy(playerid));
 	ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/entrada",true) == 0) //Entrar/salir
{
    if(GetPlayerState(playerid) != 1){return 1;}
	if(GetPlayerFueraPuertaCasa(playerid)) //Está en la entrada de una casa
	{
		new h = GetPlayerFueraPuertaCasa(playerid);
		if(CasaInfo[h][hCerrada] == 1){SendClientMessage(playerid, COLOR_ROJO, "Cerrado");}
		else
		{
		    TogglePlayerControllable(playerid, 0);
		    SetTimerEx("Descongelar", 2000, false, "i", playerid);
		    SetPlayerPos(playerid, CasaInfo[h][hSalidaX], CasaInfo[h][hSalidaY], CasaInfo[h][hSalidaZ]);
		    SetPlayerInterior(playerid, CasaInfo[h][hInterior]);
		    SetPlayerVirtualWorld(playerid, CasaInfo[h][hVirtualWorld]);
		    return 1;
		}
	}
	if(GetPlayerDentroPuertaCasa(playerid)) //Está en la salida de una casa
	{
	    new h = GetPlayerDentroPuertaCasa(playerid);
	    if(CasaInfo[h][hInterior2] != 0) //Si el mundo exterior no es 0 congelar y descongelar
	    {
	        TogglePlayerControllable(playerid, 0);
		    SetTimerEx("Descongelar", 2000, false, "i", playerid);
	    }
	    SetPlayerPos(playerid, CasaInfo[h][hEntradaX], CasaInfo[h][hEntradaY], CasaInfo[h][hEntradaZ]);
	    SetPlayerInterior(playerid, CasaInfo[h][hInterior2]);
	    SetPlayerVirtualWorld(playerid, CasaInfo[h][hVirtualWorld2]);
	    return 1;
	}
	if(GetPlayerFueraPuertaNego(playerid)) //Está en la entrada de un negocio
	{
		new n = GetPlayerFueraPuertaNego(playerid);
		if(NegocioInfo[n][nComprado] == 2){SendClientMessage(playerid,Rojo,"¡Este local está clausurado!"); return 1;} //Negocio claurado
		if(NegocioInfo[n][nCerrado] == 1){SendClientMessage(playerid, Rojo, "La entrada al local está cerrada.");}
		else
		{
			format(string, 128, "~g~estas en %s", NegocioInfo[n][nNombre]);
			GameTextForPlayer(playerid, string, 3000, 3);
		    TogglePlayerControllable(playerid, 0);
		    SetTimerEx("Descongelar", 2000, false, "i", playerid);
		    SetPlayerPos(playerid, NegocioInfo[n][nSalidaX], NegocioInfo[n][nSalidaY], NegocioInfo[n][nSalidaZ]);
		    SetPlayerInterior(playerid, NegocioInfo[n][nInterior]);
		    SetPlayerVirtualWorld(playerid, NegocioInfo[n][nVirtualWorld]);
		    return 1;
		}
	}
	if(GetPlayerDentroPuertaNego(playerid)) //Está en la salida de un negocio
	{
	    new n = GetPlayerDentroPuertaNego(playerid);
	    if(NegocioInfo[n][nInterior2] != 0) //Si el mundo exterior no es 0 congelar y descongelar
	    {
	        TogglePlayerControllable(playerid, 0);
		    SetTimerEx("Descongelar", 2000, false, "i", playerid);
	    }
	    SetPlayerPos(playerid, NegocioInfo[n][nEntradaX], NegocioInfo[n][nEntradaY], NegocioInfo[n][nEntradaZ]);
	    SetPlayerInterior(playerid, NegocioInfo[n][nInterior2]);
	    SetPlayerVirtualWorld(playerid, NegocioInfo[n][nVirtualWorld2]);
	    return 1;
	}
	EntrarSitioPublico(playerid); //Entrar a establecimiento
	return 1;
}

if(strcmp(cmd,"/cargar",true) == 0 || strcmp(cmd,"/recargar",true) == 0) //Recarga un arma
{
  	ActualizarManos(playerid);
	if(JugadorInfo[playerid][pManoDer] == 0){SendClientMessage(playerid, Rojo, "Tienes que tener algo en tu mano derecha."); return 1;}
	new Mano = JugadorInfo[playerid][pManoDer];
	new Cant = JugadorInfo[playerid][pManoDerCant];
  	new EncontreCargador;
  	if(Cant == 0)
  	{
		if(Mano == 19 || Mano == 174) // Pistola
		{
		    if(JugadorInfo[playerid][pServicioPD] != 0)
		    {
		        for(new x = 0; x<MAX_SLOTS_CT; x++) // Está de servicio y busca cargador en ct
				{
					if(JugadorInfo[playerid][pCint][x] == 39)
					{
					    EncontreCargador = 1; Disparos[playerid] = 0;
					    ApplyAnimation(playerid,"COLT45","colt45_reload",4.1, 0, 1, 1, 1, 700, 1); SetTimerEx("DetenerAnim", 700, false, "i", playerid);
					    format(string, sizeof(string), "Cargas tu arma con %d balas y está lista para ser usada.", JugadorInfo[playerid][pCintCant][x]);
				        SendClientMessage(playerid, COLOR_GREEN2, string);
						ResetPlayerWeapons(playerid);
		    			GivePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma], JugadorInfo[playerid][pCintCant][x]);
					 	JugadorInfo[playerid][pManoDerCant] = JugadorInfo[playerid][pCintCant][x];
					 	ActualizarManos(playerid);
					 	JugadorInfo[playerid][pCint][x] = 0;
					 	JugadorInfo[playerid][pCintCant][x] = 0;
					    return 1;
					}
				}
				if(EncontreCargador == 0)
				{
					for(new x = 0; x<MAX_SLOTS_INV; x++) // No encontró cargador en ct, ahora en /bol
					{
						if(JugadorInfo[playerid][pBol][x] == 39)
						{
						    EncontreCargador = 1; Disparos[playerid] = 0;
						    ApplyAnimation(playerid,"COLT45","colt45_reload",4.1, 0, 1, 1, 1, 700, 1); SetTimerEx("DetenerAnim", 700, false, "i", playerid);
						    format(string, sizeof(string), "Cargas tu arma con %d balas y está lista para ser usada.", JugadorInfo[playerid][pBolCant][x]);
					        SendClientMessage(playerid, COLOR_GREEN2, string);
							ResetPlayerWeapons(playerid);
			    			GivePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma], JugadorInfo[playerid][pBolCant][x]);
						 	JugadorInfo[playerid][pManoDerCant] = JugadorInfo[playerid][pBolCant][x];
						 	ActualizarManos(playerid);
						 	JugadorInfo[playerid][pBol][x] = 0;
						 	JugadorInfo[playerid][pBolCant][x] = 0;
						    return 1;
						}
					}
					if(EncontreCargador == 0){SendClientMessage(playerid, Rojo, "¡No tienes un cargador!"); return 1;}
				}
		    }
		    else
		    {
				for(new x = 0; x<MAX_SLOTS_INV; x++)
				{
					if(JugadorInfo[playerid][pBol][x] == 39)
					{
					    EncontreCargador = 1; Disparos[playerid] = 0;
					    ApplyAnimation(playerid,"COLT45","colt45_reload",4.1, 0, 1, 1, 1, 700, 1); SetTimerEx("DetenerAnim", 700, false, "i", playerid);
					    format(string, sizeof(string), "Cargas tu arma con %d balas y está lista para ser usada.", JugadorInfo[playerid][pBolCant][x]);
				        SendClientMessage(playerid, COLOR_GREEN2, string);
						ResetPlayerWeapons(playerid);
		    			GivePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma], JugadorInfo[playerid][pBolCant][x]);
					 	JugadorInfo[playerid][pManoDerCant] = JugadorInfo[playerid][pBolCant][x];
					 	ActualizarManos(playerid);
					 	JugadorInfo[playerid][pBol][x] = 0;
					 	JugadorInfo[playerid][pBolCant][x] = 0;
					    return 1;
					}
				}
				if(EncontreCargador == 0){SendClientMessage(playerid, Rojo, "¡No tienes un cargador!"); return 1;}
			}
		}
		if(Mano == 21 || Mano == 175) // Desert Eagle
		{
		    if(JugadorInfo[playerid][pServicioPD] != 0)
		    {
		        for(new x = 0; x<MAX_SLOTS_CT; x++) // Está de servicio y busca cargador en ct
				{
					if(JugadorInfo[playerid][pCint][x] == 40)
					{
					    EncontreCargador = 1; Disparos[playerid] = 0;
					    ApplyAnimation(playerid,"PYTHON","python_reload",4.1, 0, 1, 1, 1, 700, 1); SetTimerEx("DetenerAnim", 700, false, "i", playerid);
					    format(string, sizeof(string), "Cargas tu arma con %d balas y está lista para ser usada.", JugadorInfo[playerid][pCintCant][x]);
				        SendClientMessage(playerid, COLOR_GREEN2, string);
						ResetPlayerWeapons(playerid);
		    			GivePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma], JugadorInfo[playerid][pCintCant][x]);
					 	JugadorInfo[playerid][pManoDerCant] = JugadorInfo[playerid][pCintCant][x];
					 	ActualizarManos(playerid);
					 	JugadorInfo[playerid][pCint][x] = 0;
					 	JugadorInfo[playerid][pCintCant][x] = 0;
					    return 1;
					}
				}
				if(EncontreCargador == 0)
				{
					for(new x = 0; x<MAX_SLOTS_INV; x++) // No encontró cargador en ct, ahora en /bol
					{
						if(JugadorInfo[playerid][pBol][x] == 40)
						{
						    EncontreCargador = 1; Disparos[playerid] = 0;
						    ApplyAnimation(playerid,"PYTHON","python_reload",4.1, 0, 1, 1, 1, 700, 1); SetTimerEx("DetenerAnim", 700, false, "i", playerid);
						    format(string, sizeof(string), "Cargas tu arma con %d balas y está lista para ser usada.", JugadorInfo[playerid][pBolCant][x]);
					        SendClientMessage(playerid, COLOR_GREEN2, string);
							ResetPlayerWeapons(playerid);
			    			GivePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma], JugadorInfo[playerid][pBolCant][x]);
						 	JugadorInfo[playerid][pManoDerCant] = JugadorInfo[playerid][pBolCant][x];
						 	ActualizarManos(playerid);
						 	JugadorInfo[playerid][pBol][x] = 0;
						 	JugadorInfo[playerid][pBolCant][x] = 0;
						    return 1;
						}
					}
					if(EncontreCargador == 0){SendClientMessage(playerid, Rojo, "¡No tienes un cargador!"); return 1;}
				}
		    }
		    else
		    {
				for(new x = 0; x<MAX_SLOTS_INV; x++)
				{
					if(JugadorInfo[playerid][pBol][x] == 40)
					{
					    EncontreCargador = 1; Disparos[playerid] = 0;
					    ApplyAnimation(playerid,"PYTHON","python_reload",4.1, 0, 1, 1, 1, 700, 1); SetTimerEx("DetenerAnim", 700, false, "i", playerid);
					    format(string, sizeof(string), "Cargas tu arma con %d balas y está lista para ser usada.", JugadorInfo[playerid][pBolCant][x]);
				        SendClientMessage(playerid, COLOR_GREEN2, string);
						ResetPlayerWeapons(playerid);
		    			GivePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma], JugadorInfo[playerid][pBolCant][x]);
					 	JugadorInfo[playerid][pManoDerCant] = JugadorInfo[playerid][pBolCant][x];
					 	ActualizarManos(playerid);
					 	JugadorInfo[playerid][pBol][x] = 0;
					 	JugadorInfo[playerid][pBolCant][x] = 0;
					    return 1;
					}
				}
				if(EncontreCargador == 0){SendClientMessage(playerid, Rojo, "¡No tienes un cargador!"); return 1;}
			}
		}
		else if(Mano == 25) // Uzi
		{
			for(new x = 0; x<MAX_SLOTS_INV; x++)
			{
				if(JugadorInfo[playerid][pBol][x] == 41)
				{
				    EncontreCargador = 1; Disparos[playerid] = 0;
        			ApplyAnimation(playerid,"UZI","UZI_reload",4.1, 0, 1, 1, 1, 700, 1); SetTimerEx("DetenerAnim", 700, false, "i", playerid);
				    format(string, sizeof(string), "Cargas tu arma con %d balas y está lista para ser usada.", JugadorInfo[playerid][pBolCant][x]);
			        SendClientMessage(playerid, COLOR_GREEN2, string);
					ResetPlayerWeapons(playerid);
	    			GivePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma], JugadorInfo[playerid][pBolCant][x]);
				 	JugadorInfo[playerid][pManoDerCant] = JugadorInfo[playerid][pBolCant][x];
				 	ActualizarManos(playerid);
				 	JugadorInfo[playerid][pBol][x] = 0;
				 	JugadorInfo[playerid][pBolCant][x] = 0;
				    return 1;
				}
			}
			if(EncontreCargador == 0){SendClientMessage(playerid, Rojo, "¡No tienes un cargador!"); return 1;}
		}
		else if(Mano == 26) // MP5
		{
			for(new x = 0; x<MAX_SLOTS_INV; x++)
			{
				if(JugadorInfo[playerid][pBol][x] == 42)
				{
				    EncontreCargador = 1; Disparos[playerid] = 0;
				    ApplyAnimation(playerid,"RIFLE","RIFLE_load",4.1, 0, 1, 1, 1, 700, 1); SetTimerEx("DetenerAnim", 700, false, "i", playerid);
				    format(string, sizeof(string), "Cargas tu arma con %d balas y está lista para ser usada.", JugadorInfo[playerid][pBolCant][x]);
			        SendClientMessage(playerid, COLOR_GREEN2, string);
					ResetPlayerWeapons(playerid);
	    			GivePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma], JugadorInfo[playerid][pBolCant][x]);
				 	JugadorInfo[playerid][pManoDerCant] = JugadorInfo[playerid][pBolCant][x];
				 	ActualizarManos(playerid);
				 	JugadorInfo[playerid][pBol][x] = 0;
				 	JugadorInfo[playerid][pBolCant][x] = 0;
				    return 1;
				}
			}
			if(EncontreCargador == 0){SendClientMessage(playerid, Rojo, "¡No tienes un cargador!"); return 1;}
		}
		else if(Mano == 27) // AK47
		{
			for(new x = 0; x<MAX_SLOTS_INV; x++)
			{
				if(JugadorInfo[playerid][pBol][x] == 44)
				{
				    EncontreCargador = 1; Disparos[playerid] = 0;
				    ApplyAnimation(playerid,"RIFLE","RIFLE_load",4.1, 0, 1, 1, 1, 700, 1); SetTimerEx("DetenerAnim", 700, false, "i", playerid);
				    format(string, sizeof(string), "Cargas tu arma con %d balas y está lista para ser usada.", JugadorInfo[playerid][pBolCant][x]);
			        SendClientMessage(playerid, COLOR_GREEN2, string);
					ResetPlayerWeapons(playerid);
	    			GivePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma], JugadorInfo[playerid][pBolCant][x]);
				 	JugadorInfo[playerid][pManoDerCant] = JugadorInfo[playerid][pBolCant][x];
				 	ActualizarManos(playerid);
				 	JugadorInfo[playerid][pBol][x] = 0;
				 	JugadorInfo[playerid][pBolCant][x] = 0;
				    return 1;
				}
			}
			if(EncontreCargador == 0){SendClientMessage(playerid, Rojo, "¡No tienes un cargador!"); return 1;}
		}
		else if(Mano == 28) // M4A1
		{
			for(new x = 0; x<MAX_SLOTS_INV; x++)
			{
				if(JugadorInfo[playerid][pBol][x] == 45)
				{
				    EncontreCargador = 1; Disparos[playerid] = 0;
                    ApplyAnimation(playerid,"RIFLE","RIFLE_load",4.1, 0, 1, 1, 1, 700, 1); SetTimerEx("DetenerAnim", 700, false, "i", playerid);
				    format(string, sizeof(string), "Cargas tu arma con %d balas y está lista para ser usada.", JugadorInfo[playerid][pBolCant][x]);
			        SendClientMessage(playerid, COLOR_GREEN2, string);
					ResetPlayerWeapons(playerid);
	    			GivePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma], JugadorInfo[playerid][pBolCant][x]);
				 	JugadorInfo[playerid][pManoDerCant] = JugadorInfo[playerid][pBolCant][x];
				 	ActualizarManos(playerid);
				 	JugadorInfo[playerid][pBol][x] = 0;
				 	JugadorInfo[playerid][pBolCant][x] = 0;
				    return 1;
				}
			}
			if(EncontreCargador == 0){SendClientMessage(playerid, Rojo, "¡No tienes un cargador!"); return 1;}
		}
		else if(Mano == 29) // Tec-9
		{
			for(new x = 0; x<MAX_SLOTS_INV; x++)
			{
				if(JugadorInfo[playerid][pBol][x] == 43)
				{
				    EncontreCargador = 1; Disparos[playerid] = 0;
				    ApplyAnimation(playerid,"UZI","UZI_reload",4.1, 0, 1, 1, 1, 700, 1); SetTimerEx("DetenerAnim", 700, false, "i", playerid);
				    format(string, sizeof(string), "Cargas tu arma con %d balas y está lista para ser usada.", JugadorInfo[playerid][pBolCant][x]);
			        SendClientMessage(playerid, COLOR_GREEN2, string);
					ResetPlayerWeapons(playerid);
	    			GivePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma], JugadorInfo[playerid][pBolCant][x]);
				 	JugadorInfo[playerid][pManoDerCant] = JugadorInfo[playerid][pBolCant][x];
				 	ActualizarManos(playerid);
				 	JugadorInfo[playerid][pBol][x] = 0;
				 	JugadorInfo[playerid][pBolCant][x] = 0;
				    return 1;
				}
			}
			if(EncontreCargador == 0){SendClientMessage(playerid, Rojo, "¡No tienes un cargador!"); return 1;}
		}
		else if(Mano == 30) // Rifle
		{
			for(new x = 0; x<MAX_SLOTS_INV; x++)
			{
				if(JugadorInfo[playerid][pBol][x] == 46)
				{
				    EncontreCargador = 1; Disparos[playerid] = 0;
				    ApplyAnimation(playerid,"BUDDY","buddy_reload",4.1, 0, 1, 1, 1, 700, 1); SetTimerEx("DetenerAnim", 700, false, "i", playerid);
				    format(string, sizeof(string), "Cargas tu arma con %d balas y está lista para ser usada.", JugadorInfo[playerid][pBolCant][x]);
			        SendClientMessage(playerid, COLOR_GREEN2, string);
					ResetPlayerWeapons(playerid);
	    			GivePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma], JugadorInfo[playerid][pBolCant][x]);
				 	JugadorInfo[playerid][pManoDerCant] = JugadorInfo[playerid][pBolCant][x];
				 	ActualizarManos(playerid);
				 	JugadorInfo[playerid][pBol][x] = 0;
				 	JugadorInfo[playerid][pBolCant][x] = 0;
				    return 1;
				}
			}
			if(EncontreCargador == 0){SendClientMessage(playerid, Rojo, "¡No tienes un cargador!"); return 1;}
		}
		else if(Mano == 31) // Rifle Francotirador
		{
			for(new x = 0; x<MAX_SLOTS_INV; x++)
			{
				if(JugadorInfo[playerid][pBol][x] == 46)
				{
				    EncontreCargador = 1; Disparos[playerid] = 0;
				    ApplyAnimation(playerid,"BUDDY","buddy_reload",4.1, 0, 1, 1, 1, 700, 1); SetTimerEx("DetenerAnim", 700, false, "i", playerid);
				    format(string, sizeof(string), "Cargas tu arma con %d balas y está lista para ser usada.", JugadorInfo[playerid][pBolCant][x]);
			        SendClientMessage(playerid, COLOR_GREEN2, string);
					ResetPlayerWeapons(playerid);
	    			GivePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma], JugadorInfo[playerid][pBolCant][x]);
				 	JugadorInfo[playerid][pManoDerCant] = JugadorInfo[playerid][pBolCant][x];
				 	ActualizarManos(playerid);
				 	JugadorInfo[playerid][pBol][x] = 0;
				 	JugadorInfo[playerid][pBolCant][x] = 0;
				    return 1;
				}
			}
			if(EncontreCargador == 0){SendClientMessage(playerid, Rojo, "¡No tienes un cargador!"); return 1;}
		}
		else if(Mano == 22) // Escopeta
		{
			for(new x = 0; x<MAX_SLOTS_INV; x++)
			{
				if(JugadorInfo[playerid][pBol][x] == 50)
				{
				    EncontreCargador = 1; Disparos[playerid] = 0;
				    ApplyAnimation(playerid,"BUDDY","buddy_reload",4.1, 0, 1, 1, 1, 700, 1); SetTimerEx("DetenerAnim", 700, false, "i", playerid);
				    format(string, sizeof(string), "Cargas tu arma con %d balas y está lista para ser usada.", JugadorInfo[playerid][pBolCant][x]);
			        SendClientMessage(playerid, COLOR_GREEN2, string);
					ResetPlayerWeapons(playerid);
	    			GivePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma], JugadorInfo[playerid][pBolCant][x]);
				 	JugadorInfo[playerid][pManoDerCant] = JugadorInfo[playerid][pBolCant][x];
				 	ActualizarManos(playerid);
				 	JugadorInfo[playerid][pBol][x] = 0;
				 	JugadorInfo[playerid][pBolCant][x] = 0;
				    return 1;
				}
			}
			if(EncontreCargador == 0){SendClientMessage(playerid, Rojo, "¡No tienes un cargador!"); return 1;}
		}
		else if(Mano == 23) // Escopeta recortada
		{
			for(new x = 0; x<MAX_SLOTS_INV; x++)
			{
				if(JugadorInfo[playerid][pBol][x] == 50)
				{
				    if(JugadorInfo[playerid][pBolCant][x] >= 2)
				    {
					    EncontreCargador = 1; Disparos[playerid] = 0;
					    format(string, sizeof(string), "Cargas tu arma con 2 balas y está lista para ser usada.");
				        SendClientMessage(playerid, COLOR_GREEN2, string);
						ResetPlayerWeapons(playerid);
		    			GivePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma], 2);
					 	JugadorInfo[playerid][pManoDerCant] = 2;
					 	ActualizarManos(playerid);
					 	JugadorInfo[playerid][pBolCant][x] -= 2;
					    return 1;
					}
					else SendClientMessage(playerid, Rojo, "No hay suficientes cartuchos.");
				}
			}
			if(EncontreCargador == 0){SendClientMessage(playerid, Rojo, "¡No tienes un cargador!"); return 1;}
		}
		else if(Mano == 24) // Escopeta de combate
		{
			for(new x = 0; x<MAX_SLOTS_INV; x++)
			{
				if(JugadorInfo[playerid][pBol][x] == 50)
				{
				    if(JugadorInfo[playerid][pBolCant][x] >= 7)
				    {
					    EncontreCargador = 1; Disparos[playerid] = 0;
					    format(string, sizeof(string), "Cargas tu arma con 7 balas y está lista para ser usada.");
				        SendClientMessage(playerid, COLOR_GREEN2, string);
						ResetPlayerWeapons(playerid);
		    			GivePlayerWeapon(playerid, ObjetoInfo[Mano][IDArma], 7);
					 	JugadorInfo[playerid][pManoDerCant] = 7;
					 	ActualizarManos(playerid);
					 	JugadorInfo[playerid][pBolCant][x] -= 7;
					    return 1;
					}
					else SendClientMessage(playerid, Rojo, "No hay suficientes cartuchos.");
				}
			}
			if(EncontreCargador == 0){SendClientMessage(playerid, Rojo, "¡No tienes un cargador!"); return 1;}
		}
	}
	else SendClientMessage(playerid, COLOR_ROJO, "¡No necesitas cargar tu arma!");
	ActualizarManos(playerid);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd,"/cajero",true) == 0) //Ver comandos de un cajero
{
    if(JugadorInfo[playerid][pNivel] == 1) { SendClientMessage(playerid, Rojo, "Solo usuarios nivel 2 o superior pueden usar este comando"); return 1; }
    if(!GetPlayerCajero(playerid)){SendClientMessage(playerid, Rojo, "No estás en un cajero automático."); return 1;}
    MostrarATM(playerid, 1);
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/morir", true) == 0)
{
	if(PuedeMorir[playerid] == 1)
	{
		if(JugadorInfo[playerid][pMuerto] > 0)
		{
		    if(ForzoMuerte[playerid] == 1)
		    {
		        TogglePlayerControllable(playerid, 0);
		        SetPlayerPos(playerid, 1128.9801,-1490.0947,22.7690);
		        SetPlayerVirtualWorld(playerid, playerid+2);
		        SetPlayerCameraPos(playerid, 1060.6636, -3005.4705, 138.1333);
				SetPlayerCameraLookAt(playerid, 1060.6927, -3006.4761, 138.0934);
				SetTimerEx("VolverReaparecer", 180000, false, "i", playerid);
				SendClientMessage(playerid, -1, "Por la falta de médicos conectados, deberás esperar '3' minutos para volver a reaparecer el personaje.");
		        return 1;
		    }
		    for(new i; i < MAX_INFORMES; i++)
			{
				if(Informes[i][iPaciente] == playerid && Informes[i][iEstado] == 1)
				{
					Informes[i][iEstado] = 0;
					break;
				}
				else if(Informes[i][iPaciente] == playerid && Informes[i][iEstado] == 2)
				{
					DisablePlayerCheckpoint(Informes[i][iMedico]);
					SendClientMessage(Informes[i][iMedico], Naranja, "¡No has llegado a tiempo!");
					Informes[i][iEstado] = 0;
					Informes[i][iMedico] = NOEXISTE;
					break;
				}
			}
		    format(string, sizeof(string), "(( %s (ID: %d) ha usado el comando /morir. ))", NombreJugador(playerid), playerid);
		 	ProxDetector(20.0, playerid, string,COLOR_OOCA,COLOR_OOCB,COLOR_OOCC,COLOR_OOCD,COLOR_OOCE);
		 	for(new i = 0; zInfo:i < zInfo; i++) { HeridasInfo[playerid][zInfo:i] = 0; } // Reinicia todas las heridas a 0
		 	Delete3DTextLabel(Yo3DText[playerid2]);
	    	Delete3DTextLabel(Heridas[playerid2]);
		 	SetPlayerHealth(playerid, 50.0);
			for(new i = 0; i < MAX_PLAYERS; i++)
	     	{
				if(JugadorInfo[i][pAdmin] >= 1 || JugadorInfo[i][pFaccion] == 1 || JugadorInfo[i][pFaccion] == 2)
				{
	        		format(string, sizeof(string), "[Aviso] El jugador %s (ID: %d) ha usado el comando /morir. Posible evasión de rol.", NombreJugador(playerid), playerid);
					SendClientMessage(i, 0xF63A37FF, string);
				}
			}
		    ClearAnimations(playerid);
		    TogglePlayerControllable(playerid, 1);
		    Muerte[playerid] = JugadorInfo[playerid][pMuerto];
			JugadorInfo[playerid][pMuerto] = 0;
			SetPlayerPos(playerid, 1128.9801,-1490.0947,22.7690);
			SetPlayerFacingAngle(playerid, 360);
			Muerte[playerid] = 0;
		    JailPlayerIC(playerid);
			if(JugadorInfo[playerid][pEncarcelado] == 0)
			{
			    SetPlayerVirtualWorld(playerid, 0);
			    SetPlayerInterior(playerid, 0);
			    GetPlayerLevel(playerid);
			    LimpiarChat(playerid, 20);
			    SendClientMessage(playerid, Naranja, "Tu personaje ha reaparecido y perdiste la memoria.");
  				SendClientMessage(playerid, -1, " ");
  				PuedeMorir[playerid] = 0;
  				new descuento = random(100);
  				JugadorInfo[playerid][pDineroBanco] -= 200+descuento;
			}
		}
	}
	return 1;
}

if(strcmp(cmd, "/aceptar", true) == 0) //Aceptar proposiciones
{
    new opcion[60];
	opcion = strtok(cmdtext, idx);
	if(!strlen(opcion))
	{
	    SendClientMessage(playerid, Rojo, "USO: /aceptar <facción - multa - compraveh - reparación - repintado - contrato - misión - saludo - llave>");
	    return 1;
	}
	if(strcmp(opcion,"faccion",true) == 0)
	{
		if(reclutarfaccion[playerid] == 0){SendClientMessage(playerid, Rojo, "Nadie te ha ofrecido formar parte de su facción."); return 1;}
		if(!GetPlayersProx(5.0, playerid, reclutarlider[playerid])){SendClientMessage(playerid, Rojo, "Demasiado lejos."); reclutarlider[playerid] = 0, reclutarfaccion[playerid] = 0; return 1;}
		JugadorInfo[playerid][pFaccion] = reclutarfaccion[playerid];
		JugadorInfo[playerid][pRango] = 1;
		format(string, sizeof(string), "Ahora formas parte de la facción #%d.", reclutarfaccion[playerid]);
	    SendClientMessage(playerid, Amarillo, string);
	    format(string, sizeof(string), "%s forma ahora parte de tu facción.", NombreJugador(playerid));
	    SendClientMessage(reclutarlider[playerid], Amarillo, string);
	    reclutarfaccion[playerid] = 0;
	    reclutarlider[playerid] = NOEXISTE;
	    return 1;
	}
	if(strcmp(opcion,"multa",true) == 0)
	{
	    if(MultaPrecio[playerid] == 0 || Multador[playerid] == NOEXISTE){SendClientMessage(playerid, Rojo, "Nadie te ha entregado una multa."); return 1;}
	    if(!GetPlayersProx(5.0, playerid, Multador[playerid])){SendClientMessage(playerid, Rojo, "Demasiado lejos."); Multador[playerid] = -1, MultaPrecio[playerid] = 0; return 1;}
		JugadorInfo[playerid][pDineroBanco] -= MultaPrecio[playerid];
		new Recibo = (5*MultaPrecio[playerid]/100);
		if(Recibo < 1)Recibo = 0;
		JugadorInfo[Multador[playerid]][pDineroBanco] += Recibo;
		format(string, sizeof(string), "Has pagado tu multa de %d$ a %s. El dinero se te descontará del banco", MultaPrecio[playerid], NombreJugador(Multador[playerid]));
		SendClientMessage(playerid, Amarillo, string);
		format(string, sizeof(string), "%s ha pagado tu multa de %d$. Recibes una recompensa de %d$ en tu cuenta bancaria.", NombreJugador(playerid), MultaPrecio[playerid], Recibo);
		SendClientMessage(Multador[playerid], Amarillo, string);
		Multador[playerid] = NOEXISTE;
		MultaPrecio[playerid] = 0;
	    return 1;
	}
	if(strcmp(opcion,"compraveh",true) == 0)
	{
	    if(VenderVehAVendedor[playerid] == NOEXISTE){SendClientMessage(playerid, Rojo, "Nadie te ha ofrecido comprar un vehículo."); return 1;}
		if(GetPlayerMoney(playerid) < VenderVehAPrecio[playerid]){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero en mano."); return 1;}
		if(!GetPlayersProx(5.0, playerid, VenderVehAVendedor[playerid])){SendClientMessage(playerid, Rojo, "Demasiado lejos."); VenderVehAVendedor[playerid] = NOEXISTE; return 1;}
		new EsPropietario;
		for(new x; x < 5; x++)
		{
			if(JugadorInfo[VenderVehAVendedor[playerid]][pLlaveCoche][x] == VenderVehALlave[playerid])
			{
				EsPropietario = 1;
				break;
			}
		}
		if(!EsPropietario){SendClientMessage(playerid, Rojo, "La oferta ha expirado."); return 1;}
		GivePlayerMoneyAC(playerid, -VenderVehAPrecio[playerid]);
		GivePlayerMoneyAC(VenderVehAVendedor[playerid], VenderVehAPrecio[playerid]);
		format(string, sizeof(string), "Has comprado un vehículo a %s por %d$.", NombreJugador(VenderVehAVendedor[playerid]), VenderVehAPrecio[playerid]);
		SendClientMessage(playerid, Verde, string);
		format(string, sizeof(string), "%s te ha comprado tu vehículo por %d$.", NombreJugador(playerid), VenderVehAPrecio[playerid]);
		SendClientMessage(VenderVehAVendedor[playerid], Verde, string);
		printf("%s ha vendido un vehículo (SA-%d) a %s por %d.", NombreJugador(VenderVehAVendedor[playerid]), VenderVehALlave[playerid], NombreJugador(playerid), VenderVehAPrecio[playerid]);
		format(string, sizeof(string), "%s vende un vehículo a %s y le entrega los papeles.", NombreJugadorProxy(VenderVehAVendedor[playerid]), NombreJugadorProxy(playerid));
 	    ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		for(new x; x < 5; x++)
		{
			if(JugadorInfo[playerid][pLlaveCoche][x] == 0)
			{
				JugadorInfo[playerid][pLlaveCoche][x] = VenderVehALlave[playerid];
				break;
			}
		}
		for(new x; x < 5; x++)
		{
			if(JugadorInfo[VenderVehAVendedor[playerid]][pLlaveCoche][x] == VenderVehALlave[playerid])
			{
				JugadorInfo[VenderVehAVendedor[playerid]][pLlaveCoche][x] = 0;
				break;
			}
		}
		RemovePlayerFromVehicle(VenderVehAVendedor[playerid]);
		return 1;
	}
	if(strcmp(opcion,"reparacion",true) == 0)
	{
        if(ReparacionTipo[playerid] == 0 || ReparacionMeca[playerid] == NOEXISTE){SendClientMessage(playerid, Rojo, "Nadie te ha ofrecido una reparación."); return 1;}
		if(!GetPlayersProx(5.0, playerid, ReparacionMeca[playerid])){SendClientMessage(playerid, Rojo, "Demasiado lejos."); ReparacionMeca[playerid] = NOEXISTE; ReparacionTipo[playerid] = 0; ReparacionPrecio[playerid] = 0; return 1;}
		if(!GetPlayerTaller(playerid)){SendClientMessage(playerid, Rojo, "No estás en un taller."); ReparacionMeca[playerid] = NOEXISTE, ReparacionTipo[playerid] = 0; ReparacionPrecio[playerid] = 0; return 1;}
		if(GetPlayerMoney(playerid) < ReparacionPrecio[playerid]){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); ReparacionMeca[playerid] = NOEXISTE, ReparacionTipo[playerid] = 0; ReparacionPrecio[playerid] = 0; return 1;}
		if(ReparacionTipo[playerid] == 1) //Motor
		{
			new mecanico = ReparacionMeca[playerid], precio = ReparacionPrecio[playerid], coche = GetPlayerVehicleID(playerid);
			format(string, sizeof(string), "Has aceptado la reparación del motor de %s por %d$. Espera a que se repare.", NombreJugador(mecanico), precio);
			SendClientMessage(playerid, Amarillo, string);
			format(string, sizeof(string), "%s ha aceptado tu reparación del motor por %d$.", NombreJugador(playerid), precio);
			SendClientMessage(mecanico, Amarillo, string);
			format(string, sizeof(string), "%s comienza a repararle el motor a %s.", NombreJugadorProxy(mecanico), NombreJugadorProxy(playerid));
 	    	ProxDetector(15.0, mecanico, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
 	    	TogglePlayerControllable(playerid, 0);
			SetTimerEx("Descongelar", 20000, false, "i", playerid);
			GameTextForPlayer(playerid, "~g~Reparando motor", 20000, 3);
			SetTimerEx("RepararMeca", 20000, false, "i d d", playerid, ReparacionTipo[playerid], coche);
			GivePlayerMoneyAC(playerid, -precio);
			GivePlayerMoneyAC(mecanico, precio-30);
			if(GetPlayerTaller(mecanico) == JugadorInfo[mecanico][pTaller]){NegocioInfo[JugadorInfo[mecanico][pTaller]][nDineroGuardado] += 30;}
			JugadorInfo[mecanico][pHabMec] ++;
			ReparacionTipo[playerid] = 0;
			ReparacionMeca[playerid] = NOEXISTE;
			ReparacionPrecio[playerid] = 0;
			SiendoReparado[playerid] = 1;
			return 1;
		}
		if(ReparacionTipo[playerid] == 2) //Carrocería
		{
			new mecanico = ReparacionMeca[playerid], precio = ReparacionPrecio[playerid], coche = GetPlayerVehicleID(playerid);
			format(string, sizeof(string), "Has aceptado la reparación de la carrocería de %s por %d$. Espera a que se repare.", NombreJugador(mecanico), precio);
			SendClientMessage(playerid, Amarillo, string);
			format(string, sizeof(string), "%s ha aceptado tu reparación de la carrocería por %d$.", NombreJugador(playerid), precio);
			SendClientMessage(mecanico, Amarillo, string);
			format(string, sizeof(string), "%s comienza a repararle la carrocería a %s.", NombreJugadorProxy(mecanico), NombreJugadorProxy(playerid));
 	    	ProxDetector(15.0, mecanico, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
 	    	TogglePlayerControllable(playerid, 0);
			SetTimerEx("Descongelar", 30000, false, "i", playerid);
			GameTextForPlayer(playerid, "~g~Reparando carroceria", 30000, 3);
			SetTimerEx("RepararMeca", 30000, false, "i d d", playerid, ReparacionTipo[playerid], coche);
			GivePlayerMoneyAC(playerid, -precio);
			GivePlayerMoneyAC(mecanico, precio-30);
			if(GetPlayerTaller(mecanico) == JugadorInfo[mecanico][pTaller]){NegocioInfo[JugadorInfo[mecanico][pTaller]][nDineroGuardado] += 30;}
			JugadorInfo[mecanico][pHabMec] ++;
			ReparacionTipo[playerid] = 0;
			ReparacionMeca[playerid] = NOEXISTE;
			ReparacionPrecio[playerid] = 0;
			SiendoReparado[playerid] = 1;
			return 1;
		}
		if(ReparacionTipo[playerid] == 3) //Ruedas
		{
			new mecanico = ReparacionMeca[playerid], precio = ReparacionPrecio[playerid], coche = GetPlayerVehicleID(playerid);
			format(string, sizeof(string), "Has aceptado la reparación de las ruedas de %s por %d$. Espera a que se repare.", NombreJugador(mecanico), precio);
			SendClientMessage(playerid, Amarillo, string);
			format(string, sizeof(string), "%s ha aceptado tu reparación de las ruedas por %d$.", NombreJugador(playerid), precio);
			SendClientMessage(mecanico, Amarillo, string);
			format(string, sizeof(string), "%s comienza a repararle las ruedas a %s.", NombreJugadorProxy(mecanico), NombreJugadorProxy(playerid));
 	    	ProxDetector(15.0, mecanico, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
 	    	TogglePlayerControllable(playerid, 0);
			SetTimerEx("Descongelar", 15000, false, "i", playerid);
			GameTextForPlayer(playerid, "~g~Reparando ruedas", 15000, 3);
			SetTimerEx("RepararMeca", 15000, false, "i d d", playerid, ReparacionTipo[playerid], coche);
			GivePlayerMoneyAC(playerid, -precio);
			GivePlayerMoneyAC(mecanico, precio-30);
			if(GetPlayerTaller(mecanico) == JugadorInfo[mecanico][pTaller]){NegocioInfo[JugadorInfo[mecanico][pTaller]][nDineroGuardado] += 30;}
			JugadorInfo[mecanico][pHabMec] ++;
			ReparacionTipo[playerid] = 0;
			ReparacionMeca[playerid] = NOEXISTE;
			ReparacionPrecio[playerid] = 0;
			SiendoReparado[playerid] = 1;
			return 1;
		}
	}
	if(strcmp(opcion,"repintado",true) == 0)
	{
	    if(RepintadoMeca[playerid] == NOEXISTE){SendClientMessage(playerid, Rojo, "Nadie te ha ofrecido una repintar tu vehículo."); return 1;}
		if(!GetPlayersProx(5.0, playerid, RepintadoMeca[playerid])){SendClientMessage(playerid, Rojo, "Demasiado lejos."); RepintadoMeca[playerid] = NOEXISTE; RepintadoColor1[playerid] = 0; RepintadoColor2[playerid] = 0; RepintadoPrecio[playerid] = 0; return 1;}
		if(!GetPlayerTaller(playerid)){SendClientMessage(playerid, Rojo, "No estás en un taller."); RepintadoMeca[playerid] = NOEXISTE, RepintadoColor1[playerid] = 0; RepintadoColor2[playerid] = 0; RepintadoPrecio[playerid] = 0; return 1;}
		if(GetPlayerMoney(playerid) < RepintadoPrecio[playerid]){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); RepintadoMeca[playerid] = NOEXISTE, RepintadoColor1[playerid] = 0; RepintadoColor2[playerid] = 0; RepintadoPrecio[playerid] = 0; return 1;}
		new mecanico = RepintadoMeca[playerid], precio = RepintadoPrecio[playerid], color1 = RepintadoColor1[playerid], color2 = RepintadoColor2[playerid], coche = GetPlayerVehicleID(playerid);
		format(string, sizeof(string), "Has aceptado el repintado de %s por %d$.", NombreJugador(mecanico), precio);
		SendClientMessage(playerid, Amarillo, string);
		format(string, sizeof(string), "%s ha aceptado tu repintado por %d$.", NombreJugador(playerid), precio);
		SendClientMessage(mecanico, Amarillo, string);
		format(string, sizeof(string), "%s comienza a repintarle el vehículo a %s.", NombreJugadorProxy(mecanico), NombreJugadorProxy(playerid));
    	ProxDetector(15.0, mecanico, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
    	TogglePlayerControllable(playerid, 0);
    	SetTimerEx("Descongelar", 15000, false, "i", playerid);
		GameTextForPlayer(playerid, "~g~Repintando vehiculo", 15000, 3);
		SetTimerEx("RepintarMeca", 15000, false, "i d d d", playerid, color1, color2, coche);
    	GivePlayerMoneyAC(playerid, -precio);
		GivePlayerMoneyAC(mecanico, precio-200);
		if(GetPlayerTaller(mecanico) == JugadorInfo[mecanico][pTaller]){NegocioInfo[JugadorInfo[mecanico][pTaller]][nDineroGuardado] += 200;}
		JugadorInfo[mecanico][pHabMec] ++;
		RepintadoColor1[playerid] = 0;
		RepintadoColor2[playerid] = 0;
		RepintadoMeca[playerid] = NOEXISTE;
		RepintadoPrecio[playerid] = 0;
		return 1;
	}
	if(strcmp(opcion,"contrato",true) == 0)
	{
	    if(Contratador[playerid] == NOEXISTE){SendClientMessage(playerid, Rojo, "Nadie te ha ofrecido un contrato."); return 1;}
		if(!GetPlayersProx(5.0, playerid, Contratador[playerid])){SendClientMessage(playerid, Rojo, "Demasiado lejos."); Contratador[playerid] = NOEXISTE; Contrato[playerid] = 0; return 1;}
		if(Contrato[playerid] == 6) //Taller mecánico
		{
		    if(JugadorInfo[playerid][pTrabajo] != 7){SendClientMessage(playerid, Rojo, "No eres mecánico."); return 1;}
		    JugadorInfo[playerid][pTaller] = JugadorInfo[Contratador[playerid]][pNegocio];
		    JugadorInfo[playerid][pTrabajo] = 7;
		    format(string, sizeof(string), "Ahora trabajas de mecánico en un taller (%s). Puedes renunciar a ello con '/renunciar'", NombreJugador(Contratador[playerid]));
		    SendClientMessage(playerid, AmarilloClaro, string);
		    SendClientMessage(playerid, AmarilloClaro, "Puedes ver tus comandos disponibles en '/ayudatrabajo'");
		    format(string, sizeof(string), "%s trabaja ahora de mecánico en tu taller. Puedes despedirlo con '/despedir'", NombreJugador(playerid));
		    SendClientMessage(Contratador[playerid], Amarillo, string);
		    Contratador[playerid] = NOEXISTE;
		    Contrato[playerid] = 0;
		    return 1;
		}
	}
	if(strcmp(opcion,"saludo",true) == 0)
	{
	    if(ofertasaludo[idsaludado] != NOEXISTE)
		{
			new seleccion;
			seleccion = saludoid;
			ApplyAnimation(playerid,animsaludo[seleccion][animliba],animsaludo[seleccion][animnamea],4.0,0,0,0,3000,1,1);
			ApplyAnimation(ofertasaludo[playerid],animsaludo[seleccion][animliba],animsaludo[seleccion][animnamea],4.0,0,0,0,3000,1,1);
			ofertasaludo[idsaludado] = NOEXISTE;
		}
		else
		{
			SendClientMessage(playerid,COLOR_ROJO,"Nadie te ofreció un saludo");
			return 1;
		}
	}
	
	if(strcmp(opcion,"droga",true) == 0)
	{
	    if(DrogaOferta[playerid] != NOEXISTE)
		{
		    if(JugadorInfo[playerid][pManoDer] > 0){SendClientMessage(playerid, COLOR_ROJO, "Mano llena"); return 1;}
			if(GetPlayerMoney(playerid) < PrecioOferta[playerid]){SendClientMessage(playerid, COLOR_ROJO, "No tienes dinero"); return 1;}

			GivePlayerMoneyAC(playerid, -PrecioOferta[playerid]);
  			JugadorInfo[playerid][pManoDer] = ObjetoDroga(DrogaOferta[playerid]);
			JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[ObjetoDroga(DrogaOferta[playerid])][Capacidad];
			PonerObjeto(playerid, 1, ObjetoDroga(DrogaOferta[playerid]));
			GivePlayerMoneyAC(Camello[playerid], PrecioOferta[playerid]);
			SendClientMessage(Camello[playerid], COLOR_GREEN, "¡Venta realizada!");
			JugadorInfo[Camello[playerid]][pProductos] -= ProductosDroga(DrogaOferta[playerid]);
			DrogaOferta[playerid] = NOEXISTE;
		}
	}
	if(strcmp(opcion,"banco",true) == 0)
	{
	    if(ofertabanco[playerid] != NOEXISTE)
		{
            format(string, sizeof(string), "El dinero de la cuenta bancaria de %s es %d$", NombreJugador(playerid), JugadorInfo[playerid][pDineroBanco]);
  			SendClientMessage(ofertabanco[playerid], COLOR_GREEN2, string);

		    ofertabanco[playerid] = NOEXISTE;
		}
	}
	if(strcmp(opcion,"cachear",true) == 0)
	{
	    if(ofertacachear[playerid] != NOEXISTE)
		{
			new cacheado;
			cacheado = playerid;
			format(string, 128, "|_________ Pertenencias de %s _________|", NombreJugador(cacheado));
			SendClientMessage(ofertacachear[playerid], -1, string);
			for(new x = 0; x<MAX_SLOTS_INV; x++)
			{
			    if(JugadorInfo[cacheado][pBol][x] >= 1)
			    {
			    	format(string, sizeof(string), "%s (%d uds.)", ObjetoInfo[JugadorInfo[cacheado][pBol][x]][NombreObjeto], JugadorInfo[cacheado][pBolCant][x]);
			    	SendClientMessage(ofertacachear[playerid], COLOR_YELLOW, string);
				}
			}
			if(JugadorInfo[cacheado][pTrabajo] == 12) // Es camello
			{
				if(JugadorInfo[cacheado][pProductos] > 0)
				{
				    format(string, sizeof(string), "Productos (%d uds.)", JugadorInfo[cacheado][pProductos]);
  					SendClientMessage(ofertacachear[playerid], COLOR_YELLOW, string);
				}
			}
			if(JugadorInfo[cacheado][pManoDer] >= 1)
	  		{
		    	format(string, sizeof(string), "Mano derecha: %s (%d uds.)", ObjetoInfo[JugadorInfo[cacheado][pManoDer]][NombreObjeto], JugadorInfo[cacheado][pManoDerCant]);
		    	SendClientMessage(ofertacachear[playerid], COLOR_YELLOW, string);
			}
			if(JugadorInfo[cacheado][pManoIzq] >= 1)
	  		{
		    	format(string, sizeof(string), "Mano izquierda: %s (%d uds.)", ObjetoInfo[JugadorInfo[cacheado][pManoIzq]][NombreObjeto], JugadorInfo[cacheado][pManoIzqCant]);
		    	SendClientMessage(ofertacachear[playerid], COLOR_YELLOW, string);
			}
			format(string, sizeof(string), "%s cacheó los bolsillos de %s.", NombreJugadorProxy(ofertacachear[playerid]), NombreJugadorProxy(cacheado));
		 	ProxDetector(15.0, ofertacachear[playerid], string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
		 	format(string, sizeof(string), "Lleva en la cartera: %d $", GetPlayerMoney(cacheado));
  			SendClientMessage(ofertacachear[playerid], COLOR_YELLOW, string);
  			ofertacachear[cacheado] = NOEXISTE;
		}
		else
		{
			SendClientMessage(playerid,COLOR_ROJO,"Nadie quiere cachearte");
			return 1;
		}
	}
	if(strcmp(opcion,"llave",true) == 0)
	{
	    if(PrestadorCoche[playerid] == NOEXISTE || LlavePrestada[playerid] == NOEXISTE)
		{
		    PrestadorCoche[playerid] = NOEXISTE;
    		LlavePrestada[playerid] = NOEXISTE;
			SendClientMessage(playerid,Rojo,"Nadie te ha ofrecido prestarte la llave de su vehículo.");
			return 1;
		}
		if(!GetPlayersProx(5.0, playerid, PrestadorCoche[playerid]))
		{
		    PrestadorCoche[playerid] = NOEXISTE;
    		LlavePrestada[playerid] = NOEXISTE;
			SendClientMessage(playerid, Rojo, "Demasiado lejos.");
			return 1;
		}
		
		new tieneslotlibre = -1;
		for(new x=0; x<5; x++)
		{
		    if(JugadorInfo[playerid][pLlaveCochePrestado][x] == 0){tieneslotlibre = x; break;}
		}
		if(tieneslotlibre == -1){SendClientMessage(playerid, Rojo, "Tienes todos los slots de llaves prestadas ocupados."); return 1;}
		
		JugadorInfo[playerid][pLlaveCochePrestado][tieneslotlibre] = LlavePrestada[playerid];

		format(string, sizeof(string), "Has aceptado la llave del coche SA-%d ofrecida por %s.", LlavePrestada[playerid], NombreJugador(PrestadorCoche[playerid]));
		SendClientMessage(playerid, Amarillo, string);
		format(string, sizeof(string), "%s ha aceptado tu llave del coche SA-%d.", NombreJugador(playerid), LlavePrestada[playerid]);
		SendClientMessage(PrestadorCoche[playerid], Amarillo, string);
		
		PrestadorCoche[playerid] = NOEXISTE;
		LlavePrestada[playerid] = NOEXISTE;
		return 1;
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/entrartaller", true) == 0) //Entrar a un taller privado
{
    if(!IsPlayerInAnyVehicle(playerid) || GetPlayerVehicleSeat(playerid) != 0){SendClientMessage(playerid,Rojo,"No estás en un vehículo como conductor."); return 1;}
	new coche = GetPlayerVehicleID(playerid), taller;
	for(new n=1; n <= TotalNegs; n++)
	{
	    if(NegocioInfo[n][nTipo] == 6 && IsVehicleInRangeOfPoint(2.0, coche, NegocioInfo[n][nTallerEX], NegocioInfo[n][nTallerEY], NegocioInfo[n][nTallerEZ])){taller = n; break;}
	}
	if(taller == 0){SendClientMessage(playerid,Rojo,"No se ha detectado ningún taller a tu alrededor."); return 1;}
	if(NegocioInfo[taller][nCerrado] == 1){SendClientMessage(playerid,Rojo,"El taller está cerrado."); return 1;}
	for(new i=0; i <= TotalVeh; i++)
    {
	    if(IsVehicleInRangeOfPoint(2.0, i, NegocioInfo[taller][nTallerSX], NegocioInfo[taller][nTallerSY], NegocioInfo[taller][nTallerSZ]) && GetVehicleVirtualWorld(i) == NegocioInfo[taller][nVirtualWorld])
		{
			SendClientMessage(playerid, Rojo, "Hay un vehículo al otro lado, no se puede pasar.");
        	return 1;
		}
    }
    SetVehiclePos(coche, NegocioInfo[taller][nTallerSX], NegocioInfo[taller][nTallerSY], NegocioInfo[taller][nTallerSZ]);
    SetVehicleZAngle(coche, NegocioInfo[taller][nTallerSRotZ]);
    SetVehicleVirtualWorld(coche, NegocioInfo[taller][nVirtualWorld]);
    LinkVehicleToInteriorEx(coche, NegocioInfo[taller][nInterior]);
    SetPlayerVirtualWorld(playerid, NegocioInfo[taller][nVirtualWorld]);
    SetPlayerInterior(playerid, NegocioInfo[taller][nInterior]);
    for(new i=0; i<MAX_PLAYERS; i++)
    {
        if(GetPlayerVehicleID(i) == coche)
        {
            SetPlayerVirtualWorld(i, NegocioInfo[taller][nVirtualWorld]);
            SetPlayerInterior(i, NegocioInfo[taller][nInterior]);
        }
    }
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/salirtaller", true) == 0) //Salir de un taller privado
{
    if(!IsPlayerInAnyVehicle(playerid) || GetPlayerVehicleSeat(playerid) != 0){SendClientMessage(playerid,Rojo,"No estás en un vehículo como conductor."); return 1;}
	new coche = GetPlayerVehicleID(playerid), taller;
	taller = GetPlayerDentroNego(playerid);
	if(NegocioInfo[taller][nTipo] != 6){SendClientMessage(playerid, Rojo, "No estás dentro de un taller privado."); return 1;}
	for(new i=0; i <= TotalVeh; i++)
    {
	    if(IsVehicleInRangeOfPoint(2.0, i, NegocioInfo[taller][nTallerEX], NegocioInfo[taller][nTallerEY], NegocioInfo[taller][nTallerEZ]) && GetVehicleVirtualWorld(i) == 0)
		{
			SendClientMessage(playerid, Rojo, "Hay un vehículo al otro lado, no se puede pasar.");
        	return 1;
		}
    }
    SetVehiclePos(coche, NegocioInfo[taller][nTallerEX], NegocioInfo[taller][nTallerEY], NegocioInfo[taller][nTallerEZ]);
    SetVehicleZAngle(coche, NegocioInfo[taller][nTallerERotZ]);
    SetVehicleVirtualWorld(coche, 0);
    LinkVehicleToInteriorEx(coche, 0);
    SetPlayerVirtualWorld(playerid, 0);
    SetPlayerInterior(playerid, 0);
    for(new i=0; i<MAX_PLAYERS; i++)
    {
        if(GetPlayerVehicleID(i) == coche)
        {
            SetPlayerVirtualWorld(i, 0);
            SetPlayerInterior(i, 0);
        }
    }
    return 1;
}
//
if(strcmp(cmd, "/entrar", true) == 0) //garages de facciones
{
    if(!IsPlayerInAnyVehicle(playerid) || GetPlayerVehicleSeat(playerid) != 0){SendClientMessage(playerid,Rojo,"No estás en un vehículo como conductor."); return 1;}
	new coche = GetPlayerVehicleID(playerid);
	if(IsPlayerInRangeOfPoint(playerid, 7.0, 1560.2869,-1696.1354,6.0242)) // Exterior LSPD verona.
	{
	    for(new i=0; i <= MAX_VEHICLES; i++)
	    {
		    if(IsVehicleInRangeOfPoint(7.0, i, -1631.3132,694.1708,6.98352))
			{
				SendClientMessage(playerid, Rojo, "Hay un vehículo al otro lado, no se puede pasar.");
	        	return 1;
			}
	    }
	    if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
		SetVehiclePos(coche, -1631.3132,694.1708,6.9835);
		SetVehicleZAngle(coche, 270);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 7.0, 1827.0978,-1539.1107,13.2070)) // Exterior Prisión alhambra.
	{
	    for(new i=0; i <= MAX_VEHICLES; i++)
	    {
		    if(IsVehicleInRangeOfPoint(7.0, i, 1819.2451,-1536.8386,13.1461))
			{
				SendClientMessage(playerid, Rojo, "Hay un vehículo al otro lado, no se puede pasar.");
	        	return 1;
			}
	    }
	    if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
		SetVehiclePos(coche, 1819.2451,-1536.8386,13.1461);
		SetVehicleZAngle(coche, 82);
		// poner virtual world
	}
	return 1;
}

if(strcmp(cmd, "/salir", true) == 0) //garages de facciones
{
    if(!IsPlayerInAnyVehicle(playerid) || GetPlayerVehicleSeat(playerid) != 0){SendClientMessage(playerid,Rojo,"No estás en un vehículo como conductor."); return 1;}
	new coche = GetPlayerVehicleID(playerid);
	if(IsPlayerInRangeOfPoint(playerid, 7.0, -1631.3132,694.1708,6.9835)) // interior garage LSPD verona.
	{
	    for(new i=0; i <= MAX_VEHICLES; i++)
	    {
		    if(IsVehicleInRangeOfPoint(7.0, i, 1560.2869,-1696.1354,6.0242))
			{
				SendClientMessage(playerid, Rojo, "Hay un vehículo al otro lado, no se puede pasar.");
	        	return 1;
			}
	    }
	    if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
		SetVehiclePos(coche, 1560.2869,-1696.1354,6.0242);
		SetVehicleZAngle(coche, 180);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 7.0, 1819.2451,-1536.8386,13.1461)) // interior prisión alhambra.
	{
	    for(new i=0; i <= MAX_VEHICLES; i++)
	    {
		    if(IsVehicleInRangeOfPoint(8.0, i, 1828.3843,-1545.3126,13.1312))
			{
				SendClientMessage(playerid, Rojo, "Hay un vehículo al otro lado, no se puede pasar.");
	        	return 1;
			}
	    }
	    if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
		SetVehiclePos(coche, 1828.3843,-1545.3126,13.1312);
		SetVehicleZAngle(coche, 165.45);
		SetVehicleVirtualWorld(coche, 0);
		SetPlayerVirtualWorld(playerid, 0);
		// poner virtual world
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/parking", true) == 0) //Entrar a un parking público o privado
{
	if(!IsPlayerInAnyVehicle(playerid) || GetPlayerVehicleSeat(playerid) != 0){SendClientMessage(playerid,Rojo,"No estás en un vehículo como conductor."); return 1;}
	new coche = GetPlayerVehicleID(playerid);
	if(IsPlayerInRangeOfPoint(playerid, 4.0, 1585.6000000, -1678.8000500, 5.9000000)) //1ª planta parking LSPD
	{
        for(new i=0; i <= TotalVeh; i++)
	    {
		    if(IsVehicleInRangeOfPoint(6.0, i, -1605.3000500, 733.3000100, -5.2000000) && GetVehicleVirtualWorld(i) == 1)
			{
				SendClientMessage(playerid, Rojo, "Hay un vehículo al otro lado, no se puede pasar.");
	        	return 1;
			}
	    }
		if(JugadorInfo[playerid][pFaccion] != 1){return 1;}
		SetVehiclePos(coche, -1605.3000500, 733.3000100, -5.2000000);
		SetVehicleZAngle(coche, 0);
	}
	else if(IsPlayerInRangeOfPoint(playerid, 4.0, -1605.3000500, 733.3000100, -5.2000000)) //2ª planta parking LSPD
	{
        for(new i=0; i <= TotalVeh; i++)
	    {
		    if(IsVehicleInRangeOfPoint(6.0, i, 1585.6000000, -1678.8000500, 5.9000000) && GetVehicleVirtualWorld(i) == 0)
			{
				SendClientMessage(playerid, Rojo, "Hay un vehículo al otro lado, no se puede pasar.");
	        	return 1;
			}
	    }
		SetVehiclePos(coche, 1585.6000000, -1678.8000500, 5.9000000);
		SetVehicleZAngle(coche, 270);
	}
	else
	{
		SendClientMessage(playerid, Rojo, "No estás en la puerta de un parking.");
	    return 1;
	}
	return 1;
}
//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/nameoff", true) == 0) //Ocultar nombres
{
	PlayerNameOff[playerid] = 1;
	for(new i = 0;i <= MAX_PLAYERS; i++)
	{
		ShowPlayerNameTagForPlayer(playerid,i, 0);
	}
	SendClientMessage(playerid, Amarillo, "Nombres de jugadores desactivados, '/NameON' para volver a activarlos.");
    return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/nameon", true) == 0) //Mostrar nombres
{
	PlayerNameOff[playerid] = 0;
	for(new i = 0;i <= MAX_PLAYERS; i++)
	{
		ShowPlayerNameTagForPlayer(playerid,i, 1);
	}
	SendClientMessage(playerid, Amarillo, "Nombres de jugadores activados.");
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/catalogo", true) == 0) //Ver coches de concesionario
{
    if(GetPlayerConcesionario(playerid) > 0)
	{
		format(string, 128, "Bienvenido al concesionario %s, puede observar nuestra gama de vehículos.", Concesionarios[GetPlayerConcesionarioEx(playerid)][cNombre]);
		SendClientMessage(playerid, COLOR_GREEN2, string);

        if(GetPlayerConcesionarioEx(playerid) == 0)
        {
            ShowModelSelectionMenu(playerid, catalogocoches1, "Catalogo", 0x00000099, 0xFFFFFFF96, 0xFF0000AA);
		}
		if(GetPlayerConcesionarioEx(playerid) == 1)
        {
       		ShowModelSelectionMenu(playerid, catalogocoches2, "Catalogo", 0x00000099, 0xFFFFFFF96, 0xFF0000AA);
		}
		if(GetPlayerConcesionarioEx(playerid) == 2)
        {
		    ShowModelSelectionMenu(playerid, catalogocoches3, "Catalogo", 0x00000099, 0xFFFFFFF96, 0xFF0000AA);
		}
		if(GetPlayerConcesionarioEx(playerid) == 3)
        {
       		ShowModelSelectionMenu(playerid, catalogocoches4, "Catalogo", 0x00000099, 0xFFFFFFF96, 0xFF0000AA);
		}
		if(GetPlayerConcesionarioEx(playerid) == 4)
        {
       		ShowModelSelectionMenu(playerid, catalogocoches5, "Catalogo", 0x00000099, 0xFFFFFFF96, 0xFF0000AA);
		}
		if(GetPlayerConcesionarioEx(playerid) == 5)
        {
       		ShowModelSelectionMenu(playerid, catalogocoches6, "Catalogo", 0x00000099, 0xFFFFFFF96, 0xFF0000AA);
		}
		if(GetPlayerConcesionarioEx(playerid) == 6)
        {
       		ShowModelSelectionMenu(playerid, catalogocoches7, "Catalogo", 0x00000099, 0xFFFFFFF96, 0xFF0000AA);
		}
	}
	else{SendClientMessage(playerid, Rojo, "No estás en un concesionario.");}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp("/comprarveh", cmd, true) == 0) //Comprar vehículos
{
    if(!GetPlayerConcesionario(playerid)){SendClientMessage(playerid, Rojo, "No estás en un concesionario."); return 1;}
    if(GetPlayerConcesionario(playerid) == 7 && JugadorInfo[playerid][pLicNavegacion] == 0){SendClientMessage(playerid, Rojo, "Necesitas licencia de navegación para comprar vehículos aquí."); return 1;}
    if(GetPlayerConcesionario(playerid) == 6 && JugadorInfo[playerid][pLicAviacion] == 0){SendClientMessage(playerid, Rojo, "Necesitas licencia de aviación para comprar vehículos aquí."); return 1;}
    if((GetPlayerConcesionario(playerid) >= 1 && GetPlayerConcesionario(playerid) <= 5) && JugadorInfo[playerid][pLicConduccion] == 0){SendClientMessage(playerid, Rojo, "Necesitas licencia de conducción para comprar vehículos aquí."); return 1;}
	cmd = strtok(cmdtext,idx);
 	if(!strlen(cmd))
	{
		SendClientMessage(playerid, Gris, "USO: /comprarveh [IdJugador/ParteDelNombre] [color1] [color2]");
	    return 1;
	}
	new tmpcar;
	tmpcar = strval(cmd);
	new EspacioLibre;
	for(new x = 0; x < 5; x++)
	{
	    if(JugadorInfo[playerid][pLlaveCoche][x] == 0){EspacioLibre = 1; break;}
	}
	if(EspacioLibre == 0){SendClientMessage(playerid, Rojo, "¡No tienes espacio en tu llavero!"); return 1;}
	
	if(datacar[tmpcar][dcConcesionario] != GetPlayerConcesionario(playerid))
	{
		SendClientMessage(playerid, Rojo, "Lo sentimos, el concesionario no tiene este modelo de vehículo.");
        return 1;
	}
	
	new Conce2 = GetPlayerConcesionarioEx(playerid);
	for(new i=0; i <= TotalVeh; i++)
	{
		if(IsVehicleInRangeOfPoint(10.0, i, Concesionarios[Conce2][ctX], Concesionarios[Conce2][ctY], Concesionarios[Conce2][ctZ]))
		{
			SendClientMessage(playerid, Rojo, "Ya hay un vehículo en el punto de entrega.");
			return 1;
		}
	}
	
	if(GetPlayerMoney(playerid) < datacar[tmpcar][dcPrecio] && JugadorInfo[playerid][pDineroBanco] < datacar[tmpcar][dcPrecio])
	{
		SendClientMessage(playerid, Rojo, "No tienes el dinero suficiente.");
		return 1;
	}
	
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
	    SendClientMessage(playerid, Gris, "USO: /comprarveh [vehículoID] [color1] [color2]");
	    return 1;
	}
	new color1;
	color1 = strval(tmp);
	
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
	    SendClientMessage(playerid, Gris, "USO: /comprarveh [vehículoID] [color1] [color2]");
	    return 1;
	}
	new color2;
	color2 = strval(tmp);

    for(new x; x < 5; x++)
	{
		if(JugadorInfo[playerid][pLlaveCoche][x] == 0)
		{
			JugadorInfo[playerid][pLlaveCoche][x] = CodigoLlave;
			break;
		}
	}
	
	SendClientMessage(playerid, Verde, "Has comprado un nuevo vehículo.");
	SendClientMessage(playerid, Amarillo, "El vendedor te ha entregado las llaves (/stats).");
	
	new Conce = datacar[tmpcar][dcConcesionario]-1;
	if(GetPlayerMoney(playerid) >= datacar[tmpcar][dcPrecio]){GivePlayerMoneyAC(playerid, -datacar[tmpcar][dcPrecio]);}
	else if(JugadorInfo[playerid][pDineroBanco] >= datacar[tmpcar][dcPrecio]){JugadorInfo[playerid][pDineroBanco] -= datacar[tmpcar][dcPrecio];}
	else{return 1;}
	new Coche = CreateVehicle(datacar[tmpcar][dcIDModel], Concesionarios[Conce][ctX], Concesionarios[Conce][ctY], Concesionarios[Conce][ctZ], 30.0, color1, color2, 3000000);
	CocheInfo[Coche][cID] = Coche;
	CocheInfo[Coche][cLlave] = CodigoLlave;
	CocheInfo[Coche][cModelo] = datacar[tmpcar][dcIDModel];
	CocheInfo[Coche][cPosX] = Concesionarios[Conce][ctX];
	CocheInfo[Coche][cPosY] = Concesionarios[Conce][ctY];
	CocheInfo[Coche][cPosZ] = Concesionarios[Conce][ctZ];
	CocheInfo[Coche][cZAngle] = 30.0;
	CocheInfo[Coche][cColor1] = color1;
	CocheInfo[Coche][cColor2] = color2;
	CocheInfo[Coche][cComprado] = 1;
	format(CocheInfo[Coche][cDueno], MAX_PLAYER_NAME, "%s", JugadorInfo[playerid][pNombre]);
	format(CocheInfo[Coche][cNombreModelo], MAX_PLAYER_NAME, "%s", datacar[tmpcar][dcNombre]);
	CocheInfo[Coche][cValor] = datacar[tmpcar][dcPrecio];
	CocheInfo[Coche][cGas] = 75;
	CocheInfo[Coche][cMaxMaletero] = EspaciosMaletero(GetVehicleModel(Coche));
	VehMaletero[Coche] = 0;
	
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(Coche,engine,lights,alarm,doors,bonnet,boot,objective);
	SetVehicleParamsEx(Coche,1,lights,alarm,doors,bonnet,boot,objective);
	
	SetVehicleMatricula(Coche);
	
	format(string,sizeof(string),"INSERT INTO vehiculos (Llave, Modelo) VALUES ('%d','%d')",CocheInfo[Coche][cLlave],CocheInfo[Coche][cModelo]);
    mysql_query(1, string);
    
	new ccount;
	new sql[80], row[512];
    format(sql, sizeof(sql), "SELECT SQLID FROM vehiculos ORDER BY SQLID DESC");
	mysql_query(1, sql);
	mysql_store_result();
	mysql_fetch_row(row);
	ccount = strval(row);
	mysql_free_result();
	
	CocheInfo[Coche][cSQLID] = ccount;
	
	SaveCar(Coche);
	
	CodigoLlave ++;
	TotalVeh ++;
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp("/examen", cmd, true) == 0) //Examen permisos
{
    if(IsPlayerInRangeOfPoint(playerid, 2.0, AutoEscuelas[0][AutoX], AutoEscuelas[0][AutoY], AutoEscuelas[0][AutoZ])) //Autoescuela conducción
    {
        if(JugadorInfo[playerid][pLicConduccion] == 1){SendClientMessage(playerid, Rojo, "Ya tienes la licencia de conducción."); return 1;}
        if(EnAutoEscuela[playerid] != 0){SendClientMessage(playerid, Rojo, "Ya estás haciendo algún examen."); return 1;}
        if(GetPlayerMoney(playerid) < 700){SendClientMessage(playerid, Rojo, "Necesitas 700$ para hacer este examen."); return 1;}
        TemaAutoescuelaCond(playerid, 0);
		EnAutoEscuela[playerid] = 1;
		CheckPointAutoEscuela[playerid] = 0;
		TogglePlayerControllable(playerid, 0);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, AutoEscuelas[1][AutoX], AutoEscuelas[1][AutoY], AutoEscuelas[1][AutoZ])) //Autoescuela aviación
    {
        if(JugadorInfo[playerid][pLicAviacion] == 1){SendClientMessage(playerid, Rojo, "Ya tienes la licencia de aviación."); return 1;}
        if(EnAutoEscuela[playerid] != 0){SendClientMessage(playerid, Rojo, "Ya estás haciendo algún examen."); return 1;}
        if(GetPlayerMoney(playerid) < 7000){SendClientMessage(playerid, Rojo, "Necesitas 7000$ para hacer este examen."); return 1;}
        EnAutoEscuela[playerid] = 2;
		CheckPointAutoEscuela[playerid] = 0;
        SendClientMessage(playerid, Amarillo, "Sube a la avioneta para comenzar el examen.");
	  	SetTimerEx("TimerAutoescuela", 15000, false, "i", playerid);
    }
    else if(IsPlayerInRangeOfPoint(playerid, 2.0, AutoEscuelas[2][AutoX], AutoEscuelas[2][AutoY], AutoEscuelas[2][AutoZ])) //Autoescuela navegación
    {
        if(JugadorInfo[playerid][pLicNavegacion] == 1){SendClientMessage(playerid, Rojo, "Ya tienes la licencia de navegación."); return 1;}
        if(EnAutoEscuela[playerid] != 0){SendClientMessage(playerid, Rojo, "Ya estás haciendo algún examen."); return 1;}
        if(GetPlayerMoney(playerid) < 1000){SendClientMessage(playerid, Rojo, "Necesitas 1000$ para hacer este examen."); return 1;}
		EnAutoEscuela[playerid] = 3;
		CheckPointAutoEscuela[playerid] = 0;
		SendClientMessage(playerid, Amarillo, "Sube a la lancha para comenzar el examen.");
	  	SetTimerEx("TimerAutoescuela", 15000, false, "i", playerid);
    }
    else{SendClientMessage(playerid, Rojo, "No estás en un lugar donde conseguir una licencia.");}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp("/comprar", cmd, true) == 0) //Muestra licencias al jugador
{
	if(!GetPlayerDentroNego(playerid)){return 1;}
	if(!EstaEnMostrador(playerid)){SendClientMessage(playerid, COLOR_ROJO, "Acércate al mostrador"); return 1;}
	new n = GetPlayerDentroNego(playerid);
	if(NegocioInfo[n][nTipo] == 1) //Restaurantes
	{
	    ShowMenuForPlayer(restaurantes, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegocioInfo[n][nTipo] == 2) //Bares
	{
	    ShowMenuForPlayer(bares, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegocioInfo[n][nTipo] == 3) //Comidas rápidas
	{
	    ShowMenuForPlayer(comidasrapidas, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegocioInfo[n][nTipo] == 4) //Discotecas
	{
	    ShowMenuForPlayer(discoteca, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegocioInfo[n][nTipo] == 5) //Puticlubs
	{
	    ShowMenuForPlayer(puticlub, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegocioInfo[n][nTipo] == 7) //Ammu Nations
	{
	    if(JugadorInfo[playerid][pNivel] < 2) { return SendClientMessage(playerid, COLOR_ROJO, "Eres nivel 1"), 1;}
	    if(JugadorInfo[playerid][pLicArmas] == 0) { return SendClientMessage(playerid, COLOR_ROJO, "No tienes licencia de armas"), 1;}
	    ShowMenuForPlayer(ammunation, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegocioInfo[n][nTipo] == 8) //24/7
	{
	    ShowMenuForPlayer(menu247, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegocioInfo[n][nTipo] == 9) //Tienda deportiva
	{
	    ShowMenuForPlayer(tiendadeportes, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegocioInfo[n][nTipo] == 10) //Ferretería
	{
		if(JugadorInfo[playerid][pNivel] < 2) { return SendClientMessage(playerid, COLOR_ROJO, "Eres nivel 1"), 1;}
	    ShowMenuForPlayer(ferreteria, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegocioInfo[n][nTipo] == 11) //Tienda ropa
	{
	    ShowMenuForPlayer(tiendaropa, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegocioInfo[n][nTipo] == 12) //Tienda electrónica
	{
	    ShowMenuForPlayer(electronica, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegocioInfo[n][nTipo] == 18) //Estanco
	{
	    ShowMenuForPlayer(estanco, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	if(NegocioInfo[n][nTipo] == 19) //licoreria
	{
	    ShowMenuForPlayer(licoreria, playerid);
		TogglePlayerControllable(playerid, 0);
	}
	return 1;
}

//---------------------------------------------------------------------------------------------------------------

if(strcmp(cmd, "/id", true) == 0)
{
	tmp = strtok(cmdtext, idx);
	if(!strlen(tmp))
	{
		SendClientMessage(playerid, Gris, "USO: /id [Nombre_Apellido]");
		return 1;
	}
	playerid2 = ReturnUser(tmp);
	if(!IsPlayerConnected(playerid2) || playerid2 == INVALID_PLAYER_ID){SendClientMessage(playerid, Rojo, "ID inválida o más de un jugador encontrados con ese nombre."); return 1;}
	format(string, 128, "ID: (%d) %s | Nivel: %d | Ping: %d", playerid2, NombreJugador(playerid2), JugadorInfo[playerid2][pNivel], GetPlayerPing(playerid2));
	SendClientMessage(playerid, Gris, string);
	return 1;
}
format(errorcmd, sizeof(errorcmd), "[Siglo-XXI] El comando '%s' no existe, por favor utiliza /ayuda", cmdtext); //Error al escribir mal un comando
return SendClientMessage(playerid, -1, errorcmd); //Error al escribir mal un comando
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    if(CocheLSPD(vehicleid) && JugadorInfo[playerid][pFaccion] != 1 && !ispassenger) //Si entra a un vehiculo policial y no es del LSPD, impedirle entrar.
    {
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		SetPlayerPos(playerid, X, Y, Z);
    }
    if(CocheLSFD(vehicleid) && JugadorInfo[playerid][pFaccion] != 2 && !ispassenger) //Si entra a un vehiculo bomberil y no es del LSFD, impedirle entrar.
    {
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		SetPlayerPos(playerid, X, Y, Z);
    }
    if(CocheLSTV(vehicleid) && JugadorInfo[playerid][pFaccion] != 4 && !ispassenger) //Si entra a un vehiculo bomberil y no es del LSFD, impedirle entrar.
    {
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		SetPlayerPos(playerid, X, Y, Z);
    }
    if(JugadorInfo[playerid][pMuerto] > 0) //Si entra a un vehiculo estando crack
    {
		new Float:X, Float:Y, Float:Z;
		GetPlayerPos(playerid, X, Y, Z);
		SetPlayerPos(playerid, X, Y, Z);
    }
    return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    if(vehicleid > MAX_VEHPUBLICO) { SaveCar(vehicleid); }
    VenderVeh[playerid] = 0;
    if(CinturonPuesto[playerid] == 1) //Quitarse cinturón
    {
        new string[128];
        format(string, sizeof(string), "%s se desabrocha el cinturón de seguridad.", NombreJugadorProxy(playerid));
 	    ProxDetector(15.0, playerid, string,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION,COLOR_ACCION);
        CinturonPuesto[playerid] = 0;
    }
    if(CocheLSTV(vehicleid))
    {
        if(DirectoLSNCoche[vehicleid] == playerid)
        {
            DirectoLSNCoche[vehicleid] = NOEXISTE;
            for(new i=0; i<MAX_PLAYERS; i++)
            {
                if(GetPlayerVehicleID(i) == vehicleid)SendClientMessage(i, NaranjaOscuro, "Este vehículo ha dejado de emitir en directo.");
            }
        }
    }
    if(TaxiConductor[playerid] != NOEXISTE)
    {
        new taxista = TaxiConductor[playerid], string[128];
        format(string, sizeof(string), "Has pagado a %s %d$ por el transporte en taxi.", NombreJugador(taxista), TaxiCoste[playerid]);
        SendClientMessage(playerid, Verde, string);
        format(string, sizeof(string), "%s te ha pagado %d$ por el transporte en taxi.", NombreJugador(playerid), TaxiCoste[playerid]);
        SendClientMessage(taxista, Verde, string);
        TaxiConductor[playerid] = NOEXISTE;
        TaxiPasajero[taxista] = NOEXISTE;
		TaxiCoste[playerid] = 0;
		return 1;
    }
    if(TaxiPasajero[playerid] != NOEXISTE)
    {
        new pasajero = TaxiPasajero[playerid], string[128];
        format(string, sizeof(string), "Has pagado a %s %d$ por el transporte en taxi.", NombreJugador(playerid), TaxiCoste[pasajero]);
        SendClientMessage(pasajero, Verde, string);
        format(string, sizeof(string), "%s te ha pagado %d$ por el transporte en taxi.", NombreJugador(pasajero), TaxiCoste[pasajero]);
        SendClientMessage(playerid, Verde, string);
        TaxiConductor[pasajero] = NOEXISTE;
        TaxiPasajero[playerid] = NOEXISTE;
		TaxiCoste[pasajero] = 0;
		return 1;
    }
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    Speedcap_OnPlayerStateChange(playerid, newstate);
    
    if(CocheInfo[GetPlayerVehicleID(playerid)][cRadioStatus] == 1)
	{
		PlayAudioStreamForPlayer(playerid, CocheInfo[GetPlayerVehicleID(playerid)][cRadioURL]);
	}
	if(oldstate == 2) //Era conductor
	{
		PlayerTextDrawHide(playerid,vvel[playerid]);
		PlayerTextDrawHide(playerid,fuel[playerid]);
		if(EnAutoEscuela[playerid] == 1)
		{
		    SendClientMessage(playerid, Rojo, "Tienes 10 segundos para volver al vehículo y seguir la parte práctica del examen.");
	  		SetTimerEx("TimerAutoescuela", 10000, false, "i", playerid);
		}
		if(EnAutoEscuela[playerid] == 2)
		{
		    SendClientMessage(playerid, Rojo, "Tienes 10 segundos para volver al avión.");
	  		SetTimerEx("TimerAutoescuela", 10000, false, "i", playerid);
		}
		if(EnAutoEscuela[playerid] == 3)
		{
		    SendClientMessage(playerid, Rojo, "Tienes 10 segundos para volver a la lancha.");
	  		SetTimerEx("TimerAutoescuela", 10000, false, "i", playerid);
		}
		if(Trabajando[playerid] == 1) //Trabajando
		{
		    if(JugadorInfo[playerid][pTrabajo] == 1) //Pizzero
		    {
		        SendClientMessage(playerid, Rojo, "Tienes 20 segundos para volver a la moto.");
		        TimerDejarTrabajar[playerid] = SetTimerEx("TimerDejarTrabajarF", 20000, false, "i", playerid);
		    }
		    if(JugadorInfo[playerid][pTrabajo] == 2) //Barrendero
		    {
		        SendClientMessage(playerid, Rojo, "Tienes 20 segundos para volver al limpiacalles.");
		        TimerDejarTrabajar[playerid] = SetTimerEx("TimerDejarTrabajarF", 20000, false, "i", playerid);
		    }
		    if(JugadorInfo[playerid][pTrabajo] == 3) //Camionero
		    {
		        SendClientMessage(playerid, Rojo, "Tienes 15 segundos para volver al Bobcat de repartos.");
		        TimerDejarTrabajar[playerid] = SetTimerEx("TimerDejarTrabajarF", 15000, false, "i", playerid);
		    }
		    if(JugadorInfo[playerid][pTrabajo] == 4) //Cosechador
		    {
		        SendClientMessage(playerid, Rojo, "Tienes 20 segundos para volver a la cosechadora.");
		        TimerDejarTrabajar[playerid] = SetTimerEx("TimerDejarTrabajarF", 20000, false, "i", playerid);
		    }
		    if(JugadorInfo[playerid][pTrabajo] == 5) //Fumigador aéreo
		    {
		        SendClientMessage(playerid, Rojo, "Tienes 20 segundos para volver al avión.");
		        TimerDejarTrabajar[playerid] = SetTimerEx("TimerDejarTrabajarF", 20000, false, "i", playerid);
		    }
		    if(JugadorInfo[playerid][pTrabajo] == 9) //Pescador
		    {
		        SendClientMessage(playerid, Rojo, "Tienes 20 segundos para volver al barco.");
		        TimerDejarTrabajar[playerid] = SetTimerEx("TimerDejarTrabajarF", 20000, false, "i", playerid);
		    }
		}
	}
	if(newstate == 2) //Es conductor
	{
		if(!IsABike(GetPlayerVehicleID(playerid)))
		{
	    	PlayerTextDrawShow(playerid,vvel[playerid]);
			PlayerTextDrawShow(playerid,fuel[playerid]);
		}
		if(CocheLSTV(GetPlayerVehicleID(playerid)) && JugadorInfo[playerid][pFaccion] != 4) //Es coche del LSRTV
		{
			RemovePlayerFromVehicle(playerid);
			return 1;
		}
	    if(CocheAutoescuelaCond(GetPlayerVehicleID(playerid))) //autoescuela conducir
	    {
			if(EnAutoEscuela[playerid] != 1){SendClientMessage(playerid, Rojo, "No estás haciendo un examen de conducción."); RemovePlayerFromVehicle(playerid); return 1;}
			if(CheckPointAutoEscuela[playerid] != 0){return 1;}
			SendClientMessage(playerid, Verde, "Realiza el recorrido pasando por los chekpoints. No vayas a más de 70 Km/h, ni dañes el vehículo.");
			KillTimer(MaxTiempoAutoEscuelaTimer[playerid]);
			MaxTiempoAutoEscuelaTimer[playerid] = SetTimerEx("MaxTiempoAutoEscuela", 600000, false, "i", playerid);
			CheckPointAutoEscuela[playerid] = 0;
			SetPlayerCheckpoint(playerid, ChecksPracticoCoche[0][0], ChecksPracticoCoche[0][1], ChecksPracticoCoche[0][2], 5.0);
		}
		if(CocheAutoescuelaAvion(GetPlayerVehicleID(playerid))) //autoescuela pilotar
	    {
	        if(EnAutoEscuela[playerid] != 2){SendClientMessage(playerid, Rojo, "No estás haciendo un examen de aviación."); RemovePlayerFromVehicle(playerid); return 1;}
	        if(CheckPointAutoEscuela[playerid] != 0){return 1;}
			SendClientMessage(playerid, Verde, "Realiza el recorrido pasando por los chekpoints en menos de cinco minutos.");
			KillTimer(MaxTiempoAutoEscuelaTimer[playerid]);
			MaxTiempoAutoEscuelaTimer[playerid] = SetTimerEx("MaxTiempoAutoEscuela", 300000, false, "i", playerid);
			CheckPointAutoEscuela[playerid] = 0;
			SetPlayerCheckpoint(playerid, ChecksPracticoAvion[0][0], ChecksPracticoAvion[0][1], ChecksPracticoAvion[0][2], 5.0);
	    }
	    if(CocheAutoescuelaBarco(GetPlayerVehicleID(playerid))) //autoescuela navegar
	    {
	        if(EnAutoEscuela[playerid] != 3){SendClientMessage(playerid, Rojo, "No estás haciendo un examen de navegación."); RemovePlayerFromVehicle(playerid); return 1;}
	        if(CheckPointAutoEscuela[playerid] != 0){return 1;}
			SendClientMessage(playerid, Verde, "Realiza el recorrido pasando por los chekpoints en menos de tres minutos y no dañes la embarcación.");
			KillTimer(MaxTiempoAutoEscuelaTimer[playerid]);
			MaxTiempoAutoEscuelaTimer[playerid] = SetTimerEx("MaxTiempoAutoEscuela", 180000, false, "i", playerid);
			CheckPointAutoEscuela[playerid] = 0;
			SetPlayerRaceCheckpoint(playerid, 0, ChecksPracticoBarco[0][0], ChecksPracticoBarco[0][1], ChecksPracticoBarco[0][2], ChecksPracticoBarco[1][0], ChecksPracticoBarco[1][1], ChecksPracticoBarco[1][2], 5.0);
	    }
     	if(IsAPizzaBike(GetPlayerVehicleID(playerid))) //Pizzero
	 	{
	 	    if(JugadorInfo[playerid][pTrabajo] != 1){SendClientMessage(playerid, Rojo, "No trabajas de pizzero."); RemovePlayerFromVehicle(playerid); return 1;}
	 	    if(Trabajando[playerid] == 0){SendClientMessage(playerid, COLOR_ROJO, "¡No estás trabajando!"); RemovePlayerFromVehicle(playerid); return 1;}
	 	    SendClientMessage(playerid, Verde, "Entrega los pedidos llevando la moto a los checkpoints del minimapa.");
	 	    if(PizzaRepartida[playerid] == 0)
	 	    {
	 	    	new casarand = random(588)+1;
	 	    	SetPlayerCheckpoint(playerid, CasaInfo[casarand][hEntradaX], CasaInfo[casarand][hEntradaY], CasaInfo[casarand][hEntradaZ], 5.0);
	 	    	PizzaRepartida[playerid] ++;
	 	    }
	 	    KillTimer(TimerDejarTrabajar[playerid]);
	 		return 1;
	 	}
		if(IsASweeper(GetPlayerVehicleID(playerid))) //Barrendero
		{
		    if(JugadorInfo[playerid][pTrabajo] != 2){SendClientMessage(playerid, Rojo, "No trabajas de barrendero."); RemovePlayerFromVehicle(playerid); return 1;}
		    if(Trabajando[playerid] == 0){SendClientMessage(playerid, COLOR_ROJO, "¡No estás trabajando!"); RemovePlayerFromVehicle(playerid); return 1;}
	 	    SendClientMessage(playerid, Verde, "Pasa por los checkpoint del minimapa con el limpiacalles para barrer esas zonas.");
	 	    if(CalleBarrida[playerid] == 0)
	 	    {
	 	    	new rand = random(sizeof(ChecksBarrendero));
	 	    	SetPlayerCheckpoint(playerid, ChecksBarrendero[rand][0], ChecksBarrendero[rand][1], ChecksBarrendero[rand][2], 5.0);
	 	    	CalleBarrida[playerid] ++;
	 	    }
	 	    KillTimer(TimerDejarTrabajar[playerid]);
			return 1;
		}
		if(IsACombine(GetPlayerVehicleID(playerid)))
		{
		    if(JugadorInfo[playerid][pTrabajo] != 4){SendClientMessage(playerid, Rojo, "No trabajas de cosechador."); RemovePlayerFromVehicle(playerid); return 1;}
		    if(Trabajando[playerid] == 0){SendClientMessage(playerid, COLOR_ROJO, "¡No estás trabajando!"); RemovePlayerFromVehicle(playerid); return 1;}
	 	    SendClientMessage(playerid, Verde, "Pasa por los checkpoints con la cosechadora.");
	 	    if(Cosechado[playerid] == 0)
	 	    {
	 	    	new rand = random(sizeof(ChecksCosechador));
	 	    	SetPlayerCheckpoint(playerid, ChecksCosechador[rand][0], ChecksCosechador[rand][1], ChecksCosechador[rand][2], 5.0);
	 	    	Cosechado[playerid] ++;
	 	    }
	 	    KillTimer(TimerDejarTrabajar[playerid]);
			return 1;
		}
		if(IsACropduster(GetPlayerVehicleID(playerid)))
		{
		    if(JugadorInfo[playerid][pTrabajo] != 5){SendClientMessage(playerid, Rojo, "No trabajas de fumigador aéreo."); RemovePlayerFromVehicle(playerid); return 1;}
		    if(Trabajando[playerid] == 0){SendClientMessage(playerid, COLOR_ROJO, "¡No estás trabajando!"); RemovePlayerFromVehicle(playerid); return 1;}
	 	    SendClientMessage(playerid, Verde, "Pasa por los checkpoints con el avión.");
	 	    SendClientMessage(playerid, Verde, "Si sales de la zona de fumigación dejarás de trabajar.");
	 	    if(Fumigado[playerid] == 0)
	 	    {
	 	    	new rand = random(sizeof(ChecksFumigador));
	 	    	SetPlayerRaceCheckpoint(playerid, 4, ChecksFumigador[rand][0], ChecksFumigador[rand][1], ChecksFumigador[rand][2], 0.0, 0.0, 0.0, 5.0);
	 	    	Fumigado[playerid] ++;
	 	    }
	 	    KillTimer(TimerDejarTrabajar[playerid]);
			return 1;
		}
		if(IsATaxi(GetPlayerVehicleID(playerid)))
		{
		    if(JugadorInfo[playerid][pTrabajo] != 6){SendClientMessage(playerid, Rojo, "No eres taxista."); RemovePlayerFromVehicle(playerid); return 1;}
		    if(Trabajando[playerid] == 0){SendClientMessage(playerid, Rojo, "No estás de servicio. Utiliza '/trabajar' primero."); RemovePlayerFromVehicle(playerid); return 1;}
			return 1;
		}
		if(IsABarcoPesca(GetPlayerVehicleID(playerid))) //Pescador
	 	{
	 	    if(JugadorInfo[playerid][pTrabajo] != 9){SendClientMessage(playerid, Rojo, "No trabajas de pescador."); RemovePlayerFromVehicle(playerid); return 1;}
	 	    if(Trabajando[playerid] == 0){SendClientMessage(playerid, COLOR_ROJO, "¡No estás trabajando!"); RemovePlayerFromVehicle(playerid); return 1;}
	 	    SendClientMessage(playerid, Verde, "Ve a los puntos de pesca a ver qué encuentras. Con un poco de suerte conseguirás una buena pesca.");
	 	    if(PescaRecogida[playerid] == 0)
	 	    {
	 	    	new rand = random(sizeof(ChecksPescador));
	 	    	SetPlayerCheckpoint(playerid, ChecksPescador[rand][0], ChecksPescador[rand][1], ChecksPescador[rand][2], 5.0);
	 	    	PescaRecogida[playerid] ++;
	 	    }
	 	    KillTimer(TimerDejarTrabajar[playerid]);
	 		return 1;
	 	}
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{
	    new newcar = GetPlayerVehicleID(playerid);
        new engine,lights,alarm,doors,bonnet,boot,objective;
		GetVehicleParamsEx(newcar,engine,lights,alarm,doors,bonnet,boot,objective);
		if(IsABike(newcar) && PlayerTieneLlaveVeh(playerid, newcar))
	    {
	    	SetVehicleParamsEx(newcar,1,lights,alarm,doors,bonnet,boot,objective);
		}
		else if(IsABike(newcar))
  		{
  		    RemovePlayerFromVehicle(playerid);
  		    SendClientMessage(playerid, COLOR_ROJO, "No eres dueño de esta bicicleta");
            SetVehicleParamsEx(newcar,0,lights,alarm,doors,bonnet,boot,objective);
  		}
	    if(engine == 0 && !IsABike(newcar)) //Si está apagado
		{
		    if(CocheLSPD(newcar) && JugadorInfo[playerid][pFaccion] == 1)
		    {
		        SendClientMessage(playerid, COLOR_GREEN, "Estás en tu vehículo de trabajo. Pulsa la tecla Alt para arrancarlo y apagarlo");
		    }
		    else if(CocheLSFD(newcar) && JugadorInfo[playerid][pFaccion] == 2)
		    {
		        SendClientMessage(playerid, COLOR_GREEN, "Estás en tu vehículo de trabajo. Pulsa la tecla Alt para arrancarlo y apagarlo");
		    }
		    else if(CocheLSTV(newcar) && JugadorInfo[playerid][pFaccion] == 4)
		    {
		        SendClientMessage(playerid, COLOR_GREEN, "Estás en tu vehículo de trabajo. Pulsa la tecla Alt para arrancarlo y apagarlo");
		    }
		    else {SendClientMessage(playerid, Verde, "Para encender el motor del vehículo presiona 'ALT' (o /encendermotor)");}
			
		}
		else
  		{
  		    if(!IsABike(newcar))
  		    {
  		        if(oldcarid[playerid] == newcar) { SendClientMessage(playerid, Verde, "¡Te has dejado el vehículo con el motor encendido!"); }
				else { SendClientMessage(playerid, Verde, "¡Se han dejado el vehículo con el motor encendido!"); }
			}
  		}
  		oldcarid[playerid] = newcar;
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 5.0, 2274.1028,-2345.5371,13.5469) || IsPlayerInRangeOfPoint(playerid, 8.0, 2294.3999000,-2447.8000500,0.0000000) || IsPlayerInRangeOfPoint(playerid, 8.0, 2286.8096,-2423.5090,3.0000)){DisablePlayerCheckpoint(playerid); return 1;} //Depósito Ocean Docks
	else if(LocalizarVeh[playerid] > 0){SendClientMessage(playerid, COLOR_GREEN, "Has llegado al punto de rastreo. ¿no ves tu vehículo? usa /reportar."); LocalizarVeh[playerid] = 0; DisablePlayerCheckpoint(playerid); return 1;}
	else if(EnAutoEscuela[playerid] == 1 && CocheAutoescuelaCond(GetPlayerVehicleID(playerid))) //Autoescuela conducción
	{
	    SetCheckPointAutoescuela(playerid);
	    if(CheckPointAutoEscuela[playerid] >= 25)
	    {
	        new Float:cVida, coche;
			coche = GetPlayerVehicleID(playerid);
	        GetVehicleHealth(coche, cVida);
	        if(cVida < 900) //Si el vehículo tiene más de 10% de daños
			{
				SendClientMessage(playerid, Rojo, "Has dañado demasiado el vehículo y has suspendido.");
				KillTimer(MaxTiempoAutoEscuelaTimer[playerid]);
				GameTextForPlayer(playerid, "~r~Suspenso", 1000, 6);
				GivePlayerMoneyAC(playerid, -100);
				CheckPointAutoEscuela[playerid] = 0;
				EnAutoEscuela[playerid] = 0;
                SetVehicleToRespawn(coche);
                DisablePlayerCheckpoint(playerid);
                return 1;
			}
			SendClientMessage(playerid, Verde, "¡Exámen superado!");
			SendClientMessage(playerid, Amarillo, "Has conseguido superar el exámen de conducción. Ahora tienes tu licencia de conducir por 700$.");
			KillTimer(MaxTiempoAutoEscuelaTimer[playerid]);
			JugadorInfo[playerid][pLicConduccion] = 1;
			GivePlayerMoneyAC(playerid, -700);
			CheckPointAutoEscuela[playerid] = 0;
			EnAutoEscuela[playerid] = 0;
            SetVehicleToRespawn(coche);
            DisablePlayerCheckpoint(playerid);
            return 1;
	    }
	}
	else if(EnAutoEscuela[playerid] == 2 && CocheAutoescuelaAvion(GetPlayerVehicleID(playerid))) //Autoescuela aviación
	{
	    if(CheckPointAutoEscuela[playerid] == 0 || CheckPointAutoEscuela[playerid] >= 17){SetCheckPointAutoescuela(playerid);}
	    if(CheckPointAutoEscuela[playerid] >= 20)
	    {
	        new coche;
			coche = GetPlayerVehicleID(playerid);
			SendClientMessage(playerid, Verde, "¡Exámen superado!");
			SendClientMessage(playerid, Amarillo, "Has conseguido superar el exámen de aviación. Ahora tienes tu licencia de aviador por 7000$.");
			KillTimer(MaxTiempoAutoEscuelaTimer[playerid]);
			JugadorInfo[playerid][pLicAviacion] = 1;
			GivePlayerMoneyAC(playerid, -7000);
			CheckPointAutoEscuela[playerid] = 0;
			EnAutoEscuela[playerid] = 0;
            SetVehicleToRespawn(coche);
            DisablePlayerCheckpoint(playerid);
            return 1;
	    }
	}
	else if(Trabajando[playerid] == 1) //Trabajando
	{
	    if(JugadorInfo[playerid][pTrabajo] == 1 && IsAPizzaBike(GetPlayerVehicleID(playerid))) //Pizero
	    {
	        if(PizzaRepartida[playerid] < 6)
	 	    {
	 	        SendClientMessage(playerid, Verde, "Has entregado una pizza. Ve a la siguiente casa.");
	 	    	new casarand = random(588)+1;
	 	    	SetPlayerCheckpoint(playerid, CasaInfo[casarand][hEntradaX], CasaInfo[casarand][hEntradaY], CasaInfo[casarand][hEntradaZ], 5.0);
	 	    	PizzaRepartida[playerid] ++;
	 	    	return 1;
	 	    }
	 	    if(PizzaRepartida[playerid] == 6)
	 	    {
	 	        SendClientMessage(playerid, Verde, "Has entregado la última pizza. Vuelve para recibir tu paga.");
	 	        SetPlayerCheckpoint(playerid, 2115.5234,-1778.9923,13.1571, 5.0);
	 	        PizzaRepartida[playerid] ++;
	 	        return 1;
	 	    }
	 	    if(PizzaRepartida[playerid] > 8)
	 	    {
	 	        SendClientMessage(playerid, Verde, "Has recibido 500$ por entregar en '6' casas.");
	 	        GivePlayerMoneyAC(playerid, 350);
	 	        PizzaRepartida[playerid] = 0;
	 	        SetPlayerSkin(playerid, JugadorInfo[playerid][pSkin]);
	 	        Trabajando[playerid] = 0;
	 	        //SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	 	        DisablePlayerCheckpoint(playerid);
	 	        JugadorInfo[playerid][pEsperaTrabajar] += 20;
				return 1;
	 	    }
	    }
	    if(JugadorInfo[playerid][pTrabajo] == 2 && IsASweeper(GetPlayerVehicleID(playerid))) //Barrendero
	    {
	        if(CalleBarrida[playerid] < 8)
	 	    {
	 	        SendClientMessage(playerid, Verde, "Ve a la siguiente zona para seguir barriendo.");
	 	    	new rand = random(sizeof(ChecksBarrendero));
	 	    	SetPlayerCheckpoint(playerid, ChecksBarrendero[rand][0], ChecksBarrendero[rand][1], ChecksBarrendero[rand][2], 5.0);
	 	    	CalleBarrida[playerid] ++;
	 	    	return 1;
	 	    }
	 	    if(CalleBarrida[playerid] == 8)
	 	    {
	 	        SendClientMessage(playerid, Verde, "Ya has barrido suficiente. Vuelve para recibir tu paga.");
	 	        SetPlayerCheckpoint(playerid, 1620.2510,-1888.7521,13.5481, 5.0);
	 	        CalleBarrida[playerid] ++;
	 	        return 1;
	 	    }
	 	    if(CalleBarrida[playerid] > 8)
	 	    {
	 	        SendClientMessage(playerid, Verde, "Has recibido 400$ por tu trabajo.");
	 	        GivePlayerMoneyAC(playerid, 400);
	 	        CalleBarrida[playerid] = 0;
	 	        SetPlayerSkin(playerid, JugadorInfo[playerid][pSkin]);
	 	        Trabajando[playerid] = 0;
	 	        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	 	        DisablePlayerCheckpoint(playerid);
	 	        JugadorInfo[playerid][pEsperaTrabajar] += 30;
				return 1;
	 	    }
	    }
	    if(JugadorInfo[playerid][pTrabajo] == 4 && IsACombine(GetPlayerVehicleID(playerid))) //Cosechador
	    {
	        if(Cosechado[playerid] < 16)
	 	    {
	 	    	new rand = random(sizeof(ChecksCosechador));
	 	    	SetPlayerCheckpoint(playerid, ChecksCosechador[rand][0], ChecksCosechador[rand][1], ChecksCosechador[rand][2], 5.0);
	 	    	Cosechado[playerid] ++;
	 	    	return 1;
	 	    }
	 	    if(Cosechado[playerid] == 16)
	 	    {
	 	        SendClientMessage(playerid, Verde, "Ya has cosechado suficiente. Vuelve para recibir tu paga.");
	 	        SetPlayerCheckpoint(playerid, -389.8043,-1476.0060,25.7266, 5.0);
	 	        Cosechado[playerid] ++;
	 	        return 1;
	 	    }
	 	    if(Cosechado[playerid] > 16)
	 	    {
	 	        SendClientMessage(playerid, Verde, "Has recibido 450$ por tu trabajo.");
	 	        GivePlayerMoneyAC(playerid, 450);
	 	        Cosechado[playerid] = 0;
	 	        Trabajando[playerid] = 0;
	 	        SetPlayerSkin(playerid, JugadorInfo[playerid][pSkin]);
	 	        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	 	        DisablePlayerCheckpoint(playerid);
	 	        JugadorInfo[playerid][pEsperaTrabajar] += 30;
				return 1;
	 	    }
	    }
	    if(JugadorInfo[playerid][pTrabajo] == 5 && IsACropduster(GetPlayerVehicleID(playerid))) //Fumigador aéreo
	    {
	        if(Fumigado[playerid] > 16)
	 	    {
	 	        SendClientMessage(playerid, Verde, "Has recibido 600$ por tu trabajo.");
	 	        GivePlayerMoneyAC(playerid, 600);
	 	        Fumigado[playerid] = 0;
	 	        Trabajando[playerid] = 0;
	 	        SetPlayerSkin(playerid, JugadorInfo[playerid][pSkin]);
	 	        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	 	        DisablePlayerCheckpoint(playerid);
	 	        JugadorInfo[playerid][pEsperaTrabajar] += 30;
				return 1;
	 	    }
	    }
	    if(JugadorInfo[playerid][pTrabajo] == 6 && IsATaxi(GetPlayerVehicleID(playerid))){DisablePlayerCheckpoint(playerid); return 1;} //Taxista
	    if(JugadorInfo[playerid][pTrabajo] == 9 && IsABarcoPesca(GetPlayerVehicleID(playerid))) //Pescador
	    {
	        new string[128];
     		if(PescaRecogida[playerid] > 11)
	 	    {
	 	        format(string, sizeof(string), "Has recibido %d$ por tu trabajo.", DineroPesca[playerid]);
	 	        SendClientMessage(playerid, Verde, string);
	 	        GivePlayerMoneyAC(playerid, DineroPesca[playerid]);
	 	        PescaRecogida[playerid] = 0;
	 	        DineroPesca[playerid] = 0;
	 	        Trabajando[playerid] = 0;
	 	        SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	 	        DisablePlayerCheckpoint(playerid);
	 	        SetPlayerPos(playerid, Jobs[8][Jx], Jobs[8][Jy], Jobs[8][Jz]);
	 	        JugadorInfo[playerid][pEsperaTrabajar] += 40;
				return 1;
	 	    }
	        TogglePlayerControllable(playerid, 0);
	        GameTextForPlayer(playerid, "~r~Pescando...", 15000, 3);
	        DisablePlayerCheckpoint(playerid);
	        SetVehicleVelocity(GetPlayerVehicleID(playerid), 0, 0, 0);
	        SetTimerEx("Pescar", 15000, false, "i", playerid);
	        return 1;
	    }
	}
	else if(RealizandoMision[playerid] == 1) //Misión conseguir droga
	{
	    if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Debes tener una mano vacía."); return 1;}
	    new probabilidad = random(20), droga;
	    if(probabilidad > 10) //Semilla marihuana
		{
		    droga = 85;
		}
		if(probabilidad > 5) //Marihuana
		{
		    droga = 75;
		}
		else if(probabilidad > 3) //Crack
		{
		    droga = 77;
		}
		else if(probabilidad > 1) //cocaina
		{
		    droga = 76;
		}
		else //Heroína
		{
		    droga = 78;
		}
		new cantidad = 10 + random(20);
		if(JugadorInfo[playerid][pManoDer] == 0)
		{
		    JugadorInfo[playerid][pManoDer] = droga, JugadorInfo[playerid][pManoDerCant] = cantidad;
		    PonerObjeto(playerid, 1, droga);
		}
		else if(JugadorInfo[playerid][pManoIzq] == 0)
		{
		    JugadorInfo[playerid][pManoIzq] = droga, JugadorInfo[playerid][pManoIzqCant] = cantidad;
		    PonerObjeto(playerid, 2, droga);
		}
		RealizandoMision[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
		return 1;
	}
	else if(RealizandoMision[playerid] == 2) //Misión conseguir arma
	{
        if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Debes tener una mano vacía."); return 1;}
        new probabilidad = random(20), arma;
        if(probabilidad > 4) //Pistola
		{
		    arma = 19;
		}
		else if(probabilidad > 3) //Desert Eagle
		{
		    arma = 21;
		}
		else if(probabilidad > 1) //Tec-9
		{
		    arma = 29;
		}
		else //Uzi
		{
		    arma = 25;
		}
		if(JugadorInfo[playerid][pManoDer] == 0)
		{
		    JugadorInfo[playerid][pManoDer] = arma, GivePlayerWeapon(playerid, ObjetoInfo[arma][IDArma], ObjetoInfo[arma][Capacidad]), JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[arma][Capacidad];
		    PonerObjeto(playerid, 1, arma);
		}
		else if(JugadorInfo[playerid][pManoIzq] == 0)
		{
		    JugadorInfo[playerid][pManoIzq] = arma, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[arma][Capacidad];
		    PonerObjeto(playerid, 2, arma);
		}
		RealizandoMision[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(JugadorInfo[playerid][pCheckpoint] == 16)
	{
		SendClientMessage(playerid, Naranja, "Llegaste al lugar del incidente");
		DisablePlayerCheckpoint(playerid);
		JugadorInfo[playerid][pCheckpoint] = 0;
		for(new i; i < MAX_INFORMES; i++)
		{
			if(Informes[i][iMedico] == playerid)
			{
				Informes[i][iMedico] = -1;
				break;
			}
		}
		return 1;
	}
	else if(JugadorInfo[playerid][pCheckpoint] == 17)
	{
		SendClientMessage(playerid, Naranja, "Llegaste al lugar del pedido");
		SendClientMessage(playerid, COLOR_YELLOW, "Primero que nada deberás pagarle al traficante y después recibirás tus productos. (/pagarle)");
		DisablePlayerCheckpoint(playerid);
		return 1;
	}
	else
	{
		DisablePlayerCheckpoint(playerid);
	}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
    if(EnAutoEscuela[playerid] == 2 && CocheAutoescuelaAvion(GetPlayerVehicleID(playerid))) //Autoescuela aviación
	{
	    if(CheckPointAutoEscuela[playerid] > 0 || CheckPointAutoEscuela[playerid] < 17){SetCheckPointAutoescuela(playerid);}
	}
	else if(EnAutoEscuela[playerid] == 3 && CocheAutoescuelaBarco(GetPlayerVehicleID(playerid))) //Autoescuela navegación
	{
	    if(CheckPointAutoEscuela[playerid] < 21){SetCheckPointAutoescuela(playerid);}
	    if(CheckPointAutoEscuela[playerid] >= 21)
	    {
	        new Float:cVida, coche;
			coche = GetPlayerVehicleID(playerid);
	        GetVehicleHealth(coche, cVida);
	        if(cVida < 900) //Si el vehículo tiene más de 10% de daños
			{
				SendClientMessage(playerid, Rojo, "Has dañado demasiado el vehículo y has suspendido.");
				KillTimer(MaxTiempoAutoEscuelaTimer[playerid]);
				GameTextForPlayer(playerid, "~r~Suspenso", 1000, 6);
				GivePlayerMoneyAC(playerid, -100);
				CheckPointAutoEscuela[playerid] = 0;
				EnAutoEscuela[playerid] = 0;
                SetVehicleToRespawn(coche);
                DisablePlayerRaceCheckpoint(playerid);
                return 1;
			}
			SendClientMessage(playerid, Verde, "Examen aprobado.");
			SendClientMessage(playerid, Amarillo, "Has conseguido superar el examen de navegación.");
			SendClientMessage(playerid, Amarillo, "Ahora tienes tu licencia de navegación por 1000$.");
			KillTimer(MaxTiempoAutoEscuelaTimer[playerid]);
			JugadorInfo[playerid][pLicNavegacion] = 1;
			GivePlayerMoneyAC(playerid, -1000);
			CheckPointAutoEscuela[playerid] = 0;
			EnAutoEscuela[playerid] = 0;
            SetVehicleToRespawn(coche);
            DisablePlayerRaceCheckpoint(playerid);
	    }
	}
	else if(Trabajando[playerid] == 1)
	{
	    if(JugadorInfo[playerid][pTrabajo] == 5 && IsACropduster(GetPlayerVehicleID(playerid))) //Fumigador aéreo
	    {
	        if(Fumigado[playerid] < 16)
	 	    {
	 	    	new rand = random(sizeof(ChecksFumigador));
	 	    	SetPlayerRaceCheckpoint(playerid, 4, ChecksFumigador[rand][0], ChecksFumigador[rand][1], ChecksFumigador[rand][2], 0.0, 0.0, 0.0, 5.0);
	 	    	Fumigado[playerid] ++;
	 	    	return 1;
	 	    }
	 	    if(Fumigado[playerid] == 16)
	 	    {
	 	        DisablePlayerRaceCheckpoint(playerid);
	 	        SendClientMessage(playerid, Verde, "Ya has fumigado suficiente. Vuelve para recibir tu paga.");
	 	        SetPlayerCheckpoint(playerid, -420.8315,-1726.2134,8.8748, 5.0);
	 	        Fumigado[playerid] ++;
	 	        return 1;
	 	    }
	    }
	}
	else{DisablePlayerRaceCheckpoint(playerid);}
	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
return 1;
}

public OnRconCommand(cmd[])
{
return 1;
}

public OnPlayerRequestSpawn(playerid)
{
return 1;
}

public OnObjectMoved(objectid)
{
	// Check if the object that moved was one of the eastern gates
	if (objectid == LSPrisonGatesObject[0])
	{
	    // Check if the eastern gates were closing
	    if (EasternGatesStatus == GATES_CLOSING)
	    {
	        // Set status flag for eastern gates
		    EasternGatesStatus = GATES_CLOSED;
	    }
	    else
	    {
	        // Set status flag for eastern gates
		    EasternGatesStatus = GATES_OPEN;
	    }
	}
	// Check if the object that moved was one of the southern gates
	else if (objectid == LSPrisonGatesObject[2])
	{
	    // Check if the southern gates were closing
	    if (SouthernGatesStatus == GATES_CLOSING)
	    {
	        // Set status flag for southern gates
		    SouthernGatesStatus = GATES_CLOSED;
	    }
	    else
	    {
	        // Set status flag for southern gates
		    SouthernGatesStatus = GATES_OPEN;
	    }
	}

	// Exit here
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	new string[250];
	if(GetPlayerMenu(playerid) == restaurantes) //restaurantes
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Botella de cerveza
            {
                new precio = 15, objeto = 61;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(restaurantes, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 1: //Copa de vino
            {
                new precio = 15, objeto = 62;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(restaurantes, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 2: //Vaso de whisky
            {
                new precio = 15, objeto = 63;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(restaurantes, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 3: //Vaso de ron
            {
                new precio = 15, objeto = 64;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(restaurantes, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 4: //Salir
            {
				HideMenuForPlayer(restaurantes, playerid);
            }
        }
    }
	if(GetPlayerMenu(playerid) == bares) //Bares
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Botella de cerveza
            {
                new precio = 15, objeto = 61;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(bares, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 1: //Botella de agua
            {
                new precio = 10, objeto = 60;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(bares, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 2: //Lata de fanta
            {
                new precio = 13, objeto = 59;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(bares, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 3: //Lata sprunk
            {
                new precio = 13, objeto = 58;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(bares, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 4: //Copa de vino
            {
                new precio = 15, objeto = 62;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(bares, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 5: //Vaso de whisky
            {
                new precio = 15, objeto = 63;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(bares, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 6: //Vaso de ron
            {
                new precio = 15, objeto = 64;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(bares, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 7: //Salir
            {
				HideMenuForPlayer(bares, playerid);
            }
        }
    }
    if(GetPlayerMenu(playerid) == comidasrapidas) //Comidas rápidas
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Lata de sprunk
            {
                new precio = 13, objeto = 58;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(comidasrapidas, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 1: //Lata de fanta
            {
                new precio = 13, objeto = 59;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(comidasrapidas, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 2: //Botella de agua
            {
                new precio = 10, objeto = 60;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(comidasrapidas, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 3: //Hamburguesa
            {
                new precio = 20, objeto = 65;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(comidasrapidas, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 4: //Burrito
            {
                new precio = 20, objeto = 66;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(comidasrapidas, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 5: //Pizza
            {
                new precio = 30, objeto = 67;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(comidasrapidas, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 6: //Salir
            {
				HideMenuForPlayer(comidasrapidas, playerid);
            }
        }
    }
    if(GetPlayerMenu(playerid) == discoteca) //Discoteca
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Lata de sprunk
            {
                new precio = 13, objeto = 58;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(discoteca, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 1: //Lata de fanta
            {
                new precio = 13, objeto = 59;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(discoteca, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 2: //Vaso de whisky
            {
                new precio = 13, objeto = 63;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(discoteca, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 3: //Vaso de ron
            {
                new precio = 13, objeto = 64;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(discoteca, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 4: //Salir
            {
				HideMenuForPlayer(discoteca, playerid);
            }
        }
    }
    if(GetPlayerMenu(playerid) == puticlub) //Puticlubs
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Botella de cerveza
            {
                new precio = 15, objeto = 61;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(puticlub, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 1: //Vaso de whisky
            {
                new precio = 15, objeto = 63;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(puticlub, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 2: //Vaso de ron
            {
                new precio = 15, objeto = 64;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(puticlub, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 3: //Salir
            {
				HideMenuForPlayer(puticlub, playerid);
            }
        }
    }
    if(GetPlayerMenu(playerid) == ammunation) //Ammu Nations
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Navaja
            {
                new precio = 100, objeto = 4;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ammunation, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 1: //Chaleco pesado
            {
                new precio = 15000, objeto = 164;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ammunation, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            /*case 2: //Pistola
            {
                new precio = 20, objeto = 5000;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = 0;}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = 0;}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ammunation, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }*/
            /*case 3: //Cargador Pistola
            {
                new precio = 500, objeto = 39;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ammunation, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }*/
            /*case 4: //Desert Eagle
            {
                new precio = 6000, objeto = 21;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = 0;}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = 0;}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ammunation, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }*/
            /*case 5: //Cargador Deagle
            {
                new precio = 600, objeto = 40;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ammunation, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }*/
            /*case 6: //Uzi
            {
                new precio = 7000, objeto = 25;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = 0;}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = 0;}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ammunation, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }*/
            /*case 7: //Cargador Uzi
            {
                new precio = 700, objeto = 41;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ammunation, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }*/
            /*case 8: //Escopeta
            {
                new precio = 8000, objeto = 21;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = 0;}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = 0;}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ammunation, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }*/
            /*case 9: //Cartuchos
            {
                new precio = 800, objeto = 50;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ammunation, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }*/
            case 2: //Rifle de caza
            {
                new precio = 12000, objeto = 30;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = 0;}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = 0;}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ammunation, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 3: //Cargador Rifle
            {
                new precio = 1000, objeto = 46;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ammunation, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 4: //Salir
            {
				HideMenuForPlayer(ammunation, playerid);
            }
        }
    }
    if(GetPlayerMenu(playerid) == menu247) //Tienda 24/7
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Bolsa de doritos
            {
                new precio = 20, objeto = 55;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(menu247, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 1: //Bolsa de patatas
            {
                new precio = 20, objeto = 56;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(menu247, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 2: //Bolsa de nachos
            {
                new precio = 20, objeto = 57;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(menu247, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 3: //Lata sprunk
            {
                new precio = 13, objeto = 58;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(menu247, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 4: //Lata fanta
            {
                new precio = 13, objeto = 59;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(menu247, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 5: //Botella agua
            {
                new precio = 10, objeto = 60;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(menu247, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 6: //Botella cerveza
            {
                new precio = 15, objeto = 61;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(menu247, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 7: //Salir
            {
				HideMenuForPlayer(menu247, playerid);
            }
        }
    }
    if(GetPlayerMenu(playerid) == tiendadeportes) //Tienda de deportes
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Bate
            {
                new precio = 50, objeto = 5;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(tiendadeportes, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 1: //Palo de golf
            {
                new precio = 70, objeto = 2;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(tiendadeportes, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 2: //Palo de billar
            {
                new precio = 60, objeto = 7;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(tiendadeportes, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 3: //Maletín cuero
            {
                new precio = 50, objeto = 176;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), JugadorInfo[playerid][pManoDerCant] = 1;}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = 1;}
                format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
				HideMenuForPlayer(tiendadeportes, playerid);
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 4: //Salir
            {
				HideMenuForPlayer(tiendadeportes, playerid);
            }
        }
    }
    if(GetPlayerMenu(playerid) == ferreteria) //Ferretería
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Palanca
            {
                new precio = 100, objeto = 15;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ferreteria, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 1: //Navaja
            {
                new precio = 200, objeto = 4;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ferreteria, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 2: //Destornillador
            {
                new precio = 20, objeto = 74;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ferreteria, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 3: //Extintor
            {
                new precio = 300, objeto = 35;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ferreteria, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 4: //Spray
            {
                new precio = 150, objeto = 34;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ferreteria, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 5: //Pala
            {
                new precio = 60, objeto = 6;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ferreteria, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 6: //Gasolina
            {
                new precio = 120, objeto = 125;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(ferreteria, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 7: //Salir
            {
				HideMenuForPlayer(ferreteria, playerid);
            }
        }
    }
    if(GetPlayerMenu(playerid) == tiendaropa) //Tiendas de ropa
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Skin
            {
                if(JugadorInfo[playerid][pSexo] == 2) ShowModelSelectionMenu(playerid, ropamujer, "Tienda de ropa", 0x00000099, 0xFFFFFFF96, 0xFF0000AA);
			 	else ShowModelSelectionMenu(playerid, ropahombre, "Tienda de ropa", 0x00000099, 0xFFFFFFF96, 0xFF0000AA);
   			}
            case 2: //Salir
            {
				HideMenuForPlayer(tiendaropa, playerid);
            }
        }
    }
    if(GetPlayerMenu(playerid) == electronica) //Tienda electrónica
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Móvil
            {
                new precio = 400, objeto = 68;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(electronica, playerid);
                new randphone = 100000 + random(899999); //Crea número de teléfono entre el 100000 y el 999999
				JugadorInfo[playerid][pTelefono] = randphone;
				format(string, sizeof(string), "Ahora tu número de teléfono es el %d", randphone);
				SendClientMessage(playerid, Blanco, string);
				SendClientMessage(playerid, Blanco, "Recuerda que puedes cambiar de número comprando otro teléfono.");
				NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 1: //Cámara
            {
                new precio = 40, objeto = 36;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, GivePlayerWeapon(playerid, ObjetoInfo[objeto][IDArma], ObjetoInfo[objeto][Capacidad]), JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(electronica, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 2: //Reloj casio digital 1
            {
                new precio = 40, objeto = 92;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(electronica, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 3: //Salir
            {
				HideMenuForPlayer(electronica, playerid);
            }
        }
    }
    if(GetPlayerMenu(playerid) == estanco) //Estanco
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Caja cigarrillos
            {
                new precio = 20, objeto = 70;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(estanco, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 1: //Mechero
            {
				new precio = 15, objeto = 69;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(estanco, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 2: //Salir
            {
				HideMenuForPlayer(estanco, playerid);
            }
        }
    }
    if(GetPlayerMenu(playerid) == licoreria) //Licorería
    {
        TogglePlayerControllable(playerid, 1);
        switch(row)
        {
            case 0: //Botella Whisky
            {
                new precio = 30, objeto = 72;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(licoreria, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 1: //Botella Ron
            {
                new precio = 30, objeto = 71;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(licoreria, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 2: //Botella cerveza
            {
                new precio = 20, objeto = 61;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(licoreria, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 3: //Paquete cerveza
            {
                new precio = 200, objeto = 127;
				if(GetPlayerMoney(playerid) < precio){SendClientMessage(playerid, Rojo, "No tienes suficiente dinero."); return 1;}
				if(JugadorInfo[playerid][pManoDer] != 0 && JugadorInfo[playerid][pManoIzq] != 0){SendClientMessage(playerid, Rojo, "Tienes ambas manos ocupadas."); return 1;}
				if(JugadorInfo[playerid][pManoDer] == 0){PonerObjeto(playerid, 1, objeto); JugadorInfo[playerid][pManoDer] = objeto, JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];}
				else if(JugadorInfo[playerid][pManoIzq] == 0){PonerObjeto(playerid, 2, objeto); JugadorInfo[playerid][pManoIzq] = objeto, JugadorInfo[playerid][pManoIzqCant] = ObjetoInfo[objeto][Capacidad];}
				format(string, sizeof(string), "Compras una %s por $%d.", ObjetoInfo[objeto][NombreObjeto], precio);
				SendClientMessage(playerid, AmarilloClaro, string);
				GivePlayerMoneyAC(playerid, -precio);
                HideMenuForPlayer(licoreria, playerid);
                NegocioInfo[GetPlayerDentroNego(playerid)][nDineroGuardado] += precio;
            }
            case 4: //Salir
            {
				HideMenuForPlayer(licoreria, playerid);
            }
        }
    }
	return 1;
}

public OnPlayerExitedMenu(playerid)
{
    if(GetPlayerMenu(playerid) == restaurantes) TogglePlayerControllable(playerid, 1); //Restaurantes
	if(GetPlayerMenu(playerid) == bares) TogglePlayerControllable(playerid, 1); //Bares
	if(GetPlayerMenu(playerid) == comidasrapidas) TogglePlayerControllable(playerid, 1); //Comidas rápidas
	if(GetPlayerMenu(playerid) == discoteca) TogglePlayerControllable(playerid, 1); //Discotecas
	if(GetPlayerMenu(playerid) == puticlub) TogglePlayerControllable(playerid, 1); //Puticlubs
	if(GetPlayerMenu(playerid) == ammunation) TogglePlayerControllable(playerid, 1); //Ammu Nations
	if(GetPlayerMenu(playerid) == menu247) TogglePlayerControllable(playerid, 1); //24/7
	if(GetPlayerMenu(playerid) == tiendadeportes) TogglePlayerControllable(playerid, 1); //Tienda deportiva
	if(GetPlayerMenu(playerid) == ferreteria) TogglePlayerControllable(playerid, 1); //Ferretería
	if(GetPlayerMenu(playerid) == tiendaropa) TogglePlayerControllable(playerid, 1); //Tiendas de ropa
	if(GetPlayerMenu(playerid) == electronica) TogglePlayerControllable(playerid, 1); //Tienda electrónica
	
	if(GetPlayerMenu(playerid) == estanco) TogglePlayerControllable(playerid, 1); //Estanco
	if(GetPlayerMenu(playerid) == licoreria) TogglePlayerControllable(playerid, 1); //Licorería
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	new x = 0; //Sistema RECON
	while(x!=MAX_PLAYERS)
	{
	    if( IsPlayerConnected(x) &&	GetPlayerState(x) == PLAYER_STATE_SPECTATING &&
		JugadorInfo[x][pSpecID] == playerid && JugadorInfo[x][pSpecType] == ADMIN_SPEC_TYPE_PLAYER)
		{
			SetPlayerVirtualWorld(x,GetPlayerVirtualWorld(playerid));
			SetPlayerInterior(x,newinteriorid);
		}
		x++;
	}
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    Anims_OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
    if(GetPlayerState(playerid) == PLAYER_STATE_SPECTATING && JugadorInfo[playerid][pSpecID] != INVALID_PLAYER_ID) //Sistema RECON
    {
		if(newkeys == KEY_JUMP) AdvanceSpectate(playerid);
		else if(newkeys == KEY_SPRINT) ReverseSpectate(playerid);
		else if(newkeys == 4) StartSpectate(playerid, JugadorInfo[playerid][pSpecID]);
		return 1;
	}
	if(newkeys & KEY_SECONDARY_ATTACK) //Al pulsar intro F
	{
        if(GetPlayerState(playerid) == 1)
		{
        	if(GetPlayerFueraPuertaCasa(playerid)) //Está en la entrada de una casa
			{
				new h = GetPlayerFueraPuertaCasa(playerid);
				if(CasaInfo[h][hCerrada] == 1)
				{
				    GameTextForPlayer(playerid, "~r~cerrado", 1000, 6);
   					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				}
				else
				{
				    TogglePlayerControllable(playerid, 0);
				    SetTimerEx("Descongelar2", 2000, false, "i", playerid);
				    SetPlayerPos(playerid, CasaInfo[h][hSalidaX], CasaInfo[h][hSalidaY], CasaInfo[h][hSalidaZ]);
				    SetPlayerInterior(playerid, CasaInfo[h][hInterior]);
				    SetPlayerVirtualWorld(playerid, CasaInfo[h][hVirtualWorld]);
				    return 1;
				}
			}
			if(GetPlayerDentroPuertaCasa(playerid)) //Está en la salida de una casa
			{
			    new h = GetPlayerDentroPuertaCasa(playerid);
			    if(CasaInfo[h][hCerrada] == 1)
				{
				    GameTextForPlayer(playerid, "~r~cerrado", 1000, 6);
   					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				}
			    else
			    {
				    if(CasaInfo[h][hInterior2] != 0) //Si el mundo exterior no es 0 congelar y descongelar
				    {
				        TogglePlayerControllable(playerid, 0);
					    SetTimerEx("Descongelar", 2000, false, "i", playerid);
				    }
				    SetPlayerPos(playerid, CasaInfo[h][hEntradaX], CasaInfo[h][hEntradaY], CasaInfo[h][hEntradaZ]);
				    SetPlayerInterior(playerid, CasaInfo[h][hInterior2]);
				    SetPlayerVirtualWorld(playerid, CasaInfo[h][hVirtualWorld2]);
				    return 1;
				}
			}
			if(GetPlayerFueraPuertaNego(playerid)) //Está en la entrada de un negocio
			{
				new n = GetPlayerFueraPuertaNego(playerid);
				if(NegocioInfo[n][nComprado] == 3)
				{
				    GameTextForPlayer(playerid, "~r~clausurado", 1000, 6);
   					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
   					return 1;
				}
				if(NegocioInfo[n][nCerrado] == 1)
				{
				    GameTextForPlayer(playerid, "~r~cerrado", 1000, 6);
   					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
   					return 1;
				}
				else
				{
					new string[128];
				    format(string, 128, "~g~estas en %s", NegocioInfo[n][nNombre]);
					GameTextForPlayer(playerid, string, 3000, 3);
				    TogglePlayerControllable(playerid, 0);
				    SetTimerEx("Descongelar", 2000, false, "i", playerid);
				    SetPlayerPos(playerid, NegocioInfo[n][nSalidaX], NegocioInfo[n][nSalidaY], NegocioInfo[n][nSalidaZ]);
				    SetPlayerInterior(playerid, NegocioInfo[n][nInterior]);
				    SetPlayerVirtualWorld(playerid, NegocioInfo[n][nVirtualWorld]);
				    return 1;
				}
			}
			if(GetPlayerDentroPuertaNego(playerid)) //Está en la salida de un negocio
			{
			    new n = GetPlayerDentroPuertaNego(playerid);
			    if(NegocioInfo[n][nCerrado] == 1)
				{
				    GameTextForPlayer(playerid, "~r~cerrado", 1000, 6);
   					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
				}
				else
				{
				    if(NegocioInfo[n][nInterior2] != 0) //Si el mundo exterior no es 0 congelar y descongelar
				    {
				        TogglePlayerControllable(playerid, 0);
					    SetTimerEx("Descongelar", 2000, false, "i", playerid);
				    }
				    SetPlayerPos(playerid, NegocioInfo[n][nEntradaX], NegocioInfo[n][nEntradaY], NegocioInfo[n][nEntradaZ]);
				    SetPlayerInterior(playerid, NegocioInfo[n][nInterior2]);
				    SetPlayerVirtualWorld(playerid, NegocioInfo[n][nVirtualWorld2]);
				    return 1;
				}
			}
			EntrarSitioPublico(playerid); //Entrar a establecimiento
		}
	}
	if(newkeys & KEY_SUBMISSION)
	{
	    new coche = GetPlayerVehicleID(playerid);
		if(CocheLSPD(coche) || CocheLSFD(coche))
		{
			if(JugadorInfo[playerid][pFaccion] == 1 || JugadorInfo[playerid][pFaccion] == 2)
   			{
				if(LucesSirena[coche] == 0)
				{
					FlashTime[coche] = SetTimerEx("OnLightFlash", flashtime, true, "d", coche);
					LucesSirena[coche] = 1;
				}
		  		else
			    {
			        LucesSirena[coche] = 0;
			       	new panels, doors, lights, tires;
					KillTimer(FlashTime[coche]);
					GetVehicleDamageStatus(coche, panels, doors, lights, tires);
			   		UpdateVehicleDamageStatus(coche, panels, doors, 0, tires);
				}
			}
		}
	}
	if(newkeys & KEY_YES) //Al pulsar Y
	{
        if(JugadorInfo[playerid][pManoDer] == 38 && GetPlayerWeaponAmmo(playerid, 23) == 0 && JugadorInfo[playerid][pServicioPD] > 0)
		{
		    if(TaserRecarga[playerid] != 0){SendClientMessage(playerid, Rojo, "Espera 5 segundos para cargar táser."); return 1;}
		    SendClientMessage(playerid, COLOR_GREEN, "¡Recargaste tu táser!");
			GivePlayerWeapon(playerid, 23, 1);
			ApplyAnimation(playerid,"SILENCED","Silence_reload",4.1,0,1,1,0,0);
		}
	}
	if(newkeys & KEY_FIRE) //Al pusar botón de ataque
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
		    if(JugadorInfo[playerid][pManoDer] == 17 && GetPlayerWeapon(playerid) == 17) //Sistema de granada de gas
			{
				SendClientMessage(playerid, COLOR_PIEL, "¡Has tirado una granada de gas!");
 	    		JugadorInfo[playerid][pManoDer] = 0, ResetPlayerWeapons(playerid);
			    for(new i=0; i < MAX_PLAYERS; i++)
			    {
					if(GetPlayersProx(10, playerid, i) && MascaraGas[i] == 0 && GetPlayerState(i) == PLAYER_STATE_ONFOOT)
					{
	    				SetPlayerDrunkLevel(i, 8000);
					   	ApplyAnimation(i, "PED", "GAS_CWR",4.1,1,1,1,0,4000, 1);
					   	ApplyAnimation(i, "PED", "GAS_CWR",4.1,1,1,1,0,4000, 1);
						SendClientMessage(i, COLOR_ROJO, "El efecto de una granada de gas llega a tu cuerpo, no puedes ver y estás asfixeandote lentamente. ");
						FadePlayerScreen(i, 0xb0b0b0DA, 1);
					}
			    }
			}
	    }
	}
	if((newkeys & KEY_CTRL_BACK) || (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && (newkeys & KEY_CROUCH))) //Al pulsar H
	{
        AbrirPuerta(playerid); //Abrir puerta
	}
	if((oldkeys == KEY_FIRE) && (newkeys == 0)) //Al pulsar y soltar botón de ataque
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) //Encender motor de vehiculo
		{
			new car = GetPlayerVehicleID(playerid);
			if(IsABike(car)){return 1;}
			EncenderMotorF(playerid, car);
		}
		if(HaciendoPressBanca[playerid] == 1)
		{
		    RepeticionesPressBanca[playerid] ++;
		    ProgresoPressBanca[playerid] ++;
		    if(ProgresoPressBanca[playerid] >= 20)
		    {
				ApplyAnimation(playerid, "benchpress", "gym_bp_up_B", 1, 0, 0, 0, 1, 0, 1);
				ProgresoPressBanca[playerid] = 0;
		    }
		}
	}
	if(newkeys & KEY_ACTION) //Al pulsar LCTRL
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) //Encender luces de vehiculo
		{
		    new car = GetPlayerVehicleID(playerid);
			new engine,lights,alarm,doors,bonnet,boot,objective;
	        GetVehicleParamsEx(car,engine,lights,alarm,doors,bonnet,boot,objective);
	        if(lights == 0)SetVehicleParamsEx(car,engine,1,alarm,doors,bonnet,boot,objective);
	        else SetVehicleParamsEx(car,engine,0,alarm,doors,bonnet,boot,objective);
        }
	}
	if(newkeys & KEY_JUMP) //Al pulsar saltar
	{
        if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) //Anti BH
		{
		    if(Esposado[playerid] > 0)
		    {
		        ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
		    }
		}
	}
    return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	if(!success)
	{
	    new string[128];
		for(new x=0; x<MAX_PLAYERS; x++)
		{
		    GetPlayerIp(x, string, sizeof(string));
            if(!strcmp(ip, string, true))
            {
                SendClientMessage(x, Rojo, "Has sido kickeado automáticamente por intentar loguear como admin RCON.");
                Expulsar(x);
                return 1;
            }
		}
	    format(string, sizeof(string), "banip %s", ip);
        SendRconCommand(string);
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
    Speedcap_OnPlayerUpdate(playerid);
    if(PrimerSpawn[playerid] != 1 || PrimerSpawn[playerid] != 1 || JugadorLogueado[playerid] != 1){return 0;}
	//Incendios
	new newkeys,l,u;
 	GetPlayerKeys(playerid, newkeys, l, u);
	if(Holding(KEY_FIRE))
 	{
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	        if(JugadorInfo[playerid][pManoDer] == 35 && JugadorInfo[playerid][pManoDerCant] > 0) // Tiene extintor en mano y con carga.
	        {
	            ApagandoFuego[playerid] = 1;
	        }
	        return 1;
		}
	}
	//Inventario
	if(JugadorInfo[playerid][pManoDer] > 0)
	{
		if(GetPlayerWeapon(playerid) != ObjetoInfo[JugadorInfo[playerid][pManoDer]][IDArma] && GetPlayerWeaponAmmo(playerid, ObjetoInfo[JugadorInfo[playerid][pManoDer]][IDArma]) > 0)
		{
			SetPlayerArmedWeapon(playerid, ObjetoInfo[JugadorInfo[playerid][pManoDer]][IDArma]);
		}
		else if(GetPlayerWeaponAmmo(playerid, ObjetoInfo[JugadorInfo[playerid][pManoDer]][IDArma]) == 0) //Si no le queda munición
		{
			if(GetPlayerWeapon(playerid) != 0)SetPlayerArmedWeapon(playerid, 0);
		}
	}
	//Arreglo de las gafas de visión nocturna / térmica
	if(GetPlayerWeapon(playerid) == 44 || GetPlayerWeapon(playerid) == 45)
    {
        new keys, ud, lr;
        GetPlayerKeys(playerid, keys, ud, lr);
        if((keys & KEY_FIRE) && (!IsPlayerInAnyVehicle(playerid)))
        {
            return 0;
        }
    }
    //Pinchos LPSD
    if(GetPlayerState(playerid) == 2)
	{
		for(new i = 0; i < sizeof(ObjectsInfo); i++)
  	    {
  	        if(IsPlayerInRangeOfPoint(playerid, 3.0, ObjectsInfo[i][cpX], ObjectsInfo[i][cpY], ObjectsInfo[i][cpZ]) && ObjectsInfo[i][cpType] == 1)
            {
  	            if(ObjectsInfo[i][cpCreated] == 1)
  	            {
  	                new panels, doors, lights, tires;
  	                new carid = GetPlayerVehicleID(playerid);
		            GetVehicleDamageStatus(carid, panels, doors, lights, tires);
		            tires = encode_tires(1, 1, 1, 1);
		            UpdateVehicleDamageStatus(carid, panels, doors, lights, tires);
  	                return 0;
  	            }
  	        }
  	    }
  	    //Velocímetro
  	    new Float:x,Float:y,Float:z,string[24],vehicleid = GetPlayerVehicleID(playerid);
		GetVehicleVelocity(vehicleid,x,y,z);
		velocidad[playerid] = floatround(floatsqroot(((x*x)+(y*y))+(z*z))*175);
		format(string,sizeof(string),"~b~Km/h:~w~ %d",velocidad[playerid]);
		PlayerTextDrawSetString(playerid, vvel[playerid],string);
		format(string,sizeof(string),"~b~Gasolina:~w~ %d",CocheInfo[vehicleid][cGas]);
		PlayerTextDrawSetString(playerid, fuel[playerid],string);
	}
	Streamer_Update(playerid);
    return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(PlayerNameOff[playerid] == 1) //Nameoff
	{
		ShowPlayerNameTagForPlayer(playerid, forplayerid, 0);
	}
	if(PlayerNameOff[playerid] == 0) //Nameon
	{
		ShowPlayerNameTagForPlayer(playerid, forplayerid, 1);
	}
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
    Anims_OnDialogResponse(playerid, dialogid, response, listitem);
    //------------------------------- ACCESORIOS -------------------------------------//
	if(dialogid == ACCESORIOS_MENU)
	{
	    new dialog[1024];
	    if(response == 0) { return 1; }
	    if(response == 1)
	    {
			switch(listitem)
			{
			    case 0: // Gorro
			    {
			        if(JugadorInfo[playerid][pToy][0] >= 1)
			        {
			            strcat(dialog, "Editar posición\n");
			            strcat(dialog, "Quitar objeto (/gorro)\n");
						ShowPlayerDialog(playerid, EDITAR_GORRO, DIALOG_STYLE_LIST, "Menú de accesorios - Opciones (GORRO)", dialog, "Aceptar", "Salir");
			        }
			        else SendClientMessage(playerid, COLOR_ROJO, "¡No tienes ningún gorro que pueda ser editado!");
			    }
			    case 1: // Gafas
			    {
			        if(JugadorInfo[playerid][pToy][1] >= 1)
			        {
			            strcat(dialog, "Editar posición\n");
			            strcat(dialog, "Quitar objeto (/gafas)\n");
						ShowPlayerDialog(playerid, EDITAR_GAFAS, DIALOG_STYLE_LIST, "Menú de accesorios - Opciones (MANDÍBULA)", dialog, "Aceptar", "Salir");
			        }
			        else SendClientMessage(playerid, COLOR_ROJO, "¡No tienes ninguna gafa que pueda ser editada!");
			    }
			    case 2: // Mandíbula
			    {
			        if(JugadorInfo[playerid][pToy][2] >= 1)
			        {
			            strcat(dialog, "Editar posición\n");
			            strcat(dialog, "Quitar objeto (/mandibula)\n");
						ShowPlayerDialog(playerid, EDITAR_MANDIBULA, DIALOG_STYLE_LIST, "Menú de accesorios - Opciones (MANDÍBULA)", dialog, "Aceptar", "Salir");
			        }
			        else SendClientMessage(playerid, COLOR_ROJO, "¡No tienes ningún objeto en la mandíbula que pueda ser editado!");
			    }
			    case 3: // Chaleco
			    {
			        if(JugadorInfo[playerid][pToy][3] >= 1)
			        {
			            strcat(dialog, "Editar posición\n");
			            strcat(dialog, "Quitar objeto (/chaleco)\n");
						ShowPlayerDialog(playerid, EDITAR_CHALECO, DIALOG_STYLE_LIST, "Menú de accesorios - Opciones (CHALECO)", dialog, "Aceptar", "Salir");
			        }
			        else SendClientMessage(playerid, COLOR_ROJO, "¡No tienes ningún chaleco que pueda ser editado!");
			    }
			    case 4: // Hueco personalizado
			    {
			        if(JugadorInfo[playerid][pToy][4] >= 1)
			        {
			            strcat(dialog, "Ajustar hueso (y posición)\n");
			            strcat(dialog, "Editar posición\n");
			            strcat(dialog, "Quitar objeto (/personalizado)\n");
						ShowPlayerDialog(playerid, EDITAR_PERSONALIZADO, DIALOG_STYLE_LIST, "Menú de accesorios - Opciones (PERSONALIZADO)", dialog, "Aceptar", "Salir");
			        }
			        else SendClientMessage(playerid, COLOR_ROJO, "¡No tienes ningún objeto que pueda ser editado!");
			    }
			}
		}
	}
	if(dialogid == EDITAR_GORRO)
	{
	    new string[128];
	    if(response == 0) { return 1; }
	    if(response == 1)
	    {
	        switch(listitem)
			{
			    case 0: // Editar
			    {
			        EditAttachedObject(playerid, 4); // GORRO.
			    }
			    case 1: // Quitar
			    {
			        if(JugadorInfo[playerid][pManoDer] > 0) { return SendClientMessage(playerid, Rojo, "¡Ya tienes algo en tu mano derecha!"), 1; }
			        if(JugadorInfo[playerid][pToy][0] >= 1) // Gorro colocado
				 	{
			  			RemovePlayerAttachedObject(playerid, 4);
						JugadorInfo[playerid][pManoDer] = JugadorInfo[playerid][pToy][0];
						JugadorInfo[playerid][pManoDerCant] = 1;
						PonerObjeto(playerid, 1, JugadorInfo[playerid][pManoDer]);
						JugadorInfo[playerid][pToy][0] = 0;
						format(string, 128, "Retiras tu %s y lo sostienes en tu mano derecha.", ObjetoInfo[JugadorInfo[playerid][pManoDer]][NombreObjeto]); SendClientMessage(playerid, Verde, string);
						SaveToys(playerid);
				    }
			    }
			}
	    }
	}
	if(dialogid == EDITAR_GAFAS)
	{
	    new string[128];
	    if(response == 0) { return 1; }
	    if(response == 1)
	    {
	        switch(listitem)
			{
			    case 0: // Editar
			    {
			        EditAttachedObject(playerid, 5); // GAFAS.
			    }
			    case 1: // Quitar
			    {
			        if(JugadorInfo[playerid][pManoDer] > 0) { return SendClientMessage(playerid, Rojo, "¡Ya tienes algo en tu mano derecha!"), 1; }
			        if(JugadorInfo[playerid][pToy][1] >= 1) // Gafas colocado
				 	{
			  			RemovePlayerAttachedObject(playerid, 5);
						JugadorInfo[playerid][pManoDer] = JugadorInfo[playerid][pToy][1];
						JugadorInfo[playerid][pManoDerCant] = 1;
						PonerObjeto(playerid, 1, JugadorInfo[playerid][pManoDer]);
						JugadorInfo[playerid][pToy][1] = 0;
						format(string, 128, "Retiras tu %s y lo sostienes en tu mano derecha.", ObjetoInfo[JugadorInfo[playerid][pManoDer]][NombreObjeto]); SendClientMessage(playerid, Verde, string);
						SaveToys(playerid);
				    }
			    }
			}
	    }
	}
	if(dialogid == EDITAR_MANDIBULA)
	{
	    new string[128];
	    if(response == 0) { return 1; }
	    if(response == 1)
	    {
	        switch(listitem)
			{
			    case 0: // Editar
			    {
			        EditAttachedObject(playerid, 6); // Mandíbula.
			    }
			    case 1: // Quitar
			    {
			        if(JugadorInfo[playerid][pManoDer] > 0) { return SendClientMessage(playerid, Rojo, "¡Ya tienes algo en tu mano derecha!"), 1; }
			        if(JugadorInfo[playerid][pToy][2] >= 1) // Pañuelo colocado
				 	{
			  			RemovePlayerAttachedObject(playerid, 6);
						JugadorInfo[playerid][pManoDer] = JugadorInfo[playerid][pToy][2];
						JugadorInfo[playerid][pManoDerCant] = 1;
						PonerObjeto(playerid, 1, JugadorInfo[playerid][pManoDer]);
						JugadorInfo[playerid][pToy][2] = 0;
						MascaraGas[playerid] = 0;
            			Mascara[playerid] = 0;
						format(string, 128, "Retiras tu %s y lo sostienes en tu mano derecha.", ObjetoInfo[JugadorInfo[playerid][pManoDer]][NombreObjeto]); SendClientMessage(playerid, Verde, string);
						SaveToys(playerid);
					}
			    }
			}
	    }
	}
	if(dialogid == EDITAR_CHALECO)
	{
	    new string[128];
	    if(response == 0) { return 1; }
	    if(response == 1)
	    {
	        switch(listitem)
			{
			    case 0: // Editar
			    {
			        EditAttachedObject(playerid, 7); // CHALECO.
			    }
			    case 1: // Quitar
			    {
			        if(JugadorInfo[playerid][pManoDer] > 0) { return SendClientMessage(playerid, Rojo, "¡Ya tienes algo en tu mano derecha!"), 1; }
			        if(JugadorInfo[playerid][pToy][3] >= 1) // Pañuelo colocado
				 	{
				        new Float:chaleco, chalecocant;
					    GetPlayerArmour(playerid, chaleco);
			        	chalecocant = floatround(chaleco, floatround_round);
				  		RemovePlayerAttachedObject(playerid, 7);
						JugadorInfo[playerid][pManoDer] = JugadorInfo[playerid][pToy][3];
						JugadorInfo[playerid][pManoDerCant] = chalecocant;
						PonerObjeto(playerid, 1, JugadorInfo[playerid][pManoDer]);
						SetPlayerArmour(playerid, 0);
						JugadorInfo[playerid][pToy][3] = 0;
						format(string, 128, "Retiras tu %s y lo sostienes en tu mano derecha.", ObjetoInfo[JugadorInfo[playerid][pManoDer]][NombreObjeto]); SendClientMessage(playerid, Verde, string);
						SaveToys(playerid);
					}
				}
			}
	    }
	}
	if(dialogid == EDITAR_PERSONALIZADO)
	{
	    new string[128], dialog[1024];
	    if(response == 0) { return 1; }
	    if(response == 1)
	    {
	        switch(listitem)
			{
			    case 0: // Editar hueso
			    {
					strcat(dialog, "Columna vertebral\n");
					strcat(dialog, "Cabeza\n");
					strcat(dialog, "Brazo izquierdo\n");
					strcat(dialog, "Brazo derecho\n");
					strcat(dialog, "Mano izquierda\n");
					strcat(dialog, "Mano derecha\n");
					strcat(dialog, "Muslo izquierdo\n");
					strcat(dialog, "Muslo derecho\n");
     				strcat(dialog, "Píe izquierdo\n");
     				strcat(dialog, "Píe derecho\n");
     				strcat(dialog, "Pantorilla izquierda\n");
     				strcat(dialog, "Pantorilla derecha\n");
     				strcat(dialog, "Antrebrazo izquierdo\n");
     				strcat(dialog, "Antrebrazo derecho\n");
     				strcat(dialog, "Clavícula izquierdo\n");
     				strcat(dialog, "Clavícula derecha\n");
					ShowPlayerDialog(playerid, EDITAR_HUESO, DIALOG_STYLE_LIST, "Menú de accesorios - Editar hueso", dialog, "Aceptar", "Salir");
			    }
			    case 1: // Editar
			    {
			        EditAttachedObject(playerid, 8); // Mandíbula.
			    }
			    case 2: // Quitar
			    {
			        if(JugadorInfo[playerid][pManoDer] > 0) { return SendClientMessage(playerid, Rojo, "¡Ya tienes algo en tu mano derecha!"), 1; }
			        if(JugadorInfo[playerid][pToy][4] >= 1) // Algo colocado
				 	{
			  			RemovePlayerAttachedObject(playerid, 8);
						JugadorInfo[playerid][pManoDer] = JugadorInfo[playerid][pToy][4];
						JugadorInfo[playerid][pManoDerCant] = 1;
						PonerObjeto(playerid, 1, JugadorInfo[playerid][pManoDer]);
						JugadorInfo[playerid][pToy][4] = 0;
						Mascara[playerid] = 0;
						format(string, 128, "Retiras tu %s y lo sostienes en tu mano derecha.", ObjetoInfo[JugadorInfo[playerid][pManoDer]][NombreObjeto]); SendClientMessage(playerid, Verde, string);
						SaveToys(playerid);
					}
			    }
			}
	    }
	}
	if(dialogid == EDITAR_HUESO)
	{
	    if(response == 0) { return 1; }
	    if(response == 1)
	    {
	        switch(listitem)
			{
			    case 0:
			    {
			    }
			}
		}
	}
	if(dialogid == CAMBIOSKIN2)
	{
	    if(response == 0)
		{
		    switch(JugadorInfo[playerid][pSexo])
			{
   				case 1:
           	    {
                	ShowModelSelectionMenu(playerid, primerropahombre, "Eleccion de skin", 0x00000099, 0xFFFFFFF96, 0xFF0000AA);
               	}
                case 2:
                {
                    ShowModelSelectionMenu(playerid, primerropamujer, "Eleccion de skin", 0x00000099, 0xFFFFFFF96, 0xFF0000AA);
      			}
            }
		    return 1;
		}
	    if(response == 1) { SetTimerEx("Descongelar", 1000, false, "i", playerid); }
	}
    //------------------------------- AVISAR PD: us-rp.es ---------------------------//
	if(dialogid == AVISARPD)
	{
	    new string[128];
	    if(response == 0) { return SendClientMessage(playerid, Azulito, "No avisaste a los servicios de emergencia. Puedes usar el comando '/morir' dentro de 5 minutos.") , 1; }
	    if(response == 1)
	    {
			for(new i; i < MAX_INFORMES; i++)
			{
				if(Informes[i][iEstado] == 0)
				{
					Informes[i][iPaciente] = playerid;
					Informes[i][iX] = MuertoX[playerid];
					Informes[i][iY] = MuertoY[playerid];
					Informes[i][iZ] = MuertoZ[playerid];
					Informes[i][iEstado] = 1;
					new zona[128];
					GetPlayer2DZone(playerid, zona, 128);
					Informes[i][iTimer] = SetTimerEx("EliminarInforme", 60000*5, 0, "i", playerid);
					SendClientMessage(playerid, Azulito, "Hay médicos conectados. Se ha generado un informe de socorro. Hay un plazo de 5 minutos para ser atendido.");
					format(string, 128, "Aviso de herido en %s. Hay 5 minutos para atenderlo o será anulado automáticamente. (/informes atender %d)", zona, i);
					SendRadioMessage(1, 0xF63A37FF, string);
					SendRadioMessage(2, 0xF63A37FF, string);
					format(Informes[i][iZona], 128, "%s", zona);
					break;
				}
			}
		}
	}
    //------------------------------ ORDENADOR POLICIAL: LS-RP.es  ------------------------------//
	if(dialogid == ORDENADOR_PD)
	{
	    if(!response){TogglePlayerControllable(playerid, 1); return 1;}
		if(listitem == 0) // Búsqueda de información.
		{
		    ShowPlayerDialog(playerid, BUSCAR_NOMBRE, DIALOG_STYLE_INPUT, "Búsqueda de información", "Introduce el nombre de la persona:", "Buscar", "Cancelar");
		}
	}
	if(dialogid == BUSCAR_NOMBRE)
	{
	    new dialog[1024], titulopagina[128], string[128];
	    if(strlen(inputtext))
     	{
			for(new id=0; id<MAX_PLAYERS; id++)
			{
			    if(strcmp(inputtext, NombreJugador(id)))
				{
					format(titulopagina, 128, "Información de: '%s'", NombreJugador(id));
			        ///////////////////////////////////
			        strcat(dialog, "RESULTADO DE LA BÚSQUEDA\n");
			        format(string, 128, "Nombre completo: %s\n", NombreJugador(id)); strcat(dialog, string);
			        format(string, 128, "Teléfono: %d\n", JugadorInfo[id][pTelefono]); strcat(dialog, string);
			        strcat(dialog, "Búsqueda y captura: No.\n");
			        strcat(dialog, "Licencia de conducir: Sí.\n");
			        strcat(dialog, "Licencia de armas: No.\n");
			        strcat(dialog, "Licencia de pesca: No.\n");
			        strcat(dialog, "Licencia de vuelo: No.\n");
			        strcat(dialog, "Licencia de navegación: No.\n");
			        strcat(dialog, "\nVEHÍCULOS\n");
			        strcat(dialog, "Llave 1: -1\n");
			        strcat(dialog, "Llave 2: -1\n");
			        strcat(dialog, "Llave 3: -1\n");
			        strcat(dialog, "Llave 4: -1\n");
			        strcat(dialog, "Llave 5: -1\n");
			        
			        ShowPlayerDialog(playerid, -1, DIALOG_STYLE_MSGBOX, titulopagina, dialog, "Cerrar");
			        ///////////////////////////////////
			        break;
			    }
			}
        }
      	else ShowPlayerDialog(playerid, BUSCAR_NOMBRE, DIALOG_STYLE_INPUT, "Búsqueda de información", "Introduce el nombre de la persona:\n\n{F60000}No se encontraron coincidencias.", "Buscar", "Cancelar");
	}
	//------------------------------ SISTEMA DE BUSQUEDA Y CAPTURA ------------------------------//
	if(dialogid == VER_BYC)
	{
	    new string[128], dialog[1024];
	    if(response == 0) { return 1; }
	    if(response == 1)
	    {
	        if(Buscados[listitem][bCreado] == 1)
	        {
	            Viendo_ByC[playerid] = listitem;
		        format(string, 128, "Búsqueda creada por el Oficial %s", Buscados[listitem][bOficial]);
		        strcat(dialog, string);
		        format(string, 128, "\n\nNombre: %s", Buscados[listitem][bTitulo]);
		        strcat(dialog, string);
		        format(string, 128, "\n\nDescripción: %s", Buscados[listitem][bDescripcion]);
		        strcat(dialog, string);
		        if(strlen(Buscados[Viendo_ByC[playerid]][bHechos]) > 50)
		    	{
	      			new text1[91];
			        strmid(text1, Buscados[Viendo_ByC[playerid]][bHechos], 0, 50);
	            	format(string, 128, "\n\nHechos: %s...", text1);
		        	strcat(dialog, string);
			    }
			    else
				{
				 	format(string, 128, "\n\nHechos: %s", Buscados[listitem][bHechos]);
    				strcat(dialog, string);
				}
				if(Buscados[listitem][bEliminando] == 1)
				{
				    strcat(dialog, "\n\n{F60000}La búsqueda se ha eliminado.");
				}
		        ShowPlayerDialog(playerid, IMPRIMIR_BYC, DIALOG_STYLE_MSGBOX, "Búsquedas", dialog, "Imprimir", "Cerrar");
			}
	    }
 	}
 	if(dialogid == IMPRIMIR_BYC)
	{
		new string[128];
	    if(response == 0) { return 1; }
	    if(response == 1)
	    {
	        SendClientMessage(playerid, -1, " ");
	        format(string, sizeof(string), "|__________ Búsquedas __________|");
	        SendClientMessage(playerid, Azulito, string);
            format(string, sizeof(string), "Nombre:{FFFFFF} %s", Buscados[Viendo_ByC[playerid]][bTitulo]);
            SendClientMessage(playerid, Azulito, string);
            format(string, sizeof(string), "Descripción:{FFFFFF} %s", Buscados[Viendo_ByC[playerid]][bDescripcion]);
            SendClientMessage(playerid, Azulito, string);
            
            if(strlen(Buscados[Viendo_ByC[playerid]][bHechos]) > 90)
	    	{
      			new text1[91],text2[91];
		        strmid(text2, Buscados[Viendo_ByC[playerid]][bHechos], 90, 128);
		        strmid(text1, Buscados[Viendo_ByC[playerid]][bHechos], 0, 90);

		        format(string, sizeof(string), "Hechos:{FFFFFF} %s...", text1);
            	SendClientMessage(playerid, Azulito, string);
            	format(string, sizeof(string), "{FFFFFF}%s", text2);
            	SendClientMessage(playerid, Azulito, string);
		    }
		    else
			{
			 	format(string, sizeof(string), "Hechos:{FFFFFF} %s", Buscados[Viendo_ByC[playerid]][bHechos]);
            	SendClientMessage(playerid, Azulito, string);
			}
	    }
	}
	if(dialogid == TITULO_BYC)
	{
	    new string[128];
	    if(response == 0) { SendClientMessage(playerid, Rojo, "Búsqueda cancelada."); Buscados[Crear[playerid]][bCreado] = 0; } // Dió cancelar
		if(response == 1)
		{
		    if(strlen(inputtext))
            {
                Buscados[Crear[playerid]][bCreado] = 1;
                format(Buscados[Crear[playerid]][bTitulo], 30, "%s", inputtext);
                format(Buscados[Crear[playerid]][bOficial], MAX_PLAYER_NAME, "%s", NombreJugador(playerid));
                format(string, 128, "Oficial %s, búsqueda a %s.", NombreJugador(playerid), inputtext);
                SendClientMessage(playerid, COLOR_GREEN2, string);
                ShowPlayerDialog(playerid, DESCRIPCION_BYC, DIALOG_STYLE_INPUT, "Busqueda 2/3", "Introduce una breve descripción de la búsqueda.\nEsta descripción no puede llevar más de 50 carácteres.", "Continuar", "Cancelar");
            }
            else ShowPlayerDialog(playerid, TITULO_BYC, DIALOG_STYLE_INPUT, "Busqueda 1/3", "Introduce el título de la búsqueda o el nombre del sospechoso.\nSi ya tienes la identificación del sospechoso usa el /ordenador.\nNo puedes usar más de 30 carácteres.", "Continuar", "Cancelar");
		}
	}
	
	if(dialogid == DESCRIPCION_BYC)
	{
	    new string[128];
	    if(response == 0) { SendClientMessage(playerid, Rojo, "Búsqueda cancelada."); Buscados[Crear[playerid]][bCreado] = 0; } // Dió cancelar
		if(response == 1)
		{
		    if(strlen(inputtext))
            {
                Buscados[Crear[playerid]][bCreado] = 1;
                format(Buscados[Crear[playerid]][bDescripcion], 50, "%s", inputtext);
                format(string, 128, "Breve descripción introducida: %s", inputtext);
                SendClientMessage(playerid, COLOR_GREEN2, string);
                ShowPlayerDialog(playerid, HECHOS_BYC, DIALOG_STYLE_INPUT, "Busqueda 3/3", "Introduce los hechos por los que se busca. No te alargues.", "Finalizar", "Cancelar");
            }
            else ShowPlayerDialog(playerid, DESCRIPCION_BYC, DIALOG_STYLE_INPUT, "Busqueda 2/3", "Introduce una breve descripción de la búsqueda.\nEsta descripción no puede llevar más de 50 carácteres.", "Continuar", "Cancelar");
		}
	}
	
	if(dialogid == HECHOS_BYC)
	{
	    new string[128];
	    if(response == 0) { SendClientMessage(playerid, Rojo, "Búsqueda cancelada."); Buscados[Crear[playerid]][bCreado] = 0; } // Dió cancelar
		if(response == 1)
		{
		    if(strlen(inputtext))
            {
                Buscados[Crear[playerid]][bCreado] = 1;
                format(Buscados[Crear[playerid]][bHechos], 258, "%s", inputtext);
                SendClientMessage(playerid, COLOR_GREEN2, "Búsqueda introducida con éxito.");
                format(string, 128, "[CENTRAL]: El agente %s ha iniciado una búsqueda a %s. Generada con el ID: %d", NombreJugador(playerid), Buscados[Crear[playerid]][bTitulo], Crear[playerid]);
		    	SendRadioMessage(1, COLOR_RADIO, string);
            }
            else ShowPlayerDialog(playerid, HECHOS_BYC, DIALOG_STYLE_INPUT, "Busqueda 3/3", "Introduce los hechos por los que se busca. No te alargues.", "Finalizar", "Cancelar");
		}
	}
	
    if(dialogid == 0) //Logueo
  	{
        if(response == 0) //Si da a Salir
        {
	        Kick(playerid);
        }
        if(response == 1) //Si da a Entrar
        {
            if(strlen(inputtext))
            {
                new tmppass[64];
                strmid(tmppass, inputtext, 0, strlen(inputtext), 255);
                OnPlayerLogin(playerid,tmppass);
            }
	        else
	        {
                IntentosLogueo[playerid] += 1;
                if(IntentosLogueo[playerid] == 4){Expulsar(playerid); return 1;}
                new loginstring[128];
                format(loginstring,sizeof(loginstring),"¡Contraseña incorrecta!\nPor favor, vuelve a introducirla, %s", NombreJugador(playerid));
                ShowPlayerDialog(playerid,0,DIALOG_STYLE_PASSWORD,"Inicio de sesión",loginstring,"Entrar","Salir");
            }
        }
        return 1;
    }
    if(dialogid == 1) //Ascensor LSPD
    {
		if(!response){TogglePlayerControllable(playerid, 1); return 1;}
		
		if(listitem == 0) // Comisaria.
		{
		    TogglePlayerControllable(playerid, 0);
		    SendClientMessage(playerid, Naranja, "Ahora estás en la planta 'comisaría.'");
			SetPlayerPos(playerid,1567.1321,-1244.8341,8606.0859);
			SetPlayerInterior(playerid, 5);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerFacingAngle(playerid, 90);
			SetTimerEx("Descongelar", 2000, false, "i", playerid);
		}
		if(listitem == 1) // Unidades.
		{
		    TogglePlayerControllable(playerid, 0);
		    SendClientMessage(playerid, Naranja, "Ahora estás en la planta 'garage -1'.");
            SetPlayerPos(playerid,1568.5116,-1690.9907,5.8906);
            SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerFacingAngle(playerid, 180);
			SetTimerEx("Descongelar", 2000, false, "i", playerid);
		}
		if(listitem == 2) // Encubiertos.
		{
		    TogglePlayerControllable(playerid, 0);
		    SendClientMessage(playerid, Naranja, "Ahora estás en la planta 'garage -2'.");
		    SetPlayerPos(playerid,-1592.7312,716.2551,-5.2422);
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerFacingAngle(playerid, 270);
			SetTimerEx("Descongelar", 2000, false, "i", playerid);
		}
		if(listitem == 3) // Aires.
		{
		    TogglePlayerControllable(playerid, 0);
		    SendClientMessage(playerid, Naranja, "Ahora estás en la planta 'helipuerto'.");
		    SetPlayerPos(playerid,1572.8242,-1675.4957,28.3955);
		    SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerFacingAngle(playerid, 270);
			SetTimerEx("Descongelar", 2000, false, "i", playerid);
		}
	}
	if(dialogid == 2) //Inventario
    {
        if(!response){return 1;}
		new i = listitem;
		if(i == 10){return 1;} //Selecciona la barra separadora
		if(i == 11 || i == 12){return 1;} //Selecciona la manoder o la manoizq
		if(i >= 0 && i <= 9) //Selecciona un bolsillo
		{
			SacarBolsillo(playerid, i);
		}
    }
    if(dialogid == 3) // cinturón
    {
    	if(!response){return 1;}
		new i = listitem;
		if(i >= 0 && i < MAX_SLOTS_CT) //Selecciona un bolsillo
		{
			SacarCinturon(playerid, i);
		}
    }
    if(dialogid == 4) //Armería LSPD
    {
		return 1;
    }
  	if(dialogid == 6) //Maleteros
  	{
  	    if(!response){return 1;}
  	    new i = listitem;
		if(i == 7){return 1;} //Selecciona la barra separadora
		SacarMaletero(playerid, VehMaleteroPlayer[playerid], i);
  	}
  	if(dialogid == 7) //Autoescuela conducción intro
  	{
  	    if(!response){EnAutoEscuela[playerid] = 0; TogglePlayerControllable(playerid, 1); return 1;}
  	    TemaAutoescuelaCond(playerid, 1);
  	}
  	if(dialogid == 8) //Autoescuela conducción tema 1
  	{
  	    if(!response){TemaAutoescuelaCond(playerid, 0); return 1;}
  	    TemaAutoescuelaCond(playerid, 2);
  	}
  	if(dialogid == 9) //Autoescuela conducción tema 2
  	{
  	    if(!response){TemaAutoescuelaCond(playerid, 1); return 1;}
  	    TemaAutoescuelaCond(playerid, 3);
  	}
  	if(dialogid == 10) //Autoescuela conducción tema 3
  	{
  	    if(!response){TemaAutoescuelaCond(playerid, 2); return 1;}
  	    TemaAutoescuelaCond(playerid, 4);
  	}
  	if(dialogid == 11) //Autoescuela conducción tema 4
  	{
  	    if(!response){TemaAutoescuelaCond(playerid, 3); return 1;}
  	    TemaAutoescuelaCond(playerid, 5);
  	}
  	if(dialogid == 12) //Autoescuela conducción tema 5
  	{
  	    if(!response){TemaAutoescuelaCond(playerid, 4); return 1;}
  	    TemaAutoescuelaCond(playerid, 6);
  	}
  	if(dialogid == 13) //Autoescuela conducción tema 6
  	{
  	    if(!response){TemaAutoescuelaCond(playerid, 5); return 1;}
  	    TemaAutoescuelaCond(playerid, 7);
  	}
  	if(dialogid == 14) //Autoescuela conducción tema 7
  	{
  	    if(!response){TemaAutoescuelaCond(playerid, 6); return 1;}
  	    PreguntaAutoescuelaCond(playerid, 0);
  	}
  	if(dialogid == 15) //Autoescuela conducción pregunta 1
  	{
  	    if(inputtext[0] == '4'){GameTextForPlayer(playerid, "~g~Correcto", 1000, 6); PreguntaAutoescuelaCond(playerid, 1); return 1;}
        GameTextForPlayer(playerid, "~r~Suspenso", 1000, 6);
        SendClientMessage(playerid, COLOR_ROJO, "Fallaste el test. Se te descontaron 100$ por exámen fallado.");
        GivePlayerMoneyAC(playerid, -100);
        TogglePlayerControllable(playerid, 1);
        EnAutoEscuela[playerid] = 0;
  	}
  	if(dialogid == 16) //Autoescuela conducción pregunta 2
  	{
  	    if(inputtext[0] == '2'){GameTextForPlayer(playerid, "~g~Correcto", 1000, 6); PreguntaAutoescuelaCond(playerid, 2); return 1;}
  	    GameTextForPlayer(playerid, "~r~Suspenso", 1000, 6);
  	    SendClientMessage(playerid, COLOR_ROJO, "Fallaste el test. Se te descontaron 100$ por exámen fallado.");
        GivePlayerMoneyAC(playerid, -100);
        TogglePlayerControllable(playerid, 1);
        EnAutoEscuela[playerid] = 0;
  	}
  	if(dialogid == 17) //Autoescuela conducción pregunta 3
  	{
  	    if(inputtext[0] == '2'){GameTextForPlayer(playerid, "~g~Correcto", 1000, 6); PreguntaAutoescuelaCond(playerid, 3); return 1;}
  	    GameTextForPlayer(playerid, "~r~Suspenso", 1000, 6);
  	    SendClientMessage(playerid, COLOR_ROJO, "Fallaste el test. Se te descontaron 100$ por exámen fallado.");
        GivePlayerMoneyAC(playerid, -100);
        TogglePlayerControllable(playerid, 1);
        EnAutoEscuela[playerid] = 0;
  	}
  	if(dialogid == 18) //Autoescuela conducción pregunta 4
  	{
  	    if(inputtext[0] == '3'){GameTextForPlayer(playerid, "~g~Correcto", 1000, 6); PreguntaAutoescuelaCond(playerid, 4); return 1;}
  	    GameTextForPlayer(playerid, "~r~Suspenso", 1000, 6);
  	    SendClientMessage(playerid, COLOR_ROJO, "Fallaste el test. Se te descontaron 100$ por exámen fallado.");
        GivePlayerMoneyAC(playerid, -100);
        TogglePlayerControllable(playerid, 1);
        EnAutoEscuela[playerid] = 0;
  	}
  	if(dialogid == 19) //Autoescuela conducción pregunta 5
  	{
  	    if(inputtext[0] == '3')
	  	{
	  		GameTextForPlayer(playerid, "~g~Aprobado", 1000, 6);
	  		TogglePlayerControllable(playerid, 1);
	  		SendClientMessage(playerid, Verde, "Parte teórica aprobada.");
	  		SendClientMessage(playerid, Amarillo, "Tienes 20 segundos para subir a un vehículo de la autoescuela y empezar la parte práctica.");
	  		SetTimerEx("TimerAutoescuela", 20000, false, "i", playerid);
			return 1;
		}
  	    GameTextForPlayer(playerid, "~r~Suspenso", 1000, 6);
  	    SendClientMessage(playerid, COLOR_ROJO, "Fallaste el test. Se te descontaron 100$ por exámen fallado.");
        GivePlayerMoneyAC(playerid, -100);
        TogglePlayerControllable(playerid, 1);
        EnAutoEscuela[playerid] = 0;
  	}
  	if(dialogid == 20) //Armarios
  	{
  	    if(!response){return 1;}
  	    new i = listitem;
		if(i == 10){return 1;} //Selecciona la barra separadora
		if(i >= 0 && i <= 9) //Selecciona un slot
		{
			SacarArmario(playerid, GetPlayerDentroCasa(playerid), i);
		}
  	}
  	if(dialogid == 21) //Almacén
  	{
  	    if(!response){return 1;}
  	    new i = listitem;
  	    new nego = GetPlayerDentroNego(playerid);
		if(i == NegocioInfo[nego][nMaxAlmacen]){return 1;} //Selecciona la barra separadora
		if(i >= 0 && i < NegocioInfo[nego][nMaxAlmacen]) //Selecciona un slot
		{
			SacarAlmacen(playerid, nego, i);
		}
  	}
  	if(dialogid == 22) //agenda (mostrar contactos)
    {
        if(!response){return 1;}
        new i = listitem;
        new Numero = AgendaNumero[playerid][i], Contacto[41];
	    format(Contacto, sizeof(Contacto), "%s", AgendaContacto[playerid][i]);
        if(!strlen(Contacto) || strcmp(Contacto,"NULL",true) == 0)
        {
			SendClientMessage(playerid, Rojo, "Contacto vacío.");
        }
        else
        {
            LlamarTelefono(playerid, Numero);
        }
    }
    if(dialogid == 23) //Contacto de armas
    {
        if(!response){return 1;}
        new i = listitem, caja, coche = GetPlayerVehicleID(playerid);
        if(GetPlayerMoney(playerid) < PreciosContactoArmas[i]){ProxDetector(15.0, playerid,"Desconocido: Yo no fío a nadie. Si no tienes la pasta no es mi problema.",Chat1,Chat2,Chat3,Chat4,Chat5); return 1;}
        switch(i)
        {
            case 0: caja = 102; //Katana
		    case 1: caja = 103; //Pistola
		    case 2: caja = 104; //Cargador Pistola
		    case 3: caja = 105; //Balas .45 ACP
		    case 4: caja = 106; //Desert Eagle
		    case 5: caja = 107; //Cargador Deagle Eagle
		    case 6: caja = 108; //Balas .50 AE
		    case 7: caja = 109; //Tec-9
		    case 8: caja = 110; //Cargador Tec-9
		    case 9: caja = 111; //Uzi
		    case 10: caja = 112; //Cargador Uzi
		    case 11: caja = 113; //MP5
		    case 12: caja = 114; //Cargador MP5
		    case 13: caja = 115; //Balas SMG
		    case 14: caja = 116; //Escopeta
		    case 15: caja = 117; //Escopeta recortada
		    case 16: caja = 118; //Cartuchos 12GA
		    case 17: caja = 119; //AK-47
		    case 18: caja = 120; //Cargador AK-47
		    case 19: caja = 121; //Balas AK-47
		    case 20: caja = 122; //Rifle
		    case 21: caja = 123; //Cargador rifle
		    case 22: caja = 124; //Balas rifle
		}
		for(new x=0; x<CocheInfo[GetPlayerVehicleID(playerid)][cMaxMaletero]; x++)
		{
		    if(CocheInfo[coche][cMaletero][x] == 0)
		    {
		    	CocheInfo[coche][cMaletero][x] = caja;
		    	CocheInfo[coche][cMaleteroCant][x] = ObjetoInfo[caja][Capacidad];
		    	break;
		    }
		}
		GivePlayerMoneyAC(playerid, -PreciosContactoArmas[i]);
		new string[128];
		format(string, sizeof(string), "Desconocido: Una %s... Te costará %d$, no te arrepentirás.", ObjetoInfo[caja][NombreObjeto], PreciosContactoArmas[i]);
		ProxDetector(15.0, playerid,string,Chat1,Chat2,Chat3,Chat4,Chat5);
		SetTimerEx("AsignarTiempoCompraMafias", 600000, false, "d, d", JugadorInfo[playerid][pFaccion], 1);
    }
    if(dialogid == 24) //Menú ATM
    {
        if(!response){return 1;}
        switch(listitem)
        {
            case 0: MostrarATM(playerid, 2);
            case 1: MostrarATM(playerid, 3);
            case 2: MostrarATM(playerid, 4);
            case 3: MostrarATM(playerid, 6);
        }
    }
    if(dialogid == 25) //Retirar dinero ATM
    {
        if(!response){MostrarATM(playerid, 1); return 1;}
        new string[128];
        new dinero = strval(inputtext[0]);
		if(dinero < 1){SendClientMessage(playerid, Rojo, "La cantidad no puede menor que 1$."); MostrarATM(playerid, 1); return 1;}
		if(dinero > JugadorInfo[playerid][pDineroBanco]){SendClientMessage(playerid, Rojo, "No tienes tanto dinero en tu cuenta bancaria."); MostrarATM(playerid, 1); return 1;}
		GivePlayerMoneyAC(playerid, dinero);
		JugadorInfo[playerid][pDineroBanco] -= dinero;
		format(string, sizeof(string), "Haces una transacción bancaria y retiras %d$ de tu cuenta bancaria.", dinero);
		SendClientMessage(playerid, COLOR_GREEN, string);
	    MostrarATM(playerid, 1);
	    LoopingAnim(playerid,"ped","ATM",4.1,0,1,1,1,1);
    }
    if(dialogid == 26) //Ingresar dinero ATM
    {
        if(!response){MostrarATM(playerid, 1); return 1;}
        new string[128];
        new dinero = strval(inputtext[0]);
		if(dinero < 1){SendClientMessage(playerid, Rojo, "La cantidad no puede menor que 1$."); MostrarATM(playerid, 1); return 1;}
		if(dinero > GetPlayerMoney(playerid)){SendClientMessage(playerid, Rojo, "No tienes tanto dinero en mano."); MostrarATM(playerid, 1); return 1;}
		GivePlayerMoneyAC(playerid, -dinero);
		JugadorInfo[playerid][pDineroBanco] += dinero;
  		format(string, sizeof(string), "Haces una transacción bancaria y depositas %d$ a tu cuenta bancaria.", dinero);
		SendClientMessage(playerid, COLOR_GREEN, string);
	    MostrarATM(playerid, 1);
	    LoopingAnim(playerid,"ped","ATM",4.1,0,1,1,1,1);
    }
    if(dialogid == 27) //Transferir dinero ATM (ID)
    {
        if(!response){MostrarATM(playerid, 1); return 1;}
        TransferirPlayer[playerid] = ReturnUser(inputtext[0]);
		if(TransferirPlayer[playerid] == playerid){SendClientMessage(playerid, Rojo, "No te puedes transferir dinero a tí mismo."); MostrarATM(playerid, 1); return 1;}
		if(!IsPlayerConnected(TransferirPlayer[playerid]) || TransferirPlayer[playerid] == INVALID_PLAYER_ID){SendClientMessage(playerid, Rojo, "Jugador no encontrado"); MostrarATM(playerid, 1); return 1;}
		MostrarATM(playerid, 5);
    }
    if(dialogid == 28) //Transferir dinero ATM (Cantidad)
    {
        new string[128];
        if(!response){MostrarATM(playerid, 1); return 1;}
        new dinero = strval(inputtext[0]);
	    if(dinero < 1){SendClientMessage(playerid, Rojo, "La cantidad no puede ser menor que 1$."); MostrarATM(playerid, 1); return 1;}
		if(JugadorInfo[playerid][pDineroBanco] < dinero){SendClientMessage(playerid, Rojo, "No tienes tanto dinero en tu cuenta bancaria."); MostrarATM(playerid, 1); return 1;}
		if(dinero > 100000){SendClientMessage(playerid, Rojo, "Solo puedes transferir un máximo de 100.000$."); MostrarATM(playerid, 1); return 1;}
		JugadorInfo[playerid][pDineroBanco] -= dinero;
		JugadorInfo[TransferirPlayer[playerid]][pDineroBanco] += dinero;
		format(string, sizeof(string), "Has transferido %d$ a la cuenta de %s [ID: %d].", dinero, NombreJugador(TransferirPlayer[playerid]), TransferirPlayer[playerid]);
		SendClientMessage(playerid, Amarillo, string);
		format(string, sizeof(string), "Has recibido una transferencia de %d$ de %s [ID: %d].", dinero, NombreJugador(playerid), playerid);
		SendClientMessage(TransferirPlayer[playerid], Amarillo, string);
	    format(string, sizeof(string), "[Siglo-XXI]: %s ha transferido %d$ a %s de su cuenta bancaria.", NombreJugador(playerid), dinero, NombreJugador(TransferirPlayer[playerid]));
		SendAdminMessage(COLOR_YELLOW, string);
		PlayerPlaySound(TransferirPlayer[playerid], 1052, 0.0, 0.0, 0.0);
	    printf("%s", string);
	    MostrarATM(playerid, 1);
	    LoopingAnim(playerid,"ped","ATM",4.1,0,1,1,1,1);
    }
    if(dialogid == 29) //Balance ATM
    {
        MostrarATM(playerid, 1);
    }
    if(dialogid == 31) //buscados
    {
        return 1;
    }
    if(dialogid == 32) //Armeria prisión federal
    {
        return 1;
    }
    if(dialogid == 33) //informes
    {
		new string[128], medico[128], faccion[128];
  		if(!response){return 1;}
		new i = listitem;
	    if(Informes[i][iEstado] > 0)
	    {
	        if(Informes[i][iMedico] == NOEXISTE)
			{
			    format(medico, 128, "Desconocido");
			}
			else
			{
				format(medico, 128, "%s", NombreJugadorProxy(Informes[i][iMedico]));
			}
			if(JugadorInfo[Informes[i][iMedico]][pFaccion] == 1)
			{
			    format(faccion, 128, "LSPD");
			}
			else if(JugadorInfo[Informes[i][iMedico]][pFaccion] == 2)
			{
			    format(faccion, 128, "LSFD");
			}

            format(string, sizeof(string), "|__________ Informe %d (herido.) __________|", i);
	        SendClientMessage(playerid, Azulito, string);
            format(string, sizeof(string), "Accidentado:{FFCC99} %s", NombreJugadorProxy(Informes[i][iPaciente]));
            SendClientMessage(playerid, Azulito, string);
            format(string, sizeof(string), "Lugar de los hechos:{FFCC99} %s", Informes[i][iZona]);
            SendClientMessage(playerid, Azulito, string);
            format(string, sizeof(string), "Responsable técnico:{FFCC99} %s", medico);
            SendClientMessage(playerid, Azulito, string);
            format(string, sizeof(string), "Departamento encargado:{FFCC99} %s", faccion);
            SendClientMessage(playerid, Azulito, string);
            if(Informes[i][iEstado] == 1)
			{
			    format(string, sizeof(string), "Puedes atender este informe colocando en la consola '/informes atender %d'", i);
			    SendClientMessage(playerid, -1, string);
			}
	    }
	    else SendClientMessage(playerid, Rojo, "El informe no está disponible o no existe");
	    return 1;
	}
	if(dialogid == 34) //Armería 1 LSPD
	{
        new objeto;
	    if(!response){return 1;}
	    if(JugadorInfo[playerid][pManoDer] == 0) //Sólo si la mano derecha está libre
    	{
    	    ActualizarManos(playerid);
	    	switch(listitem)
	    	{
	    		case 0: //taser
	    		{
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Táser del casillero y lo sostienes con la diestra.");
		   			objeto = 38;
	    		}
	    		case 1: //chaleco
	    		{
	                if(JugadorInfo[playerid][pToy][3] == 0)
					{
					    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Chaleco antibalas del casillero y lo sostienes con la diestra.");
					    SetPlayerArmour(playerid, 100);
					}
					else { SendClientMessage(playerid, COLOR_ROJO, "¡Ya tienes un chaleco colocado!"); }
	    		}
	    		case 2: //porra
	    		{
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges una Porra del casillero y la sostienes con la diestra.");
					objeto = 3;
	    		}
	    		case 3: //spray
	    		{
	                SendClientMessage(playerid, COLOR_GREEN2, "Coges un Spray del casillero y lo sostienes con la diestra.");
					objeto = 34;
	    		}
	    		case 4: //cargador pistola
	    		{
                    if(JugadorInfo[playerid][pRango] < 2){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 2!"); return 1;}
				    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Cargador pistola del casillero y lo sostienes con la diestra.");
					objeto = 39;
	    		}
	    		case 5: //Cargador Deagle
	    		{
	    		    if(JugadorInfo[playerid][pRango] < 2){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 2!"); return 1;}
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Cargador Deagle del casillero y lo sostienes con la diestra.");
					objeto = 40;
	    		}
	    		case 6: //cargador mp5
	    		{
	    		    if(JugadorInfo[playerid][pRango] < 2){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 2!"); return 1;}
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Cargador MP5 del casillero y lo sostienes con la diestra.");
					objeto = 42;
	    		}
	    		case 7: //cargador m4
	    		{
	    		    if(JugadorInfo[playerid][pRango] < 2){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 2!"); return 1;}
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Cargador M4 del casillero y lo sostienes con la diestra.");
					objeto = 45;
	    		}
	    		case 8: //cargador rifle
	    		{
	    		    if(JugadorInfo[playerid][pRango] < 2){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 2!"); return 1;}
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Cargador Rifle del casillero y lo sostienes con la diestra.");
					objeto = 46;
	    		}
	    		case 9: //cartuchos escopeta
	    		{
	    		    if(JugadorInfo[playerid][pRango] < 2){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 2!"); return 1;}
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Cargador Escopeta del casillero y lo sostienes con la diestra.");
					objeto = 50;
	    		}
	    		case 10: //casco
	    		{
	    		    if(JugadorInfo[playerid][pRango] < 2){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 2!"); return 1;}
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Casco policial del casillero y lo sostienes con la diestra.");
					objeto = 163;
	    		}
	    		case 11: //chaleco swat
	    		{
	    		    if(JugadorInfo[playerid][pRango] < 3){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 3!"); return 1;}
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Chaleco Swat del casillero y lo sostienes con la diestra.");
					objeto = 129;
	    		}
	    		case 12: //casco swat
	    		{
	    		    if(JugadorInfo[playerid][pRango] < 3){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 3!"); return 1;}
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Casco Swat del casillero y lo sostienes con la diestra.");
					objeto = 130;
	    		}
	    		case 13: //Máscara oxígeno
	    		{
	    		    if(JugadorInfo[playerid][pRango] < 3){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 3!"); return 1;}
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges una Máscara oxígeno del casillero y la sostienes con la diestra.");
					objeto = 152;
	    		}
	    		case 14: //granada lacrimógena
	    		{
	    		    if(JugadorInfo[playerid][pRango] < 3){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 3!"); return 1;}
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges una Granada lacrimógena del casillero y la sostienes con la diestra.");
					objeto = 17;
	    		}
	    		case 15: //sombrero sheriff
	    		{
	    		    if(JugadorInfo[playerid][pRango] < 2){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 2!"); return 1;}
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Sombrero Sheriff del casillero y lo sostienes con la diestra.");
					objeto = 167;
	    		}
	    		case 16: //gorro 1
	    		{
	    		    if(JugadorInfo[playerid][pRango] < 2){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 2!"); return 1;}
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Gorro policia 1 del casillero y lo sostienes con la diestra.");
					objeto = 168;
	    		}
	    		case 17: //gorro 2
	    		{
	    		    if(JugadorInfo[playerid][pRango] < 2){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 2!"); return 1;}
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Gorro policia 2 del casillero y lo sostienes con la diestra.");
					objeto = 169;
	    		}
	    		case 18: //gorro 3
	    		{
	    		    if(JugadorInfo[playerid][pRango] < 2){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 2!"); return 1;}
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Gorro policia 3 del casillero y lo sostienes con la diestra.");
					objeto = 170;
	    		}
	    		case 19: //lentes 1
	    		{
	    		    if(JugadorInfo[playerid][pRango] < 2){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 2!"); return 1;}
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Lentes policia 1 del casillero y lo sostienes con la diestra.");
					objeto = 171;
	    		}
	    		case 20: //lentes 2
	    		{
	    		    if(JugadorInfo[playerid][pRango] < 2){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 2!"); return 1;}
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Lentes policia 2 del casillero y lo sostienes con la diestra.");
					objeto = 172;
	    		}
	    		case 21: //lentes 3
	    		{
	    		    if(JugadorInfo[playerid][pRango] < 2){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 2!"); return 1;}
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Lentes policia 3 del casillero y lo sostienes con la diestra.");
					objeto = 173;
	    		}
	    		case 22: //cámara
	    		{
	    		    if(JugadorInfo[playerid][pRango] < 3){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 3!"); return 1;}
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Cámara fotográfica profesional del casillero y la sostienes con la diestra.");
					objeto = 128;
	    		}
	    	}
	    	if(ObjetoInfo[objeto][IDArma] > 0) //Es un arma
			{
				new arma = ObjetoInfo[objeto][IDArma], municion = ObjetoInfo[objeto][Capacidad];
				if(municion > 0){GivePlayerWeapon(playerid, arma, municion);} //Si tiene munición, dar el arma.
			}
	    	JugadorInfo[playerid][pManoDer] = objeto;
			JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];
			PonerObjeto(playerid, 1, objeto);
		}
		else
		{
		    new string[128];
			format(string, sizeof(string), "Ya tienes %s en mano.", ObjetoInfo[JugadorInfo[playerid][pManoDer]][NombreObjeto]);
			SendClientMessage(playerid, COLOR_PIEL, string);
		}
	}
	if(dialogid == 35) //Armería 1 LSPD
	{
        new objeto;
	    if(!response){return 1;}
	    if(JugadorInfo[playerid][pManoDer] == 0) //Sólo si la mano derecha está libre
    	{
    	    ActualizarManos(playerid);
	    	switch(listitem)
	    	{
	    		case 0: 
	    		{
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges una Pistola del almacén y la sostienes con la diestra.");
		   			objeto = 174;
	    		}
	    		case 1:
	    		{
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges una Desert Eagle del almacén y la sostienes con la diestra.");
	                objeto = 175;
	    		}
	    		case 2:
	    		{
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges una MP5 del almacén y la sostienes con la diestra.");
	                objeto = 26;
	    		}
	    		case 3:
	    		{
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges una M4 del almacén y la sostienes con la diestra.");
	                objeto = 28;
	    		}
	    		case 4:
	    		{
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges una Escopeta del almacén y la sostienes con la diestra.");
	                objeto = 22;
	    		}
	    		case 5:
	    		{
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Rifle del almacén y lo sostienes con la diestra.");
	                objeto = 30;
	    		}
	    		case 6:
	    		{
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Francotirador del almacén y lo sostienes con la diestra.");
	                objeto = 31;
	    		}
	    		case 7:
	    		{
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges una Granada lacrimógena del almacén y la sostienes con la diestra.");
	                objeto = 17;
	    		}
	    	}
	    	if(ObjetoInfo[objeto][IDArma] > 0) //Es un arma
			{
				new arma = ObjetoInfo[objeto][IDArma], municion = ObjetoInfo[objeto][Capacidad];
				if(municion > 0){GivePlayerWeapon(playerid, arma, municion);} //Si tiene munición, dar el arma.
			}
	    	JugadorInfo[playerid][pManoDer] = objeto;
			JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];
			PonerObjeto(playerid, 1, objeto);
		}
		else
		{
		    new string[128];
			format(string, sizeof(string), "Ya tienes %s en mano.", ObjetoInfo[JugadorInfo[playerid][pManoDer]][NombreObjeto]);
			SendClientMessage(playerid, COLOR_PIEL, string);
		}
	}
	if(dialogid == 36) // Cajas traficante.
	{
	    if(!response){return 1;}
	    if(Traficante[playerid] == 0)
    	{
	    	switch(listitem)
	    	{
	    	    case 0: // Caja blancas
				{
					Caja1[playerid] = 102; // NAVAJA
					Caja2[playerid] = 102; // NAVAJA
					PrecioT[playerid] = 3000;
                    MandarPedido(playerid);
				}
				case 1: // Caja livianas
				{
				    new rand = random(6);
					if(rand == 0 || rand == 4) // 9mm
					{
					    Caja1[playerid] = 103;
						Caja2[playerid] = 104;
					}
					else if(rand == 1) // Desert Eagle
					{
					    Caja1[playerid] = 106;
						Caja2[playerid] = 107;
					}
					else if(rand == 2 || rand == 5) // Uzi
					{
					    Caja1[playerid] = 111;
						Caja2[playerid] = 112;
					}
					else if(rand == 3) // Tec9
					{
					    Caja1[playerid] = 109;
						Caja2[playerid] = 110;
					}
					PrecioT[playerid] = 5000;
					MandarPedido(playerid);
				}
				case 2: // Caja pesadas
				{
				    if(JugadorInfo[playerid][pPuntosRol] >= 3 && JugadorInfo[playerid][pNivel] >= 5)
				    {
					    new rand = random(3);
						if(rand == 0) // AK47
						{
						    Caja1[playerid] = 119;
							Caja2[playerid] = 120;
						}
						else if(rand == 1 || rand == 2) // ESCOPETA
						{
						    Caja1[playerid] = 116;
							Caja2[playerid] = 118;
						}
						PrecioT[playerid] = 8000;
						MandarPedido(playerid);
					}
					else SendClientMessage(playerid, Rojo, "Necesitas 3 puntos de rol y nivel 5");
				}
	    	}
	    }
	}
	if(dialogid == 37) // Drogas traficante.
	{
	    if(!response){return 1;}
	    if(Traficante[playerid] == 0)
    	{
	    	switch(listitem)
	    	{
	    	    case 0: // Semillas Marihuana
				{
					Caja1[playerid] = 85;
					Caja2[playerid] = 85;
					PrecioT[playerid] = 1200;
					MandarPedido(playerid);
				}
				case 1: // Paquete Marihuana
				{
					Caja1[playerid] = 75;
					Caja2[playerid] = 75;
					PrecioT[playerid] = 3000;
					MandarPedido(playerid);
				}
				case 2: // Paquete LSD
				{
					Caja1[playerid] = 79;
					Caja2[playerid] = 79;
					PrecioT[playerid] = 3500;
					MandarPedido(playerid);
				}
				case 3: // Paquete heroína
				{
					Caja1[playerid] = 78;
					Caja2[playerid] = 78;
					PrecioT[playerid] = 3500;
					MandarPedido(playerid);
				}
				case 4: // Paquete crack
				{
					Caja1[playerid] = 77;
					Caja2[playerid] = 77;
					PrecioT[playerid] = 3500;
					MandarPedido(playerid);
				}
				case 5: // Paquete cocaína
				{
					Caja1[playerid] = 76;
					Caja2[playerid] = 76;
					PrecioT[playerid] = 3500;
					MandarPedido(playerid);
				}
	    	}
	    }
	}
	if(dialogid == 38) //Equipo LSFD
	{
        new objeto;
	    if(!response){return 1;}
	    if(JugadorInfo[playerid][pManoDer] == 0) //Sólo si la mano derecha está libre
    	{
    	    ActualizarManos(playerid);
	    	switch(listitem)
	    	{
	    		case 0:
	    		{
	    		    if(JugadorInfo[playerid][pRango] < 2){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 2!"); return 1;}
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Extintor del mueble y lo sostienes con la diestra.");
		   			objeto = 35;
	    		}
                case 1:
	    		{
	    		    if(JugadorInfo[playerid][pRango] < 2){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 2!"); return 1;}
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges una Máscara de oxígeno del mueble y la sostienes con la diestra.");
		   			objeto = 152;
	    		}
	    		case 2:
	    		{
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges una Pala del mueble y la sostienes con la diestra.");
		   			objeto = 6;
	    		}
	    		case 3:
	    		{
	    		    if(JugadorInfo[playerid][pRango] < 6){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 6!"); return 1;}
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges una Motosierra del mueble y la sostienes con la diestra.");
		   			objeto = 9;
	    		}
	    		case 4:
	    		{
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges una Palanca del mueble y la sostienes con la diestra.");
		   			objeto = 15;
	    		}
	    		case 5:
	    		{
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Destornillador del mueble y lo sostienes con la diestra.");
		   			objeto = 74;
	    		}
	    		case 6:
	    		{
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Casco bombero amarillo del mueble y lo sostienes con la diestra.");
		   			objeto = 165;
	    		}
	    		case 7:
	    		{
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges un Casco bombero amarillo del mueble y lo sostienes con la diestra.");
		   			objeto = 166;
	    		}
	    		case 8:
	    		{
	    		    if(JugadorInfo[playerid][pRango] < 2){SendClientMessage(playerid,COLOR_ROJO,"¡No eres rango 2!"); return 1;}
	    		    SendClientMessage(playerid, COLOR_GREEN2, "Coges una Lata combustible del mueble y la sostienes con la diestra.");
		   			objeto = 125;
	    		}
	    	}
	    	if(ObjetoInfo[objeto][IDArma] > 0) //Es un arma
			{
				new arma = ObjetoInfo[objeto][IDArma], municion = ObjetoInfo[objeto][Capacidad];
				if(municion > 0){GivePlayerWeapon(playerid, arma, municion);} //Si tiene munición, dar el arma.
			}
	    	JugadorInfo[playerid][pManoDer] = objeto;
			JugadorInfo[playerid][pManoDerCant] = ObjetoInfo[objeto][Capacidad];
			PonerObjeto(playerid, 1, objeto);
			if(JugadorInfo[playerid][pManoDer] == 125) { JugadorInfo[playerid][pManoDerCant] = 0; }
		}
		else
		{
		    new string[128];
			format(string, sizeof(string), "Ya tienes %s en mano.", ObjetoInfo[JugadorInfo[playerid][pManoDer]][NombreObjeto]);
			SendClientMessage(playerid, COLOR_PIEL, string);
		}
	}
    return 1;
}

forward MandarPedido(playerid);
public MandarPedido(playerid)
{
	if(JugadorInfo[playerid][pTrabajo] == 11 && Caja1[playerid] != 0 && Caja2[playerid] != 0 && PrecioT[playerid] != 0)
	{
	    SetPlayerCheckpoint(playerid, 1321.4349,207.0052,19.3267, 3.0);
		JugadorInfo[playerid][pCheckpoint] = 17;
        ProxDetector(5.0, playerid, "[Desconocido 371] dice: Tu pedido está hecho, anda al lugar marcado mientras yo hago las llamadas.",Chat2,Chat2,Chat3,Chat4,Chat5);
	}
	else SendClientMessage(playerid, Rojo, "Ha ocurrido un error con el sistema de pedidos, vuelve a solicitar el mismo");
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	new string[128];
	format(string, 128, "ID: (%d) %s | Nivel: %d | Ping: %d", clickedplayerid, NombreJugador(clickedplayerid), JugadorInfo[clickedplayerid][pNivel], GetPlayerPing(clickedplayerid));
	SendClientMessage(playerid, Gris, string);
	return 1;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new string[128];
    if(response == EDIT_RESPONSE_FINAL)
	{
		if(EditandoFuego[playerid] != -1)
		{
			FuegoInfo[EditandoFuego[playerid]][fuX]=Float:x;
			FuegoInfo[EditandoFuego[playerid]][fuY]=Float:y;
			FuegoInfo[EditandoFuego[playerid]][fuZ]=Float:z;
			SetDynamicObjectPos(objectid, Float:rx, Float:ry, Float:rz);
		}
		if(EditandoObjeto[playerid] != -1)
		{
			ObjectInfo[EditandoObjeto[playerid]][obX]=Float:x;
			ObjectInfo[EditandoObjeto[playerid]][obY]=Float:y;
			ObjectInfo[EditandoObjeto[playerid]][obZ]=Float:z;
			ObjectInfo[EditandoObjeto[playerid]][obrX]=Float:rx;
			ObjectInfo[EditandoObjeto[playerid]][obrY]=Float:ry;
			ObjectInfo[EditandoObjeto[playerid]][obrZ]=Float:rz;
			SetDynamicObjectPos(objectid, Float:x, Float:y, Float:z);
			SetDynamicObjectRot(objectid, Float:rx, Float:ry, Float:rz);
			format(string, 128, "CreateObject(%d, %f, %f, %f, %f, %f, %f);", objectid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz);
			SendClientMessage(playerid, -1, string);
		}
	}
 	return 1;
}
public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
    if(response)
    {
		switch(index)
		{
		    case 4: // Gorro
		    {
		        SendClientMessage(playerid, COLOR_PIEL, "¡Gorro editado correctamente!");
				JugadorInfo[playerid][pToyX][0] = Float:fOffsetX;
				JugadorInfo[playerid][pToyY][0] = Float:fOffsetY;
				JugadorInfo[playerid][pToyZ][0] = Float:fOffsetZ;
				JugadorInfo[playerid][pToyrX][0] = Float:fRotX;
				JugadorInfo[playerid][pToyrY][0] = Float:fRotY;
				JugadorInfo[playerid][pToyrZ][0] = Float:fRotZ;
				JugadorInfo[playerid][pToytX][0] = Float:fScaleX;
				JugadorInfo[playerid][pToytY][0] = Float:fScaleY;
				JugadorInfo[playerid][pToytZ][0] = Float:fScaleZ;
				SaveToys(playerid);
		    }
		    case 5: // Gafas
		    {
		        SendClientMessage(playerid, COLOR_GREEN, "¡Gafas editadas correctamente!");
		        JugadorInfo[playerid][pToyX][1] = Float:fOffsetX;
				JugadorInfo[playerid][pToyY][1] = Float:fOffsetY;
				JugadorInfo[playerid][pToyZ][1] = Float:fOffsetZ;
				JugadorInfo[playerid][pToyrX][1] = Float:fRotX;
				JugadorInfo[playerid][pToyrY][1] = Float:fRotY;
				JugadorInfo[playerid][pToyrZ][1] = Float:fRotZ;
				JugadorInfo[playerid][pToytX][1] = Float:fScaleX;
				JugadorInfo[playerid][pToytY][1] = Float:fScaleY;
				JugadorInfo[playerid][pToytZ][1] = Float:fScaleZ;
				SaveToys(playerid);
		    }
		    case 6: // Mandíbula
		    {
		        SendClientMessage(playerid, COLOR_GREEN, "¡Mandíbula editada correctamente!");
		        JugadorInfo[playerid][pToyX][2] = Float:fOffsetX;
				JugadorInfo[playerid][pToyY][2] = Float:fOffsetY;
				JugadorInfo[playerid][pToyZ][2] = Float:fOffsetZ;
				JugadorInfo[playerid][pToyrX][2] = Float:fRotX;
				JugadorInfo[playerid][pToyrY][2] = Float:fRotY;
				JugadorInfo[playerid][pToyrZ][2] = Float:fRotZ;
				JugadorInfo[playerid][pToytX][2] = Float:fScaleX;
				JugadorInfo[playerid][pToytY][2] = Float:fScaleY;
				JugadorInfo[playerid][pToytZ][2] = Float:fScaleZ;
				SaveToys(playerid);
		    }
		    case 7: // Chaleco
		    {
		        SendClientMessage(playerid, COLOR_GREEN, "¡Chaleco editado correctamente!");
		        JugadorInfo[playerid][pToyX][3] = Float:fOffsetX;
				JugadorInfo[playerid][pToyY][3] = Float:fOffsetY;
				JugadorInfo[playerid][pToyZ][3] = Float:fOffsetZ;
				JugadorInfo[playerid][pToyrX][3] = Float:fRotX;
				JugadorInfo[playerid][pToyrY][3] = Float:fRotY;
				JugadorInfo[playerid][pToyrZ][3] = Float:fRotZ;
				JugadorInfo[playerid][pToytX][3] = Float:fScaleX;
				JugadorInfo[playerid][pToytY][3] = Float:fScaleY;
				JugadorInfo[playerid][pToytZ][3] = Float:fScaleZ;
				SaveToys(playerid);
		    }
		    case 8: // Hueco personalizado
		    {
		        SendClientMessage(playerid, COLOR_GREEN, "¡Hueco personalizado editado correctamente!");
		        JugadorInfo[playerid][pToyX][4] = Float:fOffsetX;
				JugadorInfo[playerid][pToyY][4] = Float:fOffsetY;
				JugadorInfo[playerid][pToyZ][4] = Float:fOffsetZ;
				JugadorInfo[playerid][pToyrX][4] = Float:fRotX;
				JugadorInfo[playerid][pToyrY][4] = Float:fRotY;
				JugadorInfo[playerid][pToyrZ][4] = Float:fRotZ;
				JugadorInfo[playerid][pToytX][4] = Float:fScaleX;
				JugadorInfo[playerid][pToytY][4] = Float:fScaleY;
				JugadorInfo[playerid][pToytZ][4] = Float:fScaleZ;
				JugadorInfo[playerid][pEspecialBone] = boneid;
				SaveToys(playerid);
		    }
		}
    }
    else SetPlayerAttachedObject(playerid, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ);
    return 1;
}

public OnPlayerModelSelection(playerid, response, listid, modelid)
{
	if(listid == ropa)
	{
	    if(!response){return 1;}
	    if(!IsValidSkin(modelid)){return 1;}
	    if(GetPlayerMoney(playerid) < 50){SendClientMessage(playerid, COLOR_ROJO, "No tienes dinero suficiente"); return 1;}
	    JugadorInfo[playerid][pSkin] = modelid;
	    SetPlayerSkin(playerid, modelid);
	    GivePlayerMoneyAC(playerid, -50);
	    return 1;
	}
	if(listid == primerropahombre)
	{
	    if(!response){return CambioSkin(playerid), 1;}
	    if(!IsValidSkin(modelid)){return 1;}
	    if(GetPlayerMoney(playerid) < 50){SendClientMessage(playerid, COLOR_ROJO, "No tienes dinero suficiente"); return 1;}
	    JugadorInfo[playerid][pSkin] = modelid;
	    SetPlayerSkin(playerid, modelid);
	    return ShowPlayerDialog(playerid, CAMBIOSKIN2, DIALOG_STYLE_MSGBOX, "CONFIRMAR", "¿Quieres usar este skin?", "sí", "no"), 1;
	}
	if(listid == primerropamujer)
	{
	    if(!response){return CambioSkin(playerid), 1;}
	    if(!IsValidSkin(modelid)){return 1;}
	    if(GetPlayerMoney(playerid) < 50){SendClientMessage(playerid, COLOR_ROJO, "No tienes dinero suficiente"); return 1;}
	    JugadorInfo[playerid][pSkin] = modelid;
	    SetPlayerSkin(playerid, modelid);
	    return ShowPlayerDialog(playerid, CAMBIOSKIN2, DIALOG_STYLE_MSGBOX, "CONFIRMAR", "¿Quieres usar este skin?", "sí", "no"), 1;
	}
	if(listid == ropahombre)
	{
	    if(!response){return 1;}
	    if(!IsValidSkin(modelid)){return 1;}
	    if(GetPlayerMoney(playerid) < 50){SendClientMessage(playerid, COLOR_ROJO, "No tienes dinero suficiente"); return 1;}
	    JugadorInfo[playerid][pSkin] = modelid;
	    SetPlayerSkin(playerid, modelid);
	    GivePlayerMoneyAC(playerid, -50);
	    return 1;
	}
	if(listid == ropamujer)
	{
	    if(!response){return 1;}
	    if(!IsValidSkin(modelid)){return 1;}
	    if(GetPlayerMoney(playerid) < 50){SendClientMessage(playerid, COLOR_ROJO, "No tienes dinero suficiente"); return 1;}
	    JugadorInfo[playerid][pSkin] = modelid;
	    SetPlayerSkin(playerid, modelid);
	    GivePlayerMoneyAC(playerid, -50);
	    return 1;
	}
	if(listid == ropaservicio)
	{
	    if(!response){return 1;}
	    if(!IsValidSkin(modelid)){return 1;}
	    JugadorInfo[playerid][pSkin] = modelid;
	    SetPlayerSkin(playerid, modelid);
	    return 1;
	}
	if(listid == uniformespd)
	{
	    if(!response){return 1;}
		JugadorInfo[playerid][pUniformePD] = modelid;
	    SetPlayerSkin(playerid, modelid);
	    AutoRol(playerid, "coge su uniforme del casillero y se lo coloca.");
	    return 1;
	}
	if(listid == uniformesfd)
	{
	    if(!response){return 1;}
		JugadorInfo[playerid][pSkin] = modelid;
	    SetPlayerSkin(playerid, modelid);
	    AutoRol(playerid, "coge su uniforme del casillero y se lo coloca.");
	    return 1;
	}
	if(listid == catalogocoches1 || listid == catalogocoches2 || listid == catalogocoches3 || listid == catalogocoches4 || listid == catalogocoches5 || listid == catalogocoches6 || listid == catalogocoches7)
	{
	    if(!response){return 1;}
	    new id, precio;
	    for(new i=0; i < MAX_CAR_DATA; i++) //Catalogo
		{
		    if(datacar[i][dcIDModel] == modelid)
		    {
		        id = i;
		        precio = datacar[i][dcPrecio];
		        new string[128];
		        format(string, 128, "Coche ID: %d, Precio: %d$", id, precio);
				SendClientMessage(playerid, Rojo, string);
		    }
  		}
	    return 1;
	}
	return 1;
}

public OnIncomingConnection(playerid, ip_address[], port) { return 1; }

public OnPlayerClickMap(playerid, Float:fX, Float:fY, Float:fZ)
{
	if(JugadorInfo[playerid][pAdmin] == 0)
	{
		new Float:nX, Float:nY, Float:nZ;
		GetPlayerPos(playerid, nX, nY, nZ);
		if(nX == fX && nY == fY && nZ == fZ)
		{
		    new string[128];
		    format(string, sizeof(string), "[Siglo-XXI]: %s ha sido expulsado del servidor. Razón: Software no aceptado.", NombreJugador(playerid));
			SendClientMessageToAll(Rojo, string);
		    format(string, sizeof(string), "[Anti-CHEAT]: El jugador %s (SQLID: %d) se ha teletransportado. Expulsado.", NombreJugador(playerid), JugadorInfo[playerid][pSQLID]);
			SendAdminMessage(Naranja, string);
		    Expulsar(playerid);
		}
	}
	return 1;
}
